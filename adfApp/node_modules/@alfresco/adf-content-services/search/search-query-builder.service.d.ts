/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Subject } from 'rxjs';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
import { QueryBody, RequestFacetFields, RequestSortDefinitionInner } from 'alfresco-js-api';
import { SearchCategory } from './search-category.interface';
import { FilterQuery } from './filter-query.interface';
import { SearchRange } from './search-range.interface';
import { SearchConfiguration } from './search-configuration.interface';
import { FacetQuery } from './facet-query.interface';
import { SearchSortingDefinition } from './search-sorting-definition.interface';
import { FacetField } from './facet-field.interface';
import { FacetFieldBucket } from './facet-field-bucket.interface';
export declare class SearchQueryBuilderService {
    private appConfig;
    private alfrescoApiService;
    private _userQuery;
    updated: Subject<QueryBody>;
    executed: Subject<any>;
    categories: Array<SearchCategory>;
    queryFragments: {
        [id: string]: string;
    };
    filterQueries: FilterQuery[];
    paging: {
        maxItems?: number;
        skipCount?: number;
    };
    sorting: Array<SearchSortingDefinition>;
    protected userFacetQueries: FacetQuery[];
    protected userFacetBuckets: {
        [key: string]: Array<FacetFieldBucket>;
    };
    userQuery: string;
    config: SearchConfiguration;
    ranges: {
        [id: string]: SearchRange;
    };
    constructor(appConfig: AppConfigService, alfrescoApiService: AlfrescoApiService);
    resetToDefaults(): void;
    addUserFacetQuery(query: FacetQuery): void;
    removeUserFacetQuery(query: FacetQuery): void;
    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    getUserFacetBuckets(field: string): FacetFieldBucket[];
    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    addFilterQuery(query: string): void;
    removeFilterQuery(query: string): void;
    getFacetQuery(label: string): FacetQuery;
    getFacetField(label: string): FacetField;
    update(): void;
    execute(): Promise<void>;
    buildQuery(): QueryBody;
    /**
     * Returns primary sorting definition.
     */
    getPrimarySorting(): SearchSortingDefinition;
    /**
     * Returns all pre-configured sorting options that users can choose from.
     */
    getSortingOptions(): SearchSortingDefinition[];
    /**
     * Check if FacetQueries has been defined
     */
    readonly hasFacetQueries: boolean;
    protected readonly sort: RequestSortDefinitionInner[];
    protected readonly facetQueries: FacetQuery[];
    protected getFinalQuery(): string;
    protected readonly facetFields: RequestFacetFields;
}
