/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit, OnDestroy } from '@angular/core';
import { MatCheckboxChange } from '@angular/material';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { FacetFieldBucket } from '../../facet-field-bucket.interface';
import { ResponseFacetQueryList } from './models/response-facet-query-list.model';
import { FacetQuery } from '../../facet-query.interface';
import { FacetField } from '../../facet-field.interface';
export declare class SearchFilterComponent implements OnInit, OnDestroy {
    queryBuilder: SearchQueryBuilderService;
    private searchService;
    private translationService;
    private DEFAULT_PAGE_SIZE;
    isAlive: boolean;
    responseFacetQueries: ResponseFacetQueryList;
    responseFacetFields: FacetField[];
    private facetQueriesPageSize;
    facetQueriesLabel: string;
    facetQueriesExpanded: boolean;
    facetFieldsExpanded: boolean;
    canResetSelectedQueries: boolean;
    selectedFacetQueries: Array<FacetQuery>;
    selectedBuckets: Array<{
        field: FacetField;
        bucket: FacetFieldBucket;
    }>;
    constructor(queryBuilder: SearchQueryBuilderService, searchService: SearchService, translationService: TranslationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onToggleFacetQuery(event: MatCheckboxChange, facetQuery: FacetQuery): void;
    selectFacetQuery(query: FacetQuery): void;
    unselectFacetQuery(query: FacetQuery): void;
    private updateSelectedBuckets;
    private updateSelectedFields;
    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket): void;
    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    resetSelectedQueries(): void;
    canResetSelectedBuckets(field: FacetField): boolean;
    resetSelectedBuckets(field: FacetField): void;
    onDataLoaded(data: any): void;
    private parseFacetFields;
    private parseFacetQueries;
    private getFacetQueryMap;
}
