import { Component, Inject, ViewEncapsulation, Directive, Input, HostListener, NgModule, Injectable, Optional, EventEmitter, Output, ElementRef, Renderer2, ContentChild, NgZone, ViewChild, TemplateRef, ChangeDetectorRef, forwardRef, ViewChildren, ViewContainerRef, ComponentFactoryResolver, ChangeDetectionStrategy } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatButtonModule, MatChipsModule, MatDialogModule, MatIconModule, MatCardModule, MatInputModule, MatListModule, MatMenuModule, MatOptionModule, MatProgressBarModule, MatProgressSpinnerModule, MatRippleModule, MatExpansionModule, MatSelectModule, MatCheckboxModule, MatDatepickerModule, MatSlideToggleModule, MatRadioModule, MatSliderModule, MatListItem } from '@angular/material';
import { LogService, AlfrescoApiService, AuthenticationService, ContentService, ThumbnailService, SitesService, TranslationService, PermissionsEnum, CoreModule, ObjectDataTableAdapter, ObjectUtils, DataSorting, BaseEvent, DisplayMode, ObjectDataColumn, AppConfigService, DataColumnListComponent, UserPreferencesService, FileUploadStatus, NodesApiService, UploadService, FileModel, EXTENDIBLE_COMPONENT, FileUtils, NotificationService, SearchService, MomentDateAdapter, MOMENT_DATE_FORMATS, UserPreferenceValues, HighlightDirective, CardViewDateItemModel, CardViewTextItemModel, FileSizePipe, CardViewBoolItemModel, CardViewDatetimeItemModel, CardViewIntItemModel, CardViewFloatItemModel, CardViewUpdateService, SearchConfigurationService, SharedLinksApiService, TRANSLATION_PROVIDER } from '@alfresco/adf-core';
import { __assign, __awaiter, __generator, __spread, __extends, __values, __read } from 'tslib';
import { from, throwError, Subject, Observable, of, BehaviorSubject, forkJoin, merge, fromEvent, defer } from 'rxjs';
import { catchError, switchMap, map, debounceTime, filter, takeUntil, takeWhile, tap, skip } from 'rxjs/operators';
import 'alfresco-js-api';
import moment$1 from 'moment-es6';
import { FormBuilder, FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR, FormControl, Validators, FormGroup } from '@angular/forms';
import { CommonModule, DOCUMENT } from '@angular/common';
import { FlexLayoutModule } from '@angular/flex-layout';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';
import { MatDatetimepickerModule } from '@mat-datetimepicker/core';
import { MatMomentDatetimeModule } from '@mat-datetimepicker/moment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DownloadZipDialogComponent = /** @class */ (function () {
    function DownloadZipDialogComponent(apiService, dialogRef, data, logService) {
        this.apiService = apiService;
        this.dialogRef = dialogRef;
        this.data = data;
        this.logService = logService;
        this.cancelled = false;
    }
    /**
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {
            if (!this.cancelled) {
                this.downloadZip(this.data.nodeIds);
            }
            else {
                this.logService.log('Cancelled');
            }
        }
    };
    /**
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.cancelDownload = /**
     * @return {?}
     */
    function () {
        this.cancelled = true;
        this.dialogRef.close(false);
    };
    /**
     * @param {?} nodeIds
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.downloadZip = /**
     * @param {?} nodeIds
     * @return {?}
     */
    function (nodeIds) {
        var _this = this;
        if (nodeIds && nodeIds.length > 0) {
            /** @type {?} */
            var promise = this.apiService.getInstance().core.downloadsApi.createDownload({ nodeIds: nodeIds });
            promise.on('progress', function (progress) { return _this.logService.log('Progress', progress); });
            promise.on('error', function (error) { return _this.logService.error('Error', error); });
            promise.on('abort', function (data) { return _this.logService.log('Abort', data); });
            promise.on('success', function (data) {
                if (data && data.entry && data.entry.id) {
                    /** @type {?} */
                    var url_1 = _this.apiService.getInstance().content.getContentUrl(data.entry.id, true);
                    _this.apiService.getInstance().core.nodesApi.getNode(data.entry.id).then(function (downloadNode) {
                        _this.logService.log(downloadNode);
                        /** @type {?} */
                        var fileName = downloadNode.entry.name;
                        _this.waitAndDownload(data.entry.id, url_1, fileName);
                    });
                }
            });
        }
    };
    /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.waitAndDownload = /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (downloadId, url, fileName) {
        var _this = this;
        if (this.cancelled) {
            return;
        }
        this.apiService.getInstance().core.downloadsApi.getDownload(downloadId).then(function (downloadEntry) {
            if (downloadEntry.entry) {
                if (downloadEntry.entry.status === 'DONE') {
                    _this.download(url, fileName);
                }
                else {
                    setTimeout(function () {
                        _this.waitAndDownload(downloadId, url, fileName);
                    }, 1000);
                }
            }
        });
    };
    /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.download = /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        this.dialogRef.close(true);
    };
    DownloadZipDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-download-zip-dialog',
                    template: "<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<div mat-dialog-actions>\n    <span class=\"spacer\"></span>\n    <button mat-button color=\"primary\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</div>\n",
                    host: { 'class': 'adf-download-zip-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".spacer{flex:1 1 auto}.adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
                }] }
    ];
    /** @nocollapse */
    DownloadZipDialogComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: LogService }
    ]; };
    return DownloadZipDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodeDownloadDirective = /** @class */ (function () {
    function NodeDownloadDirective(apiService, dialog) {
        this.apiService = apiService;
        this.dialog = dialog;
    }
    /**
     * @return {?}
     */
    NodeDownloadDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.downloadNodes(this.nodes);
    };
    /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param selection Multiple selected nodes to download
     */
    /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param {?} selection Multiple selected nodes to download
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadNodes = /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param {?} selection Multiple selected nodes to download
     * @return {?}
     */
    function (selection) {
        if (!selection || selection.length === 0) {
            return;
        }
        if (selection.length === 1) {
            this.downloadNode(selection[0]);
        }
        else {
            this.downloadZip(selection);
        }
    };
    /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param node Node to download
     */
    /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param {?} node Node to download
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadNode = /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param {?} node Node to download
     * @return {?}
     */
    function (node) {
        if (node && node.entry) {
            /** @type {?} */
            var entry = node.entry;
            if (entry.isFile) {
                this.downloadFile(node);
            }
            if (entry.isFolder) {
                this.downloadZip([node]);
            }
            // Check if there's nodeId for Shared Files
            if (!entry.isFile && !entry.isFolder && (/** @type {?} */ (entry)).nodeId) {
                this.downloadFile(node);
            }
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadFile = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node && node.entry) {
            /** @type {?} */
            var contentApi = this.apiService.getInstance().content;
            /** @type {?} */
            var id = (/** @type {?} */ (node.entry)).nodeId || node.entry.id;
            /** @type {?} */
            var url = contentApi.getContentUrl(id, true);
            /** @type {?} */
            var fileName = node.entry.name;
            this.download(url, fileName);
        }
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadZip = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        if (selection && selection.length > 0) {
            /** @type {?} */
            var nodeIds = selection.map(function (node) { return (node.entry.nodeId || node.entry.id); });
            this.dialog.open(DownloadZipDialogComponent, {
                width: '600px',
                disableClose: true,
                data: {
                    nodeIds: nodeIds
                }
            });
        }
    };
    /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    NodeDownloadDirective.prototype.download = /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };
    NodeDownloadDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adfNodeDownload]'
                },] }
    ];
    /** @nocollapse */
    NodeDownloadDirective.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: MatDialog }
    ]; };
    NodeDownloadDirective.propDecorators = {
        nodes: [{ type: Input, args: ['adfNodeDownload',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeDownloadDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function modules() {
    return [
        MatButtonModule,
        MatChipsModule,
        MatDialogModule,
        MatIconModule,
        MatCardModule,
        MatInputModule,
        MatListModule,
        MatProgressSpinnerModule,
        MatProgressBarModule,
        MatRippleModule,
        MatMenuModule,
        MatOptionModule,
        MatExpansionModule,
        MatSelectModule,
        MatCheckboxModule,
        MatDatepickerModule,
        MatSlideToggleModule,
        MatRadioModule,
        MatSliderModule
    ];
}
var MaterialModule = /** @class */ (function () {
    function MaterialModule() {
    }
    MaterialModule.decorators = [
        { type: NgModule, args: [{
                    imports: modules(),
                    exports: modules()
                },] }
    ];
    return MaterialModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DocumentListService = /** @class */ (function () {
    function DocumentListService(authService, contentService, apiService, logService, thumbnailService) {
        this.contentService = contentService;
        this.apiService = apiService;
        this.logService = logService;
        this.thumbnailService = thumbnailService;
    }
    /**
     * @param {?} folder
     * @param {?=} opts
     * @param {?=} includeFields
     * @return {?}
     */
    DocumentListService.prototype.getNodesPromise = /**
     * @param {?} folder
     * @param {?=} opts
     * @param {?=} includeFields
     * @return {?}
     */
    function (folder, opts, includeFields) {
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var rootNodeId = DocumentListService.ROOT_ID;
        if (opts && opts.rootFolderId) {
            rootNodeId = opts.rootFolderId;
        }
        /** @type {?} */
        var includeFieldsRequest = __spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        /** @type {?} */
        var params = {
            includeSource: true,
            include: includeFieldsRequest
        };
        if (folder) {
            params.relativePath = folder;
        }
        if (opts) {
            if (opts.maxItems) {
                params.maxItems = opts.maxItems;
            }
            if (opts.skipCount) {
                params.skipCount = opts.skipCount;
            }
        }
        return this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params);
    };
    /**
     * Deletes a node.
     * @param nodeId ID of the node to delete
     * @returns Empty response when the operation is complete
     */
    /**
     * Deletes a node.
     * @param {?} nodeId ID of the node to delete
     * @return {?} Empty response when the operation is complete
     */
    DocumentListService.prototype.deleteNode = /**
     * Deletes a node.
     * @param {?} nodeId ID of the node to delete
     * @return {?} Empty response when the operation is complete
     */
    function (nodeId) {
        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));
    };
    /**
     * Copy a node to destination node
     *
     * @param nodeId The id of the node to be copied
     * @param targetParentId The id of the folder where the node will be copied
     * @returns NodeEntry for the copied node
     */
    /**
     * Copy a node to destination node
     *
     * @param {?} nodeId The id of the node to be copied
     * @param {?} targetParentId The id of the folder where the node will be copied
     * @return {?} NodeEntry for the copied node
     */
    DocumentListService.prototype.copyNode = /**
     * Copy a node to destination node
     *
     * @param {?} nodeId The id of the node to be copied
     * @param {?} targetParentId The id of the folder where the node will be copied
     * @return {?} NodeEntry for the copied node
     */
    function (nodeId, targetParentId) {
        var _this = this;
        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId: targetParentId })).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Moves a node to destination node.
     *
     * @param nodeId The id of the node to be moved
     * @param targetParentId The id of the folder where the node will be moved
     * @returns NodeEntry for the moved node
     */
    /**
     * Moves a node to destination node.
     *
     * @param {?} nodeId The id of the node to be moved
     * @param {?} targetParentId The id of the folder where the node will be moved
     * @return {?} NodeEntry for the moved node
     */
    DocumentListService.prototype.moveNode = /**
     * Moves a node to destination node.
     *
     * @param {?} nodeId The id of the node to be moved
     * @param {?} targetParentId The id of the folder where the node will be moved
     * @return {?} NodeEntry for the moved node
     */
    function (nodeId, targetParentId) {
        var _this = this;
        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId: targetParentId })).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Creates a new folder in the path.
     * @param name Folder name
     * @param parentId Parent folder ID
     * @returns Details of the created folder node
     */
    /**
     * Creates a new folder in the path.
     * @param {?} name Folder name
     * @param {?} parentId Parent folder ID
     * @return {?} Details of the created folder node
     */
    DocumentListService.prototype.createFolder = /**
     * Creates a new folder in the path.
     * @param {?} name Folder name
     * @param {?} parentId Parent folder ID
     * @return {?} Details of the created folder node
     */
    function (name, parentId) {
        var _this = this;
        return from(this.apiService.getInstance().nodes.createFolder(name, '/', parentId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param folder Path to folder.
     * @param opts Options.
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param {?} folder Path to folder.
     * @param {?=} opts Options.
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    DocumentListService.prototype.getFolder = /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param {?} folder Path to folder.
     * @param {?=} opts Options.
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    function (folder, opts, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        return from(this.getNodesPromise(folder, opts, includeFields))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a node via its node ID.
     * @param nodeId ID of the target node
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    /**
     * Gets a node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    DocumentListService.prototype.getNode = /**
     * Gets a node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    function (nodeId, includeFields) {
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = __spread(['path', 'properties', 'allowableOperations', 'permissions'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        /** @type {?} */
        var opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return this.contentService.getNode(nodeId, opts);
    };
    /**
     * Gets a folder node via its node ID.
     * @deprecated 2.3.0
     * @param nodeId ID of the folder node
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    /**
     * Gets a folder node via its node ID.
     * @deprecated 2.3.0
     * @param {?} nodeId ID of the folder node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    DocumentListService.prototype.getFolderNode = /**
     * Gets a folder node via its node ID.
     * @deprecated 2.3.0
     * @param {?} nodeId ID of the folder node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    function (nodeId, includeFields) {
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = __spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        /** @type {?} */
        var opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return from(this.apiService.getInstance().nodes.getNodeInfo(nodeId, opts));
    };
    /**
     * Get thumbnail URL for the given document node.
     * @param node Node to get URL for.
     * @returns Thumbnail URL string
     */
    /**
     * Get thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @return {?} Thumbnail URL string
     */
    DocumentListService.prototype.getDocumentThumbnailUrl = /**
     * Get thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @return {?} Thumbnail URL string
     */
    function (node) {
        return this.thumbnailService.getDocumentThumbnailUrl(node);
    };
    /**
     * Gets the icon that represents a MIME type.
     * @param mimeType MIME type to get the icon for
     * @returns Path to the icon file
     */
    /**
     * Gets the icon that represents a MIME type.
     * @param {?} mimeType MIME type to get the icon for
     * @return {?} Path to the icon file
     */
    DocumentListService.prototype.getMimeTypeIcon = /**
     * Gets the icon that represents a MIME type.
     * @param {?} mimeType MIME type to get the icon for
     * @return {?} Path to the icon file
     */
    function (mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    };
    /**
     * Gets a default icon for MIME types with no specific icon.
     * @returns Path to the icon file
     */
    /**
     * Gets a default icon for MIME types with no specific icon.
     * @return {?} Path to the icon file
     */
    DocumentListService.prototype.getDefaultMimeTypeIcon = /**
     * Gets a default icon for MIME types with no specific icon.
     * @return {?} Path to the icon file
     */
    function () {
        return this.thumbnailService.getDefaultMimeTypeIcon();
    };
    /**
     * Checks if a node has the specified permission.
     * @deprecated 2.3.0 - use the equivalent in the content service
     * @param node Target node
     * @param permission Permission level to query
     * @returns True if the node has the permission, false otherwise
     */
    /**
     * Checks if a node has the specified permission.
     * @deprecated 2.3.0 - use the equivalent in the content service
     * @param {?} node Target node
     * @param {?} permission Permission level to query
     * @return {?} True if the node has the permission, false otherwise
     */
    DocumentListService.prototype.hasPermission = /**
     * Checks if a node has the specified permission.
     * @deprecated 2.3.0 - use the equivalent in the content service
     * @param {?} node Target node
     * @param {?} permission Permission level to query
     * @return {?} True if the node has the permission, false otherwise
     */
    function (node, permission) {
        return this.contentService.hasPermission(node, permission);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    DocumentListService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    DocumentListService.ROOT_ID = '-root-';
    DocumentListService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DocumentListService.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: ContentService },
        { type: AlfrescoApiService },
        { type: LogService },
        { type: ThumbnailService }
    ]; };
    return DocumentListService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentNodeSelectorComponent = /** @class */ (function () {
    function ContentNodeSelectorComponent(data) {
        this.data = data;
        /**
         * @deprecated in 2.1.0
         */
        this.title = null;
        /**
         * @deprecated in 2.1.0
         */
        this.currentFolderId = null;
        /**
         * @deprecated in 2.1.0
         */
        this.dropdownHideMyFiles = false;
        /**
         * @deprecated in 2.1.0
         */
        this.dropdownSiteList = null;
        /**
         * @deprecated in 2.1.0
         */
        this.rowFilter = null;
        /**
         * @deprecated in 2.1.0
         */
        this.imageResolver = null;
        this.buttonActionName = data.actionName ? "NODE_SELECTOR." + data.actionName.toUpperCase() : 'NODE_SELECTOR.CHOOSE';
    }
    /**
     * @return {?}
     */
    ContentNodeSelectorComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.data.select.complete();
    };
    /**
     * @param {?} nodeList
     * @return {?}
     */
    ContentNodeSelectorComponent.prototype.onSelect = /**
     * @param {?} nodeList
     * @return {?}
     */
    function (nodeList) {
        this.chosenNode = nodeList;
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.data.select.next(this.chosenNode);
        this.data.select.complete();
    };
    ContentNodeSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-node-selector',
                    template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">{{title || data?.title}}\n</header>\n\n<mat-dialog-content>\n    <adf-content-node-selector-panel\n        [currentFolderId]=\"currentFolderId || data?.currentFolderId\"\n        [dropdownHideMyFiles]=\"dropdownHideMyFiles || data?.dropdownHideMyFiles\"\n        [dropdownSiteList]=\"dropdownSiteList || data?.dropdownSiteList\"\n        [rowFilter]=\"rowFilter || data?.rowFilter\"\n        [imageResolver]=\"imageResolver || data?.imageResolver\"\n        [isSelectionValid]=\"data?.isSelectionValid\"\n        [breadcrumbTransform]=\"data?.breadcrumbTransform\"\n        (select)=\"onSelect($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n    </button>\n\n    <button mat-button\n        [disabled]=\"!chosenNode\"\n        class=\"choose-action\"\n        (click)=\"onClick()\"\n        data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n</mat-dialog-actions>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentNodeSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    ContentNodeSelectorComponent.propDecorators = {
        title: [{ type: Input }],
        currentFolderId: [{ type: Input }],
        dropdownHideMyFiles: [{ type: Input }],
        dropdownSiteList: [{ type: Input }],
        rowFilter: [{ type: Input }],
        imageResolver: [{ type: Input }],
        pageSize: [{ type: Input }]
    };
    return ContentNodeSelectorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodeLockDialogComponent = /** @class */ (function () {
    function NodeLockDialogComponent(formBuilder, dialog, alfrescoApi, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.alfrescoApi = alfrescoApi;
        this.data = data;
        this.node = null;
    }
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var node = this.data.node;
        this.nodeName = node.name;
        this.form = this.formBuilder.group({
            isLocked: node.isLocked || false,
            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',
            isTimeLock: !!node.properties['cm:expiryDate'],
            time: !!node.properties['cm:expiryDate'] ? moment$1(node.properties['cm:expiryDate']) : moment$1()
        });
    };
    Object.defineProperty(NodeLockDialogComponent.prototype, "lockTimeInSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.form.value.isTimeLock) {
                /** @type {?} */
                var duration = moment$1.duration(moment$1(this.form.value.time).diff(moment$1()));
                return duration.asSeconds();
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeLockDialogComponent.prototype, "nodeBodyLock", {
        get: /**
         * @return {?}
         */
        function () {
            return {
                'timeToExpire': this.lockTimeInSeconds,
                'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',
                'lifetime': 'PERSISTENT'
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.toggleLock = /**
     * @return {?}
     */
    function () {
        var _a = this, nodesApi = _a.alfrescoApi.nodesApi, node = _a.data.node;
        if (this.form.value.isLocked) {
            return nodesApi.lockNode(node.id, this.nodeBodyLock);
        }
        return nodesApi.unlockNode(node.id);
    };
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.toggleLock()
            .then(function (node) {
            _this.data.node.isLocked = _this.form.value.isLocked;
            _this.dialog.close(node.entry);
        })
            .catch(function (error) { return _this.data.onError(error); });
    };
    NodeLockDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-node-lock',
                    template: "<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['isLocked']\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['allowOwner']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['isTimeLock']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input matInput [formControl]=\"form.controls['time']\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close>\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                    styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}"]
                }] }
    ];
    /** @nocollapse */
    NodeLockDialogComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MatDialogRef },
        { type: AlfrescoApiService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return NodeLockDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentNodeDialogService = /** @class */ (function () {
    function ContentNodeDialogService(dialog, contentService, documentListService, siteService, translation) {
        this.dialog = dialog;
        this.contentService = contentService;
        this.documentListService = documentListService;
        this.siteService = siteService;
        this.translation = translation;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * Opens a file browser at a chosen folder location.
     * @param folderNodeId ID of the folder to use
     * @returns Information about the selected file(s)
     */
    /**
     * Opens a file browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected file(s)
     */
    ContentNodeDialogService.prototype.openFileBrowseDialogByFolderId = /**
     * Opens a file browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected file(s)
     */
    function (folderNodeId) {
        var _this = this;
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap(function (node) {
            return _this.openUploadFileDialog('Choose', node);
        }));
    };
    /**
     * Opens a lock node dialog.
     * @param {?} contentEntry Node to lock
     * @return {?} Error/status message (if any)
     */
    ContentNodeDialogService.prototype.openLockNodeDialog = /**
     * Opens a lock node dialog.
     * @param {?} contentEntry Node to lock
     * @return {?} Error/status message (if any)
     */
    function (contentEntry) {
        var _this = this;
        /** @type {?} */
        var observable = new Subject();
        if (this.contentService.hasPermission(contentEntry, PermissionsEnum.LOCK)) {
            this.dialog.open(NodeLockDialogComponent, {
                data: {
                    node: contentEntry,
                    onError: function (error) {
                        _this.error.emit(error);
                        observable.error(error);
                    }
                },
                width: '400px'
            });
        }
        else {
            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');
        }
        return observable;
    };
    /**
     * Opens a file browser at a chosen site location.
     * @returns Information about the selected file(s)
     */
    /**
     * Opens a file browser at a chosen site location.
     * @return {?} Information about the selected file(s)
     */
    ContentNodeDialogService.prototype.openFileBrowseDialogBySite = /**
     * Opens a file browser at a chosen site location.
     * @return {?} Information about the selected file(s)
     */
    function () {
        var _this = this;
        return this.siteService.getSites().pipe(switchMap(function (response) {
            return _this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        }));
    };
    /**
     * Opens a folder browser at a chosen site location.
     * @returns Information about the selected folder(s)
     */
    /**
     * Opens a folder browser at a chosen site location.
     * @return {?} Information about the selected folder(s)
     */
    ContentNodeDialogService.prototype.openFolderBrowseDialogBySite = /**
     * Opens a folder browser at a chosen site location.
     * @return {?} Information about the selected folder(s)
     */
    function () {
        var _this = this;
        return this.siteService.getSites().pipe(switchMap(function (response) {
            return _this.openFolderBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        }));
    };
    /**
     * Opens a folder browser at a chosen folder location.
     * @param folderNodeId ID of the folder to use
     * @returns Information about the selected folder(s)
     */
    /**
     * Opens a folder browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected folder(s)
     */
    ContentNodeDialogService.prototype.openFolderBrowseDialogByFolderId = /**
     * Opens a folder browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected folder(s)
     */
    function (folderNodeId) {
        var _this = this;
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap(function (node) {
            return _this.openUploadFolderDialog('Choose', node);
        }));
    };
    /**
     * Opens a dialog to copy or move an item to a new location.
     * @param action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param contentEntry Item to be copied or moved
     * @param permission Permission for the operation
     * @returns Information about files that were copied/moved
     */
    /**
     * Opens a dialog to copy or move an item to a new location.
     * @param {?} action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param {?} contentEntry Item to be copied or moved
     * @param {?=} permission Permission for the operation
     * @return {?} Information about files that were copied/moved
     */
    ContentNodeDialogService.prototype.openCopyMoveDialog = /**
     * Opens a dialog to copy or move an item to a new location.
     * @param {?} action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param {?} contentEntry Item to be copied or moved
     * @param {?=} permission Permission for the operation
     * @return {?} Information about files that were copied/moved
     */
    function (action, contentEntry, permission) {
        if (this.contentService.hasPermission(contentEntry, permission)) {
            /** @type {?} */
            var select = new Subject();
            select.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            var title = this.getTitleTranslation(action, contentEntry.name);
            /** @type {?} */
            var data = {
                title: title,
                actionName: action,
                currentFolderId: contentEntry.parentId,
                imageResolver: this.imageResolver.bind(this),
                rowFilter: this.rowFilter.bind(this, contentEntry.id),
                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),
                select: select
            };
            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            return select;
        }
        else {
            /** @type {?} */
            var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            return throwError(errors);
        }
    };
    /**
     * Gets the translation of the dialog title.
     * @param action Name of the action to display in the dialog title
     * @param name Name of the item on which the action is being performed
     * @returns Translated version of the title
     */
    /**
     * Gets the translation of the dialog title.
     * @param {?} action Name of the action to display in the dialog title
     * @param {?} name Name of the item on which the action is being performed
     * @return {?} Translated version of the title
     */
    ContentNodeDialogService.prototype.getTitleTranslation = /**
     * Gets the translation of the dialog title.
     * @param {?} action Name of the action to display in the dialog title
     * @param {?} name Name of the item on which the action is being performed
     * @return {?} Translated version of the title
     */
    function (action, name) {
        return this.translation.instant("NODE_SELECTOR." + action.toUpperCase() + "_ITEM", { name: name });
    };
    /**
     * Opens a dialog to choose folders to upload.
     * @param action Name of the action to show in the title
     * @param contentEntry  Item to upload
     * @returns Information about the chosed folder(s)
     */
    /**
     * Opens a dialog to choose folders to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry  Item to upload
     * @return {?} Information about the chosed folder(s)
     */
    ContentNodeDialogService.prototype.openUploadFolderDialog = /**
     * Opens a dialog to choose folders to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry  Item to upload
     * @return {?} Information about the chosed folder(s)
     */
    function (action, contentEntry) {
        /** @type {?} */
        var select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: action + " '" + contentEntry.name + "' to ...",
            actionName: action,
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.hasPermissionOnNodeFolder.bind(this),
            rowFilter: this.rowFilter.bind(this, contentEntry.id),
            select: select
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        return select;
    };
    /**
     * Opens a dialog to choose a file to upload.
     * @param action Name of the action to show in the title
     * @param contentEntry Item to upload
     * @returns Information about the chosen file(s)
     */
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry Item to upload
     * @return {?} Information about the chosen file(s)
     */
    ContentNodeDialogService.prototype.openUploadFileDialog = /**
     * Opens a dialog to choose a file to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry Item to upload
     * @return {?} Information about the chosen file(s)
     */
    function (action, contentEntry) {
        /** @type {?} */
        var select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: action + " '" + contentEntry.name + "' to ...",
            actionName: action,
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.isNodeFile.bind(this),
            select: select
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        return select;
    };
    /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    ContentNodeDialogService.prototype.openContentNodeDialog = /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(ContentNodeSelectorComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ContentNodeDialogService.prototype.imageResolver = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        /** @type {?} */
        var entry = row.node.entry;
        if (!this.contentService.hasPermission(entry, 'create')) {
            return this.documentListService.getMimeTypeIcon('disable/folder');
        }
        return null;
    };
    /**
     * @param {?} currentNodeId
     * @param {?} row
     * @return {?}
     */
    ContentNodeDialogService.prototype.rowFilter = /**
     * @param {?} currentNodeId
     * @param {?} row
     * @return {?}
     */
    function (currentNodeId, row) {
        /** @type {?} */
        var node = row.node.entry;
        if (node.id === currentNodeId || node.isFile) {
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isNodeFile = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return entry.isFile;
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.hasPermissionOnNodeFolder = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return this.isNodeFolder(entry) && this.contentService.hasPermission(entry, 'create');
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isNodeFolder = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return entry.isFolder;
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isCopyMoveSelectionValid = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.hasEntityCreatePermission = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return this.contentService.hasPermission(entry, 'create');
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isSite = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';
    };
    /** Closes the currently open dialog. */
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    ContentNodeDialogService.prototype.close = /**
     * Closes the currently open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    ContentNodeDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentNodeDialogService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ContentService },
        { type: DocumentListService },
        { type: SitesService },
        { type: TranslationService }
    ]; };
    ContentNodeDialogService.propDecorators = {
        error: [{ type: Output }]
    };
    return ContentNodeDialogService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodeLockDirective = /** @class */ (function () {
    function NodeLockDirective(element, renderer, contentService, contentNodeDialogService) {
        this.element = element;
        this.renderer = renderer;
        this.contentService = contentService;
        this.contentNodeDialogService = contentNodeDialogService;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NodeLockDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.contentNodeDialogService.openLockNodeDialog(this.node);
    };
    /**
     * @return {?}
     */
    NodeLockDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hasPermission = this.contentService.hasPermission(this.node, PermissionsEnum.LOCK);
        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasPermission);
    };
    NodeLockDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-node-lock]'
                },] }
    ];
    /** @nocollapse */
    NodeLockDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ContentService },
        { type: ContentNodeDialogService }
    ]; };
    NodeLockDirective.propDecorators = {
        node: [{ type: Input, args: ['adf-node-lock',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return NodeLockDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentDirectiveModule = /** @class */ (function () {
    function ContentDirectiveModule() {
    }
    ContentDirectiveModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule
                    ],
                    declarations: [
                        NodeDownloadDirective,
                        NodeLockDirective
                    ],
                    exports: [
                        NodeDownloadDirective,
                        NodeLockDirective
                    ]
                },] }
    ];
    return ContentDirectiveModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var RatingService = /** @class */ (function () {
    function RatingService(apiService) {
        this.apiService = apiService;
    }
    /**
     * Gets the current user's rating for a node.
     * @param nodeId Node to get the rating from
     * @param ratingType Type of rating (can be "likes" or "fiveStar")
     * @returns The rating value
     */
    /**
     * Gets the current user's rating for a node.
     * @param {?} nodeId Node to get the rating from
     * @param {?} ratingType Type of rating (can be "likes" or "fiveStar")
     * @return {?} The rating value
     */
    RatingService.prototype.getRating = /**
     * Gets the current user's rating for a node.
     * @param {?} nodeId Node to get the rating from
     * @param {?} ratingType Type of rating (can be "likes" or "fiveStar")
     * @return {?} The rating value
     */
    function (nodeId, ratingType) {
        return from(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    };
    /**
     * Adds the current user's rating for a node.
     * @param nodeId Target node for the rating
     * @param ratingType Type of rating (can be "likes" or "fiveStar")
     * @param vote Rating value (boolean for "likes", numeric 0..5 for "fiveStar")
     * @returns Details about the rating, including the new value
     */
    /**
     * Adds the current user's rating for a node.
     * @param {?} nodeId Target node for the rating
     * @param {?} ratingType Type of rating (can be "likes" or "fiveStar")
     * @param {?} vote Rating value (boolean for "likes", numeric 0..5 for "fiveStar")
     * @return {?} Details about the rating, including the new value
     */
    RatingService.prototype.postRating = /**
     * Adds the current user's rating for a node.
     * @param {?} nodeId Target node for the rating
     * @param {?} ratingType Type of rating (can be "likes" or "fiveStar")
     * @param {?} vote Rating value (boolean for "likes", numeric 0..5 for "fiveStar")
     * @return {?} Details about the rating, including the new value
     */
    function (nodeId, ratingType, vote) {
        /** @type {?} */
        var ratingBody = {
            'id': ratingType,
            'myRating': vote
        };
        return from(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))
            .pipe(catchError(this.handleError));
    };
    /**
     * Removes the current user's rating for a node.
     * @param nodeId Target node
     * @param ratingType Type of rating to remove (can be "likes" or "fiveStar")
     * @returns Null response indicating that the operation is complete
     */
    /**
     * Removes the current user's rating for a node.
     * @param {?} nodeId Target node
     * @param {?} ratingType Type of rating to remove (can be "likes" or "fiveStar")
     * @return {?} Null response indicating that the operation is complete
     */
    RatingService.prototype.deleteRating = /**
     * Removes the current user's rating for a node.
     * @param {?} nodeId Target node
     * @param {?} ratingType Type of rating to remove (can be "likes" or "fiveStar")
     * @return {?} Null response indicating that the operation is complete
     */
    function (nodeId, ratingType) {
        return from(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    };
    /**
     * @param {?} error
     * @return {?}
     */
    RatingService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        console.error(error);
        return throwError(error || 'Server error');
    };
    RatingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RatingService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    return RatingService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var RatingComponent = /** @class */ (function () {
    function RatingComponent(ratingService) {
        this.ratingService = ratingService;
        this.average = 0;
        this.ratingType = 'fiveStar';
        /**
         * Emitted when the "vote" gets changed.
         */
        this.changeVote = new EventEmitter();
        this.stars = [];
    }
    /**
     * @return {?}
     */
    RatingComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);
        ratingObserver.subscribe(function (data) {
            if (data.entry.aggregate) {
                _this.average = data.entry.aggregate.average;
                _this.calculateStars();
            }
        });
        return ratingObserver;
    };
    /**
     * @return {?}
     */
    RatingComponent.prototype.calculateStars = /**
     * @return {?}
     */
    function () {
        this.stars = [];
        for (var i = 0; i < 5; i++) {
            if (i < this.average) {
                this.stars.push({ fill: true });
            }
            else {
                this.stars.push({ fill: false });
            }
        }
        this.changeVote.emit(this.average);
    };
    /**
     * @param {?} vote
     * @return {?}
     */
    RatingComponent.prototype.updateVote = /**
     * @param {?} vote
     * @return {?}
     */
    function (vote) {
        var _this = this;
        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe(function (data) {
            if (data.entry.aggregate) {
                if (_this.average !== data.entry.aggregate.average) {
                    _this.average = data.entry.aggregate.average;
                    _this.calculateStars();
                }
            }
        });
    };
    RatingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-rating',
                    template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                         (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                         (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n</mat-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-rating-container{overflow:hidden;width:100%}.adf-rating-container .adf-rating-star{float:left;transition:.3s;padding:1px;cursor:pointer}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0 2px!important}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-grey-star{color:grey}.adf-rating-container .adf-stars-container{padding:0!important;margin:0!important;display:inline-block}.adf-rating-container .adf-rating-star:hover{-webkit-transform:rotate(13deg) scale(1.2);transform:rotate(13deg) scale(1.2)}"]
                }] }
    ];
    /** @nocollapse */
    RatingComponent.ctorParameters = function () { return [
        { type: RatingService }
    ]; };
    RatingComponent.propDecorators = {
        nodeId: [{ type: Input }],
        changeVote: [{ type: Output }]
    };
    return RatingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LikeComponent = /** @class */ (function () {
    function LikeComponent(ratingService) {
        this.ratingService = ratingService;
        /**
         * Emitted when the "vote" gets changed.
         */
        this.changeVote = new EventEmitter();
        this.likesCounter = 0;
        this.ratingType = 'likes';
        this.isLike = false;
    }
    /**
     * @return {?}
     */
    LikeComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.clean();
        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(function (data) {
            if (data.entry.aggregate) {
                _this.likesCounter = data.entry.aggregate.numberOfRatings;
                if (data.entry.ratedAt) {
                    _this.isLike = true;
                }
            }
        });
    };
    /**
     * @return {?}
     */
    LikeComponent.prototype.likeClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isLike) {
            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(function () {
                _this.likesCounter -= 1;
                _this.isLike = false;
                _this.changeVote.emit(_this.likesCounter);
            });
        }
        else {
            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(function (data) {
                _this.likesCounter = data.entry.aggregate.numberOfRatings;
                _this.isLike = true;
                _this.changeVote.emit(_this.likesCounter);
            });
        }
    };
    /**
     * @return {?}
     */
    LikeComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.isLike = false;
        this.likesCounter = 0;
    };
    LikeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-like',
                    template: "<div id=\"adf-like-container\" class=\"adf-like-container\">\n    <div class=\"adf-like\">\n        <span id=\"adf-like-{{nodeId}}\" [ngClass]=\"{'adf-like-select': isLike ,'adf-like-grey': !isLike  }\"\n              (click)=\"likeClick()\">\n            <mat-icon>thumb_up</mat-icon>\n        </span>\n    </div>\n    <div id=\"adf-like-counter\" class=\"adf-like-counter\">{{likesCounter}}</div>\n    <div class=\"adf-left\" *ngIf=\"likesCounter<=1\">Like</div>\n    <div class=\"adf-left\" *ngIf=\"likesCounter>1\">Likes</div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-like-container{overflow:hidden;width:100%}.adf-like-container .adf-like{padding:5px;cursor:pointer;float:left;margin:5px 0 5px 5px}.adf-like-container .adf-like-select{cursor:pointer;color:#2196f3}.adf-like-container .adf-like-grey,.adf-like-container .adf-like-select:hover{cursor:pointer;color:grey}.adf-like-container .adf-like-grey:hover{cursor:pointer;color:#2196f3}.adf-like-container .adf-like-counter{float:left;padding:13px 0 0}.adf-like-container .adf-left{float:left;padding:13px 0 0 4px}"]
                }] }
    ];
    /** @nocollapse */
    LikeComponent.ctorParameters = function () { return [
        { type: RatingService }
    ]; };
    LikeComponent.propDecorators = {
        nodeId: [{ type: Input }],
        changeVote: [{ type: Output }]
    };
    return LikeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SocialModule = /** @class */ (function () {
    function SocialModule() {
    }
    SocialModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule
                    ],
                    exports: [
                        RatingComponent,
                        LikeComponent
                    ],
                    declarations: [
                        RatingComponent,
                        LikeComponent
                    ]
                },] }
    ];
    return SocialModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TagService = /** @class */ (function () {
    function TagService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Emitted when tag information is updated.
         */
        this.refresh = new EventEmitter();
    }
    /**
     * Gets a list of tags added to a node.
     * @param nodeId ID of the target node
     * @returns TagPaging object (defined in JSAPI) containing the tags
     */
    /**
     * Gets a list of tags added to a node.
     * @param {?} nodeId ID of the target node
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    TagService.prototype.getTagsByNodeId = /**
     * Gets a list of tags added to a node.
     * @param {?} nodeId ID of the target node
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    function (nodeId) {
        var _this = this;
        return from(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId)).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a list of all the tags already defined in the repository.
     * @param opts Options supported by JSAPI
     * @returns TagPaging object (defined in JSAPI) containing the tags
     */
    /**
     * Gets a list of all the tags already defined in the repository.
     * @param {?=} opts Options supported by JSAPI
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    TagService.prototype.getAllTheTags = /**
     * Gets a list of all the tags already defined in the repository.
     * @param {?=} opts Options supported by JSAPI
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    function (opts) {
        var _this = this;
        return from(this.apiService.getInstance().core.tagsApi.getTags(opts))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Adds a tag to a node.
     * @param nodeId ID of the target node
     * @param tagName Name of the tag to add
     * @returns TagEntry object (defined in JSAPI) with details of the new tag
     */
    /**
     * Adds a tag to a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tagName Name of the tag to add
     * @return {?} TagEntry object (defined in JSAPI) with details of the new tag
     */
    TagService.prototype.addTag = /**
     * Adds a tag to a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tagName Name of the tag to add
     * @return {?} TagEntry object (defined in JSAPI) with details of the new tag
     */
    function (nodeId, tagName) {
        var _this = this;
        /** @type {?} */
        var alfrescoApi = this.apiService.getInstance();
        /** @type {?} */
        var tagBody = new alfrescoApi.core.TagBody();
        tagBody.tag = tagName;
        /** @type {?} */
        var promiseAdd = from(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));
        promiseAdd.subscribe(function (data) {
            _this.refresh.emit(data);
        }, function (err) {
            _this.handleError(err);
        });
        return promiseAdd;
    };
    /**
     * Removes a tag from a node.
     * @param nodeId ID of the target node
     * @param tag Name of the tag to remove
     * @returns Null object when the operation completes
     */
    /**
     * Removes a tag from a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tag Name of the tag to remove
     * @return {?} Null object when the operation completes
     */
    TagService.prototype.removeTag = /**
     * Removes a tag from a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tag Name of the tag to remove
     * @return {?} Null object when the operation completes
     */
    function (nodeId, tag) {
        var _this = this;
        /** @type {?} */
        var promiseRemove = from(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));
        promiseRemove.subscribe(function (data) {
            _this.refresh.emit(data);
        }, function (err) {
            _this.handleError(err);
        });
        return promiseRemove;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TagService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    TagService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TagService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    TagService.propDecorators = {
        refresh: [{ type: Output }]
    };
    return TagService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 *
 * This component, provide a list of the tags relative a node with actions button to add or remove new tag
 */
var TagActionsComponent = /** @class */ (function () {
    function TagActionsComponent(tagService, translateService) {
        this.tagService = tagService;
        this.translateService = translateService;
        /**
         * Emitted when a tag is added successfully.
         */
        this.successAdd = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an action is chosen.
         */
        this.result = new EventEmitter();
        this.disableAddTag = true;
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    TagActionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.tagService.refresh.subscribe(function () {
            _this.refreshTag();
        }));
    };
    /**
     * @return {?}
     */
    TagActionsComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        return this.refreshTag();
    };
    /**
     * @return {?}
     */
    TagActionsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
    };
    /**
     * @return {?}
     */
    TagActionsComponent.prototype.refreshTag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (data) {
                _this.tagsEntries = data.list.entries;
                _this.disableAddTag = false;
                _this.result.emit(_this.tagsEntries);
            }, function () {
                _this.tagsEntries = null;
                _this.disableAddTag = true;
                _this.result.emit(_this.tagsEntries);
            });
        }
    };
    /**
     * @return {?}
     */
    TagActionsComponent.prototype.addTag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.searchTag(this.newTagName)) {
            this.translateService.get('TAG.MESSAGES.EXIST').subscribe(function (error) {
                _this.errorMsg = error;
            });
            this.error.emit(this.errorMsg);
        }
        else {
            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(function () {
                _this.newTagName = '';
                _this.successAdd.emit(_this.nodeId);
            });
        }
    };
    /**
     * @param {?} searchTagName
     * @return {?}
     */
    TagActionsComponent.prototype.searchTag = /**
     * @param {?} searchTagName
     * @return {?}
     */
    function (searchTagName) {
        if (this.tagsEntries) {
            return this.tagsEntries.find(function (currentTag) {
                return (searchTagName === currentTag.entry.tag);
            });
        }
    };
    /**
     * @return {?}
     */
    TagActionsComponent.prototype.cleanErrorMsg = /**
     * @return {?}
     */
    function () {
        this.errorMsg = '';
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    TagActionsComponent.prototype.removeTag = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        this.tagService.removeTag(this.nodeId, tag);
    };
    TagActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-node-actions-list',
                    template: "<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{currentEntry.entry.tag}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{currentEntry.entry.tag}}\">\n                {{currentEntry.entry.tag}}\n            </div>\n            <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n        </div>\n    </mat-list-item>\n</mat-list>\n<table class=\"adf-full-width\" cellspacing=\"0\">\n    <tr>\n        <td>\n            <mat-form-field class=\"adf-full-width\">\n                <input matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                       type=\"text\"\n                       (keypress)=\"cleanErrorMsg()\"\n                       [(ngModel)]=\"newTagName\"\n                       id=\"new-tag-text\"/>\n                <mat-hint data-automation-id=\"errorMessage\" *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n            </mat-form-field>\n        </td>\n        <td>\n            <button class=\"adf-full-width\" color=\"primary\" id=\"add-tag\" (click)=\"addTag()\" [disabled]=\"disableAddTag\"\n                    mat-raised-button>\n                {{'TAG.BUTTON.ADD' | translate }}\n            </button>\n        </td>\n    </tr>\n</table>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-full-width{width:100%}.adf-tag-actions-delete-icon{float:right;cursor:pointer}.adf-tag-actions-delete-text{font-size:16px;float:left}.adf-tag-actions-container{padding:8px 0;height:20px}"]
                }] }
    ];
    /** @nocollapse */
    TagActionsComponent.ctorParameters = function () { return [
        { type: TagService },
        { type: TranslationService }
    ]; };
    TagActionsComponent.propDecorators = {
        nodeId: [{ type: Input }],
        successAdd: [{ type: Output }],
        error: [{ type: Output }],
        result: [{ type: Output }]
    };
    return TagActionsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * This component provide a list of all the tag inside the ECM
 */
var TagListComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param tagService
     */
    function TagListComponent(tagService) {
        var _this = this;
        this.tagService = tagService;
        /**
         * Emitted when a tag is selected.
         */
        this.result = new EventEmitter();
        /**
         * Array of tags that are displayed
         */
        this.tagsEntries = [];
        /**
         * Number of items per iteration
         */
        this.size = 10;
        this.isLoading = false;
        this.isSizeMinimum = true;
        this.defaultPagination = {
            skipCount: 0,
            maxItems: this.size,
            hasMoreItems: false
        };
        this.pagination = this.defaultPagination;
        this.tagService.refresh.subscribe(function () {
            _this.tagsEntries = [];
            _this.refreshTag(_this.defaultPagination);
        });
    }
    /**
     * @return {?}
     */
    TagListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return this.refreshTag(this.defaultPagination);
    };
    /**
     * @param {?=} opts
     * @return {?}
     */
    TagListComponent.prototype.refreshTag = /**
     * @param {?=} opts
     * @return {?}
     */
    function (opts) {
        var _this = this;
        this.tagService.getAllTheTags(opts).subscribe(function (tags) {
            _this.tagsEntries = _this.tagsEntries.concat(tags.list.entries);
            _this.pagination = tags.list.pagination;
            _this.result.emit(_this.tagsEntries);
            _this.isLoading = false;
        });
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadMoreTags = /**
     * @return {?}
     */
    function () {
        if (this.pagination.hasMoreItems) {
            this.isLoading = true;
            this.isSizeMinimum = false;
            this.refreshTag({
                skipCount: this.pagination.skipCount + this.pagination.count,
                maxItems: this.size
            });
        }
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadLessTags = /**
     * @return {?}
     */
    function () {
        this.isSizeMinimum = false;
        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
        this.pagination.hasMoreItems = true;
        if (this.tagsEntries.length <= this.size) {
            this.isSizeMinimum = true;
        }
    };
    TagListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-list',
                    template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip class=\"adf-primary-background-color\">\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-tag-chips-list,.adf-tag-chips-list div{display:flex;flex-direction:column}.adf-list-tag{display:block;font-size:16px}.adf-tag-list-controls{margin-top:30px;display:flex;justify-content:center}"]
                }] }
    ];
    /** @nocollapse */
    TagListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagListComponent.propDecorators = {
        result: [{ type: Output }]
    };
    return TagListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 *
 * This component, ShowNodeTag a list of the tag on relative a node
 */
var TagNodeListComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param tagService
     */
    function TagNodeListComponent(tagService) {
        var _this = this;
        this.tagService = tagService;
        /**
         * Show delete button
         */
        this.showDelete = true;
        /**
         * Emitted when a tag is selected.
         */
        this.results = new EventEmitter();
        this.tagService.refresh.subscribe(function () {
            _this.refreshTag();
        });
    }
    /**
     * @return {?}
     */
    TagNodeListComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        return this.refreshTag();
    };
    /**
     * @return {?}
     */
    TagNodeListComponent.prototype.refreshTag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (data) {
                _this.tagsEntries = data.list.entries;
                _this.results.emit(_this.tagsEntries);
            });
        }
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    TagNodeListComponent.prototype.removeTag = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        this.tagService.removeTag(this.nodeId, tag).subscribe(function () {
            _this.refreshTag();
        });
    };
    TagNodeListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-node-list',
                    template: "<mat-chip-list>\n    <mat-chip class=\"adf-tag-chips adf-primary-background-color\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        <button *ngIf=\"showDelete\" class=\"adf-tag-chips-delete\" id=\"tag_chips_delete_{{currentEntry.entry.tag}}\" type=\"button\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <mat-icon class=\"adf-tag-chips-delete-icon adf-primary-contrast-text-color\" matChipRemove>cancel</mat-icon>\n        </button>\n    </mat-chip>\n</mat-chip-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-tag-chips-delete{overflow:visible;cursor:pointer;height:17px;width:20px;float:right;border:0;background:0 0;padding:0;margin:-1px 0 0 10px}.adf-tag-chips-delete-icon{font-size:20px;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:20px;width:20px}"]
                }] }
    ];
    /** @nocollapse */
    TagNodeListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagNodeListComponent.propDecorators = {
        nodeId: [{ type: Input }],
        showDelete: [{ type: Input }],
        results: [{ type: Output }]
    };
    return TagNodeListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TagModule = /** @class */ (function () {
    function TagModule() {
    }
    TagModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        FormsModule,
                        ReactiveFormsModule,
                        CoreModule.forChild()
                    ],
                    exports: [
                        TagActionsComponent,
                        TagListComponent,
                        TagNodeListComponent
                    ],
                    declarations: [
                        TagActionsComponent,
                        TagListComponent,
                        TagNodeListComponent
                    ]
                },] }
    ];
    return TagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * <adf-webscript-get [scriptPath]="string"
 *                         [scriptArgs]="Object"
 *                         [contextRoot]="string"
 *                         [servicePath]="string"
 *                         [contentType]="JSON|HTML|DATATABLE"
 *                         (success)="customMethod($event)>
 * </adf-webscript-get>
 *
 * This component, provide a get webscript viewer
 *
 * \@InputParam {string} scriptPath path to Web Script (as defined by Web Script)
 * \@InputParam {Object} scriptArgs arguments to pass to Web Script
 * \@InputParam {string} contextRoot path where application is deployed default value 'alfresco'
 * \@InputParam {string} servicePath path where Web Script service is mapped default value 'service'
 * \@InputParam {string} contentType JSON | HTML | DATATABLE | TEXT
 *
 * \@Output - success - The event is emitted when the data are recived
 *
 */
var WebscriptComponent = /** @class */ (function () {
    function WebscriptComponent(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Toggles whether to show or hide the data.
         */
        this.showData = true;
        /**
         * Path where the application is deployed
         */
        this.contextRoot = 'alfresco';
        /**
         * Path that the webscript service is mapped to.
         */
        this.servicePath = 'service';
        /**
         * Content type to interpret the data received from the webscript.
         * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
         */
        this.contentType = 'TEXT';
        /**
         * Emitted when the operation succeeds. You can get the plain data from
         * the webscript through the **success** event parameter and use it as you
         * need in your application.
         */
        this.success = new EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    WebscriptComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.showData) {
            this.clean();
        }
        return new Promise(function (resolve, reject) {
            _this.apiService.getInstance().webScript.executeWebScript('GET', _this.scriptPath, _this.scriptArgs, _this.contextRoot, _this.servicePath).then(function (webScriptdata) {
                _this.data = webScriptdata;
                if (_this.showData) {
                    if (_this.contentType === 'DATATABLE') {
                        _this.data = _this.showDataAsDataTable(webScriptdata);
                    }
                }
                _this.success.emit(_this.data);
                resolve();
            }, function (error) {
                _this.logService.log('Error' + error);
                reject();
            });
        });
    };
    /**
     * show the data in a ng2-alfresco-datatable
     *
     * @param data
     *
     * @retutns the data as datatable
     */
    /**
     * show the data in a ng2-alfresco-datatable
     *
     * \@retutns the data as datatable
     * @param {?} data
     *
     * @return {?}
     */
    WebscriptComponent.prototype.showDataAsDataTable = /**
     * show the data in a ng2-alfresco-datatable
     *
     * \@retutns the data as datatable
     * @param {?} data
     *
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (e) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    };
    /**
     * @return {?}
     */
    WebscriptComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.data = undefined;
    };
    /**
     * @return {?}
     */
    WebscriptComponent.prototype.isDataTableContent = /**
     * @return {?}
     */
    function () {
        return this.contentType === 'DATATABLE';
    };
    WebscriptComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-webscript-get',
                    template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    WebscriptComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    WebscriptComponent.propDecorators = {
        scriptPath: [{ type: Input }],
        scriptArgs: [{ type: Input }],
        showData: [{ type: Input }],
        contextRoot: [{ type: Input }],
        servicePath: [{ type: Input }],
        contentType: [{ type: Input }],
        success: [{ type: Output }]
    };
    return WebscriptComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var WebScriptModule = /** @class */ (function () {
    function WebScriptModule() {
    }
    WebScriptModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        CoreModule.forChild()
                    ],
                    exports: [
                        WebscriptComponent
                    ],
                    declarations: [
                        WebscriptComponent
                    ]
                },] }
    ];
    return WebScriptModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ShareDataRow = /** @class */ (function () {
    function ShareDataRow(obj, documentListService, permissionsStyle, thumbnailService) {
        this.obj = obj;
        this.documentListService = documentListService;
        this.permissionsStyle = permissionsStyle;
        this.thumbnailService = thumbnailService;
        this.cache = {};
        this.isSelected = false;
        this.cssClass = '';
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);
        if (permissionsStyle) {
            this.cssClass = this.getPermissionClass(obj);
        }
    }
    Object.defineProperty(ShareDataRow.prototype, "node", {
        get: /**
         * @return {?}
         */
        function () {
            return this.obj;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nodeEntity
     * @return {?}
     */
    ShareDataRow.prototype.getPermissionClass = /**
     * @param {?} nodeEntity
     * @return {?}
     */
    function (nodeEntity) {
        var _this = this;
        /** @type {?} */
        var permissionsClasses = '';
        this.permissionsStyle.forEach(function (currentPermissionsStyle) {
            if (_this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || _this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                if (_this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {
                    permissionsClasses += " " + currentPermissionsStyle.css;
                }
            }
        });
        return permissionsClasses;
    };
    /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    ShareDataRow.prototype.applyPermissionStyleToFile = /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    function (node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFile && node.isFile);
    };
    /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    ShareDataRow.prototype.applyPermissionStyleToFolder = /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    function (node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFolder && node.isFolder);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ShareDataRow.prototype.isFolderAndHasPermissionToUpload = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ShareDataRow.prototype.isFolder = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj.entry && obj.entry.isFolder;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    ShareDataRow.prototype.cacheValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.cache[key] = value;
        return value;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ShareDataRow.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ObjectUtils.getValue(this.obj.entry, key);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShareDataRow.prototype.imageErrorResolver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ShareDataRow.prototype.hasValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.getValue(key) !== undefined;
    };
    ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
    return ShareDataRow;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ShareDataTableAdapter = /** @class */ (function () {
    function ShareDataTableAdapter(documentListService, thumbnailService, schema, sorting, sortingMode) {
        if (schema === void 0) { schema = []; }
        if (sortingMode === void 0) { sortingMode = 'client'; }
        this.documentListService = documentListService;
        this.thumbnailService = thumbnailService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
    }
    Object.defineProperty(ShareDataTableAdapter.prototype, "sortingMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sortingMode;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = (value || 'client').toLowerCase();
            if (newValue !== 'client' && newValue !== 'server') {
                newValue = 'client';
            }
            this._sortingMode = newValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getRows = /**
     * @return {?}
     */
    function () {
        return this.rows;
    };
    // TODO: disable this api
    /**
     * @param {?} rows
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setRows = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        this.rows = rows || [];
        this.sort();
    };
    /**
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getColumns = /**
     * @return {?}
     */
    function () {
        return this.columns;
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setColumns = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        this.columns = columns || [];
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getValue = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        /** @type {?} */
        var dataRow = /** @type {?} */ (row);
        /** @type {?} */
        var value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                /** @type {?} */
                var resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            /** @type {?} */
            var node = (/** @type {?} */ (row)).node;
            if (node.entry.isFolder) {
                if (this.isSmartFolder(node)) {
                    return this.documentListService.getMimeTypeIcon('smartFolder');
                }
                else {
                    return this.documentListService.getMimeTypeIcon('folder');
                }
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.documentListService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                /** @type {?} */
                var mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.documentListService.getMimeTypeIcon(mimeType);
                }
            }
            return this.documentListService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                /** @type {?} */
                var resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    };
    /**
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getSorting = /**
     * @return {?}
     */
    function () {
        return this.sorting;
    };
    /**
     * @param {?} sorting
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setSorting = /**
     * @param {?} sorting
     * @return {?}
     */
    function (sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    };
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    ShareDataTableAdapter.prototype.sort = /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    function (key, direction) {
        /** @type {?} */
        var sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setFilter = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        this.filter = filter$$1;
    };
    /**
     * @param {?} resolver
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setImageResolver = /**
     * @param {?} resolver
     * @return {?}
     */
    function (resolver) {
        this.imageResolver = resolver;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ShareDataTableAdapter.prototype.isSmartFolder = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getNodeAspectNames = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];
    };
    /**
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    ShareDataTableAdapter.prototype.sortRows = /**
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    function (rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        /** @type {?} */
        var options = {};
        if (sorting && sorting.key && rows && rows.length > 0) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort(function (a, b) {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                /** @type {?} */
                var left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                var right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            });
        }
    };
    /**
     * @param {?} page
     * @param {?=} merge
     * @return {?}
     */
    ShareDataTableAdapter.prototype.loadPage = /**
     * @param {?} page
     * @param {?=} merge
     * @return {?}
     */
    function (page, merge$$1) {
        var _this = this;
        if (merge$$1 === void 0) { merge$$1 = false; }
        /** @type {?} */
        var rows = [];
        if (page && page.list) {
            /** @type {?} */
            var data = page.list.entries;
            if (data && data.length > 0) {
                rows = data.map(function (item) { return new ShareDataRow(item, _this.documentListService, _this.permissionsStyle, _this.thumbnailService); });
                if (this.filter) {
                    rows = rows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    // Sort by first sortable or just first column
                    if (this.columns && this.columns.length > 0) {
                        /** @type {?} */
                        var sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(rows, sorting);
                        }
                        else {
                            /** @type {?} */
                            var sortable = this.columns.filter(function (c) { return c.sortable; });
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge$$1) {
            /** @type {?} */
            var listPrunedDuplicate = rows.filter(function (elemntToFilter) {
                /** @type {?} */
                var isPresent = _this.rows.find(function (currenRow) {
                    return currenRow.obj.entry.id === elemntToFilter.obj.entry.id;
                });
                return !isPresent;
            });
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = rows;
        }
    };
    return ShareDataTableAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var presetsDefaultModel = {
    '-trashcan-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'archivedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'archivedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',
            sortable: true
        }
    ],
    '-sites-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'title',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'visibility',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',
            sortable: true
        }
    ],
    '-mysites-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'title',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'visibility',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',
            sortable: true
        }
    ],
    '-favorites-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'modifiedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
            sortable: true
        }
    ],
    '-recent-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            cssClass: 'ellipsis-cell',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        }
    ],
    '-sharedlinks-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            cssClass: 'ellipsis-cell',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'modifiedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
            sortable: true
        },
        {
            key: 'sharedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',
            sortable: true
        }
    ],
    'default': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'modifiedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
            sortable: true
        }
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentActionModel = /** @class */ (function () {
    function ContentActionModel(obj) {
        this.disableWithNoPermission = false;
        this.disabled = false;
        this.visible = true;
        if (obj) {
            this.icon = obj.icon;
            this.title = obj.title;
            this.handler = obj.handler;
            this.execute = obj.execute;
            this.target = obj.target;
            this.permission = obj.permission;
            this.disableWithNoPermission = obj.disableWithNoPermission;
            if (obj.hasOwnProperty('disabled')) {
                this.disabled = obj.disabled;
            }
            if (obj.hasOwnProperty('visible')) {
                this.visible = obj.visible;
            }
        }
    }
    return ContentActionModel;
}());
/** @enum {string} */
var ContentActionTarget = {
    Document: 'document',
    Folder: 'folder',
    All: 'all',
};
var DocumentActionModel = /** @class */ (function (_super) {
    __extends(DocumentActionModel, _super);
    function DocumentActionModel(json) {
        var _this = _super.call(this, json) || this;
        _this.target = 'document';
        return _this;
    }
    return DocumentActionModel;
}(ContentActionModel));
var FolderActionModel = /** @class */ (function (_super) {
    __extends(FolderActionModel, _super);
    function FolderActionModel(json) {
        var _this = _super.call(this, json) || this;
        _this.target = 'folder';
        return _this;
    }
    return FolderActionModel;
}(ContentActionModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodeEntityEvent = /** @class */ (function (_super) {
    __extends(NodeEntityEvent, _super);
    function NodeEntityEvent(entity) {
        var _this = _super.call(this) || this;
        _this.value = entity;
        return _this;
    }
    return NodeEntityEvent;
}(BaseEvent));
var NodeEntryEvent = /** @class */ (function (_super) {
    __extends(NodeEntryEvent, _super);
    function NodeEntryEvent(entity) {
        var _this = _super.call(this) || this;
        _this.value = entity;
        return _this;
    }
    return NodeEntryEvent;
}(BaseEvent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CustomResourcesService = /** @class */ (function () {
    function CustomResourcesService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.CREATE_PERMISSION = 'create';
    }
    /**
     * Gets files recently accessed by a user.
     * @param personId ID of the user
     * @param pagination Specifies how to paginate the results
     * @returns List of nodes for the recently used files
     */
    /**
     * Gets files recently accessed by a user.
     * @param {?} personId ID of the user
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of nodes for the recently used files
     */
    CustomResourcesService.prototype.getRecentFiles = /**
     * Gets files recently accessed by a user.
     * @param {?} personId ID of the user
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of nodes for the recently used files
     */
    function (personId, pagination) {
        var _this = this;
        return new Observable(function (observer) {
            _this.apiService.peopleApi.getPerson(personId)
                .then(function (person) {
                /** @type {?} */
                var username = person.entry.id;
                /** @type {?} */
                var query = {
                    query: {
                        query: '*',
                        language: 'afts'
                    },
                    filterQueries: [
                        { query: "cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]" },
                        { query: "cm:modifier:" + username + " OR cm:creator:" + username },
                        { query: "TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"" }
                    ],
                    include: ['path', 'properties', 'allowableOperations'],
                    sort: [{
                            type: 'FIELD',
                            field: 'cm:modified',
                            ascending: false
                        }],
                    paging: {
                        maxItems: pagination.maxItems,
                        skipCount: pagination.skipCount
                    }
                };
                return _this.apiService.searchApi.search(query)
                    .then(function (searchResult) {
                    observer.next(searchResult);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets favorite files for the current user.
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of favorite files
     */
    /**
     * Gets favorite files for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of favorite files
     */
    CustomResourcesService.prototype.loadFavorites = /**
     * Gets favorite files for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of favorite files
     */
    function (pagination, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        var options = {
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: includeFieldsRequest
        };
        return new Observable(function (observer) {
            _this.apiService.favoritesApi.getFavorites('-me-', options)
                .then(function (result) {
                /** @type {?} */
                var page = {
                    list: {
                        entries: result.list.entries
                            .map(function (_a) {
                            var target = _a.entry.target;
                            return ({
                                entry: target.file || target.folder
                            });
                        })
                            .map(function (_a) {
                            var entry = _a.entry;
                            entry.properties = {
                                'cm:title': entry.title,
                                'cm:description': entry.description
                            };
                            return { entry: entry };
                        }),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets sites that the current user is a member of.
     * @param pagination Specifies how to paginate the results
     * @returns List of sites
     */
    /**
     * Gets sites that the current user is a member of.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    CustomResourcesService.prototype.loadMemberSites = /**
     * Gets sites that the current user is a member of.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    function (pagination) {
        var _this = this;
        /** @type {?} */
        var options = {
            include: ['properties'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return new Observable(function (observer) {
            _this.apiService.peopleApi.getSiteMembership('-me-', options)
                .then(function (result) {
                /** @type {?} */
                var page = {
                    list: {
                        entries: result.list.entries
                            .map(function (_a) {
                            var site = _a.entry.site;
                            site.allowableOperations = site.allowableOperations ? site.allowableOperations : [_this.CREATE_PERMISSION];
                            site.name = site.name || site.title;
                            return {
                                entry: site
                            };
                        }),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all sites in the respository.
     * @param pagination Specifies how to paginate the results
     * @returns List of sites
     */
    /**
     * Gets all sites in the respository.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    CustomResourcesService.prototype.loadSites = /**
     * Gets all sites in the respository.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    function (pagination) {
        var _this = this;
        /** @type {?} */
        var options = {
            include: ['properties', 'aspectNames'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return new Observable(function (observer) {
            _this.apiService.sitesApi.getSites(options)
                .then(function (page) {
                page.list.entries.map(function (_a) {
                    var entry = _a.entry;
                    entry.name = entry.name || entry.title;
                    return { entry: entry };
                });
                observer.next(page);
                observer.complete();
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all items currently in the trash.
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of deleted items
     */
    /**
     * Gets all items currently in the trash.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of deleted items
     */
    CustomResourcesService.prototype.loadTrashcan = /**
     * Gets all items currently in the trash.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of deleted items
     */
    function (pagination, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        var options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.apiService.nodesApi.getDeletedNodes(options))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets shared links for the current user.
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of shared links
     */
    /**
     * Gets shared links for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of shared links
     */
    CustomResourcesService.prototype.loadSharedLinks = /**
     * Gets shared links for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of shared links
     */
    function (pagination, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        var options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.apiService.sharedLinksApi.findSharedLinks(options))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Is the folder ID one of the well-known aliases?
     * @param folderId Folder ID name to check
     * @returns True if the ID is a well-known name, false otherwise
     */
    /**
     * Is the folder ID one of the well-known aliases?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is a well-known name, false otherwise
     */
    CustomResourcesService.prototype.isCustomSource = /**
     * Is the folder ID one of the well-known aliases?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is a well-known name, false otherwise
     */
    function (folderId) {
        /** @type {?} */
        var isCustomSources = false;
        /** @type {?} */
        var sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];
        if (sources.indexOf(folderId) > -1) {
            isCustomSources = true;
        }
        return isCustomSources;
    };
    /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param folderId Folder ID name to check
     * @returns True if the ID is one of the suppored sources, false otherwise
     */
    /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is one of the suppored sources, false otherwise
     */
    CustomResourcesService.prototype.isSupportedSource = /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is one of the suppored sources, false otherwise
     */
    function (folderId) {
        /** @type {?} */
        var isSupportedSources = false;
        /** @type {?} */
        var sources = ['-my-', '-root-', '-shared-'];
        if (sources.indexOf(folderId) > -1) {
            isSupportedSources = true;
        }
        return isSupportedSources;
    };
    /**
     * Gets a folder's contents.
     * @param nodeId ID of the target folder node
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of items contained in the folder
     */
    /**
     * Gets a folder's contents.
     * @param {?} nodeId ID of the target folder node
     * @param {?} pagination Specifies how to paginate the results
     * @param {?} includeFields List of data field names to include in the results
     * @return {?} List of items contained in the folder
     */
    CustomResourcesService.prototype.loadFolderByNodeId = /**
     * Gets a folder's contents.
     * @param {?} nodeId ID of the target folder node
     * @param {?} pagination Specifies how to paginate the results
     * @param {?} includeFields List of data field names to include in the results
     * @return {?} List of items contained in the folder
     */
    function (nodeId, pagination, includeFields) {
        if (nodeId === '-trashcan-') {
            return this.loadTrashcan(pagination, includeFields);
        }
        else if (nodeId === '-sharedlinks-') {
            return this.loadSharedLinks(pagination, includeFields);
        }
        else if (nodeId === '-sites-') {
            return this.loadSites(pagination);
        }
        else if (nodeId === '-mysites-') {
            return this.loadMemberSites(pagination);
        }
        else if (nodeId === '-favorites-') {
            return this.loadFavorites(pagination, includeFields);
        }
        else if (nodeId === '-recent-') {
            return this.getRecentFiles('-me-', pagination);
        }
    };
    // TODO: remove it from here
    /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param nodeId ID of the target folder node
     * @param pagination Specifies how to paginate the results
     * @returns List of node IDs
     */
    /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param {?} nodeId ID of the target folder node
     * @param {?=} pagination Specifies how to paginate the results
     * @return {?} List of node IDs
     */
    CustomResourcesService.prototype.getCorrespondingNodeIds = /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param {?} nodeId ID of the target folder node
     * @param {?=} pagination Specifies how to paginate the results
     * @return {?} List of node IDs
     */
    function (nodeId, pagination) {
        if (pagination === void 0) { pagination = {}; }
        if (this.isCustomSource(nodeId)) {
            return this.loadFolderByNodeId(nodeId, pagination, [])
                .pipe(map(function (result) { return result.list.entries.map(function (node) {
                if (nodeId === '-sharedlinks-') {
                    return node.entry.nodeId;
                }
                else if (nodeId === '-sites-' || nodeId === '-mysites-') {
                    return node.entry.guid;
                }
                else if (nodeId === '-favorites-') {
                    return node.entry.targetGuid;
                }
                return node.entry.id;
            }); }));
        }
        else if (nodeId) {
            // cases when nodeId is '-my-', '-root-' or '-shared-'
            return from(this.apiService.nodesApi.getNode(nodeId)
                .then(function (node) { return [node.entry.id]; }));
        }
        return of([]);
    };
    /**
     * Does the well-known alias have a corresponding node ID?
     * @param nodeId Node to check
     * @returns True if the alias has a corresponding node ID, false otherwise
     */
    /**
     * Does the well-known alias have a corresponding node ID?
     * @param {?} nodeId Node to check
     * @return {?} True if the alias has a corresponding node ID, false otherwise
     */
    CustomResourcesService.prototype.hasCorrespondingNodeIds = /**
     * Does the well-known alias have a corresponding node ID?
     * @param {?} nodeId Node to check
     * @return {?} True if the alias has a corresponding node ID, false otherwise
     */
    function (nodeId) {
        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);
    };
    /**
     * @param {?} includeFields
     * @return {?}
     */
    CustomResourcesService.prototype.getIncludesFields = /**
     * @param {?} includeFields
     * @return {?}
     */
    function (includeFields) {
        return __spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
    };
    /**
     * @param {?} error
     * @return {?}
     */
    CustomResourcesService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    CustomResourcesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CustomResourcesService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    return CustomResourcesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var PaginationStrategy = {
    Finite: 0,
    Infinite: 1,
};
PaginationStrategy[PaginationStrategy.Finite] = 'Finite';
PaginationStrategy[PaginationStrategy.Infinite] = 'Infinite';
var DocumentListComponent = /** @class */ (function () {
    function DocumentListComponent(documentListService, ngZone, elementRef, appConfig, preferences, customResourcesService, contentService, thumbnailService) {
        this.documentListService = documentListService;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.appConfig = appConfig;
        this.preferences = preferences;
        this.customResourcesService = customResourcesService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        /**
         * Change the display mode of the table. Can be "list" or "gallery".
         */
        this.display = DisplayMode.List;
        /**
         * Define a set of CSS styles styles to apply depending on the permission
         * of the user on that node. See the Permission Style model
         * page for further details and examples.
         */
        this.permissionsStyle = [];
        /**
         * The default route for all the location-based columns (if declared).
         */
        this.locationFormat = '/';
        /**
         * Toggles navigation to folder content or file preview
         */
        this.navigate = true;
        /**
         * Toggles the header
         */
        this.showHeader = true;
        /**
         * User interaction for folder navigation or file preview.
         * Valid values are "click" and "dblclick". Default value: "dblclick"
         */
        this.navigationMode = DocumentListComponent.DOUBLE_CLICK_NAVIGATION;
        /**
         * Show document thumbnails rather than icons
         */
        this.thumbnails = false;
        /**
         * Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
         */
        this.selectionMode = 'single';
        /**
         * Toggles multiselect mode
         */
        this.multiselect = false;
        /**
         * Toggles content actions for each row
         */
        this.contentActions = false;
        /**
         * Position of the content actions dropdown menu. Can be set to "left" or "right".
         */
        this.contentActionsPosition = 'right';
        /**
         * Toggles context menus for each row
         */
        this.contextMenuActions = false;
        /**
         * Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg'
         */
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        /**
         * Toggle file drop support for rows (see Upload Directive for further details
         */
        this.allowDropFiles = false;
        /**
         * Defines default sorting. The format is an array of 2 strings `[key, direction]`
         * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
         * override the default sorting detected by the component based on columns.
         */
        this.sorting = ['name', 'asc'];
        /**
         * Defines sorting mode. Can be either `client` or `server`.
         */
        this.sortingMode = 'client';
        /**
         * Toggles the loading state and animated spinners for the component. Used in
         * combination with `navigate=false` to perform custom navigation and loading
         * state indication.
         */
        this.loading = false;
        /**
         * Custom row filter
         */
        this.rowFilter = null;
        /**
         * Custom image resolver
         */
        this.imageResolver = null;
        /**
         * The ID of the folder node to display or a reserved string alias for special sources
         */
        this.currentFolderId = null;
        /**
         * Currently displayed folder node
         * @deprecated 2.3.0 - use currentFolderId or node
         */
        this.folderNode = null;
        /**
         * The Document list will show all the nodes contained in the NodePaging entity
         */
        this.node = null;
        /**
         * Number of elements to skip over for pagination purposes
         * @deprecated 2.3.0 - define it in pagination
         */
        this.skipCount = 0;
        /**
         * Set document list to work in infinite scrolling mode
         * @deprecated 2.3.0
         */
        this.enableInfiniteScrolling = false;
        /**
         * Emitted when the user clicks a list node
         */
        this.nodeClick = new EventEmitter();
        /**
         * Emitted when the user double-clicks a list node
         */
        this.nodeDblClick = new EventEmitter();
        /**
         * Emitted when the current display folder changes
         */
        this.folderChange = new EventEmitter();
        /**
         * Emitted when the user acts upon files with either single or double click
         * (depends on `navigation-mode`). Useful for integration with the
         * Viewer component.
         */
        this.preview = new EventEmitter();
        /**
         * Emitted when the Document List has loaded all items and is ready for use
         */
        this.ready = new EventEmitter();
        /**
         * Emitted when the API fails to get the Document List data
         */
        this.error = new EventEmitter();
        this.actions = [];
        this.contextActionHandler = new Subject();
        this.noPermission = false;
        this.selection = new Array();
        this.layoutPresets = {};
        this.subscriptions = [];
        this.rowMenuCache = {};
    }
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getContextActions = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.entry) {
            /** @type {?} */
            var actions = this.getNodeActions(node);
            if (actions && actions.length > 0) {
                return actions.map(function (currentAction) {
                    return {
                        model: currentAction,
                        node: node,
                        subject: _this.contextActionHandler
                    };
                });
            }
        }
        return null;
    };
    Object.defineProperty(DocumentListComponent.prototype, "supportedPageSizes", {
        /** @deprecated 2.3.0 define it in pagination */
        get: /**
         * @deprecated 2.3.0 define it in pagination
         * @return {?}
         */
        function () {
            return this.preferences.getDefaultPageSizes();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentListComponent.prototype, "hasCustomLayout", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.getDefaultSorting = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultSorting;
        if (this.sorting) {
            var _a = __read(this.sorting, 2), key = _a[0], direction = _a[1];
            defaultSorting = new DataSorting(key, direction);
        }
        return defaultSorting;
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    DocumentListComponent.prototype.getLayoutPreset = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (name === void 0) { name = 'default'; }
        return (this.layoutPresets[name] || this.layoutPresets['default']).map(function (col) { return new ObjectDataColumn(col); });
    };
    Object.defineProperty(DocumentListComponent.prototype, "pagination", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var maxItems = this.preferences.paginationSize;
            if (!this._pagination) {
                if (this.maxItems) {
                    maxItems = this.maxItems;
                }
                /** @type {?} */
                var defaultPagination = /** @type {?} */ ({
                    maxItems: maxItems,
                    skipCount: 0,
                    totalItems: 0,
                    hasMoreItems: false
                });
                this._pagination = new BehaviorSubject(defaultPagination);
            }
            return this._pagination;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isEmptyTemplateDefined = /**
     * @return {?}
     */
    function () {
        if (this.dataTable) {
            if (this.emptyFolderTemplate) {
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isNoPermissionTemplateDefined = /**
     * @return {?}
     */
    function () {
        if (this.dataTable) {
            if (this.noPermissionTemplate) {
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isMobile = /**
     * @return {?}
     */
    function () {
        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.data || this.data.getRows().length === 0;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.rowMenuCache = {};
        this.loadLayoutPresets();
        this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, null, this.getDefaultSorting(), this.sortingMode);
        this.data.thumbnails = this.thumbnails;
        this.data.permissionsStyle = this.permissionsStyle;
        if (this.rowFilter) {
            this.data.setFilter(this.rowFilter);
        }
        if (this.imageResolver) {
            this.data.setImageResolver(this.imageResolver);
        }
        this.subscriptions.push(this.contextActionHandler.subscribe(function (val) { return _this.contextActionCallback(val); }));
        this.enforceSingleClickNavigationForMobile();
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columnList) {
            this.subscriptions.push(this.columnList.columns.changes.subscribe(function () {
                _this.setTableSchema();
            }));
        }
        this.setTableSchema();
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.setTableSchema = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var schema = [];
        if (this.hasCustomLayout) {
            schema = this.columnList.columns.map(function (c) { return (c); });
        }
        if (!this.data) {
            this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, schema, this.getDefaultSorting(), this.sortingMode);
        }
        else if (schema && schema.length > 0) {
            this.data.setColumns(schema);
        }
        /** @type {?} */
        var columns = this.data.getColumns();
        if (!columns || columns.length === 0) {
            this.setupDefaultColumns(this.currentFolderId);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        this.resetSelection();
        if (this.data) {
            this.data.thumbnails = this.thumbnails;
        }
        if (changes["sortingMode"] && !changes["sortingMode"].firstChange && this.data) {
            this.data.sortingMode = changes["sortingMode"].currentValue;
        }
        if (changes["sorting"] && !changes["sorting"].firstChange && this.data) {
            /** @type {?} */
            var newValue = changes["sorting"].currentValue;
            if (newValue && newValue.length > 0) {
                var _a = __read(newValue, 2), key = _a[0], direction = _a[1];
                this.data.setSorting(new DataSorting(key, direction));
            }
        }
        if (changes["folderNode"] && changes["folderNode"].currentValue) {
            this.currentFolderId = changes["folderNode"].currentValue.id;
            this.resetNewFolderPagination();
            this.loadFolder();
        }
        else if (changes["currentFolderId"] &&
            changes["currentFolderId"].currentValue &&
            changes["currentFolderId"].currentValue !== changes["currentFolderId"].previousValue) {
            this.resetNewFolderPagination();
            this.loadFolder();
        }
        else if (this.data) {
            if (changes["node"] && changes["node"].currentValue) {
                this.data.loadPage(changes["node"].currentValue);
                this.onDataReady(changes["node"].currentValue);
            }
            else if (changes["rowFilter"] && changes["rowFilter"].currentValue !== changes["rowFilter"].previousValue) {
                this.data.setFilter(changes["rowFilter"].currentValue);
                if (this.currentFolderId) {
                    this.loadFolderNodesByFolderNodeId(this.currentFolderId, this.pagination.getValue()).catch(function (err) { return _this.error.emit(err); });
                }
            }
            else if (changes["imageResolver"]) {
                this.data.setImageResolver(changes["imageResolver"].currentValue);
            }
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.run(function () {
            _this.resetSelection();
            if (_this.node) {
                _this.data.loadPage(_this.node);
                _this.onDataReady(_this.node);
            }
            else {
                _this.loadFolder();
            }
        });
    };
    /**
     * @param {?} action
     * @return {?}
     */
    DocumentListComponent.prototype.contextActionCallback = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        if (action) {
            this.executeContentAction(action.node, action.model);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getNodeActions = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.entry) {
            /** @type {?} */
            var target_1 = null;
            if (node.entry.isFile) {
                target_1 = 'document';
            }
            else if (node.entry.isFolder) {
                target_1 = 'folder';
            }
            if (target_1) {
                /** @type {?} */
                var actions = this.rowMenuCache[node.entry.id];
                if (actions) {
                    actions.forEach(function (action) {
                        _this.refreshAction(action, node);
                    });
                    return actions;
                }
                /** @type {?} */
                var actionsByTarget = this.actions
                    .filter(function (entry) {
                    /** @type {?} */
                    var isVisible = (typeof entry.visible === 'function')
                        ? entry.visible(node)
                        : entry.visible;
                    return isVisible && entry.target.toLowerCase() === target_1;
                })
                    .map(function (action) { return new ContentActionModel(action); });
                actionsByTarget.forEach(function (action) {
                    _this.refreshAction(action, node);
                });
                this.rowMenuCache[node.entry.id] = actionsByTarget;
                return actionsByTarget;
            }
        }
        return [];
    };
    /**
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.refreshAction = /**
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        action.disabled = this.isActionDisabled(action, node);
        action.visible = this.isActionVisible(action, node);
    };
    /**
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isActionVisible = /**
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        if (typeof action.visible === 'function') {
            return action.visible(node);
        }
        return action.visible;
    };
    /**
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isActionDisabled = /**
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        if (typeof action.disabled === 'function') {
            return action.disabled(node);
        }
        if (action.permission && action.disableWithNoPermission && !this.contentService.hasPermission(node.entry, action.permission)) {
            return true;
        }
        return action.disabled;
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    DocumentListComponent.prototype.onShowContextMenu = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        if (e && this.contextMenuActions) {
            e.preventDefault();
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.performNavigation = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.canNavigateFolder(node)) {
            this.updateFolderData(node);
            return true;
        }
        return false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.performCustomSourceNavigation = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.customResourcesService.isCustomSource(this.currentFolderId)) {
            this.updateFolderData(node);
            return true;
        }
        return false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.updateFolderData = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.resetNewFolderPagination();
        this.currentFolderId = node.entry.id;
        this.reload();
        this.folderChange.emit(new NodeEntryEvent(node.entry));
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.updateCustomSourceData = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        this.folderNode = null;
        this.currentFolderId = nodeId;
    };
    /**
     * Invoked when executing content action for a document or folder.
     * @param node Node to be the context of the execution.
     * @param action Action to be executed against the context.
     */
    /**
     * Invoked when executing content action for a document or folder.
     * @param {?} node Node to be the context of the execution.
     * @param {?} action Action to be executed against the context.
     * @return {?}
     */
    DocumentListComponent.prototype.executeContentAction = /**
     * Invoked when executing content action for a document or folder.
     * @param {?} node Node to be the context of the execution.
     * @param {?} action Action to be executed against the context.
     * @return {?}
     */
    function (node, action) {
        if (node && node.entry && action) {
            /** @type {?} */
            var handlerSub = void 0;
            if (typeof action.handler === 'function') {
                handlerSub = action.handler(node, this, action.permission);
            }
            else {
                handlerSub = of(true);
            }
            if (typeof action.execute === 'function' && handlerSub) {
                handlerSub.subscribe(function () {
                    action.execute(node);
                });
            }
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.loadFolder = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.pagination.getValue().merge) {
            this.loading = true;
        }
        if (!this.hasCustomLayout) {
            this.setupDefaultColumns(this.currentFolderId);
        }
        if (this.folderNode) {
            return this.loadFolderNodesByFolderNodeId(this.folderNode.id, this.pagination.getValue())
                .catch(function (err) { return _this.handleError(err); });
        }
        else {
            this.loadFolderByNodeId(this.currentFolderId);
        }
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.loadFolderByNodeId = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        if (this.customResourcesService.isCustomSource(nodeId)) {
            this.updateCustomSourceData(nodeId);
            this.customResourcesService.loadFolderByNodeId(nodeId, this.pagination.getValue(), this.includeFields)
                .subscribe(function (page) {
                _this.onPageLoaded(page);
            }, function (err) {
                _this.error.emit(err);
            });
        }
        else {
            this.documentListService
                .getFolderNode(nodeId, this.includeFields)
                .subscribe(function (node) {
                _this.folderNode = node;
                return _this.loadFolderNodesByFolderNodeId(node.id, _this.pagination.getValue())
                    .catch(function (err) { return _this.handleError(err); });
            }, function (err) {
                _this.handleError(err);
            });
        }
    };
    /**
     * @param {?} id
     * @param {?} pagination
     * @return {?}
     */
    DocumentListComponent.prototype.loadFolderNodesByFolderNodeId = /**
     * @param {?} id
     * @param {?} pagination
     * @return {?}
     */
    function (id, pagination) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.documentListService
                .getFolder(null, {
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                rootFolderId: id
            }, _this.includeFields)
                .subscribe(function (nodePaging) {
                _this.data.loadPage(/** @type {?} */ (nodePaging), _this.pagination.getValue().merge);
                _this.loading = false;
                _this.onDataReady(nodePaging);
                resolve(true);
            }, function (err) {
                _this.handleError(err);
            });
        });
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.resetSelection = /**
     * @return {?}
     */
    function () {
        this.dataTable.resetSelection();
        this.selection = [];
        this.noPermission = false;
    };
    /**
     * @param {?} nodePaging
     * @return {?}
     */
    DocumentListComponent.prototype.onPageLoaded = /**
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        if (nodePaging) {
            this.data.loadPage(nodePaging, this.pagination.getValue().merge);
            this.loading = false;
            this.onDataReady(nodePaging);
        }
    };
    /**
     * Creates a set of predefined columns.
     */
    /**
     * Creates a set of predefined columns.
     * @param {?=} preset
     * @return {?}
     */
    DocumentListComponent.prototype.setupDefaultColumns = /**
     * Creates a set of predefined columns.
     * @param {?=} preset
     * @return {?}
     */
    function (preset) {
        if (preset === void 0) { preset = 'default'; }
        if (this.data) {
            /** @type {?} */
            var columns = this.getLayoutPreset(preset);
            this.data.setColumns(columns);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.onPreviewFile = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            this.preview.emit(new NodeEntityEvent(node));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var domEvent = new CustomEvent('node-click', {
            detail: {
                sender: this,
                node: node
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        /** @type {?} */
        var event = new NodeEntityEvent(node);
        this.nodeClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {
                if (node && node.entry) {
                    if (node.entry.isFile) {
                        this.onPreviewFile(node);
                    }
                    if (node.entry.isFolder) {
                        this.performNavigation(node);
                    }
                }
            }
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeDblClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var domEvent = new CustomEvent('node-dblclick', {
            detail: {
                sender: this,
                node: node
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        /** @type {?} */
        var event = new NodeEntityEvent(node);
        this.nodeDblClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {
                if (node && node.entry) {
                    if (node.entry.isFile) {
                        this.onPreviewFile(node);
                    }
                    if (node.entry.isFolder) {
                        this.performNavigation(node);
                    }
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selection = event.selection.map(function (entry) { return entry.node; });
        /** @type {?} */
        var domEvent = new CustomEvent('node-select', {
            detail: {
                node: event.row.node,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeUnselect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selection = event.selection.map(function (entry) { return entry.node; });
        /** @type {?} */
        var domEvent = new CustomEvent('node-unselect', {
            detail: {
                node: event.row.node,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onShowRowContextMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contextMenuActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = (/** @type {?} */ (args.row)).node;
            if (node) {
                args.actions = this.getContextActions(node) || [];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onShowRowActionsMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contentActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = (/** @type {?} */ (args.row)).node;
            if (node) {
                args.actions = this.getNodeActions(node) || [];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onExecuteRowAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contentActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = (/** @type {?} */ (args.row)).node;
            /** @type {?} */
            var action = (/** @type {?} */ (args.action));
            this.executeContentAction(node, action);
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.enforceSingleClickNavigationForMobile = /**
     * @return {?}
     */
    function () {
        if (this.isMobile()) {
            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.canNavigateFolder = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var canNavigateFolder = false;
        if (this.customResourcesService.isCustomSource(this.currentFolderId)) {
            canNavigateFolder = false;
        }
        else if (node && node.entry && node.entry.isFolder) {
            canNavigateFolder = true;
        }
        return canNavigateFolder;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.loadLayoutPresets = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var externalSettings = this.appConfig.get('document-list.presets', null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);
        }
        else {
            this.layoutPresets = presetsDefaultModel;
        }
    };
    /**
     * @param {?} nodePaging
     * @return {?}
     */
    DocumentListComponent.prototype.onDataReady = /**
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        this.ready.emit(nodePaging);
        this.pagination.next(nodePaging.list.pagination);
    };
    /**
     * @param {?} pagination
     * @return {?}
     */
    DocumentListComponent.prototype.updatePagination = /**
     * @param {?} pagination
     * @return {?}
     */
    function (pagination) {
        this.pagination.next(pagination);
        this.reload();
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.navigateTo = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        this.currentFolderId = nodeId;
        this.resetNewFolderPagination();
        this.loadFolder();
        this.folderChange.emit(new NodeEntryEvent({ id: nodeId }));
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.resetNewFolderPagination = /**
     * @return {?}
     */
    function () {
        this.folderNode = null;
        this.pagination.value.skipCount = 0;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.subscriptions = [];
    };
    /**
     * @param {?} err
     * @return {?}
     */
    DocumentListComponent.prototype.handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (err.message) {
            if (JSON.parse(err.message).error.statusCode === 403) {
                this.loading = false;
                this.noPermission = true;
            }
        }
        this.error.emit(err);
    };
    DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
    DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
    DocumentListComponent.DEFAULT_PAGE_SIZE = 20;
    DocumentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-document-list',
                    template: "<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [allowDropFiles]=\"allowDropFiles\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"!isEmpty() && showHeader\"\n    [rowMenuCacheEnabled]=\"false\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($event.detail)\"\n    (row-unselect)=\"onNodeUnselect($event.detail)\"\n    [class.adf-datatable-gallery-thumbnails]=\"data.thumbnails\">\n\n    <div *ngIf=\"!isEmptyTemplateDefined()\">\n        <no-content-template>\n            <ng-template>\n                <adf-empty-list>\n                    <div class=\"adf-empty-list_template adf-empty-folder\">\n                        <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                        <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                        <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                        <img class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                    </div>\n                    <!-- <div adf-empty-list-header class=\"adf-empty-list-header\"> {{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}} </div> -->\n                </adf-empty-list>\n            </ng-template>\n        </no-content-template>\n    </div>\n\n    <div *ngIf=\"!isNoPermissionTemplateDefined()\">\n        <no-permission-template>\n            <ng-template>\n                <div class=\"adf-no-permission__template\">\n                    <mat-icon>ic_error</mat-icon>\n                    <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n                </div>\n            </ng-template>\n        </no-permission-template>\n    </div>\n\n    <div>\n        <loading-content-template>\n            <ng-template>\n                <div class=\"adf-document-list-loading-container\">\n                    <mat-progress-spinner\n                        id=\"adf-document-list-loading\"\n                        class=\"adf-document-list-loading-margin\"\n                        [color]=\"'primary'\"\n                        [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </div>\n            </ng-template>\n        </loading-content-template>\n    </div>\n</adf-datatable>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DocumentListComponent.ctorParameters = function () { return [
        { type: DocumentListService },
        { type: NgZone },
        { type: ElementRef },
        { type: AppConfigService },
        { type: UserPreferencesService },
        { type: CustomResourcesService },
        { type: ContentService },
        { type: ThumbnailService }
    ]; };
    DocumentListComponent.propDecorators = {
        columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
        includeFields: [{ type: Input }],
        display: [{ type: Input }],
        permissionsStyle: [{ type: Input }],
        locationFormat: [{ type: Input }],
        navigate: [{ type: Input }],
        showHeader: [{ type: Input }],
        navigationMode: [{ type: Input }],
        thumbnails: [{ type: Input }],
        selectionMode: [{ type: Input }],
        multiselect: [{ type: Input }],
        contentActions: [{ type: Input }],
        contentActionsPosition: [{ type: Input }],
        contextMenuActions: [{ type: Input }],
        emptyFolderImageUrl: [{ type: Input }],
        allowDropFiles: [{ type: Input }],
        sorting: [{ type: Input }],
        sortingMode: [{ type: Input }],
        rowStyle: [{ type: Input }],
        rowStyleClass: [{ type: Input }],
        loading: [{ type: Input }],
        rowFilter: [{ type: Input }],
        imageResolver: [{ type: Input }],
        currentFolderId: [{ type: Input }],
        folderNode: [{ type: Input }],
        node: [{ type: Input }],
        maxItems: [{ type: Input }],
        skipCount: [{ type: Input }],
        enableInfiniteScrolling: [{ type: Input }],
        nodeClick: [{ type: Output }],
        nodeDblClick: [{ type: Output }],
        folderChange: [{ type: Output }],
        preview: [{ type: Output }],
        ready: [{ type: Output }],
        error: [{ type: Output }],
        dataTable: [{ type: ViewChild, args: ['dataTable',] }],
        onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
    };
    return DocumentListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentColumnListComponent = /** @class */ (function () {
    function ContentColumnListComponent(documentList, logService) {
        this.documentList = documentList;
        this.logService = logService;
        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');
    }
    /**
     * Registers column model within the parent document list component.
     * @param column Column definition model to register.
     */
    /**
     * Registers column model within the parent document list component.
     * @param {?} column Column definition model to register.
     * @return {?}
     */
    ContentColumnListComponent.prototype.registerColumn = /**
     * Registers column model within the parent document list component.
     * @param {?} column Column definition model to register.
     * @return {?}
     */
    function (column) {
        if (this.documentList && column) {
            /** @type {?} */
            var columns = this.documentList.data.getColumns();
            columns.push(column);
            return true;
        }
        return false;
    };
    ContentColumnListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'content-columns',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    ContentColumnListComponent.ctorParameters = function () { return [
        { type: DocumentListComponent },
        { type: LogService }
    ]; };
    return ContentColumnListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentColumnComponent = /** @class */ (function () {
    function ContentColumnComponent(list, logService) {
        this.list = list;
        this.logService = logService;
        this.type = 'text';
        this.sortable = false;
        this.title = '';
        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');
    }
    /**
     * @return {?}
     */
    ContentColumnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.srTitle && this.key === '$thumbnail') {
            this.srTitle = 'Thumbnail';
        }
    };
    /**
     * @return {?}
     */
    ContentColumnComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.register();
    };
    /**
     * @return {?}
     */
    ContentColumnComponent.prototype.register = /**
     * @return {?}
     */
    function () {
        if (this.list) {
            return this.list.registerColumn(this);
        }
        return false;
    };
    ContentColumnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'content-column',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    ContentColumnComponent.ctorParameters = function () { return [
        { type: ContentColumnListComponent },
        { type: LogService }
    ]; };
    ContentColumnComponent.propDecorators = {
        key: [{ type: Input }],
        type: [{ type: Input }],
        format: [{ type: Input }],
        sortable: [{ type: Input }],
        title: [{ type: Input }],
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        srTitle: [{ type: Input, args: ['sr-title',] }],
        cssClass: [{ type: Input, args: ['class',] }]
    };
    return ContentColumnComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PermissionModel = /** @class */ (function () {
    function PermissionModel(obj) {
        if (obj) {
            this.type = obj.type || null;
            this.action = obj.action || null;
            this.permission = obj.permission || null;
        }
    }
    return PermissionModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodeActionsService = /** @class */ (function () {
    function NodeActionsService(contentDialogService, dialogRef, content, documentListService, apiService, dialog) {
        this.contentDialogService = contentDialogService;
        this.dialogRef = dialogRef;
        this.content = content;
        this.documentListService = documentListService;
        this.apiService = apiService;
        this.dialog = dialog;
        this.error = new EventEmitter();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    NodeActionsService.prototype.downloadNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        new NodeDownloadDirective(this.apiService, this.dialog)
            .downloadNode(node);
    };
    /**
     * Copy content node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.copyContent = /**
     * Copy content node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('copy', 'content', contentEntry, permission);
    };
    /**
     * Copy folder node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.copyFolder = /**
     * Copy folder node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('copy', 'folder', contentEntry, permission);
    };
    /**
     * Move content node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.moveContent = /**
     * Move content node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('move', 'content', contentEntry, permission);
    };
    /**
     * Move folder node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.moveFolder = /**
     * Move folder node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('move', 'folder', contentEntry, permission);
    };
    /**
     * General method for performing the given operation (copy|move)
     *
     * @param {?} action the action to perform (copy|move)
     * @param {?} type type of the content (content|folder)
     * @param {?} contentEntry the contentEntry which has to have the action performed on
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.doFileOperation = /**
     * General method for performing the given operation (copy|move)
     *
     * @param {?} action the action to perform (copy|move)
     * @param {?} type type of the content (content|folder)
     * @param {?} contentEntry the contentEntry which has to have the action performed on
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (action, type, contentEntry, permission) {
        var _this = this;
        /** @type {?} */
        var observable = new Subject();
        this.contentDialogService
            .openCopyMoveDialog(action, contentEntry, permission)
            .subscribe(function (selections) {
            /** @type {?} */
            var selection = selections[0];
            _this.documentListService[action + "Node"].call(_this.documentListService, contentEntry.id, selection.id)
                .subscribe(observable.next.bind(observable, "OPERATION.SUCCESS." + type.toUpperCase() + "." + action.toUpperCase()), observable.error.bind(observable));
        }, function (error) {
            observable.error(error);
            return observable;
        });
        return observable;
    };
    NodeActionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NodeActionsService.ctorParameters = function () { return [
        { type: ContentNodeDialogService },
        { type: MatDialog },
        { type: ContentService },
        { type: DocumentListService },
        { type: AlfrescoApiService },
        { type: MatDialog }
    ]; };
    NodeActionsService.propDecorators = {
        error: [{ type: Output }]
    };
    return NodeActionsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DocumentActionsService = /** @class */ (function () {
    function DocumentActionsService(nodeActionsService, contentNodeDialogService, translation, documentListService, contentService) {
        this.nodeActionsService = nodeActionsService;
        this.contentNodeDialogService = contentNodeDialogService;
        this.translation = translation;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    /**
     * Gets the handler for an action.
     * @param key Identifier of the action
     * @returns The handler for the action
     */
    /**
     * Gets the handler for an action.
     * @param {?} key Identifier of the action
     * @return {?} The handler for the action
     */
    DocumentActionsService.prototype.getHandler = /**
     * Gets the handler for an action.
     * @param {?} key Identifier of the action
     * @return {?} The handler for the action
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            return this.handlers[lkey] || null;
        }
        return null;
    };
    /**
     * Sets a new handler for an action.
     * @param key Identifier of the action
     * @param handler Handler for the action
     * @returns False if the key was an empty/null string, true otherwise
     */
    /**
     * Sets a new handler for an action.
     * @param {?} key Identifier of the action
     * @param {?} handler Handler for the action
     * @return {?} False if the key was an empty/null string, true otherwise
     */
    DocumentActionsService.prototype.setHandler = /**
     * Sets a new handler for an action.
     * @param {?} key Identifier of the action
     * @param {?} handler Handler for the action
     * @return {?} False if the key was an empty/null string, true otherwise
     */
    function (key, handler) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            this.handlers[lkey] = handler;
            return true;
        }
        return false;
    };
    /**
     * Checks if actions can be executed for an item.
     * @param obj Item to receive an action
     * @returns True if the action can be executed on this item, false otherwise
     */
    /**
     * Checks if actions can be executed for an item.
     * @param {?} obj Item to receive an action
     * @return {?} True if the action can be executed on this item, false otherwise
     */
    DocumentActionsService.prototype.canExecuteAction = /**
     * Checks if actions can be executed for an item.
     * @param {?} obj Item to receive an action
     * @return {?} True if the action can be executed on this item, false otherwise
     */
    function (obj) {
        return this.documentListService && obj && obj.entry.isFile === true;
    };
    /**
     * @return {?}
     */
    DocumentActionsService.prototype.setupActionHandlers = /**
     * @return {?}
     */
    function () {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
        this.handlers['lock'] = this.lockNode.bind(this);
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.lockNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        return this.contentNodeDialogService.openLockNodeDialog(node.entry);
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.downloadNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        this.nodeActionsService.downloadNode(obj);
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.copyNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.copyContent(node.entry, permission);
        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.moveNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.moveContent(node.entry, permission);
        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.prepareHandlers = /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (actionObservable, type, action, target, permission) {
        var _this = this;
        actionObservable.subscribe(function (fileOperationMessage) {
            _this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.deleteNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        var _this = this;
        /** @type {?} */
        var handlerObservable;
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasPermission(node.entry, permission)) {
                handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    _this.success.next(message);
                }, function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    _this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({
                    type: 'content',
                    action: 'delete',
                    permission: permission
                }));
                return throwError(new Error('No permission to delete'));
            }
        }
    };
    DocumentActionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DocumentActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: ContentNodeDialogService },
        { type: TranslationService },
        { type: DocumentListService },
        { type: ContentService }
    ]; };
    return DocumentActionsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FolderActionsService = /** @class */ (function () {
    function FolderActionsService(nodeActionsService, documentListService, contentService, translation) {
        this.nodeActionsService = nodeActionsService;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.translation = translation;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    /**
     * Gets the handler function for an action.
     * @param key Identifier for the action
     * @returns The handler function
     */
    /**
     * Gets the handler function for an action.
     * @param {?} key Identifier for the action
     * @return {?} The handler function
     */
    FolderActionsService.prototype.getHandler = /**
     * Gets the handler function for an action.
     * @param {?} key Identifier for the action
     * @return {?} The handler function
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            return this.handlers[lkey] || null;
        }
        return null;
    };
    /**
     * Sets a new handler function for an action.
     * @param key Identifier for the action
     * @param handler The new handler function
     * @returns True if the key was a valid action identifier, false otherwise
     */
    /**
     * Sets a new handler function for an action.
     * @param {?} key Identifier for the action
     * @param {?} handler The new handler function
     * @return {?} True if the key was a valid action identifier, false otherwise
     */
    FolderActionsService.prototype.setHandler = /**
     * Sets a new handler function for an action.
     * @param {?} key Identifier for the action
     * @param {?} handler The new handler function
     * @return {?} True if the key was a valid action identifier, false otherwise
     */
    function (key, handler) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            this.handlers[lkey] = handler;
            return true;
        }
        return false;
    };
    /**
     * Checks if an action is available for a particular item.
     * @param obj Item to check
     * @returns True if the action is available, false otherwise
     */
    /**
     * Checks if an action is available for a particular item.
     * @param {?} obj Item to check
     * @return {?} True if the action is available, false otherwise
     */
    FolderActionsService.prototype.canExecuteAction = /**
     * Checks if an action is available for a particular item.
     * @param {?} obj Item to check
     * @return {?} True if the action is available, false otherwise
     */
    function (obj) {
        return this.documentListService && obj && obj.entry.isFolder === true;
    };
    /**
     * @return {?}
     */
    FolderActionsService.prototype.setupActionHandlers = /**
     * @return {?}
     */
    function () {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.downloadNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        this.nodeActionsService.downloadNode(obj);
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.copyNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.copyFolder(obj.entry, permission);
        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.moveNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.moveFolder(obj.entry, permission);
        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.prepareHandlers = /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (actionObservable, type, action, target, permission) {
        var _this = this;
        actionObservable.subscribe(function (fileOperationMessage) {
            if (target && typeof target.reload === 'function') {
                target.reload();
            }
            _this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.deleteNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        var _this = this;
        /** @type {?} */
        var handlerObservable;
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasPermission(node.entry, permission)) {
                handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(function () {
                    if (target && typeof target.reload === 'function') {
                        target.reload();
                    }
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    _this.success.next(message);
                }, function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    _this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({ type: 'folder', action: 'delete', permission: permission }));
                return throwError(new Error('No permission to delete'));
            }
        }
    };
    FolderActionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FolderActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: DocumentListService },
        { type: ContentService },
        { type: TranslationService }
    ]; };
    return FolderActionsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentActionListComponent = /** @class */ (function () {
    function ContentActionListComponent(documentList) {
        this.documentList = documentList;
    }
    /**
     * Registers action handler within the parent document list component.
     * @param action Action model to register.
     */
    /**
     * Registers action handler within the parent document list component.
     * @param {?} action Action model to register.
     * @return {?}
     */
    ContentActionListComponent.prototype.registerAction = /**
     * Registers action handler within the parent document list component.
     * @param {?} action Action model to register.
     * @return {?}
     */
    function (action) {
        if (this.documentList && action) {
            this.documentList.actions.push(action);
            return true;
        }
        return false;
    };
    /**
     * @param {?} action
     * @return {?}
     */
    ContentActionListComponent.prototype.unregisterAction = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        if (this.documentList && action) {
            /** @type {?} */
            var idx = this.documentList.actions.indexOf(action);
            if (idx >= 0) {
                this.documentList.actions.splice(idx, 1);
                return true;
            }
        }
        return false;
    };
    ContentActionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'content-actions',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    ContentActionListComponent.ctorParameters = function () { return [
        { type: DocumentListComponent }
    ]; };
    return ContentActionListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentActionComponent = /** @class */ (function () {
    function ContentActionComponent(list, documentActions, folderActions) {
        this.list = list;
        this.documentActions = documentActions;
        this.folderActions = folderActions;
        /**
         * The title of the action as shown in the menu.
         */
        this.title = 'Action';
        /**
         * Visibility state (see examples).
         */
        this.visible = true;
        /**
         * Type of item that the action applies to. Can be "document" or "folder"
         */
        this.target = ContentActionTarget.All;
        /**
         * Is the menu item disabled?
         */
        this.disabled = false;
        /**
         * Emitted when the user selects the action from the menu.
         */
        this.execute = new EventEmitter();
        /**
         * Emitted when a permission error occurs
         */
        this.permissionEvent = new EventEmitter();
        /**
         * Emitted when an error occurs during the action.
         * Applies to copy and move actions.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the action succeeds with the success string message.
         * Applies to copy, move and delete actions.
         */
        this.success = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ContentActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.target === ContentActionTarget.All) {
            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);
            this.documentActionModel = this.generateAction(ContentActionTarget.Document);
        }
        else {
            this.documentActionModel = this.generateAction(this.target);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ContentActionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["visible"] && !changes["visible"].firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.visible = changes["visible"].currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.visible = changes["visible"].currentValue;
            }
        }
        if (changes["disabled"] && !changes["disabled"].firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.disabled = changes["disabled"].currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.disabled = changes["disabled"].currentValue;
            }
        }
    };
    /**
     * @return {?}
     */
    ContentActionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
        if (this.documentActionModel) {
            this.unregister(this.documentActionModel);
            this.documentActionModel = null;
        }
        if (this.folderActionModel) {
            this.unregister(this.folderActionModel);
            this.folderActionModel = null;
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ContentActionComponent.prototype.register = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.list) {
            return this.list.registerAction(model);
        }
        return false;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ContentActionComponent.prototype.unregister = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.list) {
            return this.list.unregisterAction(model);
        }
        return false;
    };
    /**
     * @param {?} target
     * @return {?}
     */
    ContentActionComponent.prototype.generateAction = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        var _this = this;
        /** @type {?} */
        var model = new ContentActionModel({
            title: this.title,
            icon: this.icon,
            permission: this.permission,
            disableWithNoPermission: this.disableWithNoPermission,
            target: target,
            disabled: this.disabled,
            visible: this.visible
        });
        if (this.handler) {
            model.handler = this.getSystemHandler(target, this.handler);
        }
        if (this.execute) {
            model.execute = function (value) {
                _this.execute.emit({ value: value });
            };
        }
        this.register(model);
        return model;
    };
    /**
     * @param {?} target
     * @param {?} name
     * @return {?}
     */
    ContentActionComponent.prototype.getSystemHandler = /**
     * @param {?} target
     * @param {?} name
     * @return {?}
     */
    function (target, name) {
        var _this = this;
        if (target) {
            target = target.toLowerCase();
            if (target === ContentActionTarget.Document) {
                if (this.documentActions) {
                    this.subscriptions.push(this.documentActions.permissionEvent.subscribe(function (permission) {
                        _this.permissionEvent.emit(permission);
                    }), this.documentActions.error.subscribe(function (errors) {
                        _this.error.emit(errors);
                    }), this.documentActions.success.subscribe(function (message) {
                        _this.success.emit(message);
                    }));
                    return this.documentActions.getHandler(name);
                }
                return null;
            }
            if (target === ContentActionTarget.Folder) {
                if (this.folderActions) {
                    this.subscriptions.push(this.folderActions.permissionEvent.subscribe(function (permission) {
                        _this.permissionEvent.emit(permission);
                    }), this.folderActions.error.subscribe(function (errors) {
                        _this.error.emit(errors);
                    }), this.folderActions.success.subscribe(function (message) {
                        _this.success.emit(message);
                    }));
                    return this.folderActions.getHandler(name);
                }
                return null;
            }
        }
        return null;
    };
    ContentActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'content-action',
                    template: '',
                    providers: [
                        DocumentActionsService,
                        FolderActionsService
                    ]
                }] }
    ];
    /** @nocollapse */
    ContentActionComponent.ctorParameters = function () { return [
        { type: ContentActionListComponent },
        { type: DocumentActionsService },
        { type: FolderActionsService }
    ]; };
    ContentActionComponent.propDecorators = {
        title: [{ type: Input }],
        icon: [{ type: Input }],
        visible: [{ type: Input }],
        handler: [{ type: Input }],
        target: [{ type: Input }],
        permission: [{ type: Input }],
        disableWithNoPermission: [{ type: Input }],
        disabled: [{ type: Input }],
        execute: [{ type: Output }],
        permissionEvent: [{ type: Output }],
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return ContentActionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var EmptyFolderContentDirective = /** @class */ (function () {
    function EmptyFolderContentDirective(documentList) {
        this.documentList = documentList;
    }
    /**
     * @return {?}
     */
    EmptyFolderContentDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.documentList.emptyFolderTemplate = this.template;
        this.documentList.dataTable.noContentTemplate = this.template;
    };
    EmptyFolderContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'empty-folder-content'
                },] }
    ];
    /** @nocollapse */
    EmptyFolderContentDirective.ctorParameters = function () { return [
        { type: DocumentListComponent }
    ]; };
    EmptyFolderContentDirective.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }]
    };
    return EmptyFolderContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NoPermissionContentDirective = /** @class */ (function () {
    function NoPermissionContentDirective(documentList) {
        this.documentList = documentList;
    }
    /**
     * @return {?}
     */
    NoPermissionContentDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.documentList.noPermissionTemplate = this.template;
        this.documentList.dataTable.noPermissionTemplate = this.template;
    };
    NoPermissionContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'no-permission-content'
                },] }
    ];
    /** @nocollapse */
    NoPermissionContentDirective.ctorParameters = function () { return [
        { type: DocumentListComponent }
    ]; };
    NoPermissionContentDirective.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }]
    };
    return NoPermissionContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NodePaging = /** @class */ (function () {
    function NodePaging() {
    }
    return NodePaging;
}());
var NodePagingList = /** @class */ (function () {
    function NodePagingList() {
    }
    return NodePagingList;
}());
var NodeMinimalEntry = /** @class */ (function () {
    function NodeMinimalEntry() {
    }
    return NodeMinimalEntry;
}());
var Pagination = /** @class */ (function () {
    function Pagination() {
    }
    return Pagination;
}());
var NodeMinimal = /** @class */ (function () {
    function NodeMinimal() {
        this.properties = {};
    }
    return NodeMinimal;
}());
var UserInfo = /** @class */ (function () {
    function UserInfo() {
    }
    return UserInfo;
}());
var ContentInfo = /** @class */ (function () {
    function ContentInfo() {
    }
    return ContentInfo;
}());
var PathInfoEntity = /** @class */ (function () {
    function PathInfoEntity() {
    }
    return PathInfoEntity;
}());
var PathElementEntity = /** @class */ (function () {
    function PathElementEntity() {
    }
    return PathElementEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PermissionStyleModel = /** @class */ (function () {
    function PermissionStyleModel(css, permission, isFile, isFolder) {
        if (isFile === void 0) { isFile = true; }
        if (isFolder === void 0) { isFolder = true; }
        this.isFolder = true;
        this.isFile = true;
        this.css = css;
        this.permission = permission;
        this.isFile = isFile;
        this.isFolder = isFolder;
    }
    return PermissionStyleModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FileUploadingListComponent = /** @class */ (function () {
    function FileUploadingListComponent(uploadService, nodesApi, translateService) {
        this.uploadService = uploadService;
        this.nodesApi = nodesApi;
        this.translateService = translateService;
        this.FileUploadStatus = FileUploadStatus;
        this.files = [];
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
    }
    /**
     * Cancel file upload
     *
     * @param file File model to cancel upload for.
     *
     * @memberOf FileUploadingListComponent
     */
    /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelFile = /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    function (file) {
        this.uploadService.cancelUpload(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadingListComponent.prototype.removeFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.deleteNode(file)
            .subscribe(function () {
            if (file.status === FileUploadStatus.Error) {
                _this.notifyError(file);
            }
            _this.uploadService.cancelUpload(file);
        });
    };
    /**
     * Call the appropriate method for each file, depending on state
     */
    /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelAllFiles = /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    function () {
        var _this = this;
        this.getUploadingFiles()
            .forEach(function (file) { return _this.uploadService.cancelUpload(file); });
        /** @type {?} */
        var deletedFiles = this.files
            .filter(function (file) { return file.status === FileUploadStatus.Complete; })
            .map(function (file) { return _this.deleteNode(file); });
        forkJoin.apply(void 0, __spread(deletedFiles)).subscribe(function (files) {
            var _a;
            /** @type {?} */
            var errors = files
                .filter(function (file) { return file.status === FileUploadStatus.Error; });
            if (errors.length) {
                _this.notifyError.apply(_this, __spread(errors));
            }
            (_a = _this.uploadService).cancelUpload.apply(_a, __spread(files));
        });
    };
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     */
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    FileUploadingListComponent.prototype.isUploadCompleted = /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    function () {
        return !this.isUploadCancelled() &&
            Boolean(this.files.length) &&
            !this.files
                .some(function (_a) {
                var status = _a.status;
                return status === FileUploadStatus.Starting ||
                    status === FileUploadStatus.Progress ||
                    status === FileUploadStatus.Pending;
            });
    };
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     */
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    FileUploadingListComponent.prototype.isUploadCancelled = /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    function () {
        return !!this.files.length &&
            this.files
                .every(function (_a) {
                var status = _a.status;
                return status === FileUploadStatus.Aborted ||
                    status === FileUploadStatus.Cancelled ||
                    status === FileUploadStatus.Deleted;
            });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadingListComponent.prototype.deleteNode = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var id = file.data.entry.id;
        return this.nodesApi
            .deleteNode(id, { permanent: true })
            .pipe(map(function () {
            file.status = FileUploadStatus.Deleted;
            return file;
        }), catchError(function () {
            file.status = FileUploadStatus.Error;
            return of(file);
        }));
    };
    /**
     * @param {...?} files
     * @return {?}
     */
    FileUploadingListComponent.prototype.notifyError = /**
     * @param {...?} files
     * @return {?}
     */
    function () {
        var files = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            files[_i] = arguments[_i];
        }
        /** @type {?} */
        var messageError = null;
        if (files.length === 1) {
            messageError = this.translateService
                .instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
        }
        else {
            messageError = this.translateService
                .instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
        }
        this.error.emit(messageError);
    };
    /**
     * @return {?}
     */
    FileUploadingListComponent.prototype.getUploadingFiles = /**
     * @return {?}
     */
    function () {
        return this.files.filter(function (item) {
            if (item.status === FileUploadStatus.Pending ||
                item.status === FileUploadStatus.Progress ||
                item.status === FileUploadStatus.Starting) {
                return item;
            }
        });
    };
    FileUploadingListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-file-uploading-list',
                    template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                    styles: [":host{display:flex;flex-direction:column}"]
                }] }
    ];
    /** @nocollapse */
    FileUploadingListComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: NodesApiService },
        { type: TranslationService }
    ]; };
    FileUploadingListComponent.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        files: [{ type: Input }],
        error: [{ type: Output }]
    };
    return FileUploadingListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FileUploadingDialogComponent = /** @class */ (function () {
    function FileUploadingDialogComponent(uploadService, changeDetecor) {
        this.uploadService = uploadService;
        this.changeDetecor = changeDetecor;
        /**
         * Dialog position. Can be 'left' or 'right'.
         */
        this.position = 'right';
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.isDialogMinimized = false;
        this.isConfirmation = false;
    }
    /**
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.listSubscription = this.uploadService
            .queueChanged.subscribe(function (fileList) {
            _this.filesUploadingList = fileList;
            if (_this.filesUploadingList.length) {
                _this.isDialogActive = true;
            }
        });
        this.counterSubscription = merge(this.uploadService.fileUploadComplete, this.uploadService.fileUploadDeleted)
            .subscribe(function (event) {
            _this.totalCompleted = event.totalComplete;
            _this.changeDetecor.detectChanges();
        });
        this.errorSubscription = this.uploadService.fileUploadError
            .subscribe(function (event) {
            _this.totalErrors = event.totalError;
            _this.changeDetecor.detectChanges();
        });
        this.fileUploadSubscription = this.uploadService
            .fileUpload.subscribe(function () {
            _this.changeDetecor.detectChanges();
        });
        this.uploadService.fileDeleted.subscribe(function (objId) {
            if (_this.filesUploadingList) {
                /** @type {?} */
                var file = _this.filesUploadingList.find(function (item) {
                    return item.data.entry.id === objId;
                });
                if (file) {
                    file.status = FileUploadStatus.Cancelled;
                    _this.changeDetecor.detectChanges();
                }
            }
        });
    };
    /**
     * Toggle confirmation message.
     */
    /**
     * Toggle confirmation message.
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.toggleConfirmation = /**
     * Toggle confirmation message.
     * @return {?}
     */
    function () {
        this.isConfirmation = !this.isConfirmation;
        if (this.isDialogMinimized) {
            this.isDialogMinimized = false;
        }
    };
    /**
     * Cancel uploads and hide confiramtion
     */
    /**
     * Cancel uploads and hide confiramtion
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.cancelAllUploads = /**
     * Cancel uploads and hide confiramtion
     * @return {?}
     */
    function () {
        this.toggleConfirmation();
        this.uploadList.cancelAllFiles();
    };
    /**
     * Toggle dialog minimized state.
     */
    /**
     * Toggle dialog minimized state.
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.toggleMinimized = /**
     * Toggle dialog minimized state.
     * @return {?}
     */
    function () {
        this.isDialogMinimized = !this.isDialogMinimized;
        this.changeDetecor.detectChanges();
    };
    /**
     * Dismiss dialog
     */
    /**
     * Dismiss dialog
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.close = /**
     * Dismiss dialog
     * @return {?}
     */
    function () {
        this.isConfirmation = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.isDialogMinimized = false;
        this.uploadService.clearQueue();
        this.changeDetecor.detectChanges();
    };
    /**
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uploadService.clearQueue();
        this.listSubscription.unsubscribe();
        this.counterSubscription.unsubscribe();
        this.fileUploadSubscription.unsubscribe();
        this.errorSubscription.unsubscribe();
    };
    FileUploadingDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-file-uploading-dialog, file-uploading-dialog',
                    template: "<div *ngIf=\"isDialogActive\"\n     class=\"upload-dialog\"\n     id=\"upload-dialog\"\n     [class.upload-dialog--minimized]=\"isDialogMinimized\"\n     [class.upload-dialog--position-left]=\"position === 'left'\"\n     [class.upload-dialog--position-right]=\"position === 'right'\">\n    <header class=\"upload-dialog__header\">\n        <button\n            mat-button\n            color=\"secondary\"\n            [disabled]=\"isConfirmation\"\n            (click)=\"toggleMinimized()\">\n            <mat-icon\n                mat-list-icon\n                title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n            </mat-icon>\n        </button>\n\n        <span\n            class=\"upload-dialog__title\"\n            *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            class=\"upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCompleted()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_COMPLETED'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            class=\"upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n        </span>\n    </header>\n\n    <section class=\"upload-dialog__info\"\n        *ngIf=\"totalErrors\">\n        {{\n            (totalErrors > 1\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                 | translate: { total: totalErrors }\n        }}\n    </section>\n\n    <section class=\"upload-dialog__content\"\n        [class.upload-dialog--padding]=\"isConfirmation\">\n        <adf-file-uploading-list\n            [class.upload-dialog--hide]=\"isConfirmation\"\n            #uploadList\n            [files]=\"filesUploadingList\">\n                <ng-template let-file=\"$implicit\">\n                     <adf-file-uploading-list-row\n                        [file]=\"file\"\n                        (remove)=\"uploadList.removeFile(file)\"\n                        (cancel)=\"uploadList.cancelFile(file)\">\n                    </adf-file-uploading-list-row>\n                </ng-template>\n        </adf-file-uploading-list>\n\n        <div\n            class=\"upload-dialog__confirmation\"\n            [class.upload-dialog--hide]=\"!isConfirmation\">\n                <p class=\"upload-dialog__confirmation--title\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                </p>\n\n                <p class=\"upload-dialog__confirmation--text\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                </p>\n        </div>\n    </section>\n\n    <footer class=\"upload-dialog__actions\"\n            *ngIf=\"!isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel-all\"\n            color=\"primary\"\n            mat-button\n            *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}\n        </button>\n\n        <button\n            id=\"adf-upload-dialog-close\"\n            *ngIf=\"uploadList.isUploadCompleted() || uploadList.isUploadCancelled()\"\n            mat-button\n            color=\"primary\"\n            (click)=\"close()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}\n        </button>\n    </footer>\n\n    <footer class=\"upload-dialog__actions\"\n            *ngIf=\"isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel\"\n            color=\"secondary\"\n            mat-button\n            (click)=\"cancelAllUploads()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}\n        </button>\n\n        <button\n            id=\"adf-upload-dialog-confirm\"\n            mat-button\n            color=\"primary\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}\n        </button>\n    </footer>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FileUploadingDialogComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: ChangeDetectorRef }
    ]; };
    FileUploadingDialogComponent.propDecorators = {
        uploadList: [{ type: ViewChild, args: ['uploadList',] }],
        position: [{ type: Input }],
        error: [{ type: Output }]
    };
    return FileUploadingDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FileUploadingListRowComponent = /** @class */ (function () {
    function FileUploadingListRowComponent() {
        this.cancel = new EventEmitter();
        this.remove = new EventEmitter();
        this.FileUploadStatus = FileUploadStatus;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadingListRowComponent.prototype.onCancel = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.cancel.emit(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadingListRowComponent.prototype.onRemove = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.remove.emit(file);
    };
    FileUploadingListRowComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-file-uploading-list-row',
                    template: "<div class=\"adf-file-uploading-row\">\n    <mat-icon\n        mat-list-icon\n        class=\"adf-file-uploading-row__type\">\n        insert_drive_file\n    </mat-icon>\n\n    <span\n        class=\"adf-file-uploading-row__name\"\n        title=\"{{ file.name }}\">\n        {{ file.name }}\n    </span>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Progress || file.status === FileUploadStatus.Starting\"\n        (click)=\"onCancel(file)\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\">\n        <span class=\"adf-file-uploading-row__status\">\n            {{ file.progress.loaded | adfFileSize }} / {{ file.progress.total | adfFileSize }}\n        </span>\n\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--cancel\">\n            clear\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Complete\"\n        (click)=\"onRemove(file)\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE' | translate }}\">\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--done\">\n            check_circle\n        </mat-icon>\n\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Pending\"\n        (click)=\"onCancel(file)\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\">\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--pending\">\n            schedule\n        </mat-icon>\n\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Error\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--error\">\n        <mat-icon mat-list-icon>\n            report_problem\n        </mat-icon>\n    </div>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Cancelled  ||\n            file.status === FileUploadStatus.Aborted ||\n            file.status === FileUploadStatus.Deleted\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--cancelled\">\n        {{ 'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate }}\n    </div>\n<div>\n",
                    styles: [""]
                }] }
    ];
    FileUploadingListRowComponent.propDecorators = {
        file: [{ type: Input }],
        cancel: [{ type: Output }],
        remove: [{ type: Output }]
    };
    return FileUploadingListRowComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var UploadFilesEvent = /** @class */ (function () {
    function UploadFilesEvent(files, uploadService, callback) {
        this.files = files;
        this.uploadService = uploadService;
        this.callback = callback;
        this.isDefaultPrevented = false;
    }
    Object.defineProperty(UploadFilesEvent.prototype, "defaultPrevented", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDefaultPrevented;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UploadFilesEvent.prototype.preventDefault = /**
     * @return {?}
     */
    function () {
        this.isDefaultPrevented = true;
    };
    /**
     * @return {?}
     */
    UploadFilesEvent.prototype.pauseUpload = /**
     * @return {?}
     */
    function () {
        this.preventDefault();
    };
    /**
     * @return {?}
     */
    UploadFilesEvent.prototype.resumeUpload = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.files && this.files.length > 0) {
            (_a = this.uploadService).addToQueue.apply(_a, __spread(this.files));
            this.uploadService.uploadFilesInTheQueue(this.callback);
        }
    };
    return UploadFilesEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var UploadBase = /** @class */ (function () {
    function UploadBase(uploadService, translationService, ngZone) {
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.ngZone = ngZone;
        /**
         * The ID of the root. Use the nodeId for
         * Content Services or the taskId/processId for Process Services.
         */
        this.rootFolderId = '-root-';
        /**
         * Toggles component disabled state (if there is no node permission checking).
         */
        this.disabled = false;
        /**
         * Filter for accepted file types.
         */
        this.acceptedFilesType = '*';
        /**
         * Toggles versioning.
         */
        this.versioning = false;
        /**
         * majorVersion boolean field to true to indicate a major version should be created.
         */
        this.majorVersion = false;
        /**
         * Custom node type for uploaded file
         */
        this.nodeType = 'cm:content';
        /**
         * Emitted when the file is uploaded successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when a folder is created.
         * @deprecated 2.4.0 No longer used by the framework
         */
        this.createFolder = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the upload begins.
         */
        this.beginUpload = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    UploadBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.uploadService.fileUploadError.subscribe(function (error) {
            _this.error.emit(error);
        }));
    };
    /**
     * @return {?}
     */
    UploadBase.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
    };
    /**
     * Upload a list of file in the specified path
     * @param files
     * @param path
     */
    /**
     * Upload a list of file in the specified path
     * @param {?} files
     * @return {?}
     */
    UploadBase.prototype.uploadFiles = /**
     * Upload a list of file in the specified path
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filteredFiles = files
            .map(function (file) {
            return _this.createFileModel(file, _this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
        });
        this.uploadQueue(filteredFiles);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    UploadBase.prototype.uploadFilesInfo = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filteredFiles = files
            .map(function (fileInfo) {
            return _this.createFileModel(fileInfo.file, _this.rootFolderId, fileInfo.relativeFolder);
        });
        this.uploadQueue(filteredFiles);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    UploadBase.prototype.uploadQueue = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filteredFiles = files
            .filter(this.isFileAcceptable.bind(this))
            .filter(this.isFileSizeAcceptable.bind(this));
        this.ngZone.run(function () {
            var _a;
            /** @type {?} */
            var event = new UploadFilesEvent(__spread(filteredFiles), _this.uploadService, _this.success);
            _this.beginUpload.emit(event);
            if (!event.defaultPrevented) {
                if (filteredFiles.length > 0) {
                    (_a = _this.uploadService).addToQueue.apply(_a, __spread(filteredFiles));
                    _this.uploadService.uploadFilesInTheQueue(_this.success);
                }
            }
        });
    };
    /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param file FileModel
     */
    /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param {?} file FileModel
     * @return {?}
     */
    UploadBase.prototype.isFileAcceptable = /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param {?} file FileModel
     * @return {?}
     */
    function (file) {
        if (this.acceptedFilesType === '*') {
            return true;
        }
        /** @type {?} */
        var allowedExtensions = this.acceptedFilesType
            .split(',')
            .map(function (ext) { return ext.replace(/^\./, ''); });
        if (allowedExtensions.indexOf(file.extension) !== -1) {
            return true;
        }
        return false;
    };
    /**
     * Creates FileModel from File
     *
     * @param file
     */
    /**
     * Creates FileModel from File
     *
     * @param {?} file
     * @param {?} parentId
     * @param {?} path
     * @param {?=} id
     * @return {?}
     */
    UploadBase.prototype.createFileModel = /**
     * Creates FileModel from File
     *
     * @param {?} file
     * @param {?} parentId
     * @param {?} path
     * @param {?=} id
     * @return {?}
     */
    function (file, parentId, path, id) {
        return new FileModel(file, {
            comment: this.comment,
            majorVersion: this.majorVersion,
            newVersion: this.versioning,
            parentId: parentId,
            path: path,
            nodeType: this.nodeType
        }, id);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadBase.prototype.isFileSizeAllowed = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var isFileSizeAllowed = true;
        if (this.isMaxFileSizeDefined()) {
            isFileSizeAllowed = this.isFileSizeCorrect(file);
        }
        return isFileSizeAllowed;
    };
    /**
     * @return {?}
     */
    UploadBase.prototype.isMaxFileSizeDefined = /**
     * @return {?}
     */
    function () {
        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadBase.prototype.isFileSizeCorrect = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
    };
    /**
     * Checks if the given file is an acceptable size
     *
     * @param {?} file FileModel
     * @return {?}
     */
    UploadBase.prototype.isFileSizeAcceptable = /**
     * Checks if the given file is an acceptable size
     *
     * @param {?} file FileModel
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var acceptableSize = true;
        if (!this.isFileSizeAllowed(file)) {
            acceptableSize = false;
            /** @type {?} */
            var message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
            this.error.emit(message);
        }
        return acceptableSize;
    };
    UploadBase.propDecorators = {
        maxFilesSize: [{ type: Input }],
        rootFolderId: [{ type: Input }],
        disabled: [{ type: Input }],
        acceptedFilesType: [{ type: Input }],
        versioning: [{ type: Input }],
        majorVersion: [{ type: Input }],
        comment: [{ type: Input }],
        nodeType: [{ type: Input }],
        success: [{ type: Output }],
        createFolder: [{ type: Output }],
        error: [{ type: Output }],
        beginUpload: [{ type: Output }]
    };
    return UploadBase;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var UploadButtonComponent = /** @class */ (function (_super) {
    __extends(UploadButtonComponent, _super);
    function UploadButtonComponent(uploadService, contentService, translationService, logService, ngZone) {
        var _this = _super.call(this, uploadService, translationService, ngZone) || this;
        _this.uploadService = uploadService;
        _this.contentService = contentService;
        _this.translationService = translationService;
        _this.logService = logService;
        _this.ngZone = ngZone;
        /**
         * Allows/disallows upload folders (only for Chrome).
         */
        _this.uploadFolders = false;
        /**
         * Allows/disallows multiple files
         */
        _this.multipleFiles = false;
        /**
         * Custom tooltip text.
         */
        _this.tooltip = null;
        /**
         * Emitted when create permission is missing.
         */
        _this.permissionEvent = new EventEmitter();
        _this.hasPermission = false;
        _this.permissionValue = new Subject();
        return _this;
    }
    /**
     * @return {?}
     */
    UploadButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.permissionValue.subscribe(function (permission) {
            _this.hasPermission = permission;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    UploadButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var rootFolderId = changes['rootFolderId'];
        if (rootFolderId && rootFolderId.currentValue) {
            this.checkPermission();
        }
    };
    /**
     * @return {?}
     */
    UploadButtonComponent.prototype.isButtonDisabled = /**
     * @return {?}
     */
    function () {
        return this.disabled ? true : undefined;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    UploadButtonComponent.prototype.onFilesAdded = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var files = FileUtils.toFileArray($event.currentTarget.files);
        if (this.hasPermission) {
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        // reset the value of the input file
        $event.target.value = '';
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    UploadButtonComponent.prototype.onDirectoryAdded = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.hasPermission) {
            /** @type {?} */
            var files = FileUtils.toFileArray($event.currentTarget.files);
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        // reset the value of the input file
        $event.target.value = '';
    };
    /**
     * @return {?}
     */
    UploadButtonComponent.prototype.checkPermission = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.rootFolderId) {
            /** @type {?} */
            var opts = {
                includeSource: true,
                include: ['allowableOperations']
            };
            this.contentService.getNode(this.rootFolderId, opts).subscribe(function (res) { return _this.permissionValue.next(_this.nodeHasPermission(res.entry, PermissionsEnum.CREATE)); }, function (error) { return _this.error.emit(error); });
        }
    };
    /**
     * @param {?} node
     * @param {?} permission
     * @return {?}
     */
    UploadButtonComponent.prototype.nodeHasPermission = /**
     * @param {?} node
     * @param {?} permission
     * @return {?}
     */
    function (node, permission) {
        return this.contentService.hasPermission(node, permission);
    };
    UploadButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-upload-button',
                    template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <a *ngIf=\"!uploadFolders\"\n        [disabled]=\"isButtonDisabled()\"\n        mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n\n        <!--Multiple Files Upload-->\n        <span *ngIf=\"multipleFiles\">\n            <label\n                id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-multiple-files\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n\n        <!--Single Files Upload-->\n        <span *ngIf=\"!multipleFiles\">\n            <label\n                id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-single-file\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n    </a>\n\n    <!--Folders Upload-->\n    <a *ngIf=\"uploadFolders\"\n        [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n        <label\n            id=\"uploadFolder-label\"\n            *ngIf=\"!staticTitle\"\n            for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n        <label\n            id=\"uploadFolder-label-static\"\n            *ngIf=\"staticTitle\"\n            for=\"uploadFolder\">{{ staticTitle }}</label>\n        <input #uploadFolders\n            id=\"uploadFolder\"\n            data-automation-id=\"uploadFolder\"\n            type=\"file\"\n            name=\"uploadFiles\"\n            multiple=\"multiple\"\n            accept=\"{{acceptedFilesType}}\"\n            webkitdirectory directory\n            [attr.disabled]=\"isButtonDisabled()\"\n            [title]=\"tooltip\"\n            (change)=\"onDirectoryAdded($event)\">\n    </a>\n</form>\n",
                    viewProviders: [
                        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(function () { return UploadButtonComponent; }) }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-upload-button-file-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}"]
                }] }
    ];
    /** @nocollapse */
    UploadButtonComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: ContentService },
        { type: TranslationService },
        { type: LogService },
        { type: NgZone }
    ]; };
    UploadButtonComponent.propDecorators = {
        uploadFolders: [{ type: Input }],
        multipleFiles: [{ type: Input }],
        staticTitle: [{ type: Input }],
        tooltip: [{ type: Input }],
        permissionEvent: [{ type: Output }]
    };
    return UploadButtonComponent;
}(UploadBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var UploadVersionButtonComponent = /** @class */ (function (_super) {
    __extends(UploadVersionButtonComponent, _super);
    function UploadVersionButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    UploadVersionButtonComponent.prototype.createFileModel = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var fileModel = _super.prototype.createFileModel.call(this, file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''), this.node.id);
        if (!this.isFileAcceptable(fileModel)) {
            /** @type {?} */
            var message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');
            this.error.emit(message);
        }
        return fileModel;
    };
    /**
     * @return {?}
     */
    UploadVersionButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.checkPermission();
    };
    /**
     * @return {?}
     */
    UploadVersionButtonComponent.prototype.checkPermission = /**
     * @return {?}
     */
    function () {
        this.permissionValue.next(this.nodeHasPermission(this.node, PermissionsEnum.UPDATE));
    };
    UploadVersionButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-upload-version-button',
                    template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <a *ngIf=\"!uploadFolders\"\n        [disabled]=\"isButtonDisabled()\"\n        mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n\n        <!--Multiple Files Upload-->\n        <span *ngIf=\"multipleFiles\">\n            <label\n                id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-multiple-files\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n\n        <!--Single Files Upload-->\n        <span *ngIf=\"!multipleFiles\">\n            <label\n                id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-single-file\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n    </a>\n\n    <!--Folders Upload-->\n    <a *ngIf=\"uploadFolders\"\n        [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n        <label\n            id=\"uploadFolder-label\"\n            *ngIf=\"!staticTitle\"\n            for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n        <label\n            id=\"uploadFolder-label-static\"\n            *ngIf=\"staticTitle\"\n            for=\"uploadFolder\">{{ staticTitle }}</label>\n        <input #uploadFolders\n            id=\"uploadFolder\"\n            data-automation-id=\"uploadFolder\"\n            type=\"file\"\n            name=\"uploadFiles\"\n            multiple=\"multiple\"\n            accept=\"{{acceptedFilesType}}\"\n            webkitdirectory directory\n            [attr.disabled]=\"isButtonDisabled()\"\n            [title]=\"tooltip\"\n            (change)=\"onDirectoryAdded($event)\">\n    </a>\n</form>\n",
                    viewProviders: [
                        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(function () { return UploadVersionButtonComponent; }) }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-upload-button-file-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}"]
                }] }
    ];
    UploadVersionButtonComponent.propDecorators = {
        node: [{ type: Input }]
    };
    return UploadVersionButtonComponent;
}(UploadButtonComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var UploadDragAreaComponent = /** @class */ (function (_super) {
    __extends(UploadDragAreaComponent, _super);
    function UploadDragAreaComponent(uploadService, translationService, notificationService, contentService, ngZone) {
        var _this = _super.call(this, uploadService, translationService, ngZone) || this;
        _this.uploadService = uploadService;
        _this.translationService = translationService;
        _this.notificationService = notificationService;
        _this.contentService = contentService;
        _this.ngZone = ngZone;
        return _this;
    }
    Object.defineProperty(UploadDragAreaComponent.prototype, "parentId", {
        /**
         * ID of parent folder node
         * @deprecated 2.4.0 - use rootFolderId ID of parent folder node
         */
        set: /**
         * ID of parent folder node
         * @deprecated 2.4.0 - use rootFolderId ID of parent folder node
         * @param {?} nodeId
         * @return {?}
         */
        function (nodeId) {
            this.rootFolderId = nodeId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method called when files are dropped in the drag area.
     *
     * @param files - files dropped in the drag area.
     */
    /**
     * Method called when files are dropped in the drag area.
     *
     * @param {?} files - files dropped in the drag area.
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onFilesDropped = /**
     * Method called when files are dropped in the drag area.
     *
     * @param {?} files - files dropped in the drag area.
     * @return {?}
     */
    function (files) {
        if (!this.disabled && files.length) {
            this.uploadFiles(files);
        }
    };
    /**
     * Called when the file are dropped in the drag area.
     * @deprecated in 2.4.0: use `onFilesDropped` instead
     * @param item - FileEntity
     */
    /**
     * Called when the file are dropped in the drag area.
     * @deprecated in 2.4.0: use `onFilesDropped` instead
     * @param {?} item - FileEntity
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onFilesEntityDropped = /**
     * Called when the file are dropped in the drag area.
     * @deprecated in 2.4.0: use `onFilesDropped` instead
     * @param {?} item - FileEntity
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (!this.disabled) {
            item.file(function (file) {
                // const fileModel = this.createFileModel(file, this.rootFolderId, item.fullPath.replace(item.name, ''));
                // const fileModel = this.createFileModel(file, this.rootFolderId, item.fullPath.replace(item.name, ''));
                _this.uploadFiles([file]);
            });
        }
    };
    /**
     * Called when a folder are dropped in the drag area
     *
     * @param folder - name of the dropped folder
     */
    /**
     * Called when a folder are dropped in the drag area
     *
     * @param {?} folder - name of the dropped folder
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onFolderEntityDropped = /**
     * Called when a folder are dropped in the drag area
     *
     * @param {?} folder - name of the dropped folder
     * @return {?}
     */
    function (folder) {
        var _this = this;
        if (!this.disabled && folder.isDirectory) {
            FileUtils.flattern(folder).then(function (filesInfo) {
                _this.uploadFilesInfo(filesInfo);
            });
        }
    };
    /**
     * Show undo notification bar.
     *
     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     */
    /**
     * Show undo notification bar.
     *
     * @param {?} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     * @return {?}
     */
    UploadDragAreaComponent.prototype.showUndoNotificationBar = /**
     * Show undo notification bar.
     *
     * @param {?} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     * @return {?}
     */
    function (latestFilesAdded) {
        var _this = this;
        /** @type {?} */
        var messageTranslate;
        /** @type {?} */
        var actionTranslate;
        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(function () {
            var _a;
            (_a = _this.uploadService).cancelUpload.apply(_a, __spread(latestFilesAdded));
        });
    };
    /** Returns true or false considering the component options and node permissions */
    /**
     * Returns true or false considering the component options and node permissions
     * @return {?}
     */
    UploadDragAreaComponent.prototype.isDroppable = /**
     * Returns true or false considering the component options and node permissions
     * @return {?}
     */
    function () {
        return !this.disabled;
    };
    /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param event DOM event
     */
    /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param {?} event DOM event
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onUploadFiles = /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param {?} event DOM event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
        /** @type {?} */
        var isAllowed = this.contentService.hasPermission(event.detail.data.obj.entry, PermissionsEnum.CREATE);
        if (isAllowed) {
            /** @type {?} */
            var fileInfo = event.detail.files;
            if (this.isTargetNodeFolder(event)) {
                /** @type {?} */
                var destinationFolderName_1 = event.detail.data.obj.entry.name;
                fileInfo.map(function (file) { return file.relativeFolder = destinationFolderName_1 ? destinationFolderName_1.concat(file.relativeFolder) : file.relativeFolder; });
            }
            if (fileInfo && fileInfo.length > 0) {
                this.uploadFilesInfo(fileInfo);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDragAreaComponent.prototype.isTargetNodeFolder = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;
    };
    UploadDragAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-upload-drag-area',
                    template: "<div [file-draggable]=\"isDroppable()\" class=\"upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($event)\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n",
                    host: { 'class': 'adf-upload-drag-area' },
                    viewProviders: [
                        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(function () { return UploadDragAreaComponent; }) }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: ["adf-upload-drag-area{overflow:hidden}.upload-border{vertical-align:middle;text-align:center;width:100%;box-sizing:border-box}.file-draggable__input-focus{color:#2196f3;border:1px dashed #2196f3}"]
                }] }
    ];
    /** @nocollapse */
    UploadDragAreaComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: TranslationService },
        { type: NotificationService },
        { type: ContentService },
        { type: NgZone }
    ]; };
    UploadDragAreaComponent.propDecorators = {
        parentId: [{ type: Input }]
    };
    return UploadDragAreaComponent;
}(UploadBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FileDraggableDirective = /** @class */ (function () {
    function FileDraggableDirective(el, ngZone) {
        this.ngZone = ngZone;
        /**
         * Enables/disables drag-and-drop functionality.
         */
        this.enabled = true;
        /**
         * Emitted when one or more files are dragged and dropped onto the draggable element.
         */
        this.filesDropped = new EventEmitter();
        /**
         * Emitted when one or more files are dragged and dropped onto the draggable element.
         * @deprecated in 2.4.0: use `filesDropped` instead
         */
        this.filesEntityDropped = new EventEmitter();
        /**
         * Emitted when a directory is dragged and dropped onto the draggable element.
         */
        this.folderEntityDropped = new EventEmitter();
        this.cssClassName = 'file-draggable__input-focus';
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    FileDraggableDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.element.addEventListener('dragenter', _this.onDragEnter.bind(_this));
            _this.element.addEventListener('dragover', _this.onDragOver.bind(_this));
            _this.element.addEventListener('dragleave', _this.onDragLeave.bind(_this));
            _this.element.addEventListener('drop', _this.onDropFiles.bind(_this));
        });
    };
    /**
     * @return {?}
     */
    FileDraggableDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.element.removeEventListener('dragenter', this.onDragEnter);
        this.element.removeEventListener('dragover', this.onDragOver);
        this.element.removeEventListener('dragleave', this.onDragLeave);
        this.element.removeEventListener('drop', this.onDropFiles);
    };
    /**
     * Method called when files is dropped in the drag and drop area.
     * @param event DOM event.
     */
    /**
     * Method called when files is dropped in the drag and drop area.
     * @param {?} event DOM event.
     * @return {?}
     */
    FileDraggableDirective.prototype.onDropFiles = /**
     * Method called when files is dropped in the drag and drop area.
     * @param {?} event DOM event.
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            /** @type {?} */
            var items = event.dataTransfer.items;
            if (items) {
                /** @type {?} */
                var files = [];
                for (var i = 0; i < items.length; i++) {
                    if (items[i].webkitGetAsEntry) {
                        /** @type {?} */
                        var item = items[i].webkitGetAsEntry();
                        if (item) {
                            if (item.isFile) {
                                /** @type {?} */
                                var file = items[i].getAsFile();
                                if (file) {
                                    files.push(file);
                                }
                            }
                            else if (item.isDirectory) {
                                this.folderEntityDropped.emit(item);
                            }
                        }
                    }
                }
                if (files.length > 0) {
                    this.filesDropped.emit(files);
                }
            }
            else {
                /** @type {?} */
                var files = FileUtils.toFileArray(event.dataTransfer.files);
                this.filesDropped.emit(files);
            }
            this.element.classList.remove(this.cssClassName);
        }
    };
    /**
     * Change the style of the drag area when a file drag in.
     *
     * @param event - DOM event.
     */
    /**
     * Change the style of the drag area when a file drag in.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    FileDraggableDirective.prototype.onDragEnter = /**
     * Change the style of the drag area when a file drag in.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.add(this.cssClassName);
        }
    };
    /**
     * Change the style of the drag area when a file drag out.
     *
     * @param event - DOM event.
     */
    /**
     * Change the style of the drag area when a file drag out.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    FileDraggableDirective.prototype.onDragLeave = /**
     * Change the style of the drag area when a file drag out.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.remove(this.cssClassName);
        }
    };
    /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param event
     */
    /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param {?} event
     * @return {?}
     */
    FileDraggableDirective.prototype.onDragOver = /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.add(this.cssClassName);
        }
    };
    /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param $event - DOM event.
     */
    /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param {?} event
     * @return {?}
     */
    FileDraggableDirective.prototype.preventDefault = /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileDraggableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[file-draggable]'
                },] }
    ];
    /** @nocollapse */
    FileDraggableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    FileDraggableDirective.propDecorators = {
        enabled: [{ type: Input, args: ['file-draggable',] }],
        filesDropped: [{ type: Output }],
        filesEntityDropped: [{ type: Output }],
        folderEntityDropped: [{ type: Output }]
    };
    return FileDraggableDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var UploadModule = /** @class */ (function () {
    function UploadModule() {
    }
    UploadModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        MaterialModule
                    ],
                    declarations: [
                        FileDraggableDirective,
                        UploadDragAreaComponent,
                        UploadButtonComponent,
                        UploadVersionButtonComponent,
                        FileUploadingDialogComponent,
                        FileUploadingListComponent,
                        FileUploadingListRowComponent
                    ],
                    exports: [
                        FileDraggableDirective,
                        UploadDragAreaComponent,
                        UploadButtonComponent,
                        UploadVersionButtonComponent,
                        FileUploadingDialogComponent,
                        FileUploadingListComponent,
                        FileUploadingListRowComponent
                    ]
                },] }
    ];
    return UploadModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DocumentListModule = /** @class */ (function () {
    function DocumentListModule() {
    }
    DocumentListModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        FlexLayoutModule,
                        MaterialModule,
                        UploadModule
                    ],
                    declarations: [
                        DocumentListComponent,
                        ContentColumnComponent,
                        ContentColumnListComponent,
                        ContentActionComponent,
                        ContentActionListComponent,
                        EmptyFolderContentDirective,
                        NoPermissionContentDirective
                    ],
                    exports: [
                        DocumentListComponent,
                        ContentColumnComponent,
                        ContentColumnListComponent,
                        ContentActionComponent,
                        ContentActionListComponent,
                        EmptyFolderContentDirective,
                        NoPermissionContentDirective
                    ]
                },] }
    ];
    return DocumentListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchQueryBuilderService = /** @class */ (function () {
    function SearchQueryBuilderService(appConfig, alfrescoApiService) {
        this.appConfig = appConfig;
        this.alfrescoApiService = alfrescoApiService;
        this._userQuery = '';
        this.updated = new Subject();
        this.executed = new Subject();
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.paging = null;
        this.sorting = [];
        this.userFacetQueries = [];
        this.userFacetBuckets = {};
        // TODO: to be supported in future iterations
        this.ranges = {};
        this.resetToDefaults();
    }
    Object.defineProperty(SearchQueryBuilderService.prototype, "userQuery", {
        get: /**
         * @return {?}
         */
        function () {
            return this._userQuery;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = (value || '').trim();
            this._userQuery = value ? "(" + value + ")" : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.resetToDefaults = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var template = this.appConfig.get('search');
        if (template) {
            this.config = JSON.parse(JSON.stringify(template));
            this.categories = (this.config.categories || []).filter(function (category) { return category.enabled; });
            this.filterQueries = this.config.filterQueries || [];
            this.userFacetBuckets = {};
            this.userFacetQueries = [];
            if (this.config.sorting) {
                this.sorting = this.config.sorting.defaults || [];
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addUserFacetQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            /** @type {?} */
            var existing = this.userFacetQueries.find(function (facetQuery) { return facetQuery.label === query.label; });
            if (existing) {
                existing.query = query.query;
            }
            else {
                this.userFacetQueries.push(__assign({}, query));
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeUserFacetQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            this.userFacetQueries = this.userFacetQueries
                .filter(function (facetQuery) { return facetQuery.label !== query.label; });
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addUserFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            var buckets = this.userFacetBuckets[field.field] || [];
            /** @type {?} */
            var existing = buckets.find(function (facetBucket) { return facetBucket.label === bucket.label; });
            if (!existing) {
                buckets.push(bucket);
            }
            this.userFacetBuckets[field.field] = buckets;
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getUserFacetBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.userFacetBuckets[field] || [];
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeUserFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            var buckets = this.userFacetBuckets[field.field] || [];
            this.userFacetBuckets[field.field] = buckets
                .filter(function (facetBucket) { return facetBucket.label !== bucket.label; });
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addFilterQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            /** @type {?} */
            var existing = this.filterQueries.find(function (filterQuery) { return filterQuery.query === query; });
            if (!existing) {
                this.filterQueries.push({ query: query });
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeFilterQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            this.filterQueries = this.filterQueries
                .filter(function (filterQuery) { return filterQuery.query !== query; });
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFacetQuery = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        if (label && this.hasFacetQueries) {
            /** @type {?} */
            var result = this.config.facetQueries.queries.find(function (query) { return query.label === label; });
            if (result) {
                return __assign({}, result);
            }
        }
        return null;
    };
    /**
     * @param {?} label
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFacetField = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        if (label) {
            /** @type {?} */
            var fields = this.config.facetFields.fields || [];
            /** @type {?} */
            var result = fields.find(function (field) { return field.label === label; });
            if (result) {
                return __assign({}, result);
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.update = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var query = this.buildQuery();
        this.updated.next(query);
    };
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.execute = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.buildQuery();
                        if (!query) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.alfrescoApiService.searchApi.search(query)];
                    case 1:
                        data = _a.sent();
                        this.executed.next(data);
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.buildQuery = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var query = this.getFinalQuery();
        /** @type {?} */
        var include = this.config.include || [];
        if (include.length === 0) {
            include.push('path', 'allowableOperations');
        }
        if (query) {
            /** @type {?} */
            var result = {
                query: {
                    query: query,
                    language: 'afts'
                },
                include: include,
                paging: this.paging,
                fields: this.config.fields,
                filterQueries: this.filterQueries,
                facetQueries: this.facetQueries,
                facetFields: this.facetFields,
                sort: this.sort
            };
            return result;
        }
        return null;
    };
    /**
     * Returns primary sorting definition.
     */
    /**
     * Returns primary sorting definition.
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getPrimarySorting = /**
     * Returns primary sorting definition.
     * @return {?}
     */
    function () {
        if (this.sorting && this.sorting.length > 0) {
            return this.sorting[0];
        }
        return null;
    };
    /**
     * Returns all pre-configured sorting options that users can choose from.
     */
    /**
     * Returns all pre-configured sorting options that users can choose from.
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getSortingOptions = /**
     * Returns all pre-configured sorting options that users can choose from.
     * @return {?}
     */
    function () {
        if (this.config && this.config.sorting) {
            return this.config.sorting.options || [];
        }
        return [];
    };
    Object.defineProperty(SearchQueryBuilderService.prototype, "hasFacetQueries", {
        /**
         * Check if FacetQueries has been defined
         */
        get: /**
         * Check if FacetQueries has been defined
         * @return {?}
         */
        function () {
            if (this.config
                && this.config.facetQueries
                && this.config.facetQueries.queries
                && this.config.facetQueries.queries.length > 0) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sorting.map(function (def) {
                return {
                    type: def.type,
                    field: def.field,
                    ascending: def.ascending
                };
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetQueries", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.hasFacetQueries) {
                return this.config.facetQueries.queries.map(function (query) {
                    return /** @type {?} */ (__assign({}, query));
                });
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFinalQuery = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var query = '';
        this.categories.forEach(function (facet) {
            /** @type {?} */
            var customQuery = _this.queryFragments[facet.id];
            if (customQuery) {
                if (query.length > 0) {
                    query += ' AND ';
                }
                query += "(" + customQuery + ")";
            }
        });
        /** @type {?} */
        var result = [this.userQuery, query]
            .filter(function (entry) { return entry; })
            .join(' AND ');
        if (this.userFacetQueries && this.userFacetQueries.length > 0) {
            /** @type {?} */
            var combined = this.userFacetQueries
                .map(function (userQuery) { return userQuery.query; })
                .join(' OR ');
            result += " AND (" + combined + ")";
        }
        if (this.userFacetBuckets) {
            Object.keys(this.userFacetBuckets).forEach(function (key) {
                /** @type {?} */
                var subQuery = (_this.userFacetBuckets[key] || [])
                    .map(function (bucket) { return bucket.filterQuery; })
                    .join(' OR ');
                if (subQuery) {
                    if (result.length > 0) {
                        result += ' AND ';
                    }
                    result += "(" + subQuery + ")";
                }
            });
        }
        return result;
    };
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetFields", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var facetFields = this.config.facetFields && this.config.facetFields.fields;
            if (facetFields && facetFields.length > 0) {
                return {
                    facets: facetFields.map(function (facet) { return ({
                        field: facet.field,
                        mincount: facet.mincount,
                        label: facet.label,
                        limit: facet.limit,
                        offset: facet.offset,
                        prefix: facet.prefix
                    }); })
                };
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    SearchQueryBuilderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SearchQueryBuilderService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService }
    ]; };
    return SearchQueryBuilderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchComponent = /** @class */ (function () {
    function SearchComponent(searchService, _elementRef) {
        var _this = this;
        this.searchService = searchService;
        this._elementRef = _elementRef;
        /**
         * Function that maps an option's value to its display value in the trigger.
         */
        this.displayWith = null;
        /**
         * Maximum number of results to show in the search.
         */
        this.maxResults = 20;
        /**
         * Number of results to skip from the results pagination.
         */
        this.skipResults = 0;
        /**
         * Search term to use when executing the search. Updating this value will
         * run a new search and update the results.
         */
        this.searchTerm = '';
        /**
         * Emitted when search results have fully loaded.
         */
        this.resultLoaded = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.showPanel = false;
        this._isOpen = false;
        this.keyPressedStream = new Subject();
        this._classList = {};
        this.keyPressedStream.asObservable()
            .pipe(debounceTime(200))
            .subscribe(function (searchedWord) {
            _this.loadSearchResults(searchedWord);
        });
        searchService.dataLoaded.subscribe(function (data) { return _this.onSearchDataLoaded(data); }, function (error) { return _this.onSearchDataError(error); });
    }
    Object.defineProperty(SearchComponent.prototype, "classList", {
        /** CSS class for display. */
        set: /**
         * CSS class for display.
         * @param {?} classList
         * @return {?}
         */
        function (classList) {
            var _this = this;
            if (classList && classList.length) {
                classList.split(' ').forEach(function (className) { return _this._classList[className.trim()] = true; });
                this._elementRef.nativeElement.className = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchComponent.prototype, "isOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isOpen && this.showPanel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setVisibility();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SearchComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.queryBody &&
            this.hasDifferentQueryBody(changes.queryBody.previousValue, changes.queryBody.currentValue)) {
            this.loadSearchResults();
        }
        if (changes.searchTerm && changes.searchTerm.currentValue) {
            this.loadSearchResults(changes.searchTerm.currentValue);
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.resetResults = /**
     * @return {?}
     */
    function () {
        this.cleanResults();
        this.setVisibility();
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        this.loadSearchResults(this.searchTerm);
    };
    /**
     * @param {?} previousQueryBody
     * @param {?} currentQueryBody
     * @return {?}
     */
    SearchComponent.prototype.hasDifferentQueryBody = /**
     * @param {?} previousQueryBody
     * @param {?} currentQueryBody
     * @return {?}
     */
    function (previousQueryBody, currentQueryBody) {
        return JSON.stringify(previousQueryBody) !== JSON.stringify(currentQueryBody);
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.cleanResults = /**
     * @return {?}
     */
    function () {
        if (this.results) {
            this.results = {};
        }
    };
    /**
     * @param {?=} searchTerm
     * @return {?}
     */
    SearchComponent.prototype.loadSearchResults = /**
     * @param {?=} searchTerm
     * @return {?}
     */
    function (searchTerm) {
        var _this = this;
        this.resetResults();
        if (searchTerm) {
            if (this.queryBody) {
                this.searchService.searchByQueryBody(this.queryBody).subscribe(function (result) { return _this.onSearchDataLoaded(result); }, function (err) { return _this.onSearchDataError(err); });
            }
            else {
                this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(function (result) { return _this.onSearchDataLoaded(result); }, function (err) { return _this.onSearchDataError(err); });
            }
        }
        else {
            this.cleanResults();
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SearchComponent.prototype.onSearchDataLoaded = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            this.results = data;
            this.resultLoaded.emit(this.results);
            this.isOpen = true;
            this.setVisibility();
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    SearchComponent.prototype.onSearchDataError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error && error.status !== 400) {
            this.results = null;
            this.error.emit(error);
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this._classList['adf-search-show'] = false;
            this._classList['adf-search-hide'] = true;
            this.isOpen = false;
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.setVisibility = /**
     * @return {?}
     */
    function () {
        this.showPanel = !!this.results && !!this.results.list;
        this._classList['adf-search-show'] = this.showPanel;
        this._classList['adf-search-hide'] = !this.showPanel;
    };
    SearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search',
                    template: "<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n\n\n",
                    encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                    exportAs: 'searchAutocomplete',
                    host: {
                        'class': 'adf-search'
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SearchComponent.ctorParameters = function () { return [
        { type: SearchService },
        { type: ElementRef }
    ]; };
    SearchComponent.propDecorators = {
        panel: [{ type: ViewChild, args: ['panel',] }],
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        displayWith: [{ type: Input }],
        maxResults: [{ type: Input }],
        skipResults: [{ type: Input }],
        queryBody: [{ type: Input }],
        searchTerm: [{ type: Input }],
        classList: [{ type: Input, args: ['class',] }],
        resultLoaded: [{ type: Output }],
        error: [{ type: Output }]
    };
    return SearchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var EmptySearchResultComponent = /** @class */ (function () {
    function EmptySearchResultComponent() {
    }
    EmptySearchResultComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-empty-search-result',
                    template: "<div class=\"adf-empty-search-result\">\n    <ng-content></ng-content>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    return EmptySearchResultComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchControlComponent = /** @class */ (function () {
    function SearchControlComponent(authService, thumbnailService) {
        var _this = this;
        this.authService = authService;
        this.thumbnailService = thumbnailService;
        /**
         * Toggles whether to use an expanding search control. If false
         * then a regular input is used.
         */
        this.expandable = true;
        /**
         * Toggles highlighting of the search term in the results.
         */
        this.highlight = false;
        /**
         * Type of the input field to render, e.g. "search" or "text" (default).
         */
        this.inputType = 'text';
        /**
         * Toggles auto-completion of the search input field.
         */
        this.autocomplete = false;
        /**
         * Toggles "find-as-you-type" suggestions for possible matches.
         */
        this.liveSearchEnabled = true;
        /**
         * Maximum number of results to show in the live search.
         */
        this.liveSearchMaxResults = 5;
        /**
         * Emitted when the search is submitted pressing ENTER button.
         * The search term is provided as value of the event.
         */
        this.submit = new EventEmitter();
        /**
         * Emitted when the search term is changed. The search term is provided
         * in the 'value' property of the returned object.  If the term is less
         * than three characters in length then the term is truncated to an empty
         * string.
         */
        this.searchChange = new EventEmitter();
        /**
         * Emitted when a file item from the list of "find-as-you-type" results is selected.
         */
        this.optionClicked = new EventEmitter();
        this.searchTerm = '';
        this.noSearchResultTemplate = null;
        this.toggleSearch = new Subject();
        this.focusSubject = new Subject();
        this.toggleSearch.asObservable().pipe(debounceTime(200)).subscribe(function () {
            if (_this.expandable) {
                _this.subscriptAnimationState = _this.subscriptAnimationState === 'inactive' ? 'active' : 'inactive';
                if (_this.subscriptAnimationState === 'inactive') {
                    _this.searchTerm = '';
                    _this.searchAutocomplete.resetResults();
                    if (document.activeElement.id === _this.searchInput.nativeElement.id) {
                        _this.searchInput.nativeElement.blur();
                    }
                }
            }
        });
    }
    /**
     * @param {?} animationDoneEvent
     * @return {?}
     */
    SearchControlComponent.prototype.applySearchFocus = /**
     * @param {?} animationDoneEvent
     * @return {?}
     */
    function (animationDoneEvent) {
        if (animationDoneEvent.toState === 'active') {
            this.searchInput.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscriptAnimationState = this.expandable ? 'inactive' : 'no-animation';
        this.setupFocusEventHandlers();
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.isNoSearchTemplatePresent = /**
     * @return {?}
     */
    function () {
        return this.emptySearchTemplate ? true : false;
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.focusSubject) {
            this.focusSubject.unsubscribe();
            this.focusSubject = null;
        }
        if (this.toggleSearch) {
            this.toggleSearch.unsubscribe();
            this.toggleSearch = null;
        }
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.isLoggedIn = /**
     * @return {?}
     */
    function () {
        return this.authService.isEcmLoggedIn();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchControlComponent.prototype.searchSubmit = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.submit.emit(event);
        this.toggleSearchBar();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchControlComponent.prototype.inputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.searchChange.emit(event);
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.getAutoComplete = /**
     * @return {?}
     */
    function () {
        return this.autocomplete ? 'on' : 'off';
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getMimeTypeIcon = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var mimeType;
        if (node.entry.content && node.entry.content.mimeType) {
            mimeType = node.entry.content.mimeType;
        }
        if (node.entry.isFolder) {
            mimeType = 'folder';
        }
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.isSearchBarActive = /**
     * @return {?}
     */
    function () {
        return this.subscriptAnimationState === 'active' && this.liveSearchEnabled;
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.toggleSearchBar = /**
     * @return {?}
     */
    function () {
        if (this.toggleSearch) {
            this.toggleSearch.next();
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SearchControlComponent.prototype.elementClicked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.entry) {
            this.optionClicked.next(item);
            this.toggleSearchBar();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.focusSubject.next($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.focusSubject.next($event);
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.activateToolbar = /**
     * @return {?}
     */
    function () {
        if (!this.isSearchBarActive()) {
            this.toggleSearchBar();
        }
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.selectFirstResult = /**
     * @return {?}
     */
    function () {
        if (this.listResultElement && this.listResultElement.length > 0) {
            /** @type {?} */
            var firstElement = /** @type {?} */ (this.listResultElement.first);
            firstElement._getHostElement().focus();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onRowArrowDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var nextElement = this.getNextElementSibling(/** @type {?} */ ($event.target));
        if (nextElement) {
            nextElement.focus();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchControlComponent.prototype.onRowArrowUp = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var previousElement = this.getPreviousElementSibling(/** @type {?} */ ($event.target));
        if (previousElement) {
            previousElement.focus();
        }
        else {
            this.searchInput.nativeElement.focus();
            this.focusSubject.next(new FocusEvent('focus'));
        }
    };
    /**
     * @return {?}
     */
    SearchControlComponent.prototype.setupFocusEventHandlers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var focusEvents = this.focusSubject
            .asObservable()
            .pipe(debounceTime(50), filter(function ($event) {
            return _this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');
        }));
        focusEvents.subscribe(function () {
            _this.toggleSearchBar();
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getNextElementSibling = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.nextElementSibling;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SearchControlComponent.prototype.getPreviousElementSibling = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.previousElementSibling;
    };
    SearchControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-control',
                    template: "<div class=\"adf-search-container\">\n    <div *ngIf=\"isLoggedIn()\" [@transitionMessages]=\"subscriptAnimationState\"\n         (@transitionMessages.done)=\"applySearchFocus($event)\">\n        <button mat-icon-button\n                *ngIf=\"expandable\"\n                id=\"adf-search-button\"\n                class=\"adf-search-button\"\n                [title]=\"'SEARCH.BUTTON.TOOLTIP' | translate\"\n                (click)=\"toggleSearchBar()\"\n                (keyup.enter)=\"toggleSearchBar()\">\n            <mat-icon [attr.aria-label]=\"'SEARCH.BUTTON.ARIA-LABEL' | translate\">search</mat-icon>\n        </button>\n        <mat-form-field class=\"adf-input-form-field-divider\">\n            <input matInput\n                   #searchInput\n                   [attr.aria-label]=\"'SEARCH.INPUT.ARIA-LABEL' | translate\"\n                   [attr.type]=\"inputType\"\n                   [autocomplete]=\"getAutoComplete()\"\n                   id=\"adf-control-input\"\n                   [(ngModel)]=\"searchTerm\"\n                   (focus)=\"activateToolbar()\"\n                   (blur)=\"onBlur($event)\"\n                   (keyup.escape)=\"toggleSearchBar()\"\n                   (keyup.arrowdown)=\"selectFirstResult()\"\n                   (ngModelChange)=\"inputChange($event)\"\n                   [searchAutocomplete]=\"auto\"\n                   (keyup.enter)=\"searchSubmit($event)\">\n        </mat-form-field>\n    </div>\n</div>\n\n<adf-search #search\n            #auto=\"searchAutocomplete\"\n            class=\"adf-search-result-autocomplete\"\n            [maxResults]=\"liveSearchMaxResults\"\n            [queryBody]=\"customQueryBody\">\n    <ng-template let-data>\n        <mat-list *ngIf=\"isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n            <mat-list-item\n                *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                id=\"result_option_{{idx}}\"\n                [attr.data-automation-id]=\"'autocomplete_for_' + item.entry.name\"\n                [tabindex]=\"0\"\n                (focus)=\"onFocus($event)\"\n                (blur)=\"onBlur($event)\"\n                (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                (keyup.arrowup)=\"onRowArrowUp($event)\"\n                class=\"adf-search-autocomplete-item\"\n                (click)=\"elementClicked(item)\"\n                (keyup.enter)=\"elementClicked(item)\"\n                (touchend)=\"elementClicked(item)\">\n                <!-- This is a comment -->\n                <mat-icon mat-list-icon>\n                    <img [src]=\"getMimeTypeIcon(item)\"/>\n                </mat-icon>\n                <h4 mat-line id=\"result_name_{{idx}}\"\n                    *ngIf=\"highlight; else elseBlock\"\n                    class=\"adf-search-fixed-text\"\n                    [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                    {{ item?.entry.name }}\n                </h4>\n                <ng-template #elseBlock>\n                    <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\"\n                        [innerHtml]=\"item.entry.name\"></h4>\n                </ng-template>\n                <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n            </mat-list-item>\n            <mat-list-item id=\"search_no_result\"\n                           data-automation-id=\"search_no_result_found\"\n                           *ngIf=\"data?.list?.entries.length === 0\">\n                <ng-content\n                    selector=\"adf-empty-search-result\"\n                    *ngIf=\"isNoSearchTemplatePresent() else defaultNoResult\">\n                </ng-content>\n                <ng-template #defaultNoResult>\n                    <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm:\n                        searchTerm} }}</p>\n                </ng-template>\n            </mat-list-item>\n        </mat-list>\n    </ng-template>\n</adf-search>\n",
                    animations: [
                        trigger('transitionMessages', [
                            state('active', style({ transform: 'translateX(0%)', 'margin-left': '13px' })),
                            state('inactive', style({ transform: 'translateX(81%)' })),
                            state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),
                            transition('inactive => active', animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')),
                            transition('active => inactive', animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
                        ])
                    ],
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-control' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SearchControlComponent.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: ThumbnailService }
    ]; };
    SearchControlComponent.propDecorators = {
        expandable: [{ type: Input }],
        highlight: [{ type: Input }],
        inputType: [{ type: Input }],
        autocomplete: [{ type: Input }],
        liveSearchEnabled: [{ type: Input }],
        liveSearchMaxResults: [{ type: Input }],
        customQueryBody: [{ type: Input }],
        submit: [{ type: Output }],
        searchChange: [{ type: Output }],
        optionClicked: [{ type: Output }],
        searchAutocomplete: [{ type: ViewChild, args: ['search',] }],
        searchInput: [{ type: ViewChild, args: ['searchInput',] }],
        listResultElement: [{ type: ViewChildren, args: [MatListItem,] }],
        emptySearchTemplate: [{ type: ContentChild, args: [EmptySearchResultComponent,] }]
    };
    return SearchControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SearchTriggerDirective; }),
    multi: true
};
var SearchTriggerDirective = /** @class */ (function () {
    function SearchTriggerDirective(element, ngZone, changeDetectorRef, document) {
        this.element = element;
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.onDestroy$ = new Subject();
        this.autocomplete = 'off';
        this._panelOpen = false;
        this.escapeEventStream = new Subject();
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
        if (this.escapeEventStream) {
            this.escapeEventStream.unsubscribe();
            this.escapeEventStream = null;
        }
        if (this.closingActionsSubscription) {
            this.closingActionsSubscription.unsubscribe();
        }
    };
    Object.defineProperty(SearchTriggerDirective.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._panelOpen && this.searchPanel.showPanel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.openPanel = /**
     * @return {?}
     */
    function () {
        this.searchPanel.isOpen = this._panelOpen = true;
        this.closingActionsSubscription = this.subscribeToClosingActions();
    };
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        if (this._panelOpen) {
            this.closingActionsSubscription.unsubscribe();
            this._panelOpen = false;
            this.searchPanel.resetResults();
            this.searchPanel.hidePanel();
            this.changeDetectorRef.detectChanges();
        }
    };
    Object.defineProperty(SearchTriggerDirective.prototype, "panelClosingActions", {
        get: /**
         * @return {?}
         */
        function () {
            return merge(this.escapeEventStream, this.outsideClickStream);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchTriggerDirective.prototype, "outsideClickStream", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.document) {
                return of(null);
            }
            return merge(fromEvent(this.document, 'click'), fromEvent(this.document, 'touchend')).pipe(filter(function (event) {
                /** @type {?} */
                var clickTarget = /** @type {?} */ (event.target);
                return _this._panelOpen && clickTarget !== _this.element.nativeElement;
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    SearchTriggerDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this.setTriggerValue(value); });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchTriggerDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchTriggerDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.handleKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyCode = event.keyCode;
        if (keyCode === ESCAPE && this.panelOpen) {
            this.escapeEventStream.next();
            event.stopPropagation();
        }
        else if (keyCode === ENTER) {
            this.escapeEventStream.next();
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.handleInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (document.activeElement === event.target) {
            /** @type {?} */
            var inputValue = (/** @type {?} */ (event.target)).value;
            this.onChange(inputValue);
            if (inputValue) {
                this.searchPanel.keyPressedStream.next(inputValue);
                this.openPanel();
            }
            else {
                this.searchPanel.resetResults();
                this.closePanel();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.isPanelOptionClicked = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var isPanelOption = false;
        if (event) {
            /** @type {?} */
            var clickTarget = /** @type {?} */ (event.target);
            isPanelOption = !this.isNoResultOption(event) &&
                !!this.searchPanel.panel &&
                !!this.searchPanel.panel.nativeElement.contains(clickTarget);
        }
        return isPanelOption;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.isNoResultOption = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;
    };
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.subscribeToClosingActions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var firstStable = this.ngZone.onStable.asObservable();
        /** @type {?} */
        var optionChanges = this.searchPanel.keyPressedStream.asObservable();
        return merge(firstStable, optionChanges)
            .pipe(takeUntil(this.onDestroy$), switchMap(function () {
            _this.searchPanel.setVisibility();
            return _this.panelClosingActions;
        }))
            .subscribe(function (event) { return _this.setValueAndClose(event); });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SearchTriggerDirective.prototype.setTriggerValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var toDisplay = this.searchPanel && this.searchPanel.displayWith ?
            this.searchPanel.displayWith(value) : value;
        /** @type {?} */
        var inputValue = toDisplay != null ? toDisplay : '';
        this.element.nativeElement.value = inputValue;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.setValueAndClose = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {
            this.setTriggerValue(event.target.textContent.trim());
            this.onChange(event.target.textContent.trim());
            this.element.nativeElement.focus();
        }
        this.closePanel();
    };
    SearchTriggerDirective.decorators = [
        { type: Directive, args: [{
                    selector: "input[searchAutocomplete], textarea[searchAutocomplete]",
                    host: {
                        'role': 'combobox',
                        '[attr.autocomplete]': 'autocomplete',
                        'aria-autocomplete': 'list',
                        '[attr.aria-expanded]': 'panelOpen.toString()',
                        '(blur)': 'onTouched()',
                        '(input)': 'handleInput($event)',
                        '(keydown)': 'handleKeydown($event)'
                    },
                    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]
                },] }
    ];
    /** @nocollapse */
    SearchTriggerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    SearchTriggerDirective.propDecorators = {
        searchPanel: [{ type: Input, args: ['searchAutocomplete',] }],
        autocomplete: [{ type: Input }]
    };
    return SearchTriggerDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var DEFAULT_PAGE_SIZE = 5;
/**
 * @template T
 */
var /**
 * @template T
 */
SearchFilterList = /** @class */ (function () {
    function SearchFilterList(items, pageSize) {
        if (items === void 0) { items = []; }
        this.filteredItems = [];
        this._filterText = '';
        this.items = [];
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.currentPageSize = DEFAULT_PAGE_SIZE;
        this._filter = function () { return true; };
        this.items = items;
        this.filteredItems = items;
        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;
    }
    Object.defineProperty(SearchFilterList.prototype, "filterText", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterText;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filterText = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "filter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filter;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filter = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchFilterList.prototype.applyFilter = /**
     * @return {?}
     */
    function () {
        if (this.filter) {
            this.filteredItems = this.items.filter(this.filter);
        }
        else {
            this.filteredItems = this.items;
        }
        this.currentPageSize = this.pageSize;
    };
    Object.defineProperty(SearchFilterList.prototype, "visibleItems", {
        /** Returns visible portion of the items.  */
        get: /**
         * Returns visible portion of the items.
         * @return {?}
         */
        function () {
            return this.filteredItems.slice(0, this.currentPageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "length", {
        /** Returns entire collection length including items not displayed on the page. */
        get: /**
         * Returns entire collection length including items not displayed on the page.
         * @return {?}
         */
        function () {
            return this.items.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "canShowMoreItems", {
        /** Detects whether more items can be displayed. */
        get: /**
         * Detects whether more items can be displayed.
         * @return {?}
         */
        function () {
            return this.filteredItems.length > this.currentPageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "canShowLessItems", {
        /** Detects whether less items can be displayed. */
        get: /**
         * Detects whether less items can be displayed.
         * @return {?}
         */
        function () {
            return this.currentPageSize > this.pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "fitsPage", {
        /** Detects whether content fits single page. */
        get: /**
         * Detects whether content fits single page.
         * @return {?}
         */
        function () {
            return this.pageSize >= this.filteredItems.length;
        },
        enumerable: true,
        configurable: true
    });
    /** Display more items. */
    /**
     * Display more items.
     * @return {?}
     */
    SearchFilterList.prototype.showMoreItems = /**
     * Display more items.
     * @return {?}
     */
    function () {
        if (this.canShowMoreItems) {
            this.currentPageSize += this.pageSize;
        }
    };
    /** Display less items. */
    /**
     * Display less items.
     * @return {?}
     */
    SearchFilterList.prototype.showLessItems = /**
     * Display less items.
     * @return {?}
     */
    function () {
        if (this.canShowLessItems) {
            this.currentPageSize -= this.pageSize;
        }
    };
    /** Reset entire collection and page settings. */
    /**
     * Reset entire collection and page settings.
     * @return {?}
     */
    SearchFilterList.prototype.clear = /**
     * Reset entire collection and page settings.
     * @return {?}
     */
    function () {
        this.currentPageSize = this.pageSize;
        this.items = [];
        this.filteredItems = [];
        this.filterText = '';
    };
    /**
     * @return {?}
     */
    SearchFilterList.prototype[Symbol.iterator] = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pointer = 0;
        /** @type {?} */
        var items = this.visibleItems;
        return {
            next: /**
             * @return {?}
             */
            function () {
                if (pointer < items.length) {
                    return {
                        done: false,
                        value: items[pointer++]
                    };
                }
                else {
                    return {
                        done: true,
                        value: null
                    };
                }
            }
        };
    };
    return SearchFilterList;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ResponseFacetQueryList = /** @class */ (function (_super) {
    __extends(ResponseFacetQueryList, _super);
    function ResponseFacetQueryList(items, pageSize) {
        if (items === void 0) { items = []; }
        if (pageSize === void 0) { pageSize = 5; }
        var _this = _super.call(this, items
            .filter(function (item) {
            return item.count > 0;
        }), pageSize) || this;
        _this.filter = function (query) {
            if (_this.filterText && query.label) {
                /** @type {?} */
                var pattern = (_this.filterText || '').toLowerCase();
                /** @type {?} */
                var label = query.label.toLowerCase();
                return label.startsWith(pattern);
            }
            return true;
        };
        return _this;
    }
    return ResponseFacetQueryList;
}(SearchFilterList));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchFilterComponent = /** @class */ (function () {
    function SearchFilterComponent(queryBuilder, searchService, translationService) {
        var _this = this;
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.DEFAULT_PAGE_SIZE = 5;
        this.isAlive = true;
        this.responseFacetQueries = null;
        this.responseFacetFields = null;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetQueriesExpanded = false;
        this.facetFieldsExpanded = false;
        this.canResetSelectedQueries = false;
        this.selectedFacetQueries = [];
        this.selectedBuckets = [];
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            this.facetQueriesExpanded = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetFieldsExpanded = queryBuilder.config.facetFields.expanded;
        }
        this.queryBuilder.updated.pipe(takeWhile(function () { return _this.isAlive; })).subscribe(function () {
            _this.queryBuilder.execute();
        });
    }
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.queryBuilder) {
            this.queryBuilder.executed.pipe(takeWhile(function () { return _this.isAlive; })).subscribe(function (data) {
                _this.onDataLoaded(data);
                _this.searchService.dataLoaded.next(data);
            });
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.isAlive = false;
    };
    /**
     * @param {?} event
     * @param {?} facetQuery
     * @return {?}
     */
    SearchFilterComponent.prototype.onToggleFacetQuery = /**
     * @param {?} event
     * @param {?} facetQuery
     * @return {?}
     */
    function (event, facetQuery) {
        if (event && facetQuery) {
            if (event.checked) {
                this.selectFacetQuery(facetQuery);
            }
            else {
                this.unselectFacetQuery(facetQuery);
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchFilterComponent.prototype.selectFacetQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            query.checked = true;
            this.queryBuilder.addUserFacetQuery(query);
            this.updateSelectedFields();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchFilterComponent.prototype.unselectFacetQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            query.checked = false;
            this.queryBuilder.removeUserFacetQuery(query);
            this.updateSelectedFields();
            this.queryBuilder.update();
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.updateSelectedBuckets = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.responseFacetFields) {
            this.selectedBuckets = [];
            var _loop_1 = function (field) {
                var _a;
                if (field.buckets) {
                    (_a = this_1.selectedBuckets).push.apply(_a, __spread(this_1.queryBuilder.getUserFacetBuckets(field.field)
                        .filter(function (bucket) { return bucket.checked; })
                        .map(function (bucket) {
                        return { field: field, bucket: bucket };
                    })));
                }
            };
            var this_1 = this;
            try {
                for (var _b = __values(this.responseFacetFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    _loop_1(field);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.updateSelectedFields = /**
     * @return {?}
     */
    function () {
        if (this.responseFacetQueries) {
            this.selectedFacetQueries = this.responseFacetQueries.items.filter(function (item) { return item.checked; });
            this.canResetSelectedQueries = this.selectedFacetQueries.length > 0;
        }
        else {
            this.selectedFacetQueries = [];
            this.canResetSelectedQueries = false;
        }
    };
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.onToggleBucket = /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.selectFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.unselectFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.resetSelectedQueries = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        if (this.canResetSelectedQueries) {
            try {
                for (var _b = __values(this.responseFacetQueries.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var query = _c.value;
                    query.checked = false;
                    this.queryBuilder.removeUserFacetQuery(query);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.selectedFacetQueries = [];
            this.canResetSelectedQueries = false;
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.canResetSelectedBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field.buckets) {
            return field.buckets.items.some(function (bucket) { return bucket.checked; });
        }
        return false;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.resetSelectedBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var e_3, _a;
        if (field && field.buckets) {
            try {
                for (var _b = __values(field.buckets.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var bucket = _c.value;
                    bucket.checked = false;
                    this.queryBuilder.removeUserFacetBucket(field, bucket);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SearchFilterComponent.prototype.onDataLoaded = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var context = data.list.context;
        if (context) {
            this.parseFacetFields(context);
            this.parseFacetQueries(context);
        }
        else {
            this.responseFacetQueries = null;
            this.responseFacetFields = null;
        }
    };
    /**
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetFields = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        if (!this.responseFacetFields) {
            /** @type {?} */
            var configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
            this.responseFacetFields = configFacetFields.map(function (field) {
                /** @type {?} */
                var responseField = (context.facetsFields || []).find(function (response) { return response.label === field.label; });
                /** @type {?} */
                var buckets = ((responseField && responseField.buckets) || []).map(function (bucket) {
                    /** @type {?} */
                    var selectedBucket = _this.selectedBuckets.find(function (facetBucket) {
                        return facetBucket.bucket.label === bucket.label && facetBucket.field.field === field.field;
                    });
                    return /** @type {?} */ (__assign({}, bucket, { checked: !!selectedBucket, display: _this.translationService.instant(bucket.display), label: _this.translationService.instant(bucket.label) }));
                });
                /** @type {?} */
                var bucketList = new SearchFilterList(buckets, field.pageSize);
                bucketList.filter = function (bucket) {
                    if (bucket && bucketList.filterText) {
                        /** @type {?} */
                        var pattern = (bucketList.filterText || '').toLowerCase();
                        /** @type {?} */
                        var label = (bucket.display || bucket.label || '').toLowerCase();
                        return label.startsWith(pattern);
                    }
                    return true;
                };
                return __assign({}, field, { label: _this.translationService.instant(field.label), pageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, buckets: bucketList });
            });
        }
        else {
            this.responseFacetFields = this.responseFacetFields
                .map(function (field) {
                /** @type {?} */
                var responseField = (context.facetsFields || []).find(function (response) { return response.label === field.label; });
                (field && field.buckets && field.buckets.items || [])
                    .map(function (bucket) {
                    /** @type {?} */
                    var responseBucket = ((responseField && responseField.buckets) || []).find(function (respBucket) { return respBucket.label === bucket.label; });
                    bucket.count = responseBucket ? responseBucket.count : 0;
                    return bucket;
                });
                return field;
            });
        }
    };
    /**
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetQueries = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        /** @type {?} */
        var responseQueries = this.getFacetQueryMap(context);
        if (this.queryBuilder.config.facetQueries) {
            /** @type {?} */
            var bkpResponseFacetQueries_1 = Object.assign({}, this.responseFacetQueries);
            /** @type {?} */
            var facetQueries = (this.queryBuilder.config.facetQueries.queries || [])
                .map(function (query) {
                /** @type {?} */
                var queryResult = responseQueries[query.label];
                /** @type {?} */
                var bkpQuery = (bkpResponseFacetQueries_1.items || []).find(function (item) { return item.label === query.label; });
                if (bkpQuery) {
                    bkpQuery.count = queryResult.count;
                    return bkpQuery;
                }
                return /** @type {?} */ (__assign({}, query, { label: _this.translationService.instant(query.label), count: queryResult.count }));
            });
            if (facetQueries.length > 0) {
                if (this.responseFacetQueries) {
                    this.responseFacetQueries.items = facetQueries;
                }
                else {
                    this.responseFacetQueries = new ResponseFacetQueryList(facetQueries, this.facetQueriesPageSize);
                }
            }
            else {
                this.responseFacetQueries = null;
            }
        }
    };
    /**
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.getFacetQueryMap = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var result = {};
        (context.facetQueries || []).forEach(function (query) {
            result[query.label] = query;
        });
        return result;
    };
    SearchFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-filter',
                    template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"responseFacetQueries\">\n        <mat-expansion-panel [expanded]=\"facetQueriesExpanded\" [attr.data-automation-id]=\"'expansion-panel-'+facetQueriesLabel\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ facetQueriesLabel | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n            <div class=\"facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+facetQueriesLabel\"\n                        [(ngModel)]=\"responseFacetQueries.filterText\">\n                    <button *ngIf=\"responseFacetQueries.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"responseFacetQueries.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n            <div class=\"checklist\">\n                <ng-container *ngFor=\"let query of responseFacetQueries\">\n                    <mat-checkbox\n                        [checked]=\"query.checked\"\n                        [attr.data-automation-id]=\"'checkbox-'+facetQueriesLabel+'-'+query.label\"\n                        (change)=\"onToggleFacetQuery($event, query)\">\n                        {{ query.label }} ({{ query.count }})\n                    </mat-checkbox>\n                </ng-container>\n            </div>\n            <div class=\"facet-buttons\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedQueries\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedQueries()\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"responseFacetQueries.canShowLessItems\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n                    (click)=\"responseFacetQueries.showLessItems()\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"responseFacetQueries.canShowMoreItems\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n                    (click)=\"responseFacetQueries.showMoreItems()\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n\n    <ng-container *ngIf=\"responseFacetFields\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of responseFacetFields\"\n                             [expanded]=\"facetFieldsExpanded\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <div class=\"facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+field.label\"\n                        [(ngModel)]=\"field.buckets.filterText\">\n                    <button *ngIf=\"field.buckets.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n\n            <div class=\"checklist\">\n                <mat-checkbox\n                    *ngFor=\"let bucket of field.buckets\"\n                    [checked]=\"bucket.checked\"\n                    [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n                    (change)=\"onToggleBucket($event, field, bucket)\">\n                    {{ bucket.display || bucket.label }} <span *ngIf=\"bucket.count!==null\">(</span>{{ bucket.count }}<span *ngIf=\"bucket.count!==null\">)</span>\n                </mat-checkbox>\n            </div>\n\n            <div class=\"facet-buttons\" *ngIf=\"field.buckets.fitsPage\">\n                <button *ngIf=\"canResetSelectedBuckets(field)\"\n                    mat-button\n                    color=\"primary\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n                </button>\n            </div>\n\n            <div class=\"facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedBuckets(field)\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowLessItems\"\n                    (click)=\"field.buckets.showLessItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowMoreItems\"\n                    (click)=\"field.buckets.showMoreItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-filter' },
                    styles: [".adf-search-filter .checklist{display:flex;flex-direction:column}.adf-search-filter .checklist .mat-checkbox{margin:5px}.adf-search-filter .checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter .facet-result-filter{display:flex;flex-direction:column}.adf-search-filter .facet-result-filter>*{width:100%}.adf-search-filter .facet-buttons{text-align:right}.adf-search-filter .facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter .facet-buttons--topSpace{padding-top:15px}"]
                }] }
    ];
    /** @nocollapse */
    SearchFilterComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService },
        { type: SearchService },
        { type: TranslationService }
    ]; };
    return SearchFilterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchTextComponent = /** @class */ (function () {
    function SearchTextComponent() {
        /**
         * The content of the text box.
         */
        this.value = '';
    }
    /**
     * @return {?}
     */
    SearchTextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.context && this.settings && this.settings["pattern"]) {
            /** @type {?} */
            var pattern = new RegExp(this.settings["pattern"], 'g');
            /** @type {?} */
            var match = pattern.exec(this.context.queryFragments[this.id] || '');
            if (match && match.length > 1) {
                this.value = match[1];
            }
        }
    };
    /**
     * @return {?}
     */
    SearchTextComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.value = '';
        this.updateQuery(null);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTextComponent.prototype.onChangedHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.value = event.target.value;
        this.updateQuery(this.value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SearchTextComponent.prototype.updateQuery = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.context && this.settings && this.settings.field) {
            this.context.queryFragments[this.id] = value ? this.settings.field + ":'" + value + "'" : '';
            this.context.update();
        }
    };
    SearchTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-text',
                    template: "<mat-form-field>\n    <input\n        matInput\n        [placeholder]=\"settings?.placeholder\"\n        [(ngModel)]=\"value\"\n        (change)=\"onChangedHandler($event)\">\n    <button mat-button *ngIf=\"value\" matSuffix mat-icon-button (click)=\"reset()\">\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-form-field>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-text' },
                    styles: [".adf-search-text .mat-form-field{width:100%}"]
                }] }
    ];
    SearchTextComponent.propDecorators = {
        value: [{ type: Input }]
    };
    return SearchTextComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchRadioComponent = /** @class */ (function () {
    function SearchRadioComponent() {
        this.pageSize = 5;
        this.options = new SearchFilterList();
    }
    /**
     * @return {?}
     */
    SearchRadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.settings) {
            this.pageSize = this.settings["pageSize"] || 5;
            if (this.settings["options"] && this.settings["options"].length > 0) {
                this.options = new SearchFilterList(this.settings["options"], this.pageSize);
            }
        }
        this.setValue(this.getSelectedValue());
    };
    /**
     * @return {?}
     */
    SearchRadioComponent.prototype.getSelectedValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = this.settings['options'] || [];
        if (options && options.length > 0) {
            /** @type {?} */
            var selected = options.find(function (opt) { return opt.default; });
            if (!selected) {
                selected = options[0];
            }
            return selected.value;
        }
        return null;
    };
    /**
     * @param {?} newValue
     * @return {?}
     */
    SearchRadioComponent.prototype.setValue = /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        this.value = newValue;
        this.context.queryFragments[this.id] = newValue;
        this.context.update();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchRadioComponent.prototype.changeHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setValue(event.value);
    };
    SearchRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-radio',
                    template: "<mat-radio-group\n    [(ngModel)]=\"value\"\n    (change)=\"changeHandler($event)\">\n    <mat-radio-button\n        *ngFor=\"let option of options\"\n        [value]=\"option.value\">\n        {{ option.name | translate }}\n    </mat-radio-button>\n</mat-radio-group>\n\n<div class=\"facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-radio' },
                    styles: [".adf-search-radio .mat-radio-group{display:inline-flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}"]
                }] }
    ];
    /** @nocollapse */
    SearchRadioComponent.ctorParameters = function () { return []; };
    SearchRadioComponent.propDecorators = {
        value: [{ type: Input }]
    };
    return SearchRadioComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchSliderComponent = /** @class */ (function () {
    function SearchSliderComponent() {
        this.thumbLabel = false;
    }
    /**
     * @return {?}
     */
    SearchSliderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.settings) {
            if (this.settings.hasOwnProperty('min')) {
                this.min = this.settings['min'];
            }
            if (this.settings.hasOwnProperty('max')) {
                this.max = this.settings['max'];
            }
            if (this.settings.hasOwnProperty('step')) {
                this.step = this.settings['step'];
            }
            this.thumbLabel = this.settings['thumbLabel'] ? true : false;
        }
    };
    /**
     * @return {?}
     */
    SearchSliderComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.value = this.min || 0;
        this.updateQuery(null);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchSliderComponent.prototype.onChangedHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.value = event.value;
        this.updateQuery(this.value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SearchSliderComponent.prototype.updateQuery = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.id && this.context && this.settings && this.settings.field) {
            if (value === null) {
                this.context.queryFragments[this.id] = '';
            }
            else {
                this.context.queryFragments[this.id] = this.settings.field + ":[0 TO " + value + "]";
            }
            this.context.update();
        }
    };
    SearchSliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-slider',
                    template: "<mat-slider\n    [(value)]=\"value\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [thumbLabel]=\"thumbLabel\"\n    (change)=\"onChangedHandler($event)\">\n</mat-slider>\n\n<div class=\"facet-buttons\">\n    <button mat-button color=\"primary\" (click)=\"reset()\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-slider' },
                    styles: [".adf-search-slider .mat-slider{width:100%}"]
                }] }
    ];
    SearchSliderComponent.propDecorators = {
        value: [{ type: Input }]
    };
    return SearchSliderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var LiveErrorStateMatcher = /** @class */ (function () {
    function LiveErrorStateMatcher() {
    }
    /**
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    LiveErrorStateMatcher.prototype.isErrorState = /**
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    function (control, form) {
        /** @type {?} */
        var isSubmitted = form && form.submitted;
        return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));
    };
    return LiveErrorStateMatcher;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchNumberRangeComponent = /** @class */ (function () {
    function SearchNumberRangeComponent() {
        this.matcher = new LiveErrorStateMatcher();
        this.format = '[{FROM} TO {TO}]';
    }
    /**
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.settings) {
            this.field = this.settings.field;
            this.format = this.settings["format"] || '[{FROM} TO {TO}]';
        }
        this.validators = Validators.compose([
            Validators.required,
            Validators.pattern(/^-?(0|[1-9]\d*)?$/),
            Validators.min(0)
        ]);
        this.from = new FormControl('', this.validators);
        this.to = new FormControl('', this.validators);
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        }, this.formValidator);
    };
    /**
     * @param {?} formGroup
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.formValidator = /**
     * @param {?} formGroup
     * @return {?}
     */
    function (formGroup) {
        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : { 'mismatch': true };
    };
    /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.apply = /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    function (model, isValid) {
        if (isValid && this.id && this.context && this.field) {
            /** @type {?} */
            var map$$1 = new Map();
            map$$1.set('FROM', model.from);
            map$$1.set('TO', model.to);
            /** @type {?} */
            var value = this.formatString(this.format, map$$1);
            this.context.queryFragments[this.id] = this.field + ":" + value;
            this.context.update();
        }
    };
    /**
     * @param {?} str
     * @param {?} map
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.formatString = /**
     * @param {?} str
     * @param {?} map
     * @return {?}
     */
    function (str, map$$1) {
        /** @type {?} */
        var result = str;
        map$$1.forEach(function (value, key) {
            /** @type {?} */
            var expr = new RegExp('{' + key + '}', 'gm');
            result = result.replace(expr, value);
        });
        return result;
    };
    /**
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            this.context.update();
        }
    };
    SearchNumberRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-number-range',
                    template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"from\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM' | translate }}\"\n            autocomplete=\"off\">\n        <mat-error *ngIf=\"from.hasError('pattern') || from.hasError('min')\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"from.hasError('required')\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"to\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO' | translate }}\"\n            autocomplete=\"off\">\n        <mat-error *ngIf=\"to.hasError('pattern') || to.hasError('min')\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"to.hasError('required')\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n\n    <div class=\"facet-buttons\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"reset()\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-number-range' },
                    styles: [".adf-search-number-range>form{display:inline-flex;flex-direction:column;width:100%}"]
                }] }
    ];
    return SearchNumberRangeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchCheckListComponent = /** @class */ (function () {
    function SearchCheckListComponent() {
        this.operator = 'OR';
        this.pageSize = 5;
        this.options = new SearchFilterList();
    }
    /**
     * @return {?}
     */
    SearchCheckListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.settings) {
            this.operator = this.settings["operator"] || 'OR';
            this.pageSize = this.settings["pageSize"] || 5;
            if (this.settings["options"] && this.settings["options"].length > 0) {
                this.options = new SearchFilterList(this.settings["options"], this.pageSize);
            }
        }
    };
    /**
     * @return {?}
     */
    SearchCheckListComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.options.items.forEach(function (opt) {
            opt.checked = false;
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            this.context.update();
        }
    };
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    SearchCheckListComponent.prototype.changeHandler = /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    function (event, option) {
        option.checked = event.checked;
        this.flush();
    };
    /**
     * @return {?}
     */
    SearchCheckListComponent.prototype.flush = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var checkedValues = this.options.items
            .filter(function (option) { return option.checked; })
            .map(function (option) { return option.value; });
        /** @type {?} */
        var query = checkedValues.join(" " + this.operator + " ");
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = query;
            this.context.update();
        }
    };
    SearchCheckListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-check-list',
                    template: "<div class=\"checklist\">\n    <mat-checkbox\n        *ngFor=\"let option of options\"\n        [checked]=\"option.checked\"\n        (change)=\"changeHandler($event, option)\">\n        {{ option.name | translate }}\n    </mat-checkbox>\n</div>\n\n<div class=\"facet-buttons\" *ngIf=\"options.fitsPage\">\n    <button mat-button color=\"primary\" (click)=\"reset()\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n    </button>\n</div>\n\n<div class=\"facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n        (click)=\"reset()\">\n        <mat-icon>clear</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-check-list' },
                    styles: [".adf-search-check-list{display:flex;flex-direction:column}"]
                }] }
    ];
    /** @nocollapse */
    SearchCheckListComponent.ctorParameters = function () { return []; };
    return SearchCheckListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_FORMAT_DATE = 'DD/MM/YYYY';
var ɵ0 = MOMENT_DATE_FORMATS;
var SearchDateRangeComponent = /** @class */ (function () {
    function SearchDateRangeComponent(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.matcher = new LiveErrorStateMatcher();
        this.datePickerDateFormat = DEFAULT_FORMAT_DATE;
    }
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.getFromValidationMessage = /**
     * @return {?}
     */
    function () {
        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                    '';
    };
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.getToValidationMessage = /**
     * @return {?}
     */
    function () {
        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                    this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
    };
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.settings) {
            this.datePickerDateFormat = this.settings["dateFormat"] || DEFAULT_FORMAT_DATE;
        }
        /** @type {?} */
        var theCustomDateAdapter = /** @type {?} */ (/** @type {?} */ (this.dateAdapter));
        theCustomDateAdapter.overrideDisplyaFormat = this.datePickerDateFormat;
        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe(function (locale) {
            _this.setLocale(locale);
        });
        /** @type {?} */
        var validators = Validators.compose([
            Validators.required
        ]);
        this.from = new FormControl('', validators);
        this.to = new FormControl('', validators);
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        });
        this.maxDate = this.dateAdapter.today().startOf('day');
    };
    /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    SearchDateRangeComponent.prototype.apply = /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    function (model, isValid) {
        if (isValid && this.id && this.context && this.settings && this.settings.field) {
            /** @type {?} */
            var start = moment(model.from).startOf('day').format();
            /** @type {?} */
            var end = moment(model.to).endOf('day').format();
            this.context.queryFragments[this.id] = this.settings.field + ":['" + start + "' TO '" + end + "']";
            this.context.update();
        }
    };
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            this.context.update();
        }
    };
    /**
     * @param {?} event
     * @param {?} formControl
     * @return {?}
     */
    SearchDateRangeComponent.prototype.onChangedHandler = /**
     * @param {?} event
     * @param {?} formControl
     * @return {?}
     */
    function (event, formControl) {
        /** @type {?} */
        var inputValue = event.srcElement.value;
        /** @type {?} */
        var formatDate = this.dateAdapter.parse(inputValue, this.datePickerDateFormat);
        if (formatDate && formatDate.isValid()) {
            formControl.setValue(formatDate);
        }
        else if (formatDate) {
            formControl.setErrors({
                'invalidOnChange': true
            });
        }
        else {
            formControl.setErrors({
                'required': true
            });
        }
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    SearchDateRangeComponent.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        this.dateAdapter.setLocale(locale);
        moment.locale(locale);
    };
    /**
     * @param {?} formControl
     * @return {?}
     */
    SearchDateRangeComponent.prototype.hasParseError = /**
     * @param {?} formControl
     * @return {?}
     */
    function (formControl) {
        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchDateRangeComponent.prototype.forcePlaceholder = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.srcElement.click();
    };
    SearchDateRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-date-range',
                    template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatepicker]=\"fromDatepicker\"\n                [max]=\"maxDate\"\n                (focusout)=\"onChangedHandler($event, from)\">\n        <mat-datepicker-toggle matSuffix [for]=\"fromDatepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #fromDatepicker></mat-datepicker>\n        <mat-error *ngIf=\"from.invalid\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datePickerDateFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatepicker]=\"toDatepicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDate\"\n                (focusout)=\"onChangedHandler($event, to)\">\n        <mat-datepicker-toggle matSuffix [for]=\"toDatepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #toDatepicker></mat-datepicker>\n        <mat-error *ngIf=\"to.invalid\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datePickerDateFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"facet-buttons facet-buttons--topSpace\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"reset()\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                    providers: [
                        { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                        { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-date-range' },
                    styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
                }] }
    ];
    /** @nocollapse */
    SearchDateRangeComponent.ctorParameters = function () { return [
        { type: DateAdapter },
        { type: UserPreferencesService }
    ]; };
    return SearchDateRangeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchFilterService = /** @class */ (function () {
    function SearchFilterService() {
        /**
         * Contains string-to-type mappings for registered widgets.
         */
        this.widgets = {
            'text': SearchTextComponent,
            'radio': SearchRadioComponent,
            'slider': SearchSliderComponent,
            'number-range': SearchNumberRangeComponent,
            'check-list': SearchCheckListComponent,
            'date-range': SearchDateRangeComponent
        };
    }
    SearchFilterService.decorators = [
        { type: Injectable }
    ];
    return SearchFilterService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchChipListComponent = /** @class */ (function () {
    function SearchChipListComponent() {
    }
    SearchChipListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-chip-list',
                    template: "<mat-chip-list>\n    <ng-container *ngIf=\"searchFilter && searchFilter.selectedFacetQueries.length\">\n        <mat-chip\n            *ngFor=\"let query of searchFilter.selectedFacetQueries\"\n            [removable]=\"true\"\n            (removed)=\"searchFilter.unselectFacetQuery(query)\">\n            {{ query.label | translate }}\n            <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n    </ng-container>\n    <ng-container *ngIf=\"searchFilter && searchFilter.selectedBuckets.length\">\n        <mat-chip\n            *ngFor=\"let selection of searchFilter.selectedBuckets\"\n            [removable]=\"true\"\n            (removed)=\"searchFilter.unselectFacetBucket(selection.field, selection.bucket)\">\n            {{ (selection.bucket.display || selection.bucket.label) | translate }}\n            <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n    </ng-container>\n</mat-chip-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-chip-list' }
                }] }
    ];
    SearchChipListComponent.propDecorators = {
        searchFilter: [{ type: Input }]
    };
    return SearchChipListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchSortingPickerComponent = /** @class */ (function () {
    function SearchSortingPickerComponent(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.options = [];
    }
    /**
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = this.queryBuilder.getSortingOptions();
        /** @type {?} */
        var primary = this.queryBuilder.getPrimarySorting();
        if (primary) {
            this.value = primary.key;
            this.ascending = primary.ascending;
        }
    };
    /**
     * @param {?} sorting
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.onChanged = /**
     * @param {?} sorting
     * @return {?}
     */
    function (sorting) {
        this.value = sorting.key;
        this.ascending = sorting.ascending;
        this.applySorting();
    };
    /**
     * @param {?} key
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.findOptionByKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key) {
            return this.options.find(function (opt) { return opt.key === key; });
        }
        return null;
    };
    /**
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.applySorting = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = this.findOptionByKey(this.value);
        if (option) {
            this.queryBuilder.sorting = [__assign({}, option, { ascending: this.ascending })];
            this.queryBuilder.update();
        }
    };
    SearchSortingPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-sorting-picker',
                    template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (change)=\"onChanged($event)\">\n</adf-sorting-picker>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-sorting-picker' }
                }] }
    ];
    /** @nocollapse */
    SearchSortingPickerComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService }
    ]; };
    return SearchSortingPickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchWidgetContainerComponent = /** @class */ (function () {
    function SearchWidgetContainerComponent(searchFilterService, queryBuilder, componentFactoryResolver) {
        this.searchFilterService = searchFilterService;
        this.queryBuilder = queryBuilder;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    SearchWidgetContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentType = this.searchFilterService.widgets[this.selector];
        if (componentType) {
            /** @type {?} */
            var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            if (factory) {
                this.content.clear();
                this.componentRef = this.content.createComponent(factory, 0);
                this.setupWidget(this.componentRef);
            }
        }
    };
    /**
     * @param {?} ref
     * @return {?}
     */
    SearchWidgetContainerComponent.prototype.setupWidget = /**
     * @param {?} ref
     * @return {?}
     */
    function (ref) {
        if (ref && ref.instance) {
            ref.instance.id = this.id;
            ref.instance.settings = __assign({}, this.settings);
            ref.instance.context = this.queryBuilder;
        }
    };
    /**
     * @return {?}
     */
    SearchWidgetContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    };
    SearchWidgetContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-widget-container',
                    template: '<div #content></div>'
                }] }
    ];
    /** @nocollapse */
    SearchWidgetContainerComponent.ctorParameters = function () { return [
        { type: SearchFilterService },
        { type: SearchQueryBuilderService },
        { type: ComponentFactoryResolver }
    ]; };
    SearchWidgetContainerComponent.propDecorators = {
        content: [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] }],
        id: [{ type: Input }],
        selector: [{ type: Input }],
        settings: [{ type: Input }],
        config: [{ type: Input }]
    };
    return SearchWidgetContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var ALFRESCO_SEARCH_DIRECTIVES = [
    SearchComponent,
    SearchControlComponent,
    SearchTriggerDirective,
    EmptySearchResultComponent,
    SearchFilterComponent,
    SearchChipListComponent
];
var SearchModule = /** @class */ (function () {
    function SearchModule() {
    }
    SearchModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        CoreModule.forChild()
                    ],
                    declarations: __spread(ALFRESCO_SEARCH_DIRECTIVES, [
                        SearchWidgetContainerComponent,
                        SearchTextComponent,
                        SearchRadioComponent,
                        SearchSliderComponent,
                        SearchNumberRangeComponent,
                        SearchCheckListComponent,
                        SearchDateRangeComponent,
                        SearchSortingPickerComponent
                    ]),
                    exports: __spread(ALFRESCO_SEARCH_DIRECTIVES, [
                        SearchWidgetContainerComponent,
                        SearchTextComponent,
                        SearchRadioComponent,
                        SearchSliderComponent,
                        SearchNumberRangeComponent,
                        SearchCheckListComponent,
                        SearchDateRangeComponent,
                        SearchSortingPickerComponent
                    ]),
                    entryComponents: [
                        SearchWidgetContainerComponent,
                        SearchTextComponent,
                        SearchRadioComponent,
                        SearchSliderComponent,
                        SearchNumberRangeComponent,
                        SearchCheckListComponent,
                        SearchDateRangeComponent
                    ]
                },] }
    ];
    return SearchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
var Relations = {
    Members: 'members',
    Containers: 'containers',
};
var DropdownSitesComponent = /** @class */ (function () {
    function DropdownSitesComponent(sitesService, logService) {
        this.sitesService = sitesService;
        this.logService = logService;
        /**
         * Hide the "My Files" option.
         */
        this.hideMyFiles = false;
        /**
         * A custom list of sites to be displayed by the dropdown. If no value
         * is given, the sites of the current user are displayed by default. A
         * list of objects only with properties 'title' and 'guid' is enough to
         * be able to display the dropdown.
         */
        this.siteList = null;
        /**
         * Id of the selected site
         */
        this.value = null;
        /**
         * Text or a translation key to act as a placeholder. Default value is the
         * key "DROPDOWN.PLACEHOLDER_LABEL".
         */
        this.placeholder = 'DROPDOWN.PLACEHOLDER_LABEL';
        /**
         * Emitted when the user selects a site. When the default option is selected,
         * an empty model is emitted.
         */
        this.change = new EventEmitter();
        this.selected = null;
        this.MY_FILES_VALUE = '-my-';
    }
    /**
     * @return {?}
     */
    DropdownSitesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.siteList) {
            this.setDefaultSiteList();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropdownSitesComponent.prototype.selectedSite = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.change.emit(event.value);
    };
    /**
     * @return {?}
     */
    DropdownSitesComponent.prototype.setDefaultSiteList = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var extendedOptions = null;
        if (this.relations) {
            extendedOptions = { relations: [this.relations] };
        }
        this.sitesService.getSites(extendedOptions).subscribe(function (result) {
            _this.siteList = _this.relations === Relations.Members ? _this.filteredResultsByMember(result) : result;
            if (!_this.hideMyFiles) {
                /** @type {?} */
                var myItem = { entry: { id: '-my-', guid: '-my-', title: 'DROPDOWN.MY_FILES_OPTION' } };
                _this.siteList.list.entries.unshift(myItem);
                if (!_this.value) {
                    _this.value = '-my-';
                }
            }
            _this.selected = _this.siteList.list.entries.find(function (site) { return site.entry.id === _this.value; });
        }, function (error) {
            _this.logService.error(error);
        });
    };
    /**
     * @param {?} sites
     * @return {?}
     */
    DropdownSitesComponent.prototype.filteredResultsByMember = /**
     * @param {?} sites
     * @return {?}
     */
    function (sites) {
        var _this = this;
        /** @type {?} */
        var loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();
        sites.list.entries = sites.list.entries.filter(function (site) { return _this.isCurrentUserMember(site, loggedUserName); });
        return sites;
    };
    /**
     * @param {?} site
     * @param {?} loggedUserName
     * @return {?}
     */
    DropdownSitesComponent.prototype.isCurrentUserMember = /**
     * @param {?} site
     * @param {?} loggedUserName
     * @return {?}
     */
    function (site, loggedUserName) {
        return site.entry.visibility === 'PUBLIC' ||
            !!site.relations.members.list.entries.find(function (member) {
                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();
            });
    };
    DropdownSitesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-sites-dropdown',
                    template: "<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            data-automation-id=\"site-my-files-select\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-sites-dropdown' },
                    styles: [".adf-sites-dropdown.full-width .mat-form-field{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    DropdownSitesComponent.ctorParameters = function () { return [
        { type: SitesService },
        { type: LogService }
    ]; };
    DropdownSitesComponent.propDecorators = {
        hideMyFiles: [{ type: Input }],
        siteList: [{ type: Input }],
        value: [{ type: Input }],
        placeholder: [{ type: Input }],
        relations: [{ type: Input }],
        change: [{ type: Output }]
    };
    return DropdownSitesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SitesDropdownModule = /** @class */ (function () {
    function SitesDropdownModule() {
    }
    SitesDropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        FormsModule,
                        ReactiveFormsModule,
                        CoreModule.forChild()
                    ],
                    exports: [
                        DropdownSitesComponent
                    ],
                    declarations: [
                        DropdownSitesComponent
                    ]
                },] }
    ];
    return SitesDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BreadcrumbComponent = /** @class */ (function () {
    function BreadcrumbComponent() {
        /**
         * Active node, builds UI based on folderNode.path.elements collection.
         */
        this.folderNode = null;
        /**
         * (optional) Name of the root element of the breadcrumb. You can use
         * this property to rename "Company Home" to "Personal Files" for
         * example. You can use an i18n resource key for the property value.
         */
        this.root = null;
        /**
         * (optional) The id of the root element. You can use this property
         * to set a custom element the breadcrumb should start with.
         */
        this.rootId = null;
        this.route = [];
        /**
         * Emitted when the user clicks on a breadcrumb.
         */
        this.navigate = new EventEmitter();
    }
    Object.defineProperty(BreadcrumbComponent.prototype, "hasRoot", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.root;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.transform = this.transform ? this.transform : null;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BreadcrumbComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["folderNode"]) {
            /** @type {?} */
            var node = null;
            node = this.transform ? this.transform(changes["folderNode"].currentValue) : changes["folderNode"].currentValue;
            this.route = this.parseRoute(node);
        }
        if (changes["transform"]) {
            /** @type {?} */
            var node = this.transform ? this.transform(this.folderNode) : this.folderNode;
            this.route = this.parseRoute(node);
        }
        this.recalculateNodes();
    };
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.recalculateNodes = /**
     * @return {?}
     */
    function () {
        if (this.maxItems && this.route.length > this.maxItems) {
            this.lastNodes = this.route.slice(this.route.length - this.maxItems);
            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
            this.previousNodes.reverse();
        }
        else {
            this.lastNodes = this.route;
            this.previousNodes = null;
        }
    };
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        if (this.dropdown) {
            this.dropdown.open();
        }
    };
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.hasPreviousNodes = /**
     * @return {?}
     */
    function () {
        return this.previousNodes ? true : false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BreadcrumbComponent.prototype.parseRoute = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node && node.path) {
            /** @type {?} */
            var route = /** @type {?} */ ((node.path.elements || []).slice());
            route.push(/** @type {?} */ ({
                id: node.id,
                name: node.name
            }));
            /** @type {?} */
            var rootPos = this.getElementPosition(route, this.rootId);
            if (rootPos > 0) {
                route.splice(0, rootPos);
            }
            if (rootPos === -1 && this.rootId) {
                route[0].id = this.rootId;
            }
            if (this.root) {
                route[0].name = this.root;
            }
            return route;
        }
        return [];
    };
    /**
     * @param {?} route
     * @param {?} nodeId
     * @return {?}
     */
    BreadcrumbComponent.prototype.getElementPosition = /**
     * @param {?} route
     * @param {?} nodeId
     * @return {?}
     */
    function (route, nodeId) {
        /** @type {?} */
        var result = -1;
        if (route && route.length > 0 && nodeId) {
            result = route.findIndex(function (el) { return el.id === nodeId; });
        }
        return result;
    };
    /**
     * @param {?} route
     * @param {?=} event
     * @return {?}
     */
    BreadcrumbComponent.prototype.onRoutePathClick = /**
     * @param {?} route
     * @param {?=} event
     * @return {?}
     */
    function (route, event) {
        if (event) {
            event.preventDefault();
        }
        if (route) {
            this.navigate.emit(route);
            if (this.target) {
                this.target.navigateTo(route.id);
            }
        }
    };
    BreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-breadcrumb',
                    template: "<nav *ngIf=\"folderNode\" data-automation-id=\"breadcrumb\" class=\"adf-breadcrumb-container\" role=\"list\">\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\">\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon [class.isRoot]=\"!hasPreviousNodes()\" class=\"adf-breadcrumb-dropdown-trigger-arrow\">arrow_drop_down</mat-icon>\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"0\">\n\n        <mat-option\n            *ngFor=\"let node of previousNodes;\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            class=\"adf-breadcrumb-path-option\"\n            tabindex=\"0\">\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div *ngFor=\"let item of lastNodes; let last = last\"\n        [class.active]=\"last\"\n        [ngSwitch]=\"last\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\"\n        role=\"listitem\">\n\n        <a *ngSwitchDefault href=\"#\" [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\">\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchCase=\"true\" class=\"adf-breadcrumb-item-current\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav *ngIf=\"!folderNode && hasRoot\" data-automation-id=\"breadcrumb\" role=\"navigation\">\n    <div class=\"adf-breadcrumb-item active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': 'adf-breadcrumb'
                    },
                    styles: [""]
                }] }
    ];
    BreadcrumbComponent.propDecorators = {
        folderNode: [{ type: Input }],
        root: [{ type: Input }],
        rootId: [{ type: Input }],
        target: [{ type: Input }],
        transform: [{ type: Input }],
        dropdown: [{ type: ViewChild, args: ['dropdown',] }],
        maxItems: [{ type: Input }],
        navigate: [{ type: Output }]
    };
    return BreadcrumbComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DropdownBreadcrumbComponent = /** @class */ (function (_super) {
    __extends(DropdownBreadcrumbComponent, _super);
    function DropdownBreadcrumbComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["folderNode"]) {
            /** @type {?} */
            var node = null;
            node = this.transform ? this.transform(changes["folderNode"].currentValue) : changes["folderNode"].currentValue;
            this.route = this.parseRoute(node);
        }
        if (changes["transform"]) {
            /** @type {?} */
            var node = this.transform ? this.transform(this.folderNode) : this.folderNode;
            this.route = this.parseRoute(node);
        }
        this.recalculateNodes();
    };
    /**
     * Calculate the current and previous nodes from the route array
     */
    /**
     * Calculate the current and previous nodes from the route array
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.recalculateNodes = /**
     * Calculate the current and previous nodes from the route array
     * @return {?}
     */
    function () {
        this.currentNode = this.route[this.route.length - 1];
        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();
    };
    /**
     * Opens the node picker menu
     */
    /**
     * Opens the node picker menu
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.open = /**
     * Opens the node picker menu
     * @return {?}
     */
    function () {
        if (this.dropdown) {
            this.dropdown.open();
        }
    };
    /**
     * Return if route has more than one element (means: we are not in the root directory)
     */
    /**
     * Return if route has more than one element (means: we are not in the root directory)
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.hasPreviousNodes = /**
     * Return if route has more than one element (means: we are not in the root directory)
     * @return {?}
     */
    function () {
        return this.previousNodes.length > 0;
    };
    DropdownBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-dropdown-breadcrumb',
                    template: "<ng-container *ngIf=\"route.length > 0\">\n\n    <button\n        tabindex=\"0\"\n        class=\"adf-dropdown-breadcrumb-trigger\"\n        (click)=\"open()\"\n        data-automation-id=\"dropdown-breadcrumb-trigger\">\n        <mat-icon [class.isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n    </button>\n    <mat-icon class=\"adf-dropdown-breadcrumb-item-chevron\">chevron_right</mat-icon>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-dropdown-breadcrumb-path\"\n        tabindex=\"0\"\n        data-automation-id=\"dropdown-breadcrumb-path\" >\n\n        <mat-option\n            *ngFor=\"let node of previousNodes;\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            class=\"adf-dropdown-breadcrumb-path-option\"\n            tabindex=\"0\"\n            data-automation-class=\"dropdown-breadcrumb-path-option\">\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <span\n        class=\"adf-current-folder\"\n        [class.isRoot]=\"!hasPreviousNodes()\"\n        data-automation-id=\"current-folder\">{{ currentNode.name }}</span>\n</ng-container>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': 'adf-dropdown-breadcrumb'
                    },
                    styles: [""]
                }] }
    ];
    DropdownBreadcrumbComponent.propDecorators = {
        dropdown: [{ type: ViewChild, args: ['dropdown',] }]
    };
    return DropdownBreadcrumbComponent;
}(BreadcrumbComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BreadcrumbModule = /** @class */ (function () {
    function BreadcrumbModule() {
    }
    BreadcrumbModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        CoreModule.forChild()
                    ],
                    exports: [
                        BreadcrumbComponent,
                        DropdownBreadcrumbComponent
                    ],
                    declarations: [
                        BreadcrumbComponent,
                        DropdownBreadcrumbComponent
                    ]
                },] }
    ];
    return BreadcrumbModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ConfirmDialogComponent = /** @class */ (function () {
    function ConfirmDialogComponent(data) {
        data = data || {};
        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';
        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';
        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';
        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';
    }
    ConfirmDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-confirm-dialog',
                    template: "\n        <h1 mat-dialog-title>{{ title | translate }}</h1>\n        <mat-dialog-content>\n            <p>{{ message | translate }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <span class=\"spacer\"></span>\n            <button id=\"adf-confirm-accept\" mat-button color=\"primary\" [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n            <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" cdkFocusInitial>{{ noLabel | translate }}</button>\n        </mat-dialog-actions>\n    ",
                    host: { 'class': 'adf-confirm-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .spacer { flex: 1 1 auto; }\n\n        .adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper {\n            text-transform: uppercase;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    ConfirmDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return ConfirmDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var VersionListComponent = /** @class */ (function () {
    function VersionListComponent(alfrescoApi, contentService, dialog) {
        this.alfrescoApi = alfrescoApi;
        this.contentService = contentService;
        this.dialog = dialog;
        this.versions = [];
        this.isLoading = true;
        /**
         * Toggles showing/hiding of comments
         */
        this.showComments = true;
        /**
         * Enable/disable downloading a version of the current node.
         */
        this.allowDownload = true;
        /**
         * Toggles showing/hiding of version actions
         */
        this.showActions = true;
        /**
         * Emitted when a version is restored
         */
        this.restored = new EventEmitter();
        /**
         * Emitted when a version is deleted
         */
        this.deleted = new EventEmitter();
        this.versionsApi = this.alfrescoApi.versionsApi;
    }
    /**
     * @return {?}
     */
    VersionListComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.loadVersionHistory();
    };
    /**
     * @return {?}
     */
    VersionListComponent.prototype.canUpdate = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'update') && this.versions.length > 1;
    };
    /**
     * @return {?}
     */
    VersionListComponent.prototype.canDelete = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'delete') && this.versions.length > 1;
    };
    /**
     * @param {?} versionId
     * @return {?}
     */
    VersionListComponent.prototype.restore = /**
     * @param {?} versionId
     * @return {?}
     */
    function (versionId) {
        var _this = this;
        if (this.canUpdate()) {
            this.versionsApi
                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })
                .then(function () { return _this.onVersionRestored(_this.node); });
        }
    };
    /**
     * @return {?}
     */
    VersionListComponent.prototype.loadVersionHistory = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isLoading = true;
        this.versionsApi.listVersionHistory(this.node.id).then(function (data) {
            _this.versions = data.list.entries;
            _this.isLoading = false;
        });
    };
    /**
     * @param {?} versionId
     * @return {?}
     */
    VersionListComponent.prototype.downloadVersion = /**
     * @param {?} versionId
     * @return {?}
     */
    function (versionId) {
        if (this.allowDownload) {
            /** @type {?} */
            var versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);
            this.downloadContent(versionDownloadUrl);
        }
    };
    /**
     * @param {?} versionId
     * @return {?}
     */
    VersionListComponent.prototype.deleteVersion = /**
     * @param {?} versionId
     * @return {?}
     */
    function (versionId) {
        var _this = this;
        if (this.canUpdate()) {
            /** @type {?} */
            var dialogRef = this.dialog.open(ConfirmDialogComponent, {
                data: {
                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',
                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',
                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',
                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'
                },
                minWidth: '250px'
            });
            dialogRef.afterClosed().subscribe(function (result) {
                if (result === true) {
                    _this.alfrescoApi.versionsApi
                        .deleteVersion(_this.node.id, versionId)
                        .then(function () { return _this.onVersionDeleted(_this.node); });
                }
            });
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    VersionListComponent.prototype.onVersionDeleted = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.loadVersionHistory();
        this.deleted.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    VersionListComponent.prototype.onVersionRestored = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.loadVersionHistory();
        this.restored.emit(node);
    };
    /**
     * @param {?} nodeId
     * @param {?} versionId
     * @param {?=} attachment
     * @return {?}
     */
    VersionListComponent.prototype.getVersionContentUrl = /**
     * @param {?} nodeId
     * @param {?} versionId
     * @param {?=} attachment
     * @return {?}
     */
    function (nodeId, versionId, attachment) {
        /** @type {?} */
        var nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);
        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');
    };
    /**
     * @param {?} url
     * @return {?}
     */
    VersionListComponent.prototype.downloadContent = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };
    VersionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-version-list',
                    template: "<mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n    <mat-list-item *ngFor=\"let version of versions; let idx = index\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <h4 mat-line class=\"adf-version-list-item-name\" [id]=\"'adf-version-list-item-name-' + version.entry.id\" >{{version.entry.name}}</h4>\n        <p mat-line>\n            <span class=\"adf-version-list-item-version\"  [id]=\"'adf-version-list-item-version-' + version.entry.id\" >{{version.entry.id}}</span> -\n            <span class=\"adf-version-list-item-date\"     [id]=\"'adf-version-list-item-date-' + version.entry.id\" >{{version.entry.modifiedAt | date}}</span>\n        </p>\n        <p mat-line [id]=\"'adf-version-list-item-comment-'+ version.entry.id\" class=\"adf-version-list-item-comment\"\n           *ngIf=\"showComments\">{{version.entry.versionComment}}</p>\n\n        <div *ngIf=\"showActions\">\n            <mat-menu [id]=\"'adf-version-list-action-menu-'+version.entry.id\"\n                      #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n                <button\n                    [id]=\"'adf-version-list-action-restore-'+version.entry.id\"\n                    [disabled]=\"!canUpdate()\"\n                    mat-menu-item\n                    (click)=\"restore(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.RESTORE' | translate }}\n                </button>\n                <button *ngIf=\"allowDownload\"\n                        [id]=\"'adf-version-list-action-download-'+version.entry.id\"\n                        mat-menu-item\n                        (click)=\"downloadVersion(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DOWNLOAD' | translate }}\n                </button>\n                <button\n                    [disabled]=\"!canDelete()\"\n                    [id]=\"'adf-version-list-action-delete-'+version.entry.id\"\n                    (click)=\"deleteVersion(version.entry.id)\"\n                    mat-menu-item>\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DELETE' | translate }}\n                </button>\n            </mat-menu>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\" [id]=\"'adf-version-list-action-menu-button-'+version.entry.id\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n        </div>\n    </mat-list-item>\n</mat-list>\n\n<ng-template #loading_template>\n    <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\"\n                      color=\"accent\"></mat-progress-bar>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': 'adf-version-list'
                    },
                    styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"]
                }] }
    ];
    /** @nocollapse */
    VersionListComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: ContentService },
        { type: MatDialog }
    ]; };
    VersionListComponent.propDecorators = {
        id: [{ type: Input }],
        node: [{ type: Input }],
        showComments: [{ type: Input }],
        allowDownload: [{ type: Input }],
        showActions: [{ type: Input }],
        restored: [{ type: Output }],
        deleted: [{ type: Output }]
    };
    return VersionListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var VersionManagerComponent = /** @class */ (function () {
    function VersionManagerComponent(config, contentService, alfrescoApiService) {
        this.contentService = contentService;
        this.alfrescoApiService = alfrescoApiService;
        /**
         * Toggles showing/hiding of comments.
         */
        this.showComments = true;
        /**
         * Enable/disable downloading a version of the current node.
         */
        this.allowDownload = true;
        /**
         * Emitted when a file is uploaded successfully.
         */
        this.uploadSuccess = new EventEmitter();
        /**
         * Emitted when an error occurs during upload.
         */
        this.uploadError = new EventEmitter();
        this.uploadState = 'close';
    }
    /**
     * @param {?} node
     * @return {?}
     */
    VersionManagerComponent.prototype.refresh = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.alfrescoApiService.nodeUpdated.next(node);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(node);
        this.uploadState = 'close';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VersionManagerComponent.prototype.onUploadSuccess = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.alfrescoApiService.nodeUpdated.next(event.value.entry);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(event.value.entry);
        this.uploadState = 'close';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VersionManagerComponent.prototype.onUploadError = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.uploadError.emit(event);
    };
    /**
     * @return {?}
     */
    VersionManagerComponent.prototype.onUploadCancel = /**
     * @return {?}
     */
    function () {
        this.uploadState = 'close';
    };
    /**
     * @return {?}
     */
    VersionManagerComponent.prototype.toggleNewVersion = /**
     * @return {?}
     */
    function () {
        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';
    };
    /**
     * @return {?}
     */
    VersionManagerComponent.prototype.canUpdate = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'update');
    };
    VersionManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-version-manager',
                    template: "<div class=\"adf-new-version-container\">\n    <div class=\"adf-new-version-uploader-container\" id=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\" [@uploadToggle]=\"uploadState\">\n        <table class=\"adf-version-upload\" *ngIf=\"uploadState !== 'close'\">\n            <tr>\n                <td>\n                    <adf-version-upload\n                        id=\"adf-version-upload-button\"\n                        [node]=\"node\"\n                        (success)=\"onUploadSuccess($event)\"\n                        (cancel)=\"onUploadCancel()\"\n                        (error)=\"onUploadError($event)\">\n                    </adf-version-upload>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"adf-version-list-container\">\n        <div class=\"adf-version-list-table\">\n            <div>\n                <button mat-raised-button\n                        id=\"adf-show-version-upload-button\"\n                        (click)=\"toggleNewVersion()\" color=\"primary\"\n                        *ngIf=\"uploadState ==='close'\">{{\n                    'ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD'|\n                    translate }}\n                </button>\n            </div>\n            <div>\n\n                <adf-version-list\n                    #versionList\n                    [node]=\"node\"\n                    [allowDownload]=\"allowDownload\"\n                    [showComments]=\"showComments\"\n                    (deleted)=\"refresh($event)\"\n                    (restored)=\"refresh($event)\">\n                </adf-version-list>\n            </div>\n        </div>\n    </div>\n</div>\n",
                    animations: [
                        trigger('uploadToggle', [
                            state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                            state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                            transition('open => close', [
                                style({ visibility: 'hidden' }),
                                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                            ]),
                            transition('close => open', [
                                style({ visibility: 'visible' }),
                                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                            ])
                        ])
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-button.upload-new-version{box-shadow:none;width:100%;height:175px;float:left;position:relative}.adf-new-version-uploader-container{border-bottom:1px solid #d8d8d8;padding:16px 0;width:100%;height:0%;position:relative;display:hidden;float:left!important}.adf-new-version-container{height:800px;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important;float:left!important}"]
                }] }
    ];
    /** @nocollapse */
    VersionManagerComponent.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: ContentService },
        { type: AlfrescoApiService }
    ]; };
    VersionManagerComponent.propDecorators = {
        node: [{ type: Input }],
        showComments: [{ type: Input }],
        allowDownload: [{ type: Input }],
        uploadSuccess: [{ type: Output }],
        uploadError: [{ type: Output }],
        versionListComponent: [{ type: ViewChild, args: ['versionList',] }]
    };
    return VersionManagerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var VersionUploadComponent = /** @class */ (function () {
    function VersionUploadComponent(contentService) {
        this.contentService = contentService;
        this.semanticVersion = 'minor';
        this.uploadVersion = false;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.cancel = new EventEmitter();
    }
    /**
     * @return {?}
     */
    VersionUploadComponent.prototype.canUpload = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'update');
    };
    /**
     * @return {?}
     */
    VersionUploadComponent.prototype.isMajorVersion = /**
     * @return {?}
     */
    function () {
        return this.semanticVersion === 'minor' ? false : true;
    };
    /**
     * @return {?}
     */
    VersionUploadComponent.prototype.cancelUpload = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
    };
    VersionUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-version-upload',
                    template: "<div class=\"adf-new-version-max-width\">\n    <mat-radio-group class=\"adf-new-version-radio-group\" [(ngModel)]=\"semanticVersion\">\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-minor\"[value]=\"'minor'\">{{\n            'ADF_VERSION_LIST.ACTIONS.UPLOAD.MINOR' |\n            translate }}\n        </mat-radio-button>\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-major\" [value]=\"'major'\">{{\n            'ADF_VERSION_LIST.ACTIONS.UPLOAD.MAJOR' |\n            translate }}\n        </mat-radio-button>\n    </mat-radio-group>\n    <mat-form-field class=\"adf-new-version-max-width\">\n                    <textarea matInput [(ngModel)]=\"comment\" class=\"adf-new-version-text-area\" id=\"adf-new-version-text-area\"\n                              placeholder=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.COMMENT' | translate }}\"></textarea>\n    </mat-form-field>\n\n</div>\n<div class=\"adf-version-upload-buttons\">\n    <adf-upload-version-button\n        data-automation-id=\"adf-new-version-file-upload\"\n        staticTitle=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE' | translate }}\"\n        [node]=\"node\"\n        [disabled]=\"!canUpload()\"\n        [rootFolderId]=\"node.parentId\"\n        tooltip=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP' | translate }}\"\n        [comment]=\"comment\"\n        [versioning]=\"true\"\n        [majorVersion]=\"isMajorVersion()\"\n        (success)=\"success.emit($event)\"\n        (error)=\"error.emit($event)\">\n    </adf-upload-version-button>\n    <button mat-raised-button (click)=\"cancelUpload()\" id=\"adf-new-version-cancel\"  >{{\n        'ADF_VERSION_LIST.ACTIONS.UPLOAD.CANCEL'| translate }}\n    </button>\n</div>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-version-upload' },
                    styles: [".adf-new-version-radio-group{display:inline-flex;flex-direction:column}.adf-new-version-radio-button{margin:5px}.adf-version-upload-buttons{display:flex;float:right;justify-content:space-between;width:100%}.adf-new-version-max-width{width:100%;float:right}.adf-new-version-text-area{resize:none!important}"]
                }] }
    ];
    /** @nocollapse */
    VersionUploadComponent.ctorParameters = function () { return [
        { type: ContentService }
    ]; };
    VersionUploadComponent.propDecorators = {
        node: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }],
        cancel: [{ type: Output }]
    };
    return VersionUploadComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var VersionManagerModule = /** @class */ (function () {
    function VersionManagerModule() {
    }
    VersionManagerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        CoreModule.forChild(),
                        UploadModule,
                        FormsModule
                    ],
                    exports: [
                        VersionUploadComponent,
                        VersionManagerComponent,
                        VersionListComponent,
                        FormsModule
                    ],
                    declarations: [
                        VersionUploadComponent,
                        VersionManagerComponent,
                        VersionListComponent
                    ]
                },] }
    ];
    return VersionManagerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NameLocationCellComponent = /** @class */ (function () {
    function NameLocationCellComponent() {
        this.name = '';
        this.path = '';
    }
    /**
     * @return {?}
     */
    NameLocationCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.row) {
            this.name = this.row.getValue('name');
            /** @type {?} */
            var fullPath = this.row.getValue('path');
            if (fullPath) {
                this.path = fullPath.name || '';
            }
        }
    };
    NameLocationCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-name-location-cell',
                    template: "\n        <div class=\"adf-name-location-cell-name\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location\" [title]=\"path\">{{ path }}</div>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'adf-name-location-cell' },
                    styles: [""]
                }] }
    ];
    NameLocationCellComponent.propDecorators = {
        row: [{ type: Input }]
    };
    return NameLocationCellComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Internal service used by ContentNodeSelector component.
 */
var ContentNodeSelectorService = /** @class */ (function () {
    function ContentNodeSelectorService(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    ContentNodeSelectorService.prototype.search = /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    function (searchTerm, rootNodeId, skipCount, maxItems, extraNodeIds) {
        if (rootNodeId === void 0) { rootNodeId = null; }
        if (skipCount === void 0) { skipCount = 0; }
        if (maxItems === void 0) { maxItems = 25; }
        /** @type {?} */
        var extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter(function (id) { return id !== rootNodeId; })
                .forEach(function (extraId) {
                extraParentFiltering += " OR ANCESTOR:'workspace://SpacesStore/" + extraId + "'";
            });
        }
        /** @type {?} */
        var parentFiltering = rootNodeId ? [{ query: "ANCESTOR:'workspace://SpacesStore/" + rootNodeId + "'" + extraParentFiltering }] : [];
        /** @type {?} */
        var defaultSearchNode = {
            query: {
                query: searchTerm + "* OR name:" + searchTerm + "*"
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: __spread([
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' }
            ], parentFiltering),
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    };
    ContentNodeSelectorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentNodeSelectorService.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    return ContentNodeSelectorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var defaultValidation = function () { return true; };
var ContentNodeSelectorPanelComponent = /** @class */ (function () {
    function ContentNodeSelectorPanelComponent(contentNodeSelectorService, apiService, customResourcesService, preferences) {
        var _this = this;
        this.contentNodeSelectorService = contentNodeSelectorService;
        this.apiService = apiService;
        this.customResourcesService = customResourcesService;
        this.preferences = preferences;
        /**
         * Node ID of the folder currently listed.
         */
        this.currentFolderId = null;
        /**
         * Hide the "My Files" option added to the site list by default.
         * See the [Sites Dropdown component](sites-dropdown.component.md)
         * for more information.
         */
        this.dropdownHideMyFiles = false;
        /**
         * Custom site for site dropdown same as siteList. See the
         * [Sites Dropdown component](sites-dropdown.component.md)
         * for more information.
         */
        this.dropdownSiteList = null;
        /**
         * Custom row filter function. See the
         * [Document List component](document-list.component.md#custom-row-filter)
         * for more information.
         */
        this.rowFilter = null;
        /**
         * Custom image resolver function. See the
         * [Document List component](document-list.component.md#custom-row-filter)
         * for more information.
         */
        this.imageResolver = null;
        /**
         * Function used to decide if the selected node has permission to be selected.
         * Default value is a function that always returns true.
         */
        this.isSelectionValid = defaultValidation;
        /**
         * Emitted when the user has chosen an item.
         */
        this.select = new EventEmitter();
        this.nodes = null;
        this.searchTerm = '';
        this.showingSearchResults = false;
        this.loadingSearchResults = false;
        this.inDialog = false;
        this._chosenNode = null;
        this.folderIdToShow = null;
        this.paginationStrategy = PaginationStrategy.Infinite;
        this.skipCount = 0;
        this.infiniteScroll = false;
        this.debounceSearch = 200;
        this.searchInput = new FormControl();
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch))
            .subscribe(function (searchValue) {
            _this.search(searchValue);
        });
        this.pageSize = this.preferences.paginationSize;
        /** @type {?} */
        var defaultPagination = /** @type {?} */ ({
            maxItems: this.pageSize,
            skipCount: 0,
            totalItems: 0,
            hasMoreItems: false
        });
        this.pagination = new BehaviorSubject(defaultPagination);
    }
    Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "chosenNode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._chosenNode;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._chosenNode = value;
            /** @type {?} */
            var valuesArray = null;
            if (value) {
                valuesArray = [value];
            }
            this.select.next(valuesArray);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.folderIdToShow = this.currentFolderId;
        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;
        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;
    };
    /**
     * Updates the site attribute and starts a new search
     *
     * @param chosenSite SiteEntry to search within
     */
    /**
     * Updates the site attribute and starts a new search
     *
     * @param {?} chosenSite SiteEntry to search within
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.siteChanged = /**
     * Updates the site attribute and starts a new search
     *
     * @param {?} chosenSite SiteEntry to search within
     * @return {?}
     */
    function (chosenSite) {
        this.siteId = chosenSite.entry.guid;
        this.updateResults();
    };
    /**
     * Updates the searchTerm attribute and starts a new search
     *
     * @param searchTerm string value to search against
     */
    /**
     * Updates the searchTerm attribute and starts a new search
     *
     * @param {?} searchTerm string value to search against
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.search = /**
     * Updates the searchTerm attribute and starts a new search
     *
     * @param {?} searchTerm string value to search against
     * @return {?}
     */
    function (searchTerm) {
        this.searchTerm = searchTerm;
        this.updateResults();
    };
    Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "breadcrumbFolderNode", {
        /**
         * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb
         */
        get: /**
         * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb
         * @return {?}
         */
        function () {
            /** @type {?} */
            var folderNode;
            if (this.showingSearchResults && this.chosenNode) {
                folderNode = this.chosenNode;
            }
            else {
                folderNode = this.documentList.folderNode;
            }
            return folderNode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Clear the search input and reset to last folder node in which search was performed
     */
    /**
     * Clear the search input and reset to last folder node in which search was performed
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.clear = /**
     * Clear the search input and reset to last folder node in which search was performed
     * @return {?}
     */
    function () {
        this.clearSearch();
        this.folderIdToShow = this.siteId || this.currentFolderId;
    };
    /**
     * Clear the search input and search related data
     */
    /**
     * Clear the search input and search related data
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.clearSearch = /**
     * Clear the search input and search related data
     * @return {?}
     */
    function () {
        this.searchTerm = '';
        this.nodes = null;
        this.skipCount = 0;
        this.chosenNode = null;
        this.showingSearchResults = false;
    };
    /**
     * Update the result list depending on the criterias
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.updateResults = /**
     * Update the result list depending on the criterias
     * @return {?}
     */
    function () {
        if (this.searchTerm.length === 0) {
            this.clear();
        }
        else {
            this.startNewSearch();
        }
    };
    /**
     * Load the first page of a new search result
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.startNewSearch = /**
     * Load the first page of a new search result
     * @return {?}
     */
    function () {
        this.nodes = null;
        this.skipCount = 0;
        this.chosenNode = null;
        this.folderIdToShow = null;
        this.querySearch();
    };
    /**
     * Loads the next batch of search results
     *
     * @param event Pagination object
     */
    /**
     * Loads the next batch of search results
     *
     * @param {?} pagination
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.updatePagination = /**
     * Loads the next batch of search results
     *
     * @param {?} pagination
     * @return {?}
     */
    function (pagination) {
        this.infiniteScroll = true;
        this.skipCount = pagination.skipCount;
        if (this.searchTerm.length > 0) {
            this.querySearch();
        }
    };
    /**
     * Perform the call to searchService with the proper parameters
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.querySearch = /**
     * Perform the call to searchService with the proper parameters
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadingSearchResults = true;
        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {
            this.customResourcesService.getCorrespondingNodeIds(this.siteId)
                .subscribe(function (nodeIds) {
                _this.contentNodeSelectorService.search(_this.searchTerm, _this.siteId, _this.skipCount, _this.pageSize, nodeIds)
                    .subscribe(_this.showSearchResults.bind(_this));
            }, function () {
                _this.showSearchResults({ list: { entries: [] } });
            });
        }
        else {
            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize)
                .subscribe(this.showSearchResults.bind(this));
        }
    };
    /**
     * Show the results of the search
     *
     * @param {?} nodePaging
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.showSearchResults = /**
     * Show the results of the search
     *
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        this.showingSearchResults = true;
        this.loadingSearchResults = false;
        // Documentlist hack, since data displaying for preloaded nodes is a little bit messy there
        if (!this.nodes) {
            this.nodes = nodePaging;
        }
        else {
            this.documentList.data.loadPage(nodePaging, true);
        }
        this.pagination.next(nodePaging.list.pagination);
        this.highlight();
    };
    /**
     * Hightlight the actual searchterm in the next frame
     */
    /**
     * Hightlight the actual searchterm in the next frame
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.highlight = /**
     * Hightlight the actual searchterm in the next frame
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.highlighter.highlight(_this.searchTerm);
        }, 0);
    };
    /**
     * Sets showingSearchResults state to be able to differentiate between search results or folder results
     */
    /**
     * Sets showingSearchResults state to be able to differentiate between search results or folder results
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.onFolderChange = /**
     * Sets showingSearchResults state to be able to differentiate between search results or folder results
     * @return {?}
     */
    function () {
        this.showingSearchResults = false;
        this.infiniteScroll = false;
        this.clearSearch();
    };
    /**
     * Attempts to set the currently loaded node
     */
    /**
     * Attempts to set the currently loaded node
     * @param {?} nodePaging
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.onFolderLoaded = /**
     * Attempts to set the currently loaded node
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        if (!this.showingSearchResults) {
            this.attemptNodeSelection(this.documentList.folderNode);
        }
    };
    /**
     * Returns whether breadcrumb has to be shown or not
     */
    /**
     * Returns whether breadcrumb has to be shown or not
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.showBreadcrumbs = /**
     * Returns whether breadcrumb has to be shown or not
     * @return {?}
     */
    function () {
        return !this.showingSearchResults || this.chosenNode;
    };
    /**
     * Loads the next batch of search results
     *
     * @param event Pagination object
     */
    /**
     * Loads the next batch of search results
     *
     * @param {?} event Pagination object
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.getNextPageOfSearch = /**
     * Loads the next batch of search results
     *
     * @param {?} event Pagination object
     * @return {?}
     */
    function (event) {
        this.infiniteScroll = true;
        this.skipCount = event.skipCount;
        if (this.searchTerm.length > 0) {
            this.querySearch();
        }
    };
    /**
     * Selects node as chosen if it has the right permission, clears the selection otherwise
     *
     * @param {?} entry
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.attemptNodeSelection = /**
     * Selects node as chosen if it has the right permission, clears the selection otherwise
     *
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        if (this.isSelectionValid(entry)) {
            this.chosenNode = entry;
        }
        else {
            this.resetChosenNode();
        }
    };
    /**
     * Clears the chosen node
     */
    /**
     * Clears the chosen node
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.resetChosenNode = /**
     * Clears the chosen node
     * @return {?}
     */
    function () {
        this.chosenNode = null;
    };
    /**
     * Invoked when user selects a node
     *
     * @param event CustomEvent for node-select
     */
    /**
     * Invoked when user selects a node
     *
     * @param {?} event CustomEvent for node-select
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.onNodeSelect = /**
     * Invoked when user selects a node
     *
     * @param {?} event CustomEvent for node-select
     * @return {?}
     */
    function (event) {
        this.attemptNodeSelection(event.detail.node.entry);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ContentNodeSelectorPanelComponent.prototype.onNodeDoubleClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        /** @type {?} */
        var node = e.detail.node.entry;
        if (node && node.guid) {
            /** @type {?} */
            var options = {
                maxItems: this.pageSize,
                skipCount: this.skipCount,
                include: ['path', 'properties', 'allowableOperations']
            };
            this.apiService.nodesApi.getNode(node.guid, options)
                .then(function (documentLibrary) {
                _this.documentList.performCustomSourceNavigation(documentLibrary);
            });
        }
    };
    ContentNodeSelectorPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-node-selector-panel',
                    template: "<div class=\"adf-content-node-selector-content\" (node-select)=\"onNodeSelect($event)\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n\n    <adf-sites-dropdown\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span class=\"search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            adf-highlight\n            adf-highlight-selector=\"adf-name-location-cell .adf-name-location-cell-name\"\n            [showHeader]=\"false\"\n            [node]=\"nodes\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            selectionMode=\"single\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            (folderChange)=\"onFolderChange()\"\n            (ready)=\"onFolderLoaded($event)\"\n            (node-dblclick)=\"onNodeDoubleClick($event)\"\n            data-automation-id=\"content-node-selector-document-list\">\n            <empty-folder-content>\n                <ng-template>\n                    <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n                </ng-template>\n            </empty-folder-content>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" class=\"full-width ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"modifiedByUser.displayName\" type=\"text\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"documentList\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-content-node-selector-panel' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentNodeSelectorPanelComponent.ctorParameters = function () { return [
        { type: ContentNodeSelectorService },
        { type: AlfrescoApiService },
        { type: CustomResourcesService },
        { type: UserPreferencesService }
    ]; };
    ContentNodeSelectorPanelComponent.propDecorators = {
        currentFolderId: [{ type: Input }],
        dropdownHideMyFiles: [{ type: Input }],
        dropdownSiteList: [{ type: Input }],
        rowFilter: [{ type: Input }],
        imageResolver: [{ type: Input }],
        pageSize: [{ type: Input }],
        isSelectionValid: [{ type: Input }],
        breadcrumbTransform: [{ type: Input }],
        select: [{ type: Output }],
        documentList: [{ type: ViewChild, args: ['documentList',] }],
        highlighter: [{ type: ViewChild, args: [HighlightDirective,] }]
    };
    return ContentNodeSelectorPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentNodeSelectorModule = /** @class */ (function () {
    function ContentNodeSelectorModule() {
    }
    ContentNodeSelectorModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FormsModule,
                        ReactiveFormsModule,
                        CoreModule.forChild(),
                        CommonModule,
                        MaterialModule,
                        SitesDropdownModule,
                        BreadcrumbModule,
                        DocumentListModule
                    ],
                    exports: [
                        ContentNodeSelectorPanelComponent,
                        NameLocationCellComponent,
                        ContentNodeSelectorComponent
                    ],
                    entryComponents: [
                        ContentNodeSelectorPanelComponent,
                        ContentNodeSelectorComponent
                    ],
                    declarations: [
                        ContentNodeSelectorPanelComponent,
                        NameLocationCellComponent,
                        ContentNodeSelectorComponent
                    ]
                },] }
    ];
    return ContentNodeSelectorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';
/**
 * @param {?} __0
 * @return {?}
 */
function forbidSpecialCharacters(_a) {
    var value = _a.value;
    /** @type {?} */
    var specialCharacters = /([\*\"\<\>\\\/\?\:\|])/;
    /** @type {?} */
    var isValid = !specialCharacters.test(value);
    return (isValid) ? null : {
        message: I18N_ERRORS_PATH + ".SPECIAL_CHARACTERS"
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function forbidEndingDot(_a) {
    var value = _a.value;
    /** @type {?} */
    var isValid = ((value || '').trim().split('').pop() !== '.');
    return isValid ? null : {
        message: I18N_ERRORS_PATH + ".ENDING_DOT"
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function forbidOnlySpaces(_a) {
    var value = _a.value;
    /** @type {?} */
    var isValid = !!((value || '')).trim();
    return isValid ? null : {
        message: I18N_ERRORS_PATH + ".ONLY_SPACES"
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FolderDialogComponent = /** @class */ (function () {
    function FolderDialogComponent(formBuilder, dialog, nodesApi, translation, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.nodesApi = nodesApi;
        this.translation = translation;
        this.data = data;
        this.folder = null;
        /**
         * Emitted when the edit/create folder give error for example a folder with same name already exist
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the edit/create folder is successfully created/mmodified
         */
        this.success = new EventEmitter();
        this.editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';
        this.createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';
        this.nodeType = 'cm:folder';
        if (data) {
            this.editTitle = data.editTitle || this.editTitle;
            this.createTitle = data.createTitle || this.createTitle;
            this.nodeType = data.nodeType || this.nodeType;
        }
    }
    Object.defineProperty(FolderDialogComponent.prototype, "editing", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.data.folder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var folder = this.data.folder;
        /** @type {?} */
        var name = '';
        /** @type {?} */
        var description = '';
        if (folder) {
            var properties = folder.properties;
            name = folder.name || '';
            description = properties ? properties['cm:description'] : '';
        }
        /** @type {?} */
        var validators = {
            name: [
                Validators.required,
                forbidSpecialCharacters,
                forbidEndingDot,
                forbidOnlySpaces
            ]
        };
        this.form = this.formBuilder.group({
            name: [name, validators.name],
            description: [description]
        });
    };
    Object.defineProperty(FolderDialogComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            var name = this.form.value.name;
            return (name || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderDialogComponent.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            var description = this.form.value.description;
            return (description || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderDialogComponent.prototype, "properties", {
        get: /**
         * @return {?}
         */
        function () {
            var _a = this, title = _a.name, description = _a.description;
            return {
                'cm:title': title,
                'cm:description': description
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderDialogComponent.prototype.create = /**
     * @return {?}
     */
    function () {
        var _a = this, name = _a.name, properties = _a.properties, nodeType = _a.nodeType, nodesApi = _a.nodesApi, parentNodeId = _a.data.parentNodeId;
        return nodesApi.createFolder(parentNodeId, { name: name, properties: properties, nodeType: nodeType });
    };
    /**
     * @return {?}
     */
    FolderDialogComponent.prototype.edit = /**
     * @return {?}
     */
    function () {
        var _a = this, name = _a.name, properties = _a.properties, nodesApi = _a.nodesApi, nodeId = _a.data.folder.id;
        return nodesApi.updateNode(nodeId, { name: name, properties: properties });
    };
    /**
     * @return {?}
     */
    FolderDialogComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, form = _a.form, dialog = _a.dialog, editing = _a.editing;
        if (!form.valid) {
            return;
        }
        (editing ? this.edit() : this.create())
            .subscribe(function (folder) {
            _this.success.emit(folder);
            dialog.close(folder);
        }, function (error) { return _this.handleError(error); });
    };
    /**
     * @param {?} error
     * @return {?}
     */
    FolderDialogComponent.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';
        try {
            var statusCode = JSON.parse(error.message).error.statusCode;
            if (statusCode === 409) {
                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';
            }
        }
        catch (err) { /* Do nothing, keep the original message */
            /* Do nothing, keep the original message */ 
        }
        this.error.emit(this.translation.instant(errorMessage));
        return error;
    };
    FolderDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-folder-dialog',
                    template: "<h2 mat-dialog-title>\n    {{ (editing ? editTitle : createTitle) | translate }}\n</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-name-input\"\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                matInput\n                required\n                [formControl]=\"form.controls['name']\"/>\n\n            <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                <span *ngIf=\"form.controls['name'].errors?.required\">\n                    {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                </span>\n\n                <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                    {{ form.controls['name'].errors?.message | translate }}\n                </span>\n            </mat-hint>\n        </mat-form-field>\n\n        <br />\n        <br />\n\n        <mat-form-field class=\"adf-full-width\">\n            <textarea\n                id=\"adf-folder-description-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                rows=\"4\"\n                [formControl]=\"form.controls['description']\"></textarea>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button\n        mat-button\n        id=\"adf-folder-cancel-button\"\n        mat-dialog-close>\n        {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\"\n            id=\"adf-folder-create-button\"\n            mat-button\n            (click)=\"submit()\"\n            [disabled]=\"!form.valid\">\n        {{\n        (editing\n        ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n        : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n        ) | translate\n        }}\n    </button>\n</mat-dialog-actions>\n",
                    styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}"]
                }] }
    ];
    /** @nocollapse */
    FolderDialogComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MatDialogRef },
        { type: NodesApiService },
        { type: TranslationService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    FolderDialogComponent.propDecorators = {
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return FolderDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DialogModule = /** @class */ (function () {
    function DialogModule() {
    }
    DialogModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        CoreModule.forChild(),
                        FormsModule,
                        ReactiveFormsModule,
                        MatMomentDatetimeModule,
                        MatDatetimepickerModule
                    ],
                    declarations: [
                        DownloadZipDialogComponent,
                        FolderDialogComponent,
                        NodeLockDialogComponent,
                        ConfirmDialogComponent
                    ],
                    exports: [
                        DownloadZipDialogComponent,
                        FolderDialogComponent,
                        NodeLockDialogComponent,
                        ConfirmDialogComponent
                    ],
                    entryComponents: [
                        DownloadZipDialogComponent,
                        FolderDialogComponent,
                        NodeLockDialogComponent,
                        ConfirmDialogComponent
                    ]
                },] }
    ];
    return DialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_FOLDER_PARENT_ID = '-my-';
var FolderCreateDirective = /** @class */ (function () {
    function FolderCreateDirective(dialogRef, content) {
        this.dialogRef = dialogRef;
        this.content = content;
        /**
         * Parent folder where the new folder will be located after creation.
         */
        this.parentNodeId = DEFAULT_FOLDER_PARENT_ID;
        /**
         * Title of folder creation dialog.
         */
        this.title = null;
        /**
         * Type of node to create.
         */
        this.nodeType = 'cm:folder';
        /**
         * Emitted when an error occurs (eg, a folder with same name already exists).
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the folder is created successfully.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FolderCreateDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.openDialog();
    };
    Object.defineProperty(FolderCreateDirective.prototype, "dialogConfig", {
        get: /**
         * @return {?}
         */
        function () {
            var width = FolderCreateDirective.DIALOG_WIDTH;
            var _a = this, parentNodeId = _a.parentNodeId, createTitle = _a.title, nodeType = _a.nodeType;
            return {
                data: { parentNodeId: parentNodeId, createTitle: createTitle, nodeType: nodeType },
                width: width + "px"
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderCreateDirective.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
        /** @type {?} */
        var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe(function (error) {
            _this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe(function (node) {
            _this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe(function (node) {
            if (node) {
                content.folderCreate.next(node);
            }
        });
    };
    FolderCreateDirective.DIALOG_WIDTH = 400;
    FolderCreateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-create-folder]'
                },] }
    ];
    /** @nocollapse */
    FolderCreateDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ContentService }
    ]; };
    FolderCreateDirective.propDecorators = {
        parentNodeId: [{ type: Input, args: ['adf-create-folder',] }],
        title: [{ type: Input }],
        nodeType: [{ type: Input }],
        error: [{ type: Output }],
        success: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FolderCreateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FolderEditDirective = /** @class */ (function () {
    function FolderEditDirective(dialogRef, elementRef, content) {
        this.dialogRef = dialogRef;
        this.elementRef = elementRef;
        this.content = content;
        /**
         * Emitted when an error occurs (eg, a folder with same name already exists).
         */
        this.error = new EventEmitter();
        /**
         * Title of folder edit dialog.
         */
        this.title = null;
        /**
         * Emitted when the folder has been edited successfully.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FolderEditDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.folder) {
            this.openDialog();
        }
    };
    Object.defineProperty(FolderEditDirective.prototype, "dialogConfig", {
        get: /**
         * @return {?}
         */
        function () {
            var width = FolderEditDirective.DIALOG_WIDTH;
            var folder = this.folder;
            return {
                data: {
                    folder: folder,
                    editTitle: this.title
                },
                width: width + "px"
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderEditDirective.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
        /** @type {?} */
        var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe(function (error) {
            _this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe(function (node) {
            _this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe(function (node) {
            if (node) {
                content.folderEdit.next(node);
            }
        });
    };
    FolderEditDirective.DIALOG_WIDTH = 400;
    FolderEditDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-edit-folder]'
                },] }
    ];
    /** @nocollapse */
    FolderEditDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ElementRef },
        { type: ContentService }
    ]; };
    FolderEditDirective.propDecorators = {
        folder: [{ type: Input, args: ['adf-edit-folder',] }],
        error: [{ type: Output }],
        title: [{ type: Input }],
        success: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FolderEditDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FolderDirectiveModule = /** @class */ (function () {
    function FolderDirectiveModule() {
    }
    FolderDirectiveModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule
                    ],
                    declarations: [
                        FolderCreateDirective,
                        FolderEditDirective
                    ],
                    exports: [
                        FolderCreateDirective,
                        FolderEditDirective
                    ]
                },] }
    ];
    return FolderDirectiveModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentMetadataCardComponent = /** @class */ (function () {
    function ContentMetadataCardComponent(contentService) {
        this.contentService = contentService;
        /**
         * (optional) This flag displays/hides empty metadata
         * fields.
         */
        this.displayEmpty = false;
        /**
         * (optional) This flag sets the metadata in read only mode
         * preventing changes.
         */
        this.readOnly = false;
        /**
         * (optional) This flag allows the component to display more
         * than one accordion at a time.
         */
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
    }
    Object.defineProperty(ContentMetadataCardComponent.prototype, "displayDefaultProperties", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayDefaultProperties;
        },
        /** (optional) This flag displays/hides the metadata
         * properties.
         */
        set: /**
         * (optional) This flag displays/hides the metadata
         * properties.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayDefaultProperties = value;
            this.onDisplayDefaultPropertiesChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.onDisplayDefaultPropertiesChange = /**
     * @return {?}
     */
    function () {
        this.expanded = !this._displayDefaultProperties;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleEdit = /**
     * @return {?}
     */
    function () {
        this.editable = !this.editable;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleExpanded = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.hasPermission = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, PermissionsEnum.UPDATE);
    };
    ContentMetadataCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-metadata-card',
                    template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"!readOnly && hasPermission()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-content-metadata-card' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentMetadataCardComponent.ctorParameters = function () { return [
        { type: ContentService }
    ]; };
    ContentMetadataCardComponent.propDecorators = {
        node: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        preset: [{ type: Input }],
        readOnly: [{ type: Input }],
        multi: [{ type: Input }],
        displayDefaultProperties: [{ type: Input }]
    };
    return ContentMetadataCardComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BasicPropertiesService = /** @class */ (function () {
    function BasicPropertiesService(fileSizePipe) {
        this.fileSizePipe = fileSizePipe;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    BasicPropertiesService.prototype.getProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var sizeInBytes = node.content ? node.content.sizeInBytes : '';
        /** @type {?} */
        var mimeTypeName = node.content ? node.content.mimeTypeName : '';
        /** @type {?} */
        var author = node.properties ? node.properties['cm:author'] : '';
        /** @type {?} */
        var description = node.properties ? node.properties['cm:description'] : '';
        /** @type {?} */
        var title = node.properties ? node.properties['cm:title'] : '';
        return [
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.NAME',
                value: node.name,
                key: 'name',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.TITLE',
                value: title,
                key: 'properties.cm:title',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.CREATOR',
                value: node.createdByUser.displayName,
                key: 'createdByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.CREATED_DATE',
                value: node.createdAt,
                key: 'createdAt',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.SIZE',
                value: sizeInBytes,
                key: 'content.sizeInBytes',
                pipes: [{ pipe: this.fileSizePipe }],
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIER',
                value: node.modifiedByUser.displayName,
                key: 'modifiedByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',
                value: node.modifiedAt,
                key: 'modifiedAt',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MIMETYPE',
                value: mimeTypeName,
                key: 'content.mimeTypeName',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.AUTHOR',
                value: author,
                key: 'properties.cm:author',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.DESCRIPTION',
                value: description,
                key: 'properties.cm:description',
                multiline: true,
                editable: true
            })
        ];
    };
    BasicPropertiesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BasicPropertiesService.ctorParameters = function () { return [
        { type: FileSizePipe }
    ]; };
    return BasicPropertiesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var D_TEXT = 'd:text';
/** @type {?} */
var D_MLTEXT = 'd:mltext';
/** @type {?} */
var D_DATE = 'd:date';
/** @type {?} */
var D_DATETIME = 'd:datetime';
/** @type {?} */
var D_INT = 'd:int';
/** @type {?} */
var D_LONG = 'd:long';
/** @type {?} */
var D_FLOAT = 'd:float';
/** @type {?} */
var D_DOUBLE = 'd:double';
/** @type {?} */
var D_BOOLEAN = 'd:boolean';
var PropertyGroupTranslatorService = /** @class */ (function () {
    function PropertyGroupTranslatorService(logService) {
        this.logService = logService;
    }
    /**
     * @param {?} propertyGroups
     * @param {?} propertyValues
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.translateToCardViewGroups = /**
     * @param {?} propertyGroups
     * @param {?} propertyValues
     * @return {?}
     */
    function (propertyGroups, propertyValues) {
        var _this = this;
        return propertyGroups.map(function (propertyGroup) {
            /** @type {?} */
            var translatedPropertyGroup = Object.assign({}, propertyGroup);
            translatedPropertyGroup.properties = _this.translateArray(propertyGroup.properties, propertyValues);
            return translatedPropertyGroup;
        });
    };
    /**
     * @param {?} properties
     * @param {?} propertyValues
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.translateArray = /**
     * @param {?} properties
     * @param {?} propertyValues
     * @return {?}
     */
    function (properties, propertyValues) {
        var _this = this;
        return properties.map(function (property) {
            return _this.translate(property, propertyValues[property.name]);
        });
    };
    /**
     * @param {?} property
     * @param {?} propertyValue
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.translate = /**
     * @param {?} property
     * @param {?} propertyValue
     * @return {?}
     */
    function (property, propertyValue) {
        this.checkECMTypeValidity(property.dataType);
        /** @type {?} */
        var prefix = 'properties.';
        /** @type {?} */
        var propertyDefinition = {
            label: property.title,
            value: propertyValue,
            key: "" + prefix + property.name,
            default: property.defaultValue,
            editable: true
        };
        /** @type {?} */
        var cardViewItemProperty;
        switch (property.dataType) {
            case D_MLTEXT:
                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                    multiline: true
                }));
                break;
            case D_INT:
            case D_LONG:
                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);
                break;
            case D_FLOAT:
            case D_DOUBLE:
                cardViewItemProperty = new CardViewFloatItemModel(propertyDefinition);
                break;
            case D_DATE:
                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);
                break;
            case D_DATETIME:
                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);
                break;
            case D_BOOLEAN:
                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);
                break;
            case D_TEXT:
            default:
                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                    multiline: false
                }));
        }
        return cardViewItemProperty;
    };
    /**
     * @param {?} ecmPropertyType
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.checkECMTypeValidity = /**
     * @param {?} ecmPropertyType
     * @return {?}
     */
    function (ecmPropertyType) {
        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {
            this.logService.error("Unknown type for mapping: " + ecmPropertyType);
        }
    };
    PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];
    PropertyGroupTranslatorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PropertyGroupTranslatorService.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    return PropertyGroupTranslatorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var emptyGroup = {
    properties: {}
};
/**
 * @param {?} object
 * @return {?}
 */
function convertObjectToArray(object) {
    return Object.keys(object).map(function (key) { return object[key]; });
}
/**
 * @param {?} propertyGroups
 * @param {?} groupName
 * @return {?}
 */
function getGroup(propertyGroups, groupName) {
    return propertyGroups[groupName];
}
/**
 * @param {?} propertyGroups
 * @param {?} groupName
 * @param {?} propertyName
 * @return {?}
 */
function getProperty(propertyGroups, groupName, propertyName) {
    /** @type {?} */
    var groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;
    /** @type {?} */
    var propertyDefinitions;
    if (propertyName === '*') {
        propertyDefinitions = convertObjectToArray(groupDefinition.properties);
    }
    else {
        propertyDefinitions = groupDefinition.properties[propertyName];
    }
    return propertyDefinitions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AspectOrientedConfigService = /** @class */ (function () {
    function AspectOrientedConfigService(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    AspectOrientedConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        /** @type {?} */
        var groupNames = Object.keys(this.config);
        return groupNames.indexOf(groupName) !== -1;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    AspectOrientedConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        var _this = this;
        /** @type {?} */
        var aspects = this.config;
        /** @type {?} */
        var aspectNames = Object.keys(aspects);
        return aspectNames
            .reduce(function (groupAccumulator, aspectName) {
            /** @type {?} */
            var newGroup = _this.getOrganisedPropertyGroup(propertyGroups, aspectName);
            return groupAccumulator.concat(newGroup);
        }, [])
            .filter(function (organisedPropertyGroup) { return organisedPropertyGroup.properties.length > 0; });
    };
    /**
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    AspectOrientedConfigService.prototype.getOrganisedPropertyGroup = /**
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    function (propertyGroups, aspectName) {
        /** @type {?} */
        var group = getGroup(propertyGroups, aspectName);
        /** @type {?} */
        var newGroup = [];
        if (group) {
            /** @type {?} */
            var aspectProperties = this.config[aspectName];
            /** @type {?} */
            var properties = void 0;
            if (aspectProperties === '*') {
                properties = getProperty(propertyGroups, aspectName, aspectProperties);
            }
            else {
                properties = (/** @type {?} */ (aspectProperties))
                    .map(function (propertyName) { return getProperty(propertyGroups, aspectName, propertyName); })
                    .filter(function (props) { return props !== undefined; });
            }
            newGroup = [{ title: group.title, properties: properties }];
        }
        return newGroup;
    };
    return AspectOrientedConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var IndifferentConfigService = /** @class */ (function () {
    function IndifferentConfigService(config) {
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    IndifferentConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return true;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    IndifferentConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        return Object.keys(propertyGroups)
            .map(function (groupName) {
            /** @type {?} */
            var propertyGroup = propertyGroups[groupName];
            /** @type {?} */
            var properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map(function (propertyName) { return properties[propertyName]; })
            });
        });
    };
    return IndifferentConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LayoutOrientedConfigService = /** @class */ (function () {
    function LayoutOrientedConfigService(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return this.getMatchingGroups(groupName).length > 0;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        var _this = this;
        /** @type {?} */
        var layoutBlocks = this.config;
        return layoutBlocks.map(function (layoutBlock) {
            /** @type {?} */
            var flattenedItems = _this.flattenItems(layoutBlock.items);
            /** @type {?} */
            var properties = flattenedItems.reduce(function (props, explodedItem) {
                /** @type {?} */
                var property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];
                return props.concat(property);
            }, []);
            return {
                title: layoutBlock.title,
                properties: properties
            };
        });
    };
    /**
     * @param {?} items
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.flattenItems = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        return items.reduce(function (accumulator, item) {
            /** @type {?} */
            var properties = Array.isArray(item.properties) ? item.properties : [item.properties];
            /** @type {?} */
            var flattenedProperties = properties.map(function (propertyName) {
                return {
                    groupName: item.aspect || item.type,
                    propertyName: propertyName
                };
            });
            return accumulator.concat(flattenedProperties);
        }, []);
    };
    /**
     * @param {?} groupName
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.getMatchingGroups = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return this.config
            .map(function (layoutBlock) { return layoutBlock.items; })
            .reduce(function (accumulator, items) { return accumulator.concat(items); }, [])
            .filter(function (item) { return item.aspect === groupName || item.type === groupName; });
    };
    return LayoutOrientedConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentMetadataConfigFactory = /** @class */ (function () {
    function ContentMetadataConfigFactory(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    /**
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.get = /**
     * @param {?=} presetName
     * @return {?}
     */
    function (presetName) {
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error("No content-metadata preset for: " + presetName);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    };
    /**
     * @param {?} presetConfig
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.createConfig = /**
     * @param {?} presetConfig
     * @return {?}
     */
    function (presetConfig) {
        /** @type {?} */
        var config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService(/** @type {?} */ (presetConfig));
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService(/** @type {?} */ (presetConfig));
        }
        else {
            config = new IndifferentConfigService(/** @type {?} */ (presetConfig));
        }
        Object.freeze(config);
        return config;
    };
    /**
     * @param {?} presetConfig
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.isAspectOrientedPreset = /**
     * @param {?} presetConfig
     * @return {?}
     */
    function (presetConfig) {
        return this.isObject(presetConfig);
    };
    /**
     * @param {?} presetConfig
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.isLayoutOrientedPreset = /**
     * @param {?} presetConfig
     * @return {?}
     */
    function (presetConfig) {
        return Array.isArray(presetConfig);
    };
    /**
     * @param {?} x
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.isObject = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        return x != null && typeof x === 'object';
    };
    ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
    ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
    ContentMetadataConfigFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentMetadataConfigFactory.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: LogService }
    ]; };
    return ContentMetadataConfigFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PropertyDescriptorsService = /** @class */ (function () {
    function PropertyDescriptorsService(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * @param {?} groupNames
     * @return {?}
     */
    PropertyDescriptorsService.prototype.load = /**
     * @param {?} groupNames
     * @return {?}
     */
    function (groupNames) {
        var _this = this;
        /** @type {?} */
        var groupFetchStreams = groupNames
            .map(function (groupName) { return groupName.replace(':', '_'); })
            .map(function (groupName) { return defer(function () { return _this.alfrescoApiService.classesApi.getClass(groupName); }); });
        return forkJoin(groupFetchStreams).pipe(map(this.convertToObject));
    };
    /**
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    PropertyDescriptorsService.prototype.convertToObject = /**
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    function (propertyGroupsArray) {
        return propertyGroupsArray.reduce(function (propertyGroups, propertyGroup) {
            var _a;
            return Object.assign({}, propertyGroups, (_a = {},
                _a[propertyGroup.name] = propertyGroup,
                _a));
        }, {});
    };
    PropertyDescriptorsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PropertyDescriptorsService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    return PropertyDescriptorsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentMetadataService = /** @class */ (function () {
    function ContentMetadataService(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ContentMetadataService.prototype.getBasicProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return of(this.basicPropertiesService.getProperties(node));
    };
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataService.prototype.getGroupedProperties = /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    function (node, presetName) {
        var _this = this;
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            var config_1 = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            var groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter(function (groupName) { return config_1.isGroupAllowed(groupName); });
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(map(function (groups) { return config_1.reorganiseByConfig(groups); }), map(function (groups) { return _this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties); }));
            }
        }
        return groupedProperties;
    };
    ContentMetadataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentMetadataService.ctorParameters = function () { return [
        { type: BasicPropertiesService },
        { type: ContentMetadataConfigFactory },
        { type: PropertyGroupTranslatorService },
        { type: PropertyDescriptorsService }
    ]; };
    return ContentMetadataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentMetadataComponent = /** @class */ (function () {
    function ContentMetadataComponent(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService) {
        this.contentMetadataService = contentMetadataService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.nodesApiService = nodesApiService;
        this.logService = logService;
        this.alfrescoApiService = alfrescoApiService;
        /**
         * Toggles whether the edit button should be shown
         */
        this.editable = false;
        /**
         * Toggles whether to display empty values in the card view
         */
        this.displayEmpty = false;
        /**
         * Toggles between expanded (ie, full information) and collapsed
         * (ie, reduced information) in the display
         */
        this.expanded = false;
        /**
         * The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time
         */
        this.multi = false;
        /**
         * Toggles whether the metadata properties should be shown
         */
        this.displayDefaultProperties = true;
    }
    /**
     * @return {?}
     */
    ContentMetadataComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.disposableNodeUpdate = this.cardViewUpdateService.itemUpdated$
            .pipe(switchMap(this.saveNode.bind(this)))
            .subscribe(function (updatedNode) {
            Object.assign(_this.node, updatedNode);
            _this.alfrescoApiService.nodeUpdated.next(_this.node);
        }, function (error) { return _this.logService.error(error); });
        this.loadProperties(this.node);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ContentMetadataComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["node"] && !changes["node"].firstChange) {
            this.loadProperties(changes["node"].currentValue);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ContentMetadataComponent.prototype.loadProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);
            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ContentMetadataComponent.prototype.saveNode = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var nodeBody = _a.changed;
        return this.nodesApiService.updateNode(this.node.id, nodeBody);
    };
    /**
     * @return {?}
     */
    ContentMetadataComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposableNodeUpdate.unsubscribe();
    };
    ContentMetadataComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-metadata',
                    template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\" [multi]=\"multi\">\n        <mat-expansion-panel\n            *ngIf=\"displayDefaultProperties\"\n            [expanded]=\"!expanded\"\n            [hideToggle]=\"!expanded\"\n            [attr.data-automation-id]=\"'adf-metadata-group-properties'\" >\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-card-view\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\" class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel\n                    [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                    [expanded]=\"!displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n</div>\n",
                    host: { 'class': 'adf-content-metadata' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentMetadataComponent.ctorParameters = function () { return [
        { type: ContentMetadataService },
        { type: CardViewUpdateService },
        { type: NodesApiService },
        { type: LogService },
        { type: AlfrescoApiService }
    ]; };
    ContentMetadataComponent.propDecorators = {
        node: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        expanded: [{ type: Input }],
        multi: [{ type: Input }],
        preset: [{ type: Input }],
        displayDefaultProperties: [{ type: Input }]
    };
    return ContentMetadataComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentMetadataModule = /** @class */ (function () {
    function ContentMetadataModule() {
    }
    ContentMetadataModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        FlexLayoutModule,
                        CoreModule.forChild()
                    ],
                    exports: [
                        ContentMetadataComponent,
                        ContentMetadataCardComponent
                    ],
                    declarations: [
                        ContentMetadataComponent,
                        ContentMetadataCardComponent
                    ]
                },] }
    ];
    return ContentMetadataModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PermissionDisplayModel = /** @class */ (function () {
    function PermissionDisplayModel(obj) {
        this.isInherited = false;
        if (obj) {
            this.authorityId = obj.authorityId;
            this.name = obj.name;
            this.accessStatus = obj.accessStatus;
            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;
            this.icon = obj.icon ? obj.icon : 'vpn_key';
        }
    }
    return PermissionDisplayModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodePermissionService = /** @class */ (function () {
    function NodePermissionService(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    /**
     * Gets a list of roles for the current node.
     * @param node The target node
     * @returns Array of strings representing the roles
     */
    /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    NodePermissionService.prototype.getNodeRoles = /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap(function (siteNodeList) {
            if (siteNodeList.list.entries.length > 0) {
                /** @type {?} */
                var siteName = siteNodeList.list.entries[0].entry.name;
                return _this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of(node.permissions.settable);
            }
        }));
    };
    /**
     * Updates the permission role for a node.
     * @param node Target node
     * @param updatedPermissionRole Permission role to update or add
     * @returns Node with updated permission
     */
    /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    NodePermissionService.prototype.updatePermissionRole = /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    function (node, updatedPermissionRole) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    };
    /**
     * Update permissions for a node.
     * @param nodeId ID of the target node
     * @param permissionList New permission settings
     * @returns Node with updated permissions
     */
    /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    NodePermissionService.prototype.updateNodePermissions = /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    function (nodeId, permissionList) {
        var _this = this;
        return this.nodeService.getNode(nodeId).pipe(switchMap(function (node) {
            return _this.getNodeRoles(node).pipe(switchMap(function (nodeRoles) { return of({ node: node, nodeRoles: nodeRoles }); }));
        }), switchMap(function (_a) {
            var node = _a.node, nodeRoles = _a.nodeRoles;
            return _this.updateLocallySetPermissions(node, permissionList, nodeRoles);
        }));
    };
    /**
     * Updates the locally set permissions for a node.
     * @param node ID of the target node
     * @param nodes Permission settings
     * @param nodeRole Permission role
     * @returns Node with updated permissions
     */
    /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    NodePermissionService.prototype.updateLocallySetPermissions = /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    function (node, nodes, nodeRole) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);
        /** @type {?} */
        var duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            /** @type {?} */
            var list = duplicatedPermissions.map(function (permission) { return 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name; }).join(', ');
            /** @type {?} */
            var duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list: list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    };
    /**
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    NodePermissionService.prototype.getDuplicatedPermissions = /**
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    function (nodeLocallySet, permissionListAdded) {
        var _this = this;
        /** @type {?} */
        var duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach(function (permission) {
                /** @type {?} */
                var duplicate = nodeLocallySet.find(function (localPermission) { return _this.isEqualPermission(localPermission, permission); });
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            });
        }
        return duplicatePermissions;
    };
    /**
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    NodePermissionService.prototype.isEqualPermission = /**
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    function (oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    };
    /**
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    NodePermissionService.prototype.transformNodeToPermissionElement = /**
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    function (nodes, nodeRole) {
        return nodes.map(function (node) {
            /** @type {?} */
            var newPermissionElement = /** @type {?} */ ({
                'authorityId': node.entry.properties['cm:authorityName'] ?
                    node.entry.properties['cm:authorityName'] :
                    node.entry.properties['cm:userName'],
                'name': nodeRole,
                'accessStatus': 'ALLOWED'
            });
            return newPermissionElement;
        });
    };
    /**
     * Removes a permission setting from a node.
     * @param node ID of the target node
     * @param permissionToRemove Permission setting to remove
     * @returns Node with modified permissions
     */
    /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    NodePermissionService.prototype.removePermission = /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    function (node, permissionToRemove) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
    };
    /**
     * @param {?} siteName
     * @return {?}
     */
    NodePermissionService.prototype.getGroupMembersBySiteName = /**
     * @param {?} siteName
     * @return {?}
     */
    function (siteName) {
        var _this = this;
        /** @type {?} */
        var groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemeberByGroupName(groupName)
            .pipe(map(function (res) {
            /** @type {?} */
            var displayResult = [];
            res.list.entries.forEach(function (member) {
                displayResult.push(_this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            });
            return displayResult;
        }));
    };
    /**
     * Gets all members related to a group name.
     * @param groupName Name of group to look for members
     * @param opts Extra options supported by JSAPI
     * @returns List of members
     */
    /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JSAPI
     * @return {?} List of members
     */
    NodePermissionService.prototype.getGroupMemeberByGroupName = /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JSAPI
     * @return {?} List of members
     */
    function (groupName, opts) {
        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));
    };
    /**
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    NodePermissionService.prototype.formattedRoleName = /**
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    function (displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    };
    /**
     * @param {?} nodePath
     * @return {?}
     */
    NodePermissionService.prototype.buildRetrieveSiteQueryBody = /**
     * @param {?} nodePath
     * @return {?}
     */
    function (nodePath) {
        /** @type {?} */
        var pathNames = nodePath.map(function (node) { return 'name: "' + node.name + '"'; });
        /** @type {?} */
        var buildedPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': buildedPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    };
    NodePermissionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NodePermissionService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: SearchService },
        { type: NodesApiService },
        { type: TranslationService }
    ]; };
    return NodePermissionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PermissionListComponent = /** @class */ (function () {
    function PermissionListComponent(nodeService, nodePermissionService) {
        this.nodeService = nodeService;
        this.nodePermissionService = nodePermissionService;
        /**
         * ID of the node whose permissions you want to show.
         */
        this.nodeId = '';
        /**
         * Emitted when the permission is updated.
         */
        this.update = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PermissionListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.fetchNodePermissions();
    };
    /**
     * @return {?}
     */
    PermissionListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        this.fetchNodePermissions();
    };
    /**
     * @return {?}
     */
    PermissionListComponent.prototype.fetchNodePermissions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.nodeService.getNode(this.nodeId).subscribe(function (node) {
            _this.actualNode = node;
            _this.permissionList = _this.getPermissionList(node);
            _this.nodePermissionService.getNodeRoles(node).subscribe(function (settableList) {
                _this.settableRoles = settableList;
            });
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    PermissionListComponent.prototype.getPermissionList = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var allPermissions = [];
        if (node.permissions.locallySet) {
            node.permissions.locallySet.map(function (element) {
                /** @type {?} */
                var permission = new PermissionDisplayModel(element);
                allPermissions.push(permission);
            });
        }
        if (node.permissions.inherited) {
            node.permissions.inherited.map(function (element) {
                /** @type {?} */
                var permissionInherited = new PermissionDisplayModel(element);
                permissionInherited.isInherited = true;
                allPermissions.push(permissionInherited);
            });
        }
        return allPermissions;
    };
    /**
     * @param {?} event
     * @param {?} permissionRow
     * @return {?}
     */
    PermissionListComponent.prototype.saveNewRole = /**
     * @param {?} event
     * @param {?} permissionRow
     * @return {?}
     */
    function (event, permissionRow) {
        var _this = this;
        /** @type {?} */
        var updatedPermissionRole = this.buildUpdatedPermission(event.value, permissionRow);
        this.nodePermissionService.updatePermissionRole(this.actualNode, updatedPermissionRole)
            .subscribe(function (node) {
            _this.update.emit(updatedPermissionRole);
        });
    };
    /**
     * @param {?} newRole
     * @param {?} permissionRow
     * @return {?}
     */
    PermissionListComponent.prototype.buildUpdatedPermission = /**
     * @param {?} newRole
     * @param {?} permissionRow
     * @return {?}
     */
    function (newRole, permissionRow) {
        /** @type {?} */
        var permissionRole = {};
        permissionRole.accessStatus = permissionRow.accessStatus;
        permissionRole.name = newRole;
        permissionRole.authorityId = permissionRow.authorityId;
        return permissionRole;
    };
    /**
     * @param {?} permissionRow
     * @return {?}
     */
    PermissionListComponent.prototype.removePermission = /**
     * @param {?} permissionRow
     * @return {?}
     */
    function (permissionRow) {
        var _this = this;
        this.nodePermissionService.removePermission(this.actualNode, permissionRow).subscribe(function (node) {
            _this.update.emit(node);
        }, function (error) { return _this.error.emit(error); });
    };
    PermissionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-permission-list',
                    template: "<div id=\"adf-permission-display-container\" class=\"adf-display-permission-container\">\n\n    <div *ngIf=\"!permissionList || !permissionList.length\" id=\"adf-no-permissions-template\">\n        <div #ref>\n            <ng-content select=\"adf-no-permission-template\"></ng-content>\n        </div>\n\n        <p *ngIf=\"ref.children.length == 0\">\n            {{ 'PERMISSION_MANAGER.PERMISSION_DISPLAY.NO_PERMISSIONS' | translate }}\n        </p>\n    </div>\n\n    <adf-datatable [rows]=\"permissionList\" class=\"adf-datatable-permission\" *ngIf=\"permissionList && permissionList.length\">\n        <data-columns>\n            <data-column key=\"icon\" type=\"icon\" [sortable]=\"false\">\n            </data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.AUTHORITY_ID' | translate}}\" key=\"authorityId\"></data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE' | translate}}\" key=\"name\">\n                <ng-template let-entry=\"$implicit\">\n                    <mat-form-field *ngIf=\"!entry.row.getValue('isInherited') else show_only_label\">\n                        <mat-select id=\"adf-select-role-permission\"\n                                    [placeholder]=\"entry.data.getValue(entry.row, entry.col)\"\n                                    value=\"{{entry.data.getValue(entry.row, entry.col)}}\"\n                                    (selectionChange)=\"saveNewRole($event, entry.row.obj)\">\n                          <mat-option *ngFor=\"let role of settableRoles\" [value]=\"role\">\n                            {{ role }}\n                          </mat-option>\n                        </mat-select>\n                      </mat-form-field>\n                      <ng-template #show_only_label>\n                          <span>{{entry.data.getValue(entry.row, entry.col)}}</span>\n                      </ng-template>\n                </ng-template>\n            </data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.INHERITED' | translate}}\" key=\"isInherited\">\n                <ng-template let-entry=\"$implicit\">\n                    <mat-chip-list>\n                        <mat-chip *ngIf=\"!!entry.data.getValue(entry.row, entry.col) else locally_set_chip\"\n                                id=\"adf-permission-inherited-label\"\n                                color=\"primary\" selected=\"true\">{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.INHERITED' | translate}}</mat-chip>\n                    </mat-chip-list>\n                    <ng-template #locally_set_chip>\n                            <mat-chip-list>\n                                    <mat-chip id=\"adf-permission-locallyset-label\"\n                                              color=\"accent\" selected=\"true\">\n                                              {{'PERMISSION_MANAGER.PERMISSION_DISPLAY.LOCALLY_SET' | translate}}\n                                    </mat-chip>\n                            </mat-chip-list>\n                    </ng-template>\n                </ng-template>\n            </data-column>\n            <data-column key=\"delete\">\n            <ng-template let-entry=\"$implicit\">\n                <button *ngIf=\"!entry.row.getValue('isInherited')\" mat-icon-button color=\"primary\" (click)=\"removePermission(entry.row.obj)\">\n                    <mat-icon>highlight_off</mat-icon>\n                </button>\n            </ng-template>\n        </data-column>\n        </data-columns>\n    </adf-datatable>\n</div>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PermissionListComponent.ctorParameters = function () { return [
        { type: NodesApiService },
        { type: NodePermissionService }
    ]; };
    PermissionListComponent.propDecorators = {
        nodeId: [{ type: Input }],
        update: [{ type: Output }],
        error: [{ type: Output }]
    };
    return PermissionListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NoPermissionTemplateComponent = /** @class */ (function () {
    function NoPermissionTemplateComponent() {
    }
    NoPermissionTemplateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-no-permission-template',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NoPermissionTemplateComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InheritPermissionDirective = /** @class */ (function () {
    function InheritPermissionDirective(nodeService, contentService) {
        this.nodeService = nodeService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated.
         */
        this.updated = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InheritPermissionDirective.prototype.onInheritPermissionClicked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.nodeService.getNode(this.nodeId).subscribe(function (node) {
            if (_this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {
                /** @type {?} */
                var nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };
                _this.nodeService.updateNode(_this.nodeId, nodeBody, { include: ['permissions'] }).subscribe(function (nodeUpdated) {
                    _this.updated.emit(nodeUpdated);
                }, function (error) { return _this.error.emit(error); });
            }
            else {
                _this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        });
    };
    InheritPermissionDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                    host: {
                        'role': 'button',
                        '(click)': 'onInheritPermissionClicked()'
                    }
                },] }
    ];
    /** @nocollapse */
    InheritPermissionDirective.ctorParameters = function () { return [
        { type: NodesApiService },
        { type: ContentService }
    ]; };
    InheritPermissionDirective.propDecorators = {
        nodeId: [{ type: Input }],
        updated: [{ type: Output }],
        error: [{ type: Output }]
    };
    return InheritPermissionDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AddPermissionComponent = /** @class */ (function () {
    function AddPermissionComponent(nodePermissionService, nodeApiService, contentService) {
        var _this = this;
        this.nodePermissionService = nodePermissionService;
        this.nodeApiService = nodeApiService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs during the update.
         */
        this.error = new EventEmitter();
        this.selectedItems = [];
        this.nodeApiService.getNode(this.nodeId).subscribe(function (node) { return _this.currentNode = node; });
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    AddPermissionComponent.prototype.onSelect = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        this.selectedItems = selection;
    };
    /**
     * @return {?}
     */
    AddPermissionComponent.prototype.isAddEnabled = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.currentNode, PermissionsEnum.UPDATEPERMISSIONS) &&
            this.selectedItems.length !== 0;
    };
    /**
     * @return {?}
     */
    AddPermissionComponent.prototype.applySelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.contentService.hasPermission(this.currentNode, PermissionsEnum.UPDATEPERMISSIONS)) {
            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)
                .subscribe(function (node) {
                _this.success.emit(node);
            }, function (error) {
                _this.error.emit(error);
            });
        }
    };
    AddPermissionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-add-permission',
                    template: "<adf-add-permission-panel\n    (select)=\"onSelect($event)\">\n</adf-add-permission-panel>\n<div id=\"adf-add-permission-actions\">\n   <button mat-button\n          id=\"adf-add-permission-action-button\"\n          class=\"adf-permission-action\"\n          [disabled]=\"!isAddEnabled()\"\n          (click)=\"applySelection()\">\n     {{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}\n    </button>\n</div>\n\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AddPermissionComponent.ctorParameters = function () { return [
        { type: NodePermissionService },
        { type: NodesApiService },
        { type: ContentService }
    ]; };
    AddPermissionComponent.propDecorators = {
        nodeId: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return AddPermissionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AddPermissionDialogComponent = /** @class */ (function () {
    function AddPermissionDialogComponent(data) {
        this.data = data;
        this.currentSelection = [];
    }
    /**
     * @param {?} items
     * @return {?}
     */
    AddPermissionDialogComponent.prototype.onSelect = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.currentSelection = items;
    };
    /**
     * @return {?}
     */
    AddPermissionDialogComponent.prototype.onAddClicked = /**
     * @return {?}
     */
    function () {
        this.data.confirm.next(this.currentSelection);
        this.data.confirm.complete();
    };
    AddPermissionDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-add-permission-dialog',
                    template: "<h2 mat-dialog-title id=\"add-permission-dialog-title\">\n    {{(data?.title ? data?.title : 'PERMISSION_MANAGER.ADD-PERMISSION.BASE-DIALOG-TITLE') | translate}}\n</h2>\n<mat-dialog-content>\n    <adf-add-permission-panel\n        (select)=\"onSelect($event)\">\n    </adf-add-permission-panel>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button mat-button mat-dialog-close id=\"add-permission-dialog-close-button\">{{'PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION' | translate}}</button>\n    <button mat-button id=\"add-permission-dialog-confirm-button\" [mat-dialog-close]=\"true\"\n            class=\"choose-action\"\n            [disabled]=\"currentSelection?.length === 0\"\n            (click)=\"onAddClicked()\">{{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}</button>\n</mat-dialog-actions>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AddPermissionDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    AddPermissionDialogComponent.propDecorators = {
        addPermissionComponent: [{ type: ViewChild, args: ['addPermission',] }]
    };
    return AddPermissionDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodePermissionDialogService = /** @class */ (function () {
    function NodePermissionDialogService(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    /**
     * Opens a dialog to add permissions to a node.
     * @param node ID of the target node
     * @param title Dialog title
     * @returns Node with updated permissions
     */
    /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    NodePermissionDialogService.prototype.openAddPermissionDialog = /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    function (node, title) {
        if (this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {
            /** @type {?} */
            var confirm_1 = new Subject();
            confirm_1.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            var data = {
                nodeId: node.id,
                title: title,
                confirm: confirm_1
            };
            this.openDialog(data, 'adf-add-permission-dialog', '630px');
            return confirm_1;
        }
        else {
            /** @type {?} */
            var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    };
    /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    NodePermissionDialogService.prototype.openDialog = /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /**
     * Closes the currently-open dialog.
     */
    /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    NodePermissionDialogService.prototype.close = /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * Opens a dialog to update permissions for a node.
     * @param nodeId ID of the target node
     * @param title Dialog title
     * @returns Node with updated permissions
     */
    /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    NodePermissionDialogService.prototype.updateNodePermissionByDialog = /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    function (nodeId, title) {
        var _this = this;
        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })
            .pipe(switchMap(function (node) {
            return _this.openAddPermissionDialog(node.entry, title)
                .pipe(switchMap(function (selection) {
                return _this.nodePermissionService.updateNodePermissions(nodeId, selection);
            }));
        }));
    };
    NodePermissionDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NodePermissionDialogService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NodePermissionService },
        { type: ContentService }
    ]; };
    return NodePermissionDialogService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SearchPermissionConfigurationService = /** @class */ (function () {
    function SearchPermissionConfigurationService() {
    }
    /**
     * @param {?} searchTerm
     * @param {?} maxResults
     * @param {?} skipCount
     * @return {?}
     */
    SearchPermissionConfigurationService.prototype.generateQueryBody = /**
     * @param {?} searchTerm
     * @param {?} maxResults
     * @param {?} skipCount
     * @return {?}
     */
    function (searchTerm, maxResults, skipCount) {
        /** @type {?} */
        var defaultQueryBody = {
            query: {
                query: searchTerm ? "authorityName:*" + searchTerm + "* OR userName:*" + searchTerm + "*" : searchTerm
            },
            include: ['properties', 'aspectNames'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                /*tslint:disable-next-line */
                { query: "TYPE:'cm:authority'" }
            ]
        };
        return defaultQueryBody;
    };
    return SearchPermissionConfigurationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AddPermissionPanelComponent = /** @class */ (function () {
    function AddPermissionPanelComponent() {
        var _this = this;
        /**
         * Emitted when a permission list item is selected.
         */
        this.select = new EventEmitter();
        this.searchInput = new FormControl();
        this.searchedWord = '';
        this.debounceSearch = 200;
        this.selectedItems = [];
        this.EVERYONE = { entry: { properties: { 'cm:authorityName': 'GROUP_EVERYONE' } } };
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch))
            .subscribe(function (searchValue) {
            _this.searchedWord = searchValue;
            if (!searchValue) {
                _this.search.resetResults();
            }
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    AddPermissionPanelComponent.prototype.elementClicked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.isAlreadySelected(item)) {
            this.selectedItems.splice(this.selectedItems.indexOf(item), 1);
        }
        else {
            this.selectedItems.push(item);
        }
        this.select.emit(this.selectedItems);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AddPermissionPanelComponent.prototype.isAlreadySelected = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.selectedItems.indexOf(item) >= 0;
    };
    /**
     * @return {?}
     */
    AddPermissionPanelComponent.prototype.clearSearch = /**
     * @return {?}
     */
    function () {
        this.searchedWord = '';
        this.selectedItems.splice(0, this.selectedItems.length);
        this.search.resetResults();
    };
    AddPermissionPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-add-permission-panel',
                    template: "<mat-form-field floatPlaceholder=\"never\" class=\"adf-permission-search-input\">\n    <input matInput\n        id=\"searchInput\"\n        [formControl]=\"searchInput\"\n        type=\"text\"\n        placeholder=\"{{'PERMISSION_MANAGER.ADD-PERMISSION.SEARCH' | translate}}\"\n        [value]=\"searchedWord\">\n\n    <mat-icon *ngIf=\"searchedWord?.length > 0\"\n        class=\"adf-permission-search-icon\"\n        data-automation-id=\"adf-permission-clear-input\"\n        id=\"adf-permission-clear-input\"\n        matSuffix (click)=\"clearSearch()\">clear\n    </mat-icon>\n\n    <mat-icon *ngIf=\"searchedWord?.length === 0\"\n        class=\"adf-permission-search-icon\"\n        data-automation-id=\"adf-permission-search-icon\"\n        matSuffix>search\n    </mat-icon>\n</mat-form-field>\n\n<div *ngIf=\"searchedWord?.length === 0\" id=\"adf-add-permission-type-search\">\n    <span class=\"adf-permission-start-message\">{{'PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE' | translate}}</span>\n</div>\n\n<adf-search #search [searchTerm]=\"searchedWord\"\n        id=\"adf-add-permission-authority-results\"\n        class=\"adf-permission-result-list\"\n        [class.adf-permission-result-list-search]=\"searchedWord.length === 0\">\n<ng-template let-data>\n    <mat-selection-list class=\"adf-permission-result-list-elements\">\n        <mat-list-option\n            id=\"adf-add-permission-group-everyone\"\n            class=\"adf-list-option-item\"\n            (click)=\"elementClicked(EVERYONE)\">\n            <mat-icon mat-list-icon id=\"add-group-icon\">\n                group_add\n            </mat-icon>\n            <p>\n                {{'PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE' | translate}}\n            </p>\n        </mat-list-option>\n\n        <mat-list-option *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                            (click)=\"elementClicked(item)\"\n                            class=\"adf-list-option-item\"\n                            id=\"result_option_{{idx}}\">\n            <mat-icon mat-list-icon id=\"add-group-icon\"\n                      *ngIf=\"item?.entry?.nodeType === 'cm:authorityContainer' else show_person_icon\">\n                      group_add\n            </mat-icon>\n            <ng-template #show_person_icon>\n                <mat-icon id=\"add-person-icon\" mat-list-icon>person_add</mat-icon>\n            </ng-template>\n            <p>\n             {{item.entry?.properties['cm:authorityName']?\n                                    item.entry?.properties['cm:authorityName'] :\n                                    item.entry?.properties['cm:firstName']}}</p>\n        </mat-list-option>\n    </mat-selection-list>\n</ng-template>\n</adf-search>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },
                        SearchService
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AddPermissionPanelComponent.ctorParameters = function () { return []; };
    AddPermissionPanelComponent.propDecorators = {
        search: [{ type: ViewChild, args: ['search',] }],
        select: [{ type: Output }]
    };
    return AddPermissionPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PermissionManagerModule = /** @class */ (function () {
    function PermissionManagerModule() {
    }
    PermissionManagerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        SearchModule
                    ],
                    declarations: [
                        PermissionListComponent,
                        NoPermissionTemplateComponent,
                        AddPermissionPanelComponent,
                        InheritPermissionDirective,
                        AddPermissionComponent,
                        AddPermissionDialogComponent
                    ],
                    entryComponents: [
                        AddPermissionPanelComponent,
                        AddPermissionComponent,
                        AddPermissionDialogComponent
                    ],
                    exports: [
                        PermissionListComponent,
                        NoPermissionTemplateComponent,
                        AddPermissionPanelComponent,
                        InheritPermissionDirective,
                        AddPermissionComponent,
                        AddPermissionDialogComponent
                    ]
                },] }
    ];
    return PermissionManagerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ShareDialogComponent = /** @class */ (function () {
    function ShareDialogComponent(sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, data) {
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.data = data;
        this.subscriptions = [];
        this.minDate = moment$1().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            'sharedUrl': new FormControl(''),
            'time': new FormControl({ value: '', disabled: false })
        });
    }
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.canUpdate) {
            this.form.controls['time'].disable();
        }
        this.subscriptions.push(this.form.valueChanges
            .pipe(skip(1), tap(function (updates) {
            _this.updateNode(updates);
        }))
            .subscribe(function (updates) { return _this.updateEntryExpiryDate(updates); }));
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            /** @type {?} */
            var properties = this.data.node.entry.properties;
            if (properties && !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
    };
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe; });
    };
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.removeShare = /**
     * @return {?}
     */
    function () {
        this.deleteSharedLink(this.sharedId);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShareDialogComponent.prototype.onSlideShareChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    };
    Object.defineProperty(ShareDialogComponent.prototype, "canUpdate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.contentService.hasPermission(this.data.node.entry, 'update');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.openConfirmationDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClose().subscribe(function (deleteSharedLink) {
            if (deleteSharedLink) {
                _this.deleteSharedLink(_this.sharedId);
            }
            else {
                _this.isFileShared = true;
            }
        });
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    ShareDialogComponent.prototype.createSharedLinks = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId)
            .subscribe(function (sharedLink) {
            if (sharedLink.entry) {
                _this.sharedId = sharedLink.entry.id;
                _this.data.node.entry.properties['qshare:sharedId'] = _this.sharedId;
                _this.isDisabled = false;
                _this.isFileShared = true;
                _this.updateForm();
            }
        }, function () {
            _this.isDisabled = false;
            _this.isFileShared = false;
        });
    };
    /**
     * @param {?} sharedId
     * @return {?}
     */
    ShareDialogComponent.prototype.deleteSharedLink = /**
     * @param {?} sharedId
     * @return {?}
     */
    function (sharedId) {
        var _this = this;
        this.isDisabled = true;
        this.sharedLinksApiService.deleteSharedLink(sharedId).subscribe(function () {
            _this.data.node.entry.properties['qshare:sharedId'] = null;
            _this.data.node.entry.properties['qshare:expiryDate'] = null;
            _this.dialogRef.close(false);
        }, function () {
            _this.isDisabled = false;
            _this.isFileShared = false;
        });
    };
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.updateForm = /**
     * @return {?}
     */
    function () {
        var entry = this.data.node.entry;
        /** @type {?} */
        var expiryDate = entry.properties['qshare:expiryDate'];
        this.form.setValue({
            'sharedUrl': "" + this.baseShareUrl + this.sharedId,
            'time': expiryDate ? expiryDate : null
        });
    };
    /**
     * @param {?} updates
     * @return {?}
     */
    ShareDialogComponent.prototype.updateNode = /**
     * @param {?} updates
     * @return {?}
     */
    function (updates) {
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': updates.time ? updates.time.utc().format() : null
            }
        });
    };
    /**
     * @param {?} updates
     * @return {?}
     */
    ShareDialogComponent.prototype.updateEntryExpiryDate = /**
     * @param {?} updates
     * @return {?}
     */
    function (updates) {
        var properties = this.data.node.entry.properties;
        properties['qshare:expiryDate'] = updates.time
            ? updates.time.local()
            : null;
    };
    ShareDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-share-dialog',
                    template: "<div class=\"adf-share-link__dialog-content\">\n    <h1 data-automation-id=\"adf-share-dialog-title\"\n        class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </h1>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</h1>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"full-width\">\n                <input #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                    <mat-icon class=\"input-action\" matSuffix\n                          [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\"\n                          [adf-clipboard]=\"sharedLinkInput\">\n                        link\n                    </mat-icon>\n            </mat-form-field>\n\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</h1>\n            <mat-form-field class=\"full-width\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    matInput\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\">\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button\n            data-automation-id=\"adf-share-dialog-close\"\n            mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                    host: { 'class': 'adf-share-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__label{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87;flex:1 1 auto}.adf-share-link-dialog .adf-share-link__title{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87}.adf-share-link-dialog .adf-share-link__info{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;opacity:.87;opacity:.54;font-size:13px}.adf-share-link-dialog .adf-share-link--row{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.adf-share-link-dialog .adf-share-link__input{opacity:.54}.adf-share-link-dialog .input-action{cursor:pointer}.adf-share-link-dialog .full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
                }] }
    ];
    /** @nocollapse */
    ShareDialogComponent.ctorParameters = function () { return [
        { type: SharedLinksApiService },
        { type: MatDialogRef },
        { type: MatDialog },
        { type: NodesApiService },
        { type: ContentService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    ShareDialogComponent.propDecorators = {
        sharedLinkInput: [{ type: ViewChild, args: ['sharedLinkInput',] }]
    };
    return ShareDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NodeSharedDirective = /** @class */ (function () {
    function NodeSharedDirective(dialog, zone) {
        this.dialog = dialog;
        this.zone = zone;
        this.isFile = false;
        this.isShared = false;
    }
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.node) {
            this.shareNode(this.node);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeSharedDirective.prototype.shareNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node && node.entry && node.entry.isFile) {
            this.dialog.open(ShareDialogComponent, {
                width: '600px',
                panelClass: 'adf-share-link-dialog',
                data: {
                    node: node,
                    baseShareUrl: this.baseShareUrl
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.onStable.subscribe(function () {
            if (_this.node) {
                _this.isFile = _this.node.entry.isFile;
                _this.isShared = _this.node.entry.properties['qshare:sharedId'];
            }
        });
    };
    NodeSharedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-share]',
                    exportAs: 'adfShare'
                },] }
    ];
    /** @nocollapse */
    NodeSharedDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NgZone }
    ]; };
    NodeSharedDirective.propDecorators = {
        node: [{ type: Input, args: ['adf-share',] }],
        baseShareUrl: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeSharedDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContentNodeShareModule = /** @class */ (function () {
    function ContentNodeShareModule() {
    }
    /**
     * @return {?}
     */
    ContentNodeShareModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ContentNodeShareModule
        };
    };
    /**
     * @return {?}
     */
    ContentNodeShareModule.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ContentNodeShareModule
        };
    };
    ContentNodeShareModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        MaterialModule
                    ],
                    declarations: [
                        ShareDialogComponent,
                        NodeSharedDirective
                    ],
                    exports: [
                        ShareDialogComponent,
                        NodeSharedDirective
                    ],
                    entryComponents: [
                        ShareDialogComponent
                    ]
                },] }
    ];
    return ContentNodeShareModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function providers() {
    return [
        RatingService,
        ContentMetadataService,
        PropertyDescriptorsService,
        ContentMetadataConfigFactory,
        BasicPropertiesService,
        PropertyGroupTranslatorService,
        SearchQueryBuilderService,
        SearchFilterService,
        ContentNodeSelectorService,
        ContentNodeDialogService,
        DocumentListService,
        FolderActionsService,
        DocumentActionsService,
        NodeActionsService,
        CustomResourcesService,
        NodePermissionDialogService,
        NodePermissionService,
        TagService
    ];
}
var ContentModuleLazy = /** @class */ (function () {
    function ContentModuleLazy() {
    }
    ContentModuleLazy.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        SocialModule,
                        TagModule,
                        CommonModule,
                        WebScriptModule,
                        FormsModule,
                        ReactiveFormsModule,
                        DialogModule,
                        SearchModule,
                        DocumentListModule,
                        UploadModule,
                        MaterialModule,
                        SitesDropdownModule,
                        BreadcrumbModule,
                        ContentNodeSelectorModule,
                        ContentNodeShareModule,
                        ContentMetadataModule,
                        FolderDirectiveModule,
                        ContentDirectiveModule,
                        PermissionManagerModule,
                        VersionManagerModule
                    ],
                    exports: [
                        SocialModule,
                        TagModule,
                        WebScriptModule,
                        DocumentListModule,
                        UploadModule,
                        SearchModule,
                        SitesDropdownModule,
                        BreadcrumbModule,
                        ContentNodeSelectorModule,
                        ContentNodeShareModule,
                        ContentMetadataModule,
                        DialogModule,
                        FolderDirectiveModule,
                        ContentDirectiveModule,
                        PermissionManagerModule,
                        VersionManagerModule
                    ]
                },] }
    ];
    return ContentModuleLazy;
}());
var ɵ0$2 = {
    name: 'adf-content-services',
    source: 'assets/adf-content-services'
};
var ContentModule = /** @class */ (function () {
    function ContentModule() {
    }
    /**
     * @return {?}
     */
    ContentModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ContentModule,
            providers: __spread(providers(), [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-content-services',
                        source: 'assets/adf-content-services'
                    }
                }
            ])
        };
    };
    /**
     * @return {?}
     */
    ContentModule.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ContentModuleLazy
        };
    };
    ContentModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        SocialModule,
                        TagModule,
                        CommonModule,
                        WebScriptModule,
                        FormsModule,
                        ReactiveFormsModule,
                        DialogModule,
                        SearchModule,
                        DocumentListModule,
                        UploadModule,
                        MaterialModule,
                        SitesDropdownModule,
                        BreadcrumbModule,
                        ContentNodeSelectorModule,
                        ContentNodeShareModule,
                        ContentMetadataModule,
                        FolderDirectiveModule,
                        ContentDirectiveModule,
                        PermissionManagerModule,
                        VersionManagerModule
                    ],
                    providers: __spread(providers(), [
                        {
                            provide: TRANSLATION_PROVIDER,
                            multi: true,
                            useValue: ɵ0$2
                        }
                    ]),
                    exports: [
                        SocialModule,
                        TagModule,
                        WebScriptModule,
                        DocumentListModule,
                        UploadModule,
                        SearchModule,
                        SitesDropdownModule,
                        BreadcrumbModule,
                        ContentNodeSelectorModule,
                        ContentNodeShareModule,
                        ContentMetadataModule,
                        DialogModule,
                        FolderDirectiveModule,
                        ContentDirectiveModule,
                        PermissionManagerModule,
                        VersionManagerModule
                    ]
                },] }
    ];
    return ContentModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NodeDownloadDirective, ContentDirectiveModule, RatingComponent, LikeComponent, RatingService, SocialModule, TagActionsComponent, TagListComponent, TagNodeListComponent, TagService, TagModule, WebscriptComponent, WebScriptModule, PaginationStrategy, DocumentListComponent, NodeEntityEvent, NodeEntryEvent, ContentColumnComponent, ContentColumnListComponent, ContentActionComponent, ContentActionListComponent, EmptyFolderContentDirective, NoPermissionContentDirective, ShareDataTableAdapter, ShareDataRow, FolderActionsService, DocumentActionsService, DocumentListService, NodeActionsService, CustomResourcesService, ContentActionModel, ContentActionTarget, DocumentActionModel, FolderActionModel, NodePaging, NodePagingList, NodeMinimalEntry, Pagination, NodeMinimal, UserInfo, ContentInfo, PathInfoEntity, PathElementEntity, PermissionModel, PermissionStyleModel, DocumentListModule, UploadButtonComponent, UploadVersionButtonComponent, FileUploadingDialogComponent, UploadDragAreaComponent, FileUploadingListComponent, FileUploadingListRowComponent, UploadFilesEvent, FileDraggableDirective, UploadBase, UploadModule, SearchQueryBuilderService, SearchComponent, SearchControlComponent, SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR, SearchTriggerDirective, EmptySearchResultComponent, SearchFilterComponent, SearchFilterService, SearchChipListComponent, SearchSortingPickerComponent, ALFRESCO_SEARCH_DIRECTIVES, SearchModule, Relations, DropdownSitesComponent, SitesDropdownModule, BreadcrumbComponent, DropdownBreadcrumbComponent, BreadcrumbModule, VersionListComponent, VersionManagerComponent, VersionUploadComponent, VersionManagerModule, NameLocationCellComponent, ContentNodeSelectorPanelComponent, ContentNodeSelectorComponent, ContentNodeSelectorService, ContentNodeDialogService, ContentNodeSelectorModule, DownloadZipDialogComponent, FolderDialogComponent, NodeLockDialogComponent, ConfirmDialogComponent, DialogModule, FolderCreateDirective, FolderEditDirective, FolderDirectiveModule, ContentMetadataCardComponent, BasicPropertiesService, ContentMetadataService, PropertyDescriptorsService, PropertyGroupTranslatorService, ContentMetadataConfigFactory, IndifferentConfigService, LayoutOrientedConfigService, AspectOrientedConfigService, ContentMetadataModule, PermissionListComponent, NoPermissionTemplateComponent, InheritPermissionDirective, PermissionDisplayModel, NodePermissionDialogService, NodePermissionService, AddPermissionPanelComponent, AddPermissionComponent, AddPermissionDialogComponent, PermissionManagerModule, ShareDialogComponent, NodeSharedDirective, ContentNodeShareModule, providers, ContentModuleLazy, ContentModule, ContentMetadataComponent as ɵk, NodeLockDirective as ɵc, MaterialModule as ɵb, modules as ɵa, SearchPermissionConfigurationService as ɵl, SearchCheckListComponent as ɵi, SearchDateRangeComponent as ɵj, SearchNumberRangeComponent as ɵh, SearchRadioComponent as ɵf, SearchSliderComponent as ɵg, SearchTextComponent as ɵe, SearchWidgetContainerComponent as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,