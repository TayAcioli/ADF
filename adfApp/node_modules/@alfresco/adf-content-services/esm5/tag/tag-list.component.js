/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
/**
 * This component provide a list of all the tag inside the ECM
 */
var TagListComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param tagService
     */
    function TagListComponent(tagService) {
        var _this = this;
        this.tagService = tagService;
        /**
         * Emitted when a tag is selected.
         */
        this.result = new EventEmitter();
        /**
         * Array of tags that are displayed
         */
        this.tagsEntries = [];
        /**
         * Number of items per iteration
         */
        this.size = 10;
        this.isLoading = false;
        this.isSizeMinimum = true;
        this.defaultPagination = {
            skipCount: 0,
            maxItems: this.size,
            hasMoreItems: false
        };
        this.pagination = this.defaultPagination;
        this.tagService.refresh.subscribe(function () {
            _this.tagsEntries = [];
            _this.refreshTag(_this.defaultPagination);
        });
    }
    /**
     * @return {?}
     */
    TagListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return this.refreshTag(this.defaultPagination);
    };
    /**
     * @param {?=} opts
     * @return {?}
     */
    TagListComponent.prototype.refreshTag = /**
     * @param {?=} opts
     * @return {?}
     */
    function (opts) {
        var _this = this;
        this.tagService.getAllTheTags(opts).subscribe(function (tags) {
            _this.tagsEntries = _this.tagsEntries.concat(tags.list.entries);
            _this.pagination = tags.list.pagination;
            _this.result.emit(_this.tagsEntries);
            _this.isLoading = false;
        });
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadMoreTags = /**
     * @return {?}
     */
    function () {
        if (this.pagination.hasMoreItems) {
            this.isLoading = true;
            this.isSizeMinimum = false;
            this.refreshTag({
                skipCount: this.pagination.skipCount + this.pagination.count,
                maxItems: this.size
            });
        }
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadLessTags = /**
     * @return {?}
     */
    function () {
        this.isSizeMinimum = false;
        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
        this.pagination.hasMoreItems = true;
        if (this.tagsEntries.length <= this.size) {
            this.isSizeMinimum = true;
        }
    };
    TagListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-list',
                    template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip class=\"adf-primary-background-color\">\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-tag-chips-list,.adf-tag-chips-list div{display:flex;flex-direction:column}.adf-list-tag{display:block;font-size:16px}.adf-tag-list-controls{margin-top:30px;display:flex;justify-content:center}"]
                }] }
    ];
    /** @nocollapse */
    TagListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagListComponent.propDecorators = {
        result: [{ type: Output }]
    };
    return TagListComponent;
}());
export { TagListComponent };
if (false) {
    /**
     * Emitted when a tag is selected.
     * @type {?}
     */
    TagListComponent.prototype.result;
    /**
     * Array of tags that are displayed
     * @type {?}
     */
    TagListComponent.prototype.tagsEntries;
    /**
     * Number of items per iteration
     * @type {?}
     */
    TagListComponent.prototype.size;
    /** @type {?} */
    TagListComponent.prototype.defaultPagination;
    /** @type {?} */
    TagListComponent.prototype.pagination;
    /** @type {?} */
    TagListComponent.prototype.isLoading;
    /** @type {?} */
    TagListComponent.prototype.isSizeMinimum;
    /** @type {?} */
    TagListComponent.prototype.tagService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsidGFnL3RhZy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7OztJQWtDaEQ7OztPQUdHO0lBQ0gsMEJBQW9CLFVBQXNCO1FBQTFDLGlCQWNDO1FBZG1CLGVBQVUsR0FBVixVQUFVLENBQVk7Ozs7c0JBdEJqQyxJQUFJLFlBQVksRUFBRTs7OzsyQkFLUixFQUFFOzs7O29CQUtOLEVBQUU7eUJBS0wsS0FBSzs2QkFDRCxJQUFJO1FBUWhCLElBQUksQ0FBQyxpQkFBaUIsR0FBRztZQUNyQixTQUFTLEVBQUUsQ0FBQztZQUNaLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNuQixZQUFZLEVBQUUsS0FBSztTQUN0QixDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFFekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQzlCLEtBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDM0MsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCxtQ0FBUTs7O0lBQVI7UUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDbEQ7Ozs7O0lBRUQscUNBQVU7Ozs7SUFBVixVQUFXLElBQVU7UUFBckIsaUJBT0M7UUFORyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUFTO1lBQ3BELEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5RCxLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3ZDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNuQyxLQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUMxQixDQUFDLENBQUM7S0FDTjs7OztJQUVELHVDQUFZOzs7SUFBWjtRQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFFM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDWixTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLO2dCQUM1RCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7YUFDdEIsQ0FBQyxDQUFDO1NBQ047S0FDSjs7OztJQUVELHVDQUFZOzs7SUFBWjtRQUNJLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDOUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBRXBDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztTQUM3QjtLQUNKOztnQkFsRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QiwwNEJBQXdDO29CQUV4QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQVhRLFVBQVU7Ozt5QkFlZCxNQUFNOzsyQkFqQ1g7O1NBOEJhLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhZ1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3RhZy5zZXJ2aWNlJztcbmltcG9ydCB7IFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgcHJvdmlkZSBhIGxpc3Qgb2YgYWxsIHRoZSB0YWcgaW5zaWRlIHRoZSBFQ01cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdGFnLWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90YWctbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGFnLWxpc3QuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFRhZ0xpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIHRhZyBpcyBzZWxlY3RlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZXN1bHQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiB0YWdzIHRoYXQgYXJlIGRpc3BsYXllZFxuICAgICAqL1xuICAgIHRhZ3NFbnRyaWVzOiBhbnkgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBpdGVtcyBwZXIgaXRlcmF0aW9uXG4gICAgICovXG4gICAgc2l6ZTogbnVtYmVyID0gMTA7XG5cbiAgICBkZWZhdWx0UGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsO1xuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbDtcblxuICAgIGlzTG9hZGluZyA9IGZhbHNlO1xuICAgIGlzU2l6ZU1pbmltdW0gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gdGFnU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFnU2VydmljZTogVGFnU2VydmljZSkge1xuXG4gICAgICAgIHRoaXMuZGVmYXVsdFBhZ2luYXRpb24gPSB7XG4gICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5zaXplLFxuICAgICAgICAgICAgaGFzTW9yZUl0ZW1zOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHRoaXMuZGVmYXVsdFBhZ2luYXRpb247XG5cbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLnJlZnJlc2guc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFnc0VudHJpZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFRhZyh0aGlzLmRlZmF1bHRQYWdpbmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2hUYWcodGhpcy5kZWZhdWx0UGFnaW5hdGlvbik7XG4gICAgfVxuXG4gICAgcmVmcmVzaFRhZyhvcHRzPzogYW55KSB7XG4gICAgICAgIHRoaXMudGFnU2VydmljZS5nZXRBbGxUaGVUYWdzKG9wdHMpLnN1YnNjcmliZSgodGFnczogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhZ3NFbnRyaWVzID0gdGhpcy50YWdzRW50cmllcy5jb25jYXQodGFncy5saXN0LmVudHJpZXMpO1xuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uID0gdGFncy5saXN0LnBhZ2luYXRpb247XG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5lbWl0KHRoaXMudGFnc0VudHJpZXMpO1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9hZE1vcmVUYWdzKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdpbmF0aW9uLmhhc01vcmVJdGVtcykge1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc1NpemVNaW5pbXVtID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFRhZyh7XG4gICAgICAgICAgICAgICAgc2tpcENvdW50OiB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50ICsgdGhpcy5wYWdpbmF0aW9uLmNvdW50LFxuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnNpemVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9hZExlc3NUYWdzKCkge1xuICAgICAgICB0aGlzLmlzU2l6ZU1pbmltdW0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YWdzRW50cmllcyA9IHRoaXMudGFnc0VudHJpZXMuc2xpY2UoMCwgdGhpcy50YWdzRW50cmllcy5sZW5ndGggLSB0aGlzLnBhZ2luYXRpb24uY291bnQpO1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50ID0gdGhpcy5wYWdpbmF0aW9uLnNraXBDb3VudCAtIHRoaXMucGFnaW5hdGlvbi5jb3VudDtcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uLmhhc01vcmVJdGVtcyA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMudGFnc0VudHJpZXMubGVuZ3RoIDw9IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5pc1NpemVNaW5pbXVtID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==