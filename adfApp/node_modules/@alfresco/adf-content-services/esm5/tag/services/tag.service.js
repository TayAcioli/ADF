/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
var TagService = /** @class */ (function () {
    function TagService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Emitted when tag information is updated.
         */
        this.refresh = new EventEmitter();
    }
    /**
     * Gets a list of tags added to a node.
     * @param nodeId ID of the target node
     * @returns TagPaging object (defined in JSAPI) containing the tags
     */
    /**
     * Gets a list of tags added to a node.
     * @param {?} nodeId ID of the target node
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    TagService.prototype.getTagsByNodeId = /**
     * Gets a list of tags added to a node.
     * @param {?} nodeId ID of the target node
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    function (nodeId) {
        var _this = this;
        return from(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId)).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a list of all the tags already defined in the repository.
     * @param opts Options supported by JSAPI
     * @returns TagPaging object (defined in JSAPI) containing the tags
     */
    /**
     * Gets a list of all the tags already defined in the repository.
     * @param {?=} opts Options supported by JSAPI
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    TagService.prototype.getAllTheTags = /**
     * Gets a list of all the tags already defined in the repository.
     * @param {?=} opts Options supported by JSAPI
     * @return {?} TagPaging object (defined in JSAPI) containing the tags
     */
    function (opts) {
        var _this = this;
        return from(this.apiService.getInstance().core.tagsApi.getTags(opts))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Adds a tag to a node.
     * @param nodeId ID of the target node
     * @param tagName Name of the tag to add
     * @returns TagEntry object (defined in JSAPI) with details of the new tag
     */
    /**
     * Adds a tag to a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tagName Name of the tag to add
     * @return {?} TagEntry object (defined in JSAPI) with details of the new tag
     */
    TagService.prototype.addTag = /**
     * Adds a tag to a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tagName Name of the tag to add
     * @return {?} TagEntry object (defined in JSAPI) with details of the new tag
     */
    function (nodeId, tagName) {
        var _this = this;
        /** @type {?} */
        var alfrescoApi = this.apiService.getInstance();
        /** @type {?} */
        var tagBody = new alfrescoApi.core.TagBody();
        tagBody.tag = tagName;
        /** @type {?} */
        var promiseAdd = from(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));
        promiseAdd.subscribe(function (data) {
            _this.refresh.emit(data);
        }, function (err) {
            _this.handleError(err);
        });
        return promiseAdd;
    };
    /**
     * Removes a tag from a node.
     * @param nodeId ID of the target node
     * @param tag Name of the tag to remove
     * @returns Null object when the operation completes
     */
    /**
     * Removes a tag from a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tag Name of the tag to remove
     * @return {?} Null object when the operation completes
     */
    TagService.prototype.removeTag = /**
     * Removes a tag from a node.
     * @param {?} nodeId ID of the target node
     * @param {?} tag Name of the tag to remove
     * @return {?} Null object when the operation completes
     */
    function (nodeId, tag) {
        var _this = this;
        /** @type {?} */
        var promiseRemove = from(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));
        promiseRemove.subscribe(function (data) {
            _this.refresh.emit(data);
        }, function (err) {
            _this.handleError(err);
        });
        return promiseRemove;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TagService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    TagService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TagService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    TagService.propDecorators = {
        refresh: [{ type: Output }]
    };
    return TagService;
}());
export { TagService };
if (false) {
    /**
     * Emitted when tag information is updated.
     * @type {?}
     */
    TagService.prototype.refresh;
    /** @type {?} */
    TagService.prototype.apiService;
    /** @type {?} */
    TagService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJ0YWcvc2VydmljZXMvdGFnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQWMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBVXhDLG9CQUFvQixVQUE4QixFQUM5QjtRQURBLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGVBQVUsR0FBVixVQUFVOzs7O3VCQUhwQixJQUFJLFlBQVksRUFBRTtLQUkzQjtJQUVEOzs7O09BSUc7Ozs7OztJQUNILG9DQUFlOzs7OztJQUFmLFVBQWdCLE1BQWM7UUFBOUIsaUJBSUM7UUFIRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM1RSxVQUFVLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQzNDLENBQUM7S0FDTDtJQUVEOzs7O09BSUc7Ozs7OztJQUNILGtDQUFhOzs7OztJQUFiLFVBQWMsSUFBVTtRQUF4QixpQkFHQztRQUZHLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7SUFDSCwyQkFBTTs7Ozs7O0lBQU4sVUFBTyxNQUFjLEVBQUUsT0FBZTtRQUF0QyxpQkFjQzs7UUFiRyxJQUFNLFdBQVcsR0FBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDOztRQUN2RCxJQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDL0MsT0FBTyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7O1FBRXRCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTFGLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUFJO1lBQ3RCLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCLEVBQUUsVUFBQyxHQUFHO1lBQ0gsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QixDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsQ0FBQztLQUNyQjtJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsOEJBQVM7Ozs7OztJQUFULFVBQVUsTUFBYyxFQUFFLEdBQVc7UUFBckMsaUJBVUM7O1FBVEcsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFOUYsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQUk7WUFDekIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0IsRUFBRSxVQUFDLEdBQUc7WUFDSCxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBYSxDQUFDO0tBQ3hCOzs7OztJQUVPLGdDQUFXOzs7O2NBQUMsS0FBVTtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixPQUFPLFVBQVUsQ0FBQyxLQUFLLElBQUksY0FBYyxDQUFDLENBQUM7OztnQkExRWxELFVBQVU7Ozs7Z0JBTkYsa0JBQWtCO2dCQUFFLFVBQVU7OzswQkFVbEMsTUFBTTs7cUJBM0JYOztTQXdCYSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGFnUGFnaW5nIH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRhZ1NlcnZpY2Uge1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0YWcgaW5mb3JtYXRpb24gaXMgdXBkYXRlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZWZyZXNoID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgdGFncyBhZGRlZCB0byBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcmV0dXJucyBUYWdQYWdpbmcgb2JqZWN0IChkZWZpbmVkIGluIEpTQVBJKSBjb250YWluaW5nIHRoZSB0YWdzXG4gICAgICovXG4gICAgZ2V0VGFnc0J5Tm9kZUlkKG5vZGVJZDogc3RyaW5nKTogYW55IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS50YWdzQXBpLmdldE5vZGVUYWdzKG5vZGVJZCkpLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgYWxsIHRoZSB0YWdzIGFscmVhZHkgZGVmaW5lZCBpbiB0aGUgcmVwb3NpdG9yeS5cbiAgICAgKiBAcGFyYW0gb3B0cyBPcHRpb25zIHN1cHBvcnRlZCBieSBKU0FQSVxuICAgICAqIEByZXR1cm5zIFRhZ1BhZ2luZyBvYmplY3QgKGRlZmluZWQgaW4gSlNBUEkpIGNvbnRhaW5pbmcgdGhlIHRhZ3NcbiAgICAgKi9cbiAgICBnZXRBbGxUaGVUYWdzKG9wdHM/OiBhbnkpOiBPYnNlcnZhYmxlPFRhZ1BhZ2luZz4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLnRhZ3NBcGkuZ2V0VGFncyhvcHRzKSlcbiAgICAgICAgICAgIC5waXBlKGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSB0YWcgdG8gYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHBhcmFtIHRhZ05hbWUgTmFtZSBvZiB0aGUgdGFnIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIFRhZ0VudHJ5IG9iamVjdCAoZGVmaW5lZCBpbiBKU0FQSSkgd2l0aCBkZXRhaWxzIG9mIHRoZSBuZXcgdGFnXG4gICAgICovXG4gICAgYWRkVGFnKG5vZGVJZDogc3RyaW5nLCB0YWdOYW1lOiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBjb25zdCBhbGZyZXNjb0FwaTogYW55ID0gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHRhZ0JvZHkgPSBuZXcgYWxmcmVzY29BcGkuY29yZS5UYWdCb2R5KCk7XG4gICAgICAgIHRhZ0JvZHkudGFnID0gdGFnTmFtZTtcblxuICAgICAgICBsZXQgcHJvbWlzZUFkZCA9IGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS50YWdzQXBpLmFkZFRhZyhub2RlSWQsIHRhZ0JvZHkpKTtcblxuICAgICAgICBwcm9taXNlQWRkLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoLmVtaXQoZGF0YSk7XG4gICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2VBZGQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHRhZyBmcm9tIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSB0YWcgTmFtZSBvZiB0aGUgdGFnIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm5zIE51bGwgb2JqZWN0IHdoZW4gdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXNcbiAgICAgKi9cbiAgICByZW1vdmVUYWcobm9kZUlkOiBzdHJpbmcsIHRhZzogc3RyaW5nKTogYW55IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZVJlbW92ZSA9IGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS50YWdzQXBpLnJlbW92ZVRhZyhub2RlSWQsIHRhZykpO1xuXG4gICAgICAgIHByb21pc2VSZW1vdmUuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2guZW1pdChkYXRhKTtcbiAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZVJlbW92ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==