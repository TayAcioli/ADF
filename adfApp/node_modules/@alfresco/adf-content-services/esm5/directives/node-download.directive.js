/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener } from '@angular/core';
import { MatDialog } from '@angular/material';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { DownloadZipDialogComponent } from '../dialogs/download-zip.dialog';
var NodeDownloadDirective = /** @class */ (function () {
    function NodeDownloadDirective(apiService, dialog) {
        this.apiService = apiService;
        this.dialog = dialog;
    }
    /**
     * @return {?}
     */
    NodeDownloadDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.downloadNodes(this.nodes);
    };
    /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param selection Multiple selected nodes to download
     */
    /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param {?} selection Multiple selected nodes to download
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadNodes = /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param {?} selection Multiple selected nodes to download
     * @return {?}
     */
    function (selection) {
        if (!selection || selection.length === 0) {
            return;
        }
        if (selection.length === 1) {
            this.downloadNode(selection[0]);
        }
        else {
            this.downloadZip(selection);
        }
    };
    /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param node Node to download
     */
    /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param {?} node Node to download
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadNode = /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param {?} node Node to download
     * @return {?}
     */
    function (node) {
        if (node && node.entry) {
            /** @type {?} */
            var entry = node.entry;
            if (entry.isFile) {
                this.downloadFile(node);
            }
            if (entry.isFolder) {
                this.downloadZip([node]);
            }
            // Check if there's nodeId for Shared Files
            if (!entry.isFile && !entry.isFolder && (/** @type {?} */ (entry)).nodeId) {
                this.downloadFile(node);
            }
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadFile = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node && node.entry) {
            /** @type {?} */
            var contentApi = this.apiService.getInstance().content;
            /** @type {?} */
            var id = (/** @type {?} */ (node.entry)).nodeId || node.entry.id;
            /** @type {?} */
            var url = contentApi.getContentUrl(id, true);
            /** @type {?} */
            var fileName = node.entry.name;
            this.download(url, fileName);
        }
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeDownloadDirective.prototype.downloadZip = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        if (selection && selection.length > 0) {
            /** @type {?} */
            var nodeIds = selection.map(function (node) { return (node.entry.nodeId || node.entry.id); });
            this.dialog.open(DownloadZipDialogComponent, {
                width: '600px',
                disableClose: true,
                data: {
                    nodeIds: nodeIds
                }
            });
        }
    };
    /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    NodeDownloadDirective.prototype.download = /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };
    NodeDownloadDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adfNodeDownload]'
                },] }
    ];
    /** @nocollapse */
    NodeDownloadDirective.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: MatDialog }
    ]; };
    NodeDownloadDirective.propDecorators = {
        nodes: [{ type: Input, args: ['adfNodeDownload',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeDownloadDirective;
}());
export { NodeDownloadDirective };
if (false) {
    /**
     * Nodes to download.
     * @type {?}
     */
    NodeDownloadDirective.prototype.nodes;
    /** @type {?} */
    NodeDownloadDirective.prototype.apiService;
    /** @type {?} */
    NodeDownloadDirective.prototype.dialog;
}

//# sourceMappingURL=data:application/json;base64,