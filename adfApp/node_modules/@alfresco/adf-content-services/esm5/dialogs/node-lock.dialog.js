/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { Component, Inject, Optional } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { FormBuilder } from '@angular/forms';
import { AlfrescoApiService } from '@alfresco/adf-core';
var NodeLockDialogComponent = /** @class */ (function () {
    function NodeLockDialogComponent(formBuilder, dialog, alfrescoApi, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.alfrescoApi = alfrescoApi;
        this.data = data;
        this.node = null;
    }
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var node = this.data.node;
        this.nodeName = node.name;
        this.form = this.formBuilder.group({
            isLocked: node.isLocked || false,
            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',
            isTimeLock: !!node.properties['cm:expiryDate'],
            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()
        });
    };
    Object.defineProperty(NodeLockDialogComponent.prototype, "lockTimeInSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.form.value.isTimeLock) {
                /** @type {?} */
                var duration = moment.duration(moment(this.form.value.time).diff(moment()));
                return duration.asSeconds();
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeLockDialogComponent.prototype, "nodeBodyLock", {
        get: /**
         * @return {?}
         */
        function () {
            return {
                'timeToExpire': this.lockTimeInSeconds,
                'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',
                'lifetime': 'PERSISTENT'
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.toggleLock = /**
     * @return {?}
     */
    function () {
        var _a = this, nodesApi = _a.alfrescoApi.nodesApi, node = _a.data.node;
        if (this.form.value.isLocked) {
            return nodesApi.lockNode(node.id, this.nodeBodyLock);
        }
        return nodesApi.unlockNode(node.id);
    };
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.toggleLock()
            .then(function (node) {
            _this.data.node.isLocked = _this.form.value.isLocked;
            _this.dialog.close(node.entry);
        })
            .catch(function (error) { return _this.data.onError(error); });
    };
    NodeLockDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-node-lock',
                    template: "<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['isLocked']\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['allowOwner']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['isTimeLock']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input matInput [formControl]=\"form.controls['time']\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close>\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                    styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}"]
                }] }
    ];
    /** @nocollapse */
    NodeLockDialogComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MatDialogRef },
        { type: AlfrescoApiService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return NodeLockDialogComponent;
}());
export { NodeLockDialogComponent };
if (false) {
    /** @type {?} */
    NodeLockDialogComponent.prototype.form;
    /** @type {?} */
    NodeLockDialogComponent.prototype.node;
    /** @type {?} */
    NodeLockDialogComponent.prototype.nodeName;
    /** @type {?} */
    NodeLockDialogComponent.prototype.formBuilder;
    /** @type {?} */
    NodeLockDialogComponent.prototype.dialog;
    /** @type {?} */
    NodeLockDialogComponent.prototype.alfrescoApi;
    /** @type {?} */
    NodeLockDialogComponent.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1sb2NrLmRpYWxvZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImRpYWxvZ3Mvbm9kZS1sb2NrLmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLE1BQU0sTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEUsT0FBTyxFQUFFLFdBQVcsRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBR3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQWFwRCxpQ0FDWSxhQUNELFFBQ0MsYUFHRCxJQUFTO1FBTFIsZ0JBQVcsR0FBWCxXQUFXO1FBQ1osV0FBTSxHQUFOLE1BQU07UUFDTCxnQkFBVyxHQUFYLFdBQVc7UUFHWixTQUFJLEdBQUosSUFBSSxDQUFLO29CQVRXLElBQUk7S0FVL0I7Ozs7SUFFSiwwQ0FBUTs7O0lBQVI7UUFDWSxJQUFBLHFCQUFJLENBQWU7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRTFCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDL0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksS0FBSztZQUNoQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxZQUFZO1lBQzNELFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUM7WUFDOUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7U0FDakcsQ0FBQyxDQUFDO0tBQ047MEJBRVcsc0RBQWlCOzs7OztZQUN6QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTs7Z0JBQzVCLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzVFLE9BQU8sUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQy9CO1lBRUQsT0FBTyxDQUFDLENBQUM7Ozs7OzBCQUdELGlEQUFZOzs7OztZQUNwQixPQUFPO2dCQUNILGNBQWMsRUFBRSxJQUFJLENBQUMsaUJBQWlCO2dCQUN0QyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFDbkUsVUFBVSxFQUFFLFlBQVk7YUFDM0IsQ0FBQzs7Ozs7Ozs7SUFHRSw0Q0FBVTs7OztRQUNkLGVBQXVCLGtDQUFRLEVBQVksbUJBQUksQ0FBWTtRQUUzRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUMxQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDeEQ7UUFFRCxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7OztJQUd4Qyx3Q0FBTTs7O0lBQU47UUFBQSxpQkFPQztRQU5HLElBQUksQ0FBQyxVQUFVLEVBQUU7YUFDWixJQUFJLENBQUMsVUFBQSxJQUFJO1lBQ04sS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUNuRCxLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakMsQ0FBQzthQUNELEtBQUssQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7S0FDakQ7O2dCQWxFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBRXpCLDY1REFBc0M7O2lCQUN6Qzs7OztnQkFUUSxXQUFXO2dCQURNLFlBQVk7Z0JBSTdCLGtCQUFrQjtnREFpQmxCLFFBQVEsWUFDUixNQUFNLFNBQUMsZUFBZTs7a0NBMUMvQjs7U0ErQmEsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQtZXM2JztcblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTWluaW1hbE5vZGVFbnRyeUVudGl0eSwgTm9kZUVudHJ5IH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLW5vZGUtbG9jaycsXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9sZGVyLmRpYWxvZy5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL25vZGUtbG9jay5kaWFsb2cuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTm9kZUxvY2tEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgZm9ybTogRm9ybUdyb3VwO1xuICAgIG5vZGU6IE1pbmltYWxOb2RlRW50cnlFbnRpdHkgPSBudWxsO1xuICAgIG5vZGVOYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsXG4gICAgICAgIHB1YmxpYyBkaWFsb2c6IE1hdERpYWxvZ1JlZjxOb2RlTG9ja0RpYWxvZ0NvbXBvbmVudD4sXG4gICAgICAgIHByaXZhdGUgYWxmcmVzY29BcGk6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpXG4gICAgICAgIHB1YmxpYyBkYXRhOiBhbnlcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgY29uc3QgeyBub2RlIH0gPSB0aGlzLmRhdGE7XG4gICAgICAgIHRoaXMubm9kZU5hbWUgPSBub2RlLm5hbWU7XG5cbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICBpc0xvY2tlZDogbm9kZS5pc0xvY2tlZCB8fCBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93T3duZXI6IG5vZGUucHJvcGVydGllc1snY206bG9ja1R5cGUnXSA9PT0gJ1dSSVRFX0xPQ0snLFxuICAgICAgICAgICAgaXNUaW1lTG9jazogISFub2RlLnByb3BlcnRpZXNbJ2NtOmV4cGlyeURhdGUnXSxcbiAgICAgICAgICAgIHRpbWU6ICEhbm9kZS5wcm9wZXJ0aWVzWydjbTpleHBpcnlEYXRlJ10gPyBtb21lbnQobm9kZS5wcm9wZXJ0aWVzWydjbTpleHBpcnlEYXRlJ10pIDogbW9tZW50KClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgbG9ja1RpbWVJblNlY29uZHMoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybS52YWx1ZS5pc1RpbWVMb2NrKSB7XG4gICAgICAgICAgICBsZXQgZHVyYXRpb24gPSBtb21lbnQuZHVyYXRpb24obW9tZW50KHRoaXMuZm9ybS52YWx1ZS50aW1lKS5kaWZmKG1vbWVudCgpKSk7XG4gICAgICAgICAgICByZXR1cm4gZHVyYXRpb24uYXNTZWNvbmRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBub2RlQm9keUxvY2soKTogb2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lVG9FeHBpcmUnOiB0aGlzLmxvY2tUaW1lSW5TZWNvbmRzLFxuICAgICAgICAgICAgJ3R5cGUnOiB0aGlzLmZvcm0udmFsdWUuYWxsb3dPd25lciA/ICdBTExPV19PV05FUl9DSEFOR0VTJyA6ICdGVUxMJyxcbiAgICAgICAgICAgICdsaWZldGltZSc6ICdQRVJTSVNURU5UJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlTG9jaygpOiBQcm9taXNlPE5vZGVFbnRyeT4ge1xuICAgICAgICBjb25zdCB7IGFsZnJlc2NvQXBpOiB7IG5vZGVzQXBpIH0sIGRhdGE6IHsgbm9kZSB9IH0gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLmZvcm0udmFsdWUuaXNMb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBub2Rlc0FwaS5sb2NrTm9kZShub2RlLmlkLCB0aGlzLm5vZGVCb2R5TG9jayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZXNBcGkudW5sb2NrTm9kZShub2RlLmlkKTtcbiAgICB9XG5cbiAgICBzdWJtaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9jaygpXG4gICAgICAgICAgICAudGhlbihub2RlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEubm9kZS5pc0xvY2tlZCA9IHRoaXMuZm9ybS52YWx1ZS5pc0xvY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZShub2RlLmVudHJ5KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gdGhpcy5kYXRhLm9uRXJyb3IoZXJyb3IpKTtcbiAgICB9XG59XG4iXX0=