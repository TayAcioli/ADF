/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { LogService, AlfrescoApiService } from '@alfresco/adf-core';
var DownloadZipDialogComponent = /** @class */ (function () {
    function DownloadZipDialogComponent(apiService, dialogRef, data, logService) {
        this.apiService = apiService;
        this.dialogRef = dialogRef;
        this.data = data;
        this.logService = logService;
        this.cancelled = false;
    }
    /**
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {
            if (!this.cancelled) {
                this.downloadZip(this.data.nodeIds);
            }
            else {
                this.logService.log('Cancelled');
            }
        }
    };
    /**
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.cancelDownload = /**
     * @return {?}
     */
    function () {
        this.cancelled = true;
        this.dialogRef.close(false);
    };
    /**
     * @param {?} nodeIds
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.downloadZip = /**
     * @param {?} nodeIds
     * @return {?}
     */
    function (nodeIds) {
        var _this = this;
        if (nodeIds && nodeIds.length > 0) {
            /** @type {?} */
            var promise = this.apiService.getInstance().core.downloadsApi.createDownload({ nodeIds: nodeIds });
            promise.on('progress', function (progress) { return _this.logService.log('Progress', progress); });
            promise.on('error', function (error) { return _this.logService.error('Error', error); });
            promise.on('abort', function (data) { return _this.logService.log('Abort', data); });
            promise.on('success', function (data) {
                if (data && data.entry && data.entry.id) {
                    /** @type {?} */
                    var url_1 = _this.apiService.getInstance().content.getContentUrl(data.entry.id, true);
                    _this.apiService.getInstance().core.nodesApi.getNode(data.entry.id).then(function (downloadNode) {
                        _this.logService.log(downloadNode);
                        /** @type {?} */
                        var fileName = downloadNode.entry.name;
                        _this.waitAndDownload(data.entry.id, url_1, fileName);
                    });
                }
            });
        }
    };
    /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.waitAndDownload = /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (downloadId, url, fileName) {
        var _this = this;
        if (this.cancelled) {
            return;
        }
        this.apiService.getInstance().core.downloadsApi.getDownload(downloadId).then(function (downloadEntry) {
            if (downloadEntry.entry) {
                if (downloadEntry.entry.status === 'DONE') {
                    _this.download(url, fileName);
                }
                else {
                    setTimeout(function () {
                        _this.waitAndDownload(downloadId, url, fileName);
                    }, 1000);
                }
            }
        });
    };
    /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.download = /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        this.dialogRef.close(true);
    };
    DownloadZipDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-download-zip-dialog',
                    template: "<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<div mat-dialog-actions>\n    <span class=\"spacer\"></span>\n    <button mat-button color=\"primary\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</div>\n",
                    host: { 'class': 'adf-download-zip-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".spacer{flex:1 1 auto}.adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
                }] }
    ];
    /** @nocollapse */
    DownloadZipDialogComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: LogService }
    ]; };
    return DownloadZipDialogComponent;
}());
export { DownloadZipDialogComponent };
if (false) {
    /** @type {?} */
    DownloadZipDialogComponent.prototype.cancelled;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.apiService;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.dialogRef;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.data;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,