/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material';
var ConfirmDialogComponent = /** @class */ (function () {
    function ConfirmDialogComponent(data) {
        data = data || {};
        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';
        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';
        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';
        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';
    }
    ConfirmDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-confirm-dialog',
                    template: "\n        <h1 mat-dialog-title>{{ title | translate }}</h1>\n        <mat-dialog-content>\n            <p>{{ message | translate }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <span class=\"spacer\"></span>\n            <button id=\"adf-confirm-accept\" mat-button color=\"primary\" [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n            <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" cdkFocusInitial>{{ noLabel | translate }}</button>\n        </mat-dialog-actions>\n    ",
                    host: { 'class': 'adf-confirm-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .spacer { flex: 1 1 auto; }\n\n        .adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper {\n            text-transform: uppercase;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    ConfirmDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return ConfirmDialogComponent;
}());
export { ConfirmDialogComponent };
if (false) {
    /** @type {?} */
    ConfirmDialogComponent.prototype.title;
    /** @type {?} */
    ConfirmDialogComponent.prototype.message;
    /** @type {?} */
    ConfirmDialogComponent.prototype.yesLabel;
    /** @type {?} */
    ConfirmDialogComponent.prototype.noLabel;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS5kaWFsb2cuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkaWFsb2dzL2NvbmZpcm0uZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7SUFnQ2hELGdDQUFxQyxJQUFJO1FBQ3JDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSw0QkFBNEIsQ0FBQztRQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksNEJBQTRCLENBQUM7UUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLDhCQUE4QixDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSw2QkFBNkIsQ0FBQztLQUNoRTs7Z0JBcENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUUsNmlCQVVUO29CQVFELElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRTtvQkFDdkMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7NkJBUjVCLHlLQU1SO2lCQUdKOzs7O2dEQVFnQixNQUFNLFNBQUMsZUFBZTs7aUNBbER2Qzs7U0EyQ2Esc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNvbmZpcm0tZGlhbG9nJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8aDEgbWF0LWRpYWxvZy10aXRsZT57eyB0aXRsZSB8IHRyYW5zbGF0ZSB9fTwvaDE+XG4gICAgICAgIDxtYXQtZGlhbG9nLWNvbnRlbnQ+XG4gICAgICAgICAgICA8cD57eyBtZXNzYWdlIHwgdHJhbnNsYXRlIH19PC9wPlxuICAgICAgICA8L21hdC1kaWFsb2ctY29udGVudD5cbiAgICAgICAgPG1hdC1kaWFsb2ctYWN0aW9ucz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3BhY2VyXCI+PC9zcGFuPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImFkZi1jb25maXJtLWFjY2VwdFwiIG1hdC1idXR0b24gY29sb3I9XCJwcmltYXJ5XCIgW21hdC1kaWFsb2ctY2xvc2VdPVwidHJ1ZVwiPnt7IHllc0xhYmVsIHwgdHJhbnNsYXRlIH19PC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwiYWRmLWNvbmZpcm0tY2FuY2VsXCIgbWF0LWJ1dHRvbiBbbWF0LWRpYWxvZy1jbG9zZV09XCJmYWxzZVwiIGNka0ZvY3VzSW5pdGlhbD57eyBub0xhYmVsIHwgdHJhbnNsYXRlIH19PC9idXR0b24+XG4gICAgICAgIDwvbWF0LWRpYWxvZy1hY3Rpb25zPlxuICAgIGAsXG4gICAgc3R5bGVzOiBbYFxuICAgICAgICAuc3BhY2VyIHsgZmxleDogMSAxIGF1dG87IH1cblxuICAgICAgICAuYWRmLWNvbmZpcm0tZGlhbG9nIC5tYXQtZGlhbG9nLWFjdGlvbnMgLm1hdC1idXR0b24td3JhcHBlciB7XG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICB9XG4gICAgYF0sXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLWNvbmZpcm0tZGlhbG9nJyB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlybURpYWxvZ0NvbXBvbmVudCB7XG5cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICB5ZXNMYWJlbDogc3RyaW5nO1xuICAgIG5vTGFiZWw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgICAgICB0aGlzLnRpdGxlID0gZGF0YS50aXRsZSB8fCAnQURGX0NPTkZJUk1fRElBTE9HLkNPTkZJUk0nO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2UgfHwgJ0FERl9DT05GSVJNX0RJQUxPRy5NRVNTQUdFJztcbiAgICAgICAgdGhpcy55ZXNMYWJlbCA9IGRhdGEueWVzTGFiZWwgfHwgJ0FERl9DT05GSVJNX0RJQUxPRy5ZRVNfTEFCRUwnO1xuICAgICAgICB0aGlzLm5vTGFiZWwgPSBkYXRhLm5vTGFiZWwgfHwgJ0FERl9DT05GSVJNX0RJQUxPRy5OT19MQUJFTCc7XG4gICAgfVxufVxuIl19