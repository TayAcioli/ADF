/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatSelect } from '@angular/material';
import { BreadcrumbComponent } from './breadcrumb.component';
var DropdownBreadcrumbComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownBreadcrumbComponent, _super);
    function DropdownBreadcrumbComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["folderNode"]) {
            /** @type {?} */
            var node = null;
            node = this.transform ? this.transform(changes["folderNode"].currentValue) : changes["folderNode"].currentValue;
            this.route = this.parseRoute(node);
        }
        if (changes["transform"]) {
            /** @type {?} */
            var node = this.transform ? this.transform(this.folderNode) : this.folderNode;
            this.route = this.parseRoute(node);
        }
        this.recalculateNodes();
    };
    /**
     * Calculate the current and previous nodes from the route array
     */
    /**
     * Calculate the current and previous nodes from the route array
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.recalculateNodes = /**
     * Calculate the current and previous nodes from the route array
     * @return {?}
     */
    function () {
        this.currentNode = this.route[this.route.length - 1];
        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();
    };
    /**
     * Opens the node picker menu
     */
    /**
     * Opens the node picker menu
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.open = /**
     * Opens the node picker menu
     * @return {?}
     */
    function () {
        if (this.dropdown) {
            this.dropdown.open();
        }
    };
    /**
     * Return if route has more than one element (means: we are not in the root directory)
     */
    /**
     * Return if route has more than one element (means: we are not in the root directory)
     * @return {?}
     */
    DropdownBreadcrumbComponent.prototype.hasPreviousNodes = /**
     * Return if route has more than one element (means: we are not in the root directory)
     * @return {?}
     */
    function () {
        return this.previousNodes.length > 0;
    };
    DropdownBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-dropdown-breadcrumb',
                    template: "<ng-container *ngIf=\"route.length > 0\">\n\n    <button\n        tabindex=\"0\"\n        class=\"adf-dropdown-breadcrumb-trigger\"\n        (click)=\"open()\"\n        data-automation-id=\"dropdown-breadcrumb-trigger\">\n        <mat-icon [class.isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n    </button>\n    <mat-icon class=\"adf-dropdown-breadcrumb-item-chevron\">chevron_right</mat-icon>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-dropdown-breadcrumb-path\"\n        tabindex=\"0\"\n        data-automation-id=\"dropdown-breadcrumb-path\" >\n\n        <mat-option\n            *ngFor=\"let node of previousNodes;\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            class=\"adf-dropdown-breadcrumb-path-option\"\n            tabindex=\"0\"\n            data-automation-class=\"dropdown-breadcrumb-path-option\">\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <span\n        class=\"adf-current-folder\"\n        [class.isRoot]=\"!hasPreviousNodes()\"\n        data-automation-id=\"current-folder\">{{ currentNode.name }}</span>\n</ng-container>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': 'adf-dropdown-breadcrumb'
                    },
                    styles: [""]
                }] }
    ];
    DropdownBreadcrumbComponent.propDecorators = {
        dropdown: [{ type: ViewChild, args: ['dropdown',] }]
    };
    return DropdownBreadcrumbComponent;
}(BreadcrumbComponent));
export { DropdownBreadcrumbComponent };
if (false) {
    /** @type {?} */
    DropdownBreadcrumbComponent.prototype.dropdown;
    /** @type {?} */
    DropdownBreadcrumbComponent.prototype.currentNode;
    /** @type {?} */
    DropdownBreadcrumbComponent.prototype.previousNodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJicmVhZGNydW1iL2Ryb3Bkb3duLWJyZWFkY3J1bWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUE0QixTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztJQVdaLHVEQUFtQjs7Ozs7Ozs7SUFRaEUsaURBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxnQkFBYTs7WUFDcEIsSUFBSSxJQUFJLEdBQTJCLElBQUksQ0FBQztZQUN4QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLGVBQVksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sZUFBWSxZQUFZLENBQUM7WUFDMUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxPQUFPLGVBQVk7O1lBQ25CLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QztRQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzNCO0lBRUQ7O09BRUc7Ozs7O0lBQ08sc0RBQWdCOzs7O0lBQTFCO1FBQ0ksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzdFO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsMENBQUk7Ozs7SUFBSjtRQUNJLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDeEI7S0FDSjtJQUVEOztPQUVHOzs7OztJQUNILHNEQUFnQjs7OztJQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQ3hDOztnQkFyREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLGdxQ0FBbUQ7b0JBRW5ELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUU7d0JBQ0YsT0FBTyxFQUFFLHlCQUF5QjtxQkFDckM7O2lCQUNKOzs7MkJBR0ksU0FBUyxTQUFDLFVBQVU7O3NDQWpDekI7RUErQmlELG1CQUFtQjtTQUF2RCwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0U2VsZWN0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgUGF0aEVsZW1lbnRFbnRpdHksIE1pbmltYWxOb2RlRW50cnlFbnRpdHkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgQnJlYWRjcnVtYkNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1kcm9wZG93bi1icmVhZGNydW1iJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZHJvcGRvd24tYnJlYWRjcnVtYi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZHJvcGRvd24tYnJlYWRjcnVtYi5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDoge1xuICAgICAgICAnY2xhc3MnOiAnYWRmLWRyb3Bkb3duLWJyZWFkY3J1bWInXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bkJyZWFkY3J1bWJDb21wb25lbnQgZXh0ZW5kcyBCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIEBWaWV3Q2hpbGQoJ2Ryb3Bkb3duJylcbiAgICBkcm9wZG93bjogTWF0U2VsZWN0O1xuXG4gICAgY3VycmVudE5vZGU6IFBhdGhFbGVtZW50RW50aXR5O1xuICAgIHByZXZpb3VzTm9kZXM6IFBhdGhFbGVtZW50RW50aXR5W107XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmZvbGRlck5vZGUpIHtcbiAgICAgICAgICAgIGxldCBub2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5ID0gbnVsbDtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLnRyYW5zZm9ybSA/IHRoaXMudHJhbnNmb3JtKGNoYW5nZXMuZm9sZGVyTm9kZS5jdXJyZW50VmFsdWUpIDogY2hhbmdlcy5mb2xkZXJOb2RlLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMucm91dGUgPSB0aGlzLnBhcnNlUm91dGUobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlcy50cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gdGhpcy50cmFuc2Zvcm0gPyB0aGlzLnRyYW5zZm9ybSh0aGlzLmZvbGRlck5vZGUpIDogdGhpcy5mb2xkZXJOb2RlO1xuICAgICAgICAgICAgdGhpcy5yb3V0ZSA9IHRoaXMucGFyc2VSb3V0ZShub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGN1cnJlbnQgYW5kIHByZXZpb3VzIG5vZGVzIGZyb20gdGhlIHJvdXRlIGFycmF5XG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlY2FsY3VsYXRlTm9kZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSB0aGlzLnJvdXRlW3RoaXMucm91dGUubGVuZ3RoIC0gMV07XG4gICAgICAgIHRoaXMucHJldmlvdXNOb2RlcyA9IHRoaXMucm91dGUuc2xpY2UoMCwgdGhpcy5yb3V0ZS5sZW5ndGggLSAxKS5yZXZlcnNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIG5vZGUgcGlja2VyIG1lbnVcbiAgICAgKi9cbiAgICBvcGVuKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vcGVuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gaWYgcm91dGUgaGFzIG1vcmUgdGhhbiBvbmUgZWxlbWVudCAobWVhbnM6IHdlIGFyZSBub3QgaW4gdGhlIHJvb3QgZGlyZWN0b3J5KVxuICAgICAqL1xuICAgIGhhc1ByZXZpb3VzTm9kZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzTm9kZXMubGVuZ3RoID4gMDtcbiAgICB9XG59XG4iXX0=