/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, of, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
var CustomResourcesService = /** @class */ (function () {
    function CustomResourcesService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.CREATE_PERMISSION = 'create';
    }
    /**
     * Gets files recently accessed by a user.
     * @param personId ID of the user
     * @param pagination Specifies how to paginate the results
     * @returns List of nodes for the recently used files
     */
    /**
     * Gets files recently accessed by a user.
     * @param {?} personId ID of the user
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of nodes for the recently used files
     */
    CustomResourcesService.prototype.getRecentFiles = /**
     * Gets files recently accessed by a user.
     * @param {?} personId ID of the user
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of nodes for the recently used files
     */
    function (personId, pagination) {
        var _this = this;
        return new Observable(function (observer) {
            _this.apiService.peopleApi.getPerson(personId)
                .then(function (person) {
                /** @type {?} */
                var username = person.entry.id;
                /** @type {?} */
                var query = {
                    query: {
                        query: '*',
                        language: 'afts'
                    },
                    filterQueries: [
                        { query: "cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]" },
                        { query: "cm:modifier:" + username + " OR cm:creator:" + username },
                        { query: "TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"" }
                    ],
                    include: ['path', 'properties', 'allowableOperations'],
                    sort: [{
                            type: 'FIELD',
                            field: 'cm:modified',
                            ascending: false
                        }],
                    paging: {
                        maxItems: pagination.maxItems,
                        skipCount: pagination.skipCount
                    }
                };
                return _this.apiService.searchApi.search(query)
                    .then(function (searchResult) {
                    observer.next(searchResult);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets favorite files for the current user.
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of favorite files
     */
    /**
     * Gets favorite files for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of favorite files
     */
    CustomResourcesService.prototype.loadFavorites = /**
     * Gets favorite files for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of favorite files
     */
    function (pagination, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        var options = {
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: includeFieldsRequest
        };
        return new Observable(function (observer) {
            _this.apiService.favoritesApi.getFavorites('-me-', options)
                .then(function (result) {
                /** @type {?} */
                var page = {
                    list: {
                        entries: result.list.entries
                            .map(function (_a) {
                            var target = _a.entry.target;
                            return ({
                                entry: target.file || target.folder
                            });
                        })
                            .map(function (_a) {
                            var entry = _a.entry;
                            entry.properties = {
                                'cm:title': entry.title,
                                'cm:description': entry.description
                            };
                            return { entry: entry };
                        }),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets sites that the current user is a member of.
     * @param pagination Specifies how to paginate the results
     * @returns List of sites
     */
    /**
     * Gets sites that the current user is a member of.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    CustomResourcesService.prototype.loadMemberSites = /**
     * Gets sites that the current user is a member of.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    function (pagination) {
        var _this = this;
        /** @type {?} */
        var options = {
            include: ['properties'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return new Observable(function (observer) {
            _this.apiService.peopleApi.getSiteMembership('-me-', options)
                .then(function (result) {
                /** @type {?} */
                var page = {
                    list: {
                        entries: result.list.entries
                            .map(function (_a) {
                            var site = _a.entry.site;
                            site.allowableOperations = site.allowableOperations ? site.allowableOperations : [_this.CREATE_PERMISSION];
                            site.name = site.name || site.title;
                            return {
                                entry: site
                            };
                        }),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all sites in the respository.
     * @param pagination Specifies how to paginate the results
     * @returns List of sites
     */
    /**
     * Gets all sites in the respository.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    CustomResourcesService.prototype.loadSites = /**
     * Gets all sites in the respository.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    function (pagination) {
        var _this = this;
        /** @type {?} */
        var options = {
            include: ['properties', 'aspectNames'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return new Observable(function (observer) {
            _this.apiService.sitesApi.getSites(options)
                .then(function (page) {
                page.list.entries.map(function (_a) {
                    var entry = _a.entry;
                    entry.name = entry.name || entry.title;
                    return { entry: entry };
                });
                observer.next(page);
                observer.complete();
            }, function (err) {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all items currently in the trash.
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of deleted items
     */
    /**
     * Gets all items currently in the trash.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of deleted items
     */
    CustomResourcesService.prototype.loadTrashcan = /**
     * Gets all items currently in the trash.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of deleted items
     */
    function (pagination, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        var options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.apiService.nodesApi.getDeletedNodes(options))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets shared links for the current user.
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of shared links
     */
    /**
     * Gets shared links for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of shared links
     */
    CustomResourcesService.prototype.loadSharedLinks = /**
     * Gets shared links for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of shared links
     */
    function (pagination, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        var options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.apiService.sharedLinksApi.findSharedLinks(options))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Is the folder ID one of the well-known aliases?
     * @param folderId Folder ID name to check
     * @returns True if the ID is a well-known name, false otherwise
     */
    /**
     * Is the folder ID one of the well-known aliases?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is a well-known name, false otherwise
     */
    CustomResourcesService.prototype.isCustomSource = /**
     * Is the folder ID one of the well-known aliases?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is a well-known name, false otherwise
     */
    function (folderId) {
        /** @type {?} */
        var isCustomSources = false;
        /** @type {?} */
        var sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];
        if (sources.indexOf(folderId) > -1) {
            isCustomSources = true;
        }
        return isCustomSources;
    };
    /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param folderId Folder ID name to check
     * @returns True if the ID is one of the suppored sources, false otherwise
     */
    /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is one of the suppored sources, false otherwise
     */
    CustomResourcesService.prototype.isSupportedSource = /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is one of the suppored sources, false otherwise
     */
    function (folderId) {
        /** @type {?} */
        var isSupportedSources = false;
        /** @type {?} */
        var sources = ['-my-', '-root-', '-shared-'];
        if (sources.indexOf(folderId) > -1) {
            isSupportedSources = true;
        }
        return isSupportedSources;
    };
    /**
     * Gets a folder's contents.
     * @param nodeId ID of the target folder node
     * @param pagination Specifies how to paginate the results
     * @param includeFields List of data field names to include in the results
     * @returns List of items contained in the folder
     */
    /**
     * Gets a folder's contents.
     * @param {?} nodeId ID of the target folder node
     * @param {?} pagination Specifies how to paginate the results
     * @param {?} includeFields List of data field names to include in the results
     * @return {?} List of items contained in the folder
     */
    CustomResourcesService.prototype.loadFolderByNodeId = /**
     * Gets a folder's contents.
     * @param {?} nodeId ID of the target folder node
     * @param {?} pagination Specifies how to paginate the results
     * @param {?} includeFields List of data field names to include in the results
     * @return {?} List of items contained in the folder
     */
    function (nodeId, pagination, includeFields) {
        if (nodeId === '-trashcan-') {
            return this.loadTrashcan(pagination, includeFields);
        }
        else if (nodeId === '-sharedlinks-') {
            return this.loadSharedLinks(pagination, includeFields);
        }
        else if (nodeId === '-sites-') {
            return this.loadSites(pagination);
        }
        else if (nodeId === '-mysites-') {
            return this.loadMemberSites(pagination);
        }
        else if (nodeId === '-favorites-') {
            return this.loadFavorites(pagination, includeFields);
        }
        else if (nodeId === '-recent-') {
            return this.getRecentFiles('-me-', pagination);
        }
    };
    // TODO: remove it from here
    /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param nodeId ID of the target folder node
     * @param pagination Specifies how to paginate the results
     * @returns List of node IDs
     */
    /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param {?} nodeId ID of the target folder node
     * @param {?=} pagination Specifies how to paginate the results
     * @return {?} List of node IDs
     */
    CustomResourcesService.prototype.getCorrespondingNodeIds = /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param {?} nodeId ID of the target folder node
     * @param {?=} pagination Specifies how to paginate the results
     * @return {?} List of node IDs
     */
    function (nodeId, pagination) {
        if (pagination === void 0) { pagination = {}; }
        if (this.isCustomSource(nodeId)) {
            return this.loadFolderByNodeId(nodeId, pagination, [])
                .pipe(map(function (result) { return result.list.entries.map(function (node) {
                if (nodeId === '-sharedlinks-') {
                    return node.entry.nodeId;
                }
                else if (nodeId === '-sites-' || nodeId === '-mysites-') {
                    return node.entry.guid;
                }
                else if (nodeId === '-favorites-') {
                    return node.entry.targetGuid;
                }
                return node.entry.id;
            }); }));
        }
        else if (nodeId) {
            // cases when nodeId is '-my-', '-root-' or '-shared-'
            return from(this.apiService.nodesApi.getNode(nodeId)
                .then(function (node) { return [node.entry.id]; }));
        }
        return of([]);
    };
    /**
     * Does the well-known alias have a corresponding node ID?
     * @param nodeId Node to check
     * @returns True if the alias has a corresponding node ID, false otherwise
     */
    /**
     * Does the well-known alias have a corresponding node ID?
     * @param {?} nodeId Node to check
     * @return {?} True if the alias has a corresponding node ID, false otherwise
     */
    CustomResourcesService.prototype.hasCorrespondingNodeIds = /**
     * Does the well-known alias have a corresponding node ID?
     * @param {?} nodeId Node to check
     * @return {?} True if the alias has a corresponding node ID, false otherwise
     */
    function (nodeId) {
        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);
    };
    /**
     * @param {?} includeFields
     * @return {?}
     */
    CustomResourcesService.prototype.getIncludesFields = /**
     * @param {?} includeFields
     * @return {?}
     */
    function (includeFields) {
        return tslib_1.__spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
    };
    /**
     * @param {?} error
     * @return {?}
     */
    CustomResourcesService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    CustomResourcesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CustomResourcesService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    return CustomResourcesService;
}());
export { CustomResourcesService };
if (false) {
    /** @type {?} */
    CustomResourcesService.prototype.CREATE_PERMISSION;
    /** @type {?} */
    CustomResourcesService.prototype.apiService;
    /** @type {?} */
    CustomResourcesService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,