/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, TranslationService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { PermissionModel } from '../models/permissions.model';
import { DocumentListService } from './document-list.service';
import { NodeActionsService } from './node-actions.service';
var FolderActionsService = /** @class */ (function () {
    function FolderActionsService(nodeActionsService, documentListService, contentService, translation) {
        this.nodeActionsService = nodeActionsService;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.translation = translation;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    /**
     * Gets the handler function for an action.
     * @param key Identifier for the action
     * @returns The handler function
     */
    /**
     * Gets the handler function for an action.
     * @param {?} key Identifier for the action
     * @return {?} The handler function
     */
    FolderActionsService.prototype.getHandler = /**
     * Gets the handler function for an action.
     * @param {?} key Identifier for the action
     * @return {?} The handler function
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            return this.handlers[lkey] || null;
        }
        return null;
    };
    /**
     * Sets a new handler function for an action.
     * @param key Identifier for the action
     * @param handler The new handler function
     * @returns True if the key was a valid action identifier, false otherwise
     */
    /**
     * Sets a new handler function for an action.
     * @param {?} key Identifier for the action
     * @param {?} handler The new handler function
     * @return {?} True if the key was a valid action identifier, false otherwise
     */
    FolderActionsService.prototype.setHandler = /**
     * Sets a new handler function for an action.
     * @param {?} key Identifier for the action
     * @param {?} handler The new handler function
     * @return {?} True if the key was a valid action identifier, false otherwise
     */
    function (key, handler) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            this.handlers[lkey] = handler;
            return true;
        }
        return false;
    };
    /**
     * Checks if an action is available for a particular item.
     * @param obj Item to check
     * @returns True if the action is available, false otherwise
     */
    /**
     * Checks if an action is available for a particular item.
     * @param {?} obj Item to check
     * @return {?} True if the action is available, false otherwise
     */
    FolderActionsService.prototype.canExecuteAction = /**
     * Checks if an action is available for a particular item.
     * @param {?} obj Item to check
     * @return {?} True if the action is available, false otherwise
     */
    function (obj) {
        return this.documentListService && obj && obj.entry.isFolder === true;
    };
    /**
     * @return {?}
     */
    FolderActionsService.prototype.setupActionHandlers = /**
     * @return {?}
     */
    function () {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.downloadNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        this.nodeActionsService.downloadNode(obj);
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.copyNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.copyFolder(obj.entry, permission);
        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.moveNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.moveFolder(obj.entry, permission);
        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.prepareHandlers = /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (actionObservable, type, action, target, permission) {
        var _this = this;
        actionObservable.subscribe(function (fileOperationMessage) {
            if (target && typeof target.reload === 'function') {
                target.reload();
            }
            _this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    FolderActionsService.prototype.deleteNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        var _this = this;
        /** @type {?} */
        var handlerObservable;
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasPermission(node.entry, permission)) {
                handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(function () {
                    if (target && typeof target.reload === 'function') {
                        target.reload();
                    }
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    _this.success.next(message);
                }, function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    _this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({ type: 'folder', action: 'delete', permission: permission }));
                return throwError(new Error('No permission to delete'));
            }
        }
    };
    FolderActionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FolderActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: DocumentListService },
        { type: ContentService },
        { type: TranslationService }
    ]; };
    return FolderActionsService;
}());
export { FolderActionsService };
if (false) {
    /** @type {?} */
    FolderActionsService.prototype.permissionEvent;
    /** @type {?} */
    FolderActionsService.prototype.error;
    /** @type {?} */
    FolderActionsService.prototype.success;
    /** @type {?} */
    FolderActionsService.prototype.handlers;
    /** @type {?} */
    FolderActionsService.prototype.nodeActionsService;
    /** @type {?} */
    FolderActionsService.prototype.documentListService;
    /** @type {?} */
    FolderActionsService.prototype.contentService;
    /** @type {?} */
    FolderActionsService.prototype.translation;
}

//# sourceMappingURL=data:application/json;base64,