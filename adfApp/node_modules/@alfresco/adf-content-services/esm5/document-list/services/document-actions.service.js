/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, TranslationService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { PermissionModel } from '../models/permissions.model';
import { DocumentListService } from './document-list.service';
import { NodeActionsService } from './node-actions.service';
import { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';
var DocumentActionsService = /** @class */ (function () {
    function DocumentActionsService(nodeActionsService, contentNodeDialogService, translation, documentListService, contentService) {
        this.nodeActionsService = nodeActionsService;
        this.contentNodeDialogService = contentNodeDialogService;
        this.translation = translation;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    /**
     * Gets the handler for an action.
     * @param key Identifier of the action
     * @returns The handler for the action
     */
    /**
     * Gets the handler for an action.
     * @param {?} key Identifier of the action
     * @return {?} The handler for the action
     */
    DocumentActionsService.prototype.getHandler = /**
     * Gets the handler for an action.
     * @param {?} key Identifier of the action
     * @return {?} The handler for the action
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            return this.handlers[lkey] || null;
        }
        return null;
    };
    /**
     * Sets a new handler for an action.
     * @param key Identifier of the action
     * @param handler Handler for the action
     * @returns False if the key was an empty/null string, true otherwise
     */
    /**
     * Sets a new handler for an action.
     * @param {?} key Identifier of the action
     * @param {?} handler Handler for the action
     * @return {?} False if the key was an empty/null string, true otherwise
     */
    DocumentActionsService.prototype.setHandler = /**
     * Sets a new handler for an action.
     * @param {?} key Identifier of the action
     * @param {?} handler Handler for the action
     * @return {?} False if the key was an empty/null string, true otherwise
     */
    function (key, handler) {
        if (key) {
            /** @type {?} */
            var lkey = key.toLowerCase();
            this.handlers[lkey] = handler;
            return true;
        }
        return false;
    };
    /**
     * Checks if actions can be executed for an item.
     * @param obj Item to receive an action
     * @returns True if the action can be executed on this item, false otherwise
     */
    /**
     * Checks if actions can be executed for an item.
     * @param {?} obj Item to receive an action
     * @return {?} True if the action can be executed on this item, false otherwise
     */
    DocumentActionsService.prototype.canExecuteAction = /**
     * Checks if actions can be executed for an item.
     * @param {?} obj Item to receive an action
     * @return {?} True if the action can be executed on this item, false otherwise
     */
    function (obj) {
        return this.documentListService && obj && obj.entry.isFile === true;
    };
    /**
     * @return {?}
     */
    DocumentActionsService.prototype.setupActionHandlers = /**
     * @return {?}
     */
    function () {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
        this.handlers['lock'] = this.lockNode.bind(this);
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.lockNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        return this.contentNodeDialogService.openLockNodeDialog(node.entry);
    };
    /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.downloadNode = /**
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        this.nodeActionsService.downloadNode(obj);
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.copyNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.copyContent(node.entry, permission);
        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.moveNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.moveContent(node.entry, permission);
        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);
        return actionObservable;
    };
    /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.prepareHandlers = /**
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (actionObservable, type, action, target, permission) {
        var _this = this;
        actionObservable.subscribe(function (fileOperationMessage) {
            _this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    };
    /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.deleteNode = /**
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        var _this = this;
        /** @type {?} */
        var handlerObservable;
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasPermission(node.entry, permission)) {
                handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    _this.success.next(message);
                }, function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    _this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({
                    type: 'content',
                    action: 'delete',
                    permission: permission
                }));
                return throwError(new Error('No permission to delete'));
            }
        }
    };
    DocumentActionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DocumentActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: ContentNodeDialogService },
        { type: TranslationService },
        { type: DocumentListService },
        { type: ContentService }
    ]; };
    return DocumentActionsService;
}());
export { DocumentActionsService };
if (false) {
    /** @type {?} */
    DocumentActionsService.prototype.permissionEvent;
    /** @type {?} */
    DocumentActionsService.prototype.error;
    /** @type {?} */
    DocumentActionsService.prototype.success;
    /** @type {?} */
    DocumentActionsService.prototype.handlers;
    /** @type {?} */
    DocumentActionsService.prototype.nodeActionsService;
    /** @type {?} */
    DocumentActionsService.prototype.contentNodeDialogService;
    /** @type {?} */
    DocumentActionsService.prototype.translation;
    /** @type {?} */
    DocumentActionsService.prototype.documentListService;
    /** @type {?} */
    DocumentActionsService.prototype.contentService;
}

//# sourceMappingURL=data:application/json;base64,