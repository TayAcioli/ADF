/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectUtils } from '@alfresco/adf-core';
var ShareDataRow = /** @class */ (function () {
    function ShareDataRow(obj, documentListService, permissionsStyle, thumbnailService) {
        this.obj = obj;
        this.documentListService = documentListService;
        this.permissionsStyle = permissionsStyle;
        this.thumbnailService = thumbnailService;
        this.cache = {};
        this.isSelected = false;
        this.cssClass = '';
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);
        if (permissionsStyle) {
            this.cssClass = this.getPermissionClass(obj);
        }
    }
    Object.defineProperty(ShareDataRow.prototype, "node", {
        get: /**
         * @return {?}
         */
        function () {
            return this.obj;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nodeEntity
     * @return {?}
     */
    ShareDataRow.prototype.getPermissionClass = /**
     * @param {?} nodeEntity
     * @return {?}
     */
    function (nodeEntity) {
        var _this = this;
        /** @type {?} */
        var permissionsClasses = '';
        this.permissionsStyle.forEach(function (currentPermissionsStyle) {
            if (_this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || _this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                if (_this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {
                    permissionsClasses += " " + currentPermissionsStyle.css;
                }
            }
        });
        return permissionsClasses;
    };
    /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    ShareDataRow.prototype.applyPermissionStyleToFile = /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    function (node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFile && node.isFile);
    };
    /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    ShareDataRow.prototype.applyPermissionStyleToFolder = /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    function (node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFolder && node.isFolder);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ShareDataRow.prototype.isFolderAndHasPermissionToUpload = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ShareDataRow.prototype.isFolder = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj.entry && obj.entry.isFolder;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    ShareDataRow.prototype.cacheValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.cache[key] = value;
        return value;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ShareDataRow.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ObjectUtils.getValue(this.obj.entry, key);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShareDataRow.prototype.imageErrorResolver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ShareDataRow.prototype.hasValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.getValue(key) !== undefined;
    };
    ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
    return ShareDataRow;
}());
export { ShareDataRow };
if (false) {
    /** @type {?} */
    ShareDataRow.ERR_OBJECT_NOT_FOUND;
    /** @type {?} */
    ShareDataRow.prototype.cache;
    /** @type {?} */
    ShareDataRow.prototype.isSelected;
    /** @type {?} */
    ShareDataRow.prototype.isDropTarget;
    /** @type {?} */
    ShareDataRow.prototype.cssClass;
    /** @type {?} */
    ShareDataRow.prototype.obj;
    /** @type {?} */
    ShareDataRow.prototype.documentListService;
    /** @type {?} */
    ShareDataRow.prototype.permissionsStyle;
    /** @type {?} */
    ShareDataRow.prototype.thumbnailService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtZGF0YS1yb3cubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkb2N1bWVudC1saXN0L2RhdGEvc2hhcmUtZGF0YS1yb3cubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFXLFdBQVcsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQzs7SUFrQnhFLHNCQUFvQixHQUFzQixFQUN0QixxQkFDQSxrQkFDQTtRQUhBLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLHdCQUFtQixHQUFuQixtQkFBbUI7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixxQkFBZ0IsR0FBaEIsZ0JBQWdCO3FCQVpKLEVBQUU7MEJBQ1osS0FBSzt3QkFFUixFQUFFO1FBVWpCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFL0QsSUFBSSxnQkFBZ0IsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoRDtLQUNKO0lBakJELHNCQUFJLDhCQUFJOzs7O1FBQVI7WUFDSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDbkI7OztPQUFBOzs7OztJQWlCRCx5Q0FBa0I7Ozs7SUFBbEIsVUFBbUIsVUFBNkI7UUFBaEQsaUJBZUM7O1FBZEcsSUFBSSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFDLHVCQUE2QztZQUV4RSxJQUFJLEtBQUksQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLElBQUksS0FBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsRUFBRTtnQkFFNUosSUFBSSxLQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQzlGLGtCQUFrQixJQUFJLE1BQUksdUJBQXVCLENBQUMsR0FBSyxDQUFDO2lCQUMzRDthQUNKO1NBRUosQ0FBQyxDQUFDO1FBRUgsT0FBTyxrQkFBa0IsQ0FBQztLQUM3Qjs7Ozs7O0lBRU8saURBQTBCOzs7OztjQUFDLElBQWlCLEVBQUUsdUJBQTZDO1FBQy9GLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7O0lBR25ELG1EQUE0Qjs7Ozs7Y0FBQyxJQUFpQixFQUFFLHVCQUE2QztRQUNqRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7O0lBRy9ELHVEQUFnQzs7OztJQUFoQyxVQUFpQyxHQUFzQjtRQUNuRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzVGOzs7OztJQUVELCtCQUFROzs7O0lBQVIsVUFBUyxHQUFzQjtRQUMzQixPQUFPLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7S0FDMUM7Ozs7OztJQUVELGlDQUFVOzs7OztJQUFWLFVBQVcsR0FBVyxFQUFFLEtBQVU7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDeEIsT0FBTyxLQUFLLENBQUM7S0FDaEI7Ozs7O0lBRUQsK0JBQVE7Ozs7SUFBUixVQUFTLEdBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7UUFDRCxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDcEQ7Ozs7O0lBRUQseUNBQWtCOzs7O0lBQWxCLFVBQW1CLEtBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNqRjs7Ozs7SUFFRCwrQkFBUTs7OztJQUFSLFVBQVMsR0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUFDO0tBQzNDO3dDQTdFcUMseUJBQXlCO3VCQXhCbkU7O1NBc0JhLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEYXRhUm93LCBPYmplY3RVdGlscywgVGh1bWJuYWlsU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZSwgTWluaW1hbE5vZGVFbnRpdHkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgUGVybWlzc2lvblN0eWxlTW9kZWwgfSBmcm9tICcuLy4uL21vZGVscy9wZXJtaXNzaW9ucy1zdHlsZS5tb2RlbCc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9kb2N1bWVudC1saXN0LnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgU2hhcmVEYXRhUm93IGltcGxlbWVudHMgRGF0YVJvdyB7XG5cbiAgICBzdGF0aWMgRVJSX09CSkVDVF9OT1RfRk9VTkQ6IHN0cmluZyA9ICdPYmplY3Qgc291cmNlIG5vdCBmb3VuZCc7XG5cbiAgICBjYWNoZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBpc0Ryb3BUYXJnZXQ6IGJvb2xlYW47XG4gICAgY3NzQ2xhc3M6IHN0cmluZyA9ICcnO1xuXG4gICAgZ2V0IG5vZGUoKTogTWluaW1hbE5vZGVFbnRpdHkge1xuICAgICAgICByZXR1cm4gdGhpcy5vYmo7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBvYmo6IE1pbmltYWxOb2RlRW50aXR5LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZG9jdW1lbnRMaXN0U2VydmljZTogRG9jdW1lbnRMaXN0U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHBlcm1pc3Npb25zU3R5bGU6IFBlcm1pc3Npb25TdHlsZU1vZGVsW10sXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0aHVtYm5haWxTZXJ2aWNlPzogVGh1bWJuYWlsU2VydmljZSkge1xuICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFNoYXJlRGF0YVJvdy5FUlJfT0JKRUNUX05PVF9GT1VORCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlzRHJvcFRhcmdldCA9IHRoaXMuaXNGb2xkZXJBbmRIYXNQZXJtaXNzaW9uVG9VcGxvYWQob2JqKTtcblxuICAgICAgICBpZiAocGVybWlzc2lvbnNTdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5jc3NDbGFzcyA9IHRoaXMuZ2V0UGVybWlzc2lvbkNsYXNzKG9iaik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRQZXJtaXNzaW9uQ2xhc3Mobm9kZUVudGl0eTogTWluaW1hbE5vZGVFbnRpdHkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcGVybWlzc2lvbnNDbGFzc2VzID0gJyc7XG5cbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1N0eWxlLmZvckVhY2goKGN1cnJlbnRQZXJtaXNzaW9uc1N0eWxlOiBQZXJtaXNzaW9uU3R5bGVNb2RlbCkgPT4ge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5hcHBseVBlcm1pc3Npb25TdHlsZVRvRm9sZGVyKG5vZGVFbnRpdHkuZW50cnksIGN1cnJlbnRQZXJtaXNzaW9uc1N0eWxlKSB8fCB0aGlzLmFwcGx5UGVybWlzc2lvblN0eWxlVG9GaWxlKG5vZGVFbnRpdHkuZW50cnksIGN1cnJlbnRQZXJtaXNzaW9uc1N0eWxlKSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRMaXN0U2VydmljZS5oYXNQZXJtaXNzaW9uKG5vZGVFbnRpdHkuZW50cnksIGN1cnJlbnRQZXJtaXNzaW9uc1N0eWxlLnBlcm1pc3Npb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zQ2xhc3NlcyArPSBgICR7Y3VycmVudFBlcm1pc3Npb25zU3R5bGUuY3NzfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwZXJtaXNzaW9uc0NsYXNzZXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhcHBseVBlcm1pc3Npb25TdHlsZVRvRmlsZShub2RlOiBNaW5pbWFsTm9kZSwgY3VycmVudFBlcm1pc3Npb25zU3R5bGU6IFBlcm1pc3Npb25TdHlsZU1vZGVsKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAoY3VycmVudFBlcm1pc3Npb25zU3R5bGUuaXNGaWxlICYmIG5vZGUuaXNGaWxlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5UGVybWlzc2lvblN0eWxlVG9Gb2xkZXIobm9kZTogTWluaW1hbE5vZGUsIGN1cnJlbnRQZXJtaXNzaW9uc1N0eWxlOiBQZXJtaXNzaW9uU3R5bGVNb2RlbCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKGN1cnJlbnRQZXJtaXNzaW9uc1N0eWxlLmlzRm9sZGVyICYmIG5vZGUuaXNGb2xkZXIpO1xuICAgIH1cblxuICAgIGlzRm9sZGVyQW5kSGFzUGVybWlzc2lvblRvVXBsb2FkKG9iajogTWluaW1hbE5vZGVFbnRpdHkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNGb2xkZXIob2JqKSAmJiB0aGlzLmRvY3VtZW50TGlzdFNlcnZpY2UuaGFzUGVybWlzc2lvbihvYmouZW50cnksICdjcmVhdGUnKTtcbiAgICB9XG5cbiAgICBpc0ZvbGRlcihvYmo6IE1pbmltYWxOb2RlRW50aXR5KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBvYmouZW50cnkgJiYgb2JqLmVudHJ5LmlzRm9sZGVyO1xuICAgIH1cblxuICAgIGNhY2hlVmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuICAgICAgICB0aGlzLmNhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGdldFZhbHVlKGtleTogc3RyaW5nKTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3RVdGlscy5nZXRWYWx1ZSh0aGlzLm9iai5lbnRyeSwga2V5KTtcbiAgICB9XG5cbiAgICBpbWFnZUVycm9yUmVzb2x2ZXIoZXZlbnQ6IEV2ZW50KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGh1bWJuYWlsU2VydmljZS5nZXRNaW1lVHlwZUljb24odGhpcy5vYmouZW50cnkuY29udGVudC5taW1lVHlwZSk7XG4gICAgfVxuXG4gICAgaGFzVmFsdWUoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoa2V5KSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiJdfQ==