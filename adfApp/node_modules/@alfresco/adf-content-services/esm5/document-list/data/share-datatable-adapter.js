/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataSorting } from '@alfresco/adf-core';
import { ShareDataRow } from './share-data-row.model';
var ShareDataTableAdapter = /** @class */ (function () {
    function ShareDataTableAdapter(documentListService, thumbnailService, schema, sorting, sortingMode) {
        if (schema === void 0) { schema = []; }
        if (sortingMode === void 0) { sortingMode = 'client'; }
        this.documentListService = documentListService;
        this.thumbnailService = thumbnailService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
    }
    Object.defineProperty(ShareDataTableAdapter.prototype, "sortingMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sortingMode;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = (value || 'client').toLowerCase();
            if (newValue !== 'client' && newValue !== 'server') {
                newValue = 'client';
            }
            this._sortingMode = newValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getRows = /**
     * @return {?}
     */
    function () {
        return this.rows;
    };
    // TODO: disable this api
    /**
     * @param {?} rows
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setRows = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        this.rows = rows || [];
        this.sort();
    };
    /**
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getColumns = /**
     * @return {?}
     */
    function () {
        return this.columns;
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setColumns = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        this.columns = columns || [];
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getValue = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        /** @type {?} */
        var dataRow = /** @type {?} */ (row);
        /** @type {?} */
        var value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                /** @type {?} */
                var resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            /** @type {?} */
            var node = (/** @type {?} */ (row)).node;
            if (node.entry.isFolder) {
                if (this.isSmartFolder(node)) {
                    return this.documentListService.getMimeTypeIcon('smartFolder');
                }
                else {
                    return this.documentListService.getMimeTypeIcon('folder');
                }
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.documentListService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                /** @type {?} */
                var mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.documentListService.getMimeTypeIcon(mimeType);
                }
            }
            return this.documentListService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                /** @type {?} */
                var resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    };
    /**
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getSorting = /**
     * @return {?}
     */
    function () {
        return this.sorting;
    };
    /**
     * @param {?} sorting
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setSorting = /**
     * @param {?} sorting
     * @return {?}
     */
    function (sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    };
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    ShareDataTableAdapter.prototype.sort = /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    function (key, direction) {
        /** @type {?} */
        var sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setFilter = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this.filter = filter;
    };
    /**
     * @param {?} resolver
     * @return {?}
     */
    ShareDataTableAdapter.prototype.setImageResolver = /**
     * @param {?} resolver
     * @return {?}
     */
    function (resolver) {
        this.imageResolver = resolver;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ShareDataTableAdapter.prototype.isSmartFolder = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ShareDataTableAdapter.prototype.getNodeAspectNames = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];
    };
    /**
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    ShareDataTableAdapter.prototype.sortRows = /**
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    function (rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        /** @type {?} */
        var options = {};
        if (sorting && sorting.key && rows && rows.length > 0) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort(function (a, b) {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                /** @type {?} */
                var left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                var right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            });
        }
    };
    /**
     * @param {?} page
     * @param {?=} merge
     * @return {?}
     */
    ShareDataTableAdapter.prototype.loadPage = /**
     * @param {?} page
     * @param {?=} merge
     * @return {?}
     */
    function (page, merge) {
        var _this = this;
        if (merge === void 0) { merge = false; }
        /** @type {?} */
        var rows = [];
        if (page && page.list) {
            /** @type {?} */
            var data = page.list.entries;
            if (data && data.length > 0) {
                rows = data.map(function (item) { return new ShareDataRow(item, _this.documentListService, _this.permissionsStyle, _this.thumbnailService); });
                if (this.filter) {
                    rows = rows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    // Sort by first sortable or just first column
                    if (this.columns && this.columns.length > 0) {
                        /** @type {?} */
                        var sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(rows, sorting);
                        }
                        else {
                            /** @type {?} */
                            var sortable = this.columns.filter(function (c) { return c.sortable; });
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge) {
            /** @type {?} */
            var listPrunedDuplicate = rows.filter(function (elemntToFilter) {
                /** @type {?} */
                var isPresent = _this.rows.find(function (currenRow) {
                    return currenRow.obj.entry.id === elemntToFilter.obj.entry.id;
                });
                return !isPresent;
            });
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = rows;
        }
    };
    return ShareDataTableAdapter;
}());
export { ShareDataTableAdapter };
if (false) {
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_ROW_NOT_FOUND;
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_COL_NOT_FOUND;
    /** @type {?} */
    ShareDataTableAdapter.prototype._sortingMode;
    /** @type {?} */
    ShareDataTableAdapter.prototype.sorting;
    /** @type {?} */
    ShareDataTableAdapter.prototype.rows;
    /** @type {?} */
    ShareDataTableAdapter.prototype.columns;
    /** @type {?} */
    ShareDataTableAdapter.prototype.filter;
    /** @type {?} */
    ShareDataTableAdapter.prototype.imageResolver;
    /** @type {?} */
    ShareDataTableAdapter.prototype.thumbnails;
    /** @type {?} */
    ShareDataTableAdapter.prototype.permissionsStyle;
    /** @type {?} */
    ShareDataTableAdapter.prototype.selectedRow;
    /** @type {?} */
    ShareDataTableAdapter.prototype.documentListService;
    /** @type {?} */
    ShareDataTableAdapter.prototype.thumbnailService;
}

//# sourceMappingURL=data:application/json;base64,