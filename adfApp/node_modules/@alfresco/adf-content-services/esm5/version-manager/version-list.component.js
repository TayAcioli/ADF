/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, ContentService } from '@alfresco/adf-core';
import { Component, Input, ViewEncapsulation, EventEmitter, Output } from '@angular/core';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { MatDialog } from '@angular/material';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
var VersionListComponent = /** @class */ (function () {
    function VersionListComponent(alfrescoApi, contentService, dialog) {
        this.alfrescoApi = alfrescoApi;
        this.contentService = contentService;
        this.dialog = dialog;
        this.versions = [];
        this.isLoading = true;
        /**
         * Toggles showing/hiding of comments
         */
        this.showComments = true;
        /**
         * Enable/disable downloading a version of the current node.
         */
        this.allowDownload = true;
        /**
         * Toggles showing/hiding of version actions
         */
        this.showActions = true;
        /**
         * Emitted when a version is restored
         */
        this.restored = new EventEmitter();
        /**
         * Emitted when a version is deleted
         */
        this.deleted = new EventEmitter();
        this.versionsApi = this.alfrescoApi.versionsApi;
    }
    /**
     * @return {?}
     */
    VersionListComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.loadVersionHistory();
    };
    /**
     * @return {?}
     */
    VersionListComponent.prototype.canUpdate = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'update') && this.versions.length > 1;
    };
    /**
     * @return {?}
     */
    VersionListComponent.prototype.canDelete = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'delete') && this.versions.length > 1;
    };
    /**
     * @param {?} versionId
     * @return {?}
     */
    VersionListComponent.prototype.restore = /**
     * @param {?} versionId
     * @return {?}
     */
    function (versionId) {
        var _this = this;
        if (this.canUpdate()) {
            this.versionsApi
                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })
                .then(function () { return _this.onVersionRestored(_this.node); });
        }
    };
    /**
     * @return {?}
     */
    VersionListComponent.prototype.loadVersionHistory = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isLoading = true;
        this.versionsApi.listVersionHistory(this.node.id).then(function (data) {
            _this.versions = data.list.entries;
            _this.isLoading = false;
        });
    };
    /**
     * @param {?} versionId
     * @return {?}
     */
    VersionListComponent.prototype.downloadVersion = /**
     * @param {?} versionId
     * @return {?}
     */
    function (versionId) {
        if (this.allowDownload) {
            /** @type {?} */
            var versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);
            this.downloadContent(versionDownloadUrl);
        }
    };
    /**
     * @param {?} versionId
     * @return {?}
     */
    VersionListComponent.prototype.deleteVersion = /**
     * @param {?} versionId
     * @return {?}
     */
    function (versionId) {
        var _this = this;
        if (this.canUpdate()) {
            /** @type {?} */
            var dialogRef = this.dialog.open(ConfirmDialogComponent, {
                data: {
                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',
                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',
                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',
                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'
                },
                minWidth: '250px'
            });
            dialogRef.afterClosed().subscribe(function (result) {
                if (result === true) {
                    _this.alfrescoApi.versionsApi
                        .deleteVersion(_this.node.id, versionId)
                        .then(function () { return _this.onVersionDeleted(_this.node); });
                }
            });
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    VersionListComponent.prototype.onVersionDeleted = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.loadVersionHistory();
        this.deleted.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    VersionListComponent.prototype.onVersionRestored = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.loadVersionHistory();
        this.restored.emit(node);
    };
    /**
     * @param {?} nodeId
     * @param {?} versionId
     * @param {?=} attachment
     * @return {?}
     */
    VersionListComponent.prototype.getVersionContentUrl = /**
     * @param {?} nodeId
     * @param {?} versionId
     * @param {?=} attachment
     * @return {?}
     */
    function (nodeId, versionId, attachment) {
        /** @type {?} */
        var nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);
        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');
    };
    /**
     * @param {?} url
     * @return {?}
     */
    VersionListComponent.prototype.downloadContent = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };
    VersionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-version-list',
                    template: "<mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n    <mat-list-item *ngFor=\"let version of versions; let idx = index\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <h4 mat-line class=\"adf-version-list-item-name\" [id]=\"'adf-version-list-item-name-' + version.entry.id\" >{{version.entry.name}}</h4>\n        <p mat-line>\n            <span class=\"adf-version-list-item-version\"  [id]=\"'adf-version-list-item-version-' + version.entry.id\" >{{version.entry.id}}</span> -\n            <span class=\"adf-version-list-item-date\"     [id]=\"'adf-version-list-item-date-' + version.entry.id\" >{{version.entry.modifiedAt | date}}</span>\n        </p>\n        <p mat-line [id]=\"'adf-version-list-item-comment-'+ version.entry.id\" class=\"adf-version-list-item-comment\"\n           *ngIf=\"showComments\">{{version.entry.versionComment}}</p>\n\n        <div *ngIf=\"showActions\">\n            <mat-menu [id]=\"'adf-version-list-action-menu-'+version.entry.id\"\n                      #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n                <button\n                    [id]=\"'adf-version-list-action-restore-'+version.entry.id\"\n                    [disabled]=\"!canUpdate()\"\n                    mat-menu-item\n                    (click)=\"restore(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.RESTORE' | translate }}\n                </button>\n                <button *ngIf=\"allowDownload\"\n                        [id]=\"'adf-version-list-action-download-'+version.entry.id\"\n                        mat-menu-item\n                        (click)=\"downloadVersion(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DOWNLOAD' | translate }}\n                </button>\n                <button\n                    [disabled]=\"!canDelete()\"\n                    [id]=\"'adf-version-list-action-delete-'+version.entry.id\"\n                    (click)=\"deleteVersion(version.entry.id)\"\n                    mat-menu-item>\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DELETE' | translate }}\n                </button>\n            </mat-menu>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\" [id]=\"'adf-version-list-action-menu-button-'+version.entry.id\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n        </div>\n    </mat-list-item>\n</mat-list>\n\n<ng-template #loading_template>\n    <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\"\n                      color=\"accent\"></mat-progress-bar>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': 'adf-version-list'
                    },
                    styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"]
                }] }
    ];
    /** @nocollapse */
    VersionListComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: ContentService },
        { type: MatDialog }
    ]; };
    VersionListComponent.propDecorators = {
        id: [{ type: Input }],
        node: [{ type: Input }],
        showComments: [{ type: Input }],
        allowDownload: [{ type: Input }],
        showActions: [{ type: Input }],
        restored: [{ type: Output }],
        deleted: [{ type: Output }]
    };
    return VersionListComponent;
}());
export { VersionListComponent };
if (false) {
    /** @type {?} */
    VersionListComponent.prototype.versionsApi;
    /** @type {?} */
    VersionListComponent.prototype.versions;
    /** @type {?} */
    VersionListComponent.prototype.isLoading;
    /**
     * @deprecated in 2.3.0
     * @type {?}
     */
    VersionListComponent.prototype.id;
    /**
     * The target node.
     * @type {?}
     */
    VersionListComponent.prototype.node;
    /**
     * Toggles showing/hiding of comments
     * @type {?}
     */
    VersionListComponent.prototype.showComments;
    /**
     * Enable/disable downloading a version of the current node.
     * @type {?}
     */
    VersionListComponent.prototype.allowDownload;
    /**
     * Toggles showing/hiding of version actions
     * @type {?}
     */
    VersionListComponent.prototype.showActions;
    /**
     * Emitted when a version is restored
     * @type {?}
     */
    VersionListComponent.prototype.restored;
    /**
     * Emitted when a version is deleted
     * @type {?}
     */
    VersionListComponent.prototype.deleted;
    /** @type {?} */
    VersionListComponent.prototype.alfrescoApi;
    /** @type {?} */
    VersionListComponent.prototype.contentService;
    /** @type {?} */
    VersionListComponent.prototype.dialog;
}

//# sourceMappingURL=data:application/json;base64,