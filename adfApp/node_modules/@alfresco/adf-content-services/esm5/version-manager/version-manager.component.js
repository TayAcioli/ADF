/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { VersionListComponent } from './version-list.component';
import { AppConfigService, ContentService, AlfrescoApiService } from '@alfresco/adf-core';
import { trigger, state, style, animate, transition } from '@angular/animations';
var VersionManagerComponent = /** @class */ (function () {
    function VersionManagerComponent(config, contentService, alfrescoApiService) {
        this.contentService = contentService;
        this.alfrescoApiService = alfrescoApiService;
        /**
         * Toggles showing/hiding of comments.
         */
        this.showComments = true;
        /**
         * Enable/disable downloading a version of the current node.
         */
        this.allowDownload = true;
        /**
         * Emitted when a file is uploaded successfully.
         */
        this.uploadSuccess = new EventEmitter();
        /**
         * Emitted when an error occurs during upload.
         */
        this.uploadError = new EventEmitter();
        this.uploadState = 'close';
    }
    /**
     * @param {?} node
     * @return {?}
     */
    VersionManagerComponent.prototype.refresh = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.alfrescoApiService.nodeUpdated.next(node);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(node);
        this.uploadState = 'close';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VersionManagerComponent.prototype.onUploadSuccess = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.alfrescoApiService.nodeUpdated.next(event.value.entry);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(event.value.entry);
        this.uploadState = 'close';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VersionManagerComponent.prototype.onUploadError = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.uploadError.emit(event);
    };
    /**
     * @return {?}
     */
    VersionManagerComponent.prototype.onUploadCancel = /**
     * @return {?}
     */
    function () {
        this.uploadState = 'close';
    };
    /**
     * @return {?}
     */
    VersionManagerComponent.prototype.toggleNewVersion = /**
     * @return {?}
     */
    function () {
        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';
    };
    /**
     * @return {?}
     */
    VersionManagerComponent.prototype.canUpdate = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, 'update');
    };
    VersionManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-version-manager',
                    template: "<div class=\"adf-new-version-container\">\n    <div class=\"adf-new-version-uploader-container\" id=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\" [@uploadToggle]=\"uploadState\">\n        <table class=\"adf-version-upload\" *ngIf=\"uploadState !== 'close'\">\n            <tr>\n                <td>\n                    <adf-version-upload\n                        id=\"adf-version-upload-button\"\n                        [node]=\"node\"\n                        (success)=\"onUploadSuccess($event)\"\n                        (cancel)=\"onUploadCancel()\"\n                        (error)=\"onUploadError($event)\">\n                    </adf-version-upload>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"adf-version-list-container\">\n        <div class=\"adf-version-list-table\">\n            <div>\n                <button mat-raised-button\n                        id=\"adf-show-version-upload-button\"\n                        (click)=\"toggleNewVersion()\" color=\"primary\"\n                        *ngIf=\"uploadState ==='close'\">{{\n                    'ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD'|\n                    translate }}\n                </button>\n            </div>\n            <div>\n\n                <adf-version-list\n                    #versionList\n                    [node]=\"node\"\n                    [allowDownload]=\"allowDownload\"\n                    [showComments]=\"showComments\"\n                    (deleted)=\"refresh($event)\"\n                    (restored)=\"refresh($event)\">\n                </adf-version-list>\n            </div>\n        </div>\n    </div>\n</div>\n",
                    animations: [
                        trigger('uploadToggle', [
                            state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                            state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                            transition('open => close', [
                                style({ visibility: 'hidden' }),
                                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                            ]),
                            transition('close => open', [
                                style({ visibility: 'visible' }),
                                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                            ])
                        ])
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-button.upload-new-version{box-shadow:none;width:100%;height:175px;float:left;position:relative}.adf-new-version-uploader-container{border-bottom:1px solid #d8d8d8;padding:16px 0;width:100%;height:0%;position:relative;display:hidden;float:left!important}.adf-new-version-container{height:800px;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important;float:left!important}"]
                }] }
    ];
    /** @nocollapse */
    VersionManagerComponent.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: ContentService },
        { type: AlfrescoApiService }
    ]; };
    VersionManagerComponent.propDecorators = {
        node: [{ type: Input }],
        showComments: [{ type: Input }],
        allowDownload: [{ type: Input }],
        uploadSuccess: [{ type: Output }],
        uploadError: [{ type: Output }],
        versionListComponent: [{ type: ViewChild, args: ['versionList',] }]
    };
    return VersionManagerComponent;
}());
export { VersionManagerComponent };
if (false) {
    /**
     * Target node to manage version history.
     * @type {?}
     */
    VersionManagerComponent.prototype.node;
    /**
     * Toggles showing/hiding of comments.
     * @type {?}
     */
    VersionManagerComponent.prototype.showComments;
    /**
     * Enable/disable downloading a version of the current node.
     * @type {?}
     */
    VersionManagerComponent.prototype.allowDownload;
    /**
     * Emitted when a file is uploaded successfully.
     * @type {?}
     */
    VersionManagerComponent.prototype.uploadSuccess;
    /**
     * Emitted when an error occurs during upload.
     * @type {?}
     */
    VersionManagerComponent.prototype.uploadError;
    /** @type {?} */
    VersionManagerComponent.prototype.versionListComponent;
    /** @type {?} */
    VersionManagerComponent.prototype.uploadState;
    /** @type {?} */
    VersionManagerComponent.prototype.contentService;
    /** @type {?} */
    VersionManagerComponent.prototype.alfrescoApiService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1tYW5hZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInZlcnNpb24tbWFuYWdlci92ZXJzaW9uLW1hbmFnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztJQWlEN0UsaUNBQVksTUFBd0IsRUFDaEIsZ0JBQ0E7UUFEQSxtQkFBYyxHQUFkLGNBQWM7UUFDZCx1QkFBa0IsR0FBbEIsa0JBQWtCOzs7OzRCQXJCdkIsSUFBSTs7Ozs2QkFJSCxJQUFJOzs7OzZCQUlrQyxJQUFJLFlBQVksRUFBMEI7Ozs7MkJBSTVDLElBQUksWUFBWSxFQUEwQjsyQkFLeEUsT0FBTztLQUs1Qjs7Ozs7SUFFRCx5Q0FBTzs7OztJQUFQLFVBQVEsSUFBNEI7UUFDaEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7S0FDOUI7Ozs7O0lBRUQsaURBQWU7Ozs7SUFBZixVQUFnQixLQUFVO1FBQ3RCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztLQUM5Qjs7Ozs7SUFFRCwrQ0FBYTs7OztJQUFiLFVBQWMsS0FBVTtRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQzs7OztJQUVELGdEQUFjOzs7SUFBZDtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0tBQzlCOzs7O0lBRUQsa0RBQWdCOzs7SUFBaEI7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztLQUNyRTs7OztJQUVELDJDQUFTOzs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNqRTs7Z0JBaEZKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixtckRBQStDO29CQUUvQyxVQUFVLEVBQUU7d0JBQ1IsT0FBTyxDQUFDLGNBQWMsRUFBRTs0QkFDcEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7NEJBQzVFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDOzRCQUN6RSxVQUFVLENBQUMsZUFBZSxFQUFFO2dDQUN4QixLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUM7Z0NBQy9CLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQzs2QkFDbkQsQ0FBQzs0QkFDRixVQUFVLENBQUMsZUFBZSxFQUFFO2dDQUN4QixLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUM7Z0NBQ2hDLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQzs2QkFDbkQsQ0FBQzt5QkFDTCxDQUFDO3FCQUNMO29CQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBdEJRLGdCQUFnQjtnQkFBRSxjQUFjO2dCQUFFLGtCQUFrQjs7O3VCQTBCeEQsS0FBSzsrQkFJTCxLQUFLO2dDQUlMLEtBQUs7Z0NBSUwsTUFBTTs4QkFJTixNQUFNO3VDQUdOLFNBQVMsU0FBQyxhQUFhOztrQ0FqRTVCOztTQTJDYSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgVmlld0NoaWxkLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWluaW1hbE5vZGVFbnRyeUVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBWZXJzaW9uTGlzdENvbXBvbmVudCB9IGZyb20gJy4vdmVyc2lvbi1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlLCBDb250ZW50U2VydmljZSwgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IHRyaWdnZXIsIHN0YXRlLCBzdHlsZSwgYW5pbWF0ZSwgdHJhbnNpdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi12ZXJzaW9uLW1hbmFnZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi92ZXJzaW9uLW1hbmFnZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3ZlcnNpb24tbWFuYWdlci5jb21wb25lbnQuc2NzcyddLFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlcigndXBsb2FkVG9nZ2xlJywgW1xuICAgICAgICAgICAgc3RhdGUoJ29wZW4nLCBzdHlsZSh7IGhlaWdodDogJzE3NXB4Jywgb3BhY2l0eTogMSwgdmlzaWJpbGl0eTogJ3Zpc2libGUnIH0pKSxcbiAgICAgICAgICAgIHN0YXRlKCdjbG9zZScsIHN0eWxlKHsgaGVpZ2h0OiAnMCUnLCBvcGFjaXR5OiAwLCB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCdvcGVuID0+IGNsb3NlJywgW1xuICAgICAgICAgICAgICAgIHN0eWxlKHsgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSksXG4gICAgICAgICAgICAgICAgYW5pbWF0ZSgnMC40cyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjI1LCAxKScpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ2Nsb3NlID0+IG9wZW4nLCBbXG4gICAgICAgICAgICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScgfSksXG4gICAgICAgICAgICAgICAgYW5pbWF0ZSgnMC40cyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjI1LCAxKScpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgIF0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uTWFuYWdlckNvbXBvbmVudCB7XG5cbiAgICAvKiogVGFyZ2V0IG5vZGUgdG8gbWFuYWdlIHZlcnNpb24gaGlzdG9yeS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGU6IE1pbmltYWxOb2RlRW50cnlFbnRpdHk7XG5cbiAgICAvKiogVG9nZ2xlcyBzaG93aW5nL2hpZGluZyBvZiBjb21tZW50cy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dDb21tZW50cyA9IHRydWU7XG5cbiAgICAvKiogRW5hYmxlL2Rpc2FibGUgZG93bmxvYWRpbmcgYSB2ZXJzaW9uIG9mIHRoZSBjdXJyZW50IG5vZGUuICovXG4gICAgQElucHV0KClcbiAgICBhbGxvd0Rvd25sb2FkID0gdHJ1ZTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSBmaWxlIGlzIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICB1cGxvYWRTdWNjZXNzOiBFdmVudEVtaXR0ZXI8TWluaW1hbE5vZGVFbnRyeUVudGl0eT4gPSBuZXcgRXZlbnRFbWl0dGVyPE1pbmltYWxOb2RlRW50cnlFbnRpdHk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgdXBsb2FkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHVwbG9hZEVycm9yOiBFdmVudEVtaXR0ZXI8TWluaW1hbE5vZGVFbnRyeUVudGl0eT4gPSBuZXcgRXZlbnRFbWl0dGVyPE1pbmltYWxOb2RlRW50cnlFbnRpdHk+KCk7XG5cbiAgICBAVmlld0NoaWxkKCd2ZXJzaW9uTGlzdCcpXG4gICAgdmVyc2lvbkxpc3RDb21wb25lbnQ6IFZlcnNpb25MaXN0Q29tcG9uZW50O1xuXG4gICAgdXBsb2FkU3RhdGU6IHN0cmluZyA9ICdjbG9zZSc7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSkge1xuICAgIH1cblxuICAgIHJlZnJlc2gobm9kZTogTWluaW1hbE5vZGVFbnRyeUVudGl0eSkge1xuICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5ub2RlVXBkYXRlZC5uZXh0KG5vZGUpO1xuICAgICAgICB0aGlzLnZlcnNpb25MaXN0Q29tcG9uZW50LmxvYWRWZXJzaW9uSGlzdG9yeSgpO1xuICAgICAgICB0aGlzLnVwbG9hZFN1Y2Nlc3MuZW1pdChub2RlKTtcbiAgICAgICAgdGhpcy51cGxvYWRTdGF0ZSA9ICdjbG9zZSc7XG4gICAgfVxuXG4gICAgb25VcGxvYWRTdWNjZXNzKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2Uubm9kZVVwZGF0ZWQubmV4dChldmVudC52YWx1ZS5lbnRyeSk7XG4gICAgICAgIHRoaXMudmVyc2lvbkxpc3RDb21wb25lbnQubG9hZFZlcnNpb25IaXN0b3J5KCk7XG4gICAgICAgIHRoaXMudXBsb2FkU3VjY2Vzcy5lbWl0KGV2ZW50LnZhbHVlLmVudHJ5KTtcbiAgICAgICAgdGhpcy51cGxvYWRTdGF0ZSA9ICdjbG9zZSc7XG4gICAgfVxuXG4gICAgb25VcGxvYWRFcnJvcihldmVudDogYW55KSB7XG4gICAgICAgIHRoaXMudXBsb2FkRXJyb3IuZW1pdChldmVudCk7XG4gICAgfVxuXG4gICAgb25VcGxvYWRDYW5jZWwoKSB7XG4gICAgICAgIHRoaXMudXBsb2FkU3RhdGUgPSAnY2xvc2UnO1xuICAgIH1cblxuICAgIHRvZ2dsZU5ld1ZlcnNpb24oKSB7XG4gICAgICAgIHRoaXMudXBsb2FkU3RhdGUgPSB0aGlzLnVwbG9hZFN0YXRlID09PSAnb3BlbicgPyAnY2xvc2UnIDogJ29wZW4nO1xuICAgIH1cblxuICAgIGNhblVwZGF0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuaGFzUGVybWlzc2lvbih0aGlzLm5vZGUsICd1cGRhdGUnKTtcbiAgICB9XG59XG4iXX0=