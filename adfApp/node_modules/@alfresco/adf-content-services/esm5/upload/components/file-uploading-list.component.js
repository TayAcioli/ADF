/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';
import { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
var FileUploadingListComponent = /** @class */ (function () {
    function FileUploadingListComponent(uploadService, nodesApi, translateService) {
        this.uploadService = uploadService;
        this.nodesApi = nodesApi;
        this.translateService = translateService;
        this.FileUploadStatus = FileUploadStatus;
        this.files = [];
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
    }
    /**
     * Cancel file upload
     *
     * @param file File model to cancel upload for.
     *
     * @memberOf FileUploadingListComponent
     */
    /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelFile = /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    function (file) {
        this.uploadService.cancelUpload(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadingListComponent.prototype.removeFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.deleteNode(file)
            .subscribe(function () {
            if (file.status === FileUploadStatus.Error) {
                _this.notifyError(file);
            }
            _this.uploadService.cancelUpload(file);
        });
    };
    /**
     * Call the appropriate method for each file, depending on state
     */
    /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelAllFiles = /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    function () {
        var _this = this;
        this.getUploadingFiles()
            .forEach(function (file) { return _this.uploadService.cancelUpload(file); });
        /** @type {?} */
        var deletedFiles = this.files
            .filter(function (file) { return file.status === FileUploadStatus.Complete; })
            .map(function (file) { return _this.deleteNode(file); });
        forkJoin.apply(void 0, tslib_1.__spread(deletedFiles)).subscribe(function (files) {
            var _a;
            /** @type {?} */
            var errors = files
                .filter(function (file) { return file.status === FileUploadStatus.Error; });
            if (errors.length) {
                _this.notifyError.apply(_this, tslib_1.__spread(errors));
            }
            (_a = _this.uploadService).cancelUpload.apply(_a, tslib_1.__spread(files));
        });
    };
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     */
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    FileUploadingListComponent.prototype.isUploadCompleted = /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    function () {
        return !this.isUploadCancelled() &&
            Boolean(this.files.length) &&
            !this.files
                .some(function (_a) {
                var status = _a.status;
                return status === FileUploadStatus.Starting ||
                    status === FileUploadStatus.Progress ||
                    status === FileUploadStatus.Pending;
            });
    };
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     */
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    FileUploadingListComponent.prototype.isUploadCancelled = /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    function () {
        return !!this.files.length &&
            this.files
                .every(function (_a) {
                var status = _a.status;
                return status === FileUploadStatus.Aborted ||
                    status === FileUploadStatus.Cancelled ||
                    status === FileUploadStatus.Deleted;
            });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadingListComponent.prototype.deleteNode = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var id = file.data.entry.id;
        return this.nodesApi
            .deleteNode(id, { permanent: true })
            .pipe(map(function () {
            file.status = FileUploadStatus.Deleted;
            return file;
        }), catchError(function () {
            file.status = FileUploadStatus.Error;
            return of(file);
        }));
    };
    /**
     * @param {...?} files
     * @return {?}
     */
    FileUploadingListComponent.prototype.notifyError = /**
     * @param {...?} files
     * @return {?}
     */
    function () {
        var files = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            files[_i] = arguments[_i];
        }
        /** @type {?} */
        var messageError = null;
        if (files.length === 1) {
            messageError = this.translateService
                .instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
        }
        else {
            messageError = this.translateService
                .instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
        }
        this.error.emit(messageError);
    };
    /**
     * @return {?}
     */
    FileUploadingListComponent.prototype.getUploadingFiles = /**
     * @return {?}
     */
    function () {
        return this.files.filter(function (item) {
            if (item.status === FileUploadStatus.Pending ||
                item.status === FileUploadStatus.Progress ||
                item.status === FileUploadStatus.Starting) {
                return item;
            }
        });
    };
    FileUploadingListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-file-uploading-list',
                    template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                    styles: [":host{display:flex;flex-direction:column}"]
                }] }
    ];
    /** @nocollapse */
    FileUploadingListComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: NodesApiService },
        { type: TranslationService }
    ]; };
    FileUploadingListComponent.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        files: [{ type: Input }],
        error: [{ type: Output }]
    };
    return FileUploadingListComponent;
}());
export { FileUploadingListComponent };
if (false) {
    /** @type {?} */
    FileUploadingListComponent.prototype.FileUploadStatus;
    /** @type {?} */
    FileUploadingListComponent.prototype.template;
    /** @type {?} */
    FileUploadingListComponent.prototype.files;
    /**
     * Emitted when a file in the list has an error.
     * @type {?}
     */
    FileUploadingListComponent.prototype.error;
    /** @type {?} */
    FileUploadingListComponent.prototype.uploadService;
    /** @type {?} */
    FileUploadingListComponent.prototype.nodesApi;
    /** @type {?} */
    FileUploadingListComponent.prototype.translateService;
}

//# sourceMappingURL=data:application/json;base64,