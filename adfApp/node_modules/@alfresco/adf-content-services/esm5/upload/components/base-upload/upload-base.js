/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { FileModel } from '@alfresco/adf-core';
import { EventEmitter, Input, Output } from '@angular/core';
import { UploadFilesEvent } from '../upload-files.event';
/**
 * @abstract
 */
var UploadBase = /** @class */ (function () {
    function UploadBase(uploadService, translationService, ngZone) {
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.ngZone = ngZone;
        /**
         * The ID of the root. Use the nodeId for
         * Content Services or the taskId/processId for Process Services.
         */
        this.rootFolderId = '-root-';
        /**
         * Toggles component disabled state (if there is no node permission checking).
         */
        this.disabled = false;
        /**
         * Filter for accepted file types.
         */
        this.acceptedFilesType = '*';
        /**
         * Toggles versioning.
         */
        this.versioning = false;
        /**
         * majorVersion boolean field to true to indicate a major version should be created.
         */
        this.majorVersion = false;
        /**
         * Custom node type for uploaded file
         */
        this.nodeType = 'cm:content';
        /**
         * Emitted when the file is uploaded successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when a folder is created.
         * @deprecated 2.4.0 No longer used by the framework
         */
        this.createFolder = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the upload begins.
         */
        this.beginUpload = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    UploadBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.uploadService.fileUploadError.subscribe(function (error) {
            _this.error.emit(error);
        }));
    };
    /**
     * @return {?}
     */
    UploadBase.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
    };
    /**
     * Upload a list of file in the specified path
     * @param files
     * @param path
     */
    /**
     * Upload a list of file in the specified path
     * @param {?} files
     * @return {?}
     */
    UploadBase.prototype.uploadFiles = /**
     * Upload a list of file in the specified path
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filteredFiles = files
            .map(function (file) {
            return _this.createFileModel(file, _this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
        });
        this.uploadQueue(filteredFiles);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    UploadBase.prototype.uploadFilesInfo = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filteredFiles = files
            .map(function (fileInfo) {
            return _this.createFileModel(fileInfo.file, _this.rootFolderId, fileInfo.relativeFolder);
        });
        this.uploadQueue(filteredFiles);
    };
    /**
     * @param {?} files
     * @return {?}
     */
    UploadBase.prototype.uploadQueue = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filteredFiles = files
            .filter(this.isFileAcceptable.bind(this))
            .filter(this.isFileSizeAcceptable.bind(this));
        this.ngZone.run(function () {
            var _a;
            /** @type {?} */
            var event = new UploadFilesEvent(tslib_1.__spread(filteredFiles), _this.uploadService, _this.success);
            _this.beginUpload.emit(event);
            if (!event.defaultPrevented) {
                if (filteredFiles.length > 0) {
                    (_a = _this.uploadService).addToQueue.apply(_a, tslib_1.__spread(filteredFiles));
                    _this.uploadService.uploadFilesInTheQueue(_this.success);
                }
            }
        });
    };
    /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param file FileModel
     */
    /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param {?} file FileModel
     * @return {?}
     */
    UploadBase.prototype.isFileAcceptable = /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param {?} file FileModel
     * @return {?}
     */
    function (file) {
        if (this.acceptedFilesType === '*') {
            return true;
        }
        /** @type {?} */
        var allowedExtensions = this.acceptedFilesType
            .split(',')
            .map(function (ext) { return ext.replace(/^\./, ''); });
        if (allowedExtensions.indexOf(file.extension) !== -1) {
            return true;
        }
        return false;
    };
    /**
     * Creates FileModel from File
     *
     * @param file
     */
    /**
     * Creates FileModel from File
     *
     * @param {?} file
     * @param {?} parentId
     * @param {?} path
     * @param {?=} id
     * @return {?}
     */
    UploadBase.prototype.createFileModel = /**
     * Creates FileModel from File
     *
     * @param {?} file
     * @param {?} parentId
     * @param {?} path
     * @param {?=} id
     * @return {?}
     */
    function (file, parentId, path, id) {
        return new FileModel(file, {
            comment: this.comment,
            majorVersion: this.majorVersion,
            newVersion: this.versioning,
            parentId: parentId,
            path: path,
            nodeType: this.nodeType
        }, id);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadBase.prototype.isFileSizeAllowed = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var isFileSizeAllowed = true;
        if (this.isMaxFileSizeDefined()) {
            isFileSizeAllowed = this.isFileSizeCorrect(file);
        }
        return isFileSizeAllowed;
    };
    /**
     * @return {?}
     */
    UploadBase.prototype.isMaxFileSizeDefined = /**
     * @return {?}
     */
    function () {
        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadBase.prototype.isFileSizeCorrect = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
    };
    /**
     * Checks if the given file is an acceptable size
     *
     * @param {?} file FileModel
     * @return {?}
     */
    UploadBase.prototype.isFileSizeAcceptable = /**
     * Checks if the given file is an acceptable size
     *
     * @param {?} file FileModel
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var acceptableSize = true;
        if (!this.isFileSizeAllowed(file)) {
            acceptableSize = false;
            /** @type {?} */
            var message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
            this.error.emit(message);
        }
        return acceptableSize;
    };
    UploadBase.propDecorators = {
        maxFilesSize: [{ type: Input }],
        rootFolderId: [{ type: Input }],
        disabled: [{ type: Input }],
        acceptedFilesType: [{ type: Input }],
        versioning: [{ type: Input }],
        majorVersion: [{ type: Input }],
        comment: [{ type: Input }],
        nodeType: [{ type: Input }],
        success: [{ type: Output }],
        createFolder: [{ type: Output }],
        error: [{ type: Output }],
        beginUpload: [{ type: Output }]
    };
    return UploadBase;
}());
export { UploadBase };
if (false) {
    /**
     * Sets a limit on the maximum size (in bytes) of a file to be uploaded.
     * Has no effect if undefined.
     * @type {?}
     */
    UploadBase.prototype.maxFilesSize;
    /**
     * The ID of the root. Use the nodeId for
     * Content Services or the taskId/processId for Process Services.
     * @type {?}
     */
    UploadBase.prototype.rootFolderId;
    /**
     * Toggles component disabled state (if there is no node permission checking).
     * @type {?}
     */
    UploadBase.prototype.disabled;
    /**
     * Filter for accepted file types.
     * @type {?}
     */
    UploadBase.prototype.acceptedFilesType;
    /**
     * Toggles versioning.
     * @type {?}
     */
    UploadBase.prototype.versioning;
    /**
     * majorVersion boolean field to true to indicate a major version should be created.
     * @type {?}
     */
    UploadBase.prototype.majorVersion;
    /**
     * When you overwrite existing content, you can use the comment field to add a version comment that appears in the version history
     * @type {?}
     */
    UploadBase.prototype.comment;
    /**
     * Custom node type for uploaded file
     * @type {?}
     */
    UploadBase.prototype.nodeType;
    /**
     * Emitted when the file is uploaded successfully.
     * @type {?}
     */
    UploadBase.prototype.success;
    /**
     * Emitted when a folder is created.
     * @deprecated 2.4.0 No longer used by the framework
     * @type {?}
     */
    UploadBase.prototype.createFolder;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    UploadBase.prototype.error;
    /**
     * Emitted when the upload begins.
     * @type {?}
     */
    UploadBase.prototype.beginUpload;
    /** @type {?} */
    UploadBase.prototype.subscriptions;
    /** @type {?} */
    UploadBase.prototype.uploadService;
    /** @type {?} */
    UploadBase.prototype.translationService;
    /** @type {?} */
    UploadBase.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,