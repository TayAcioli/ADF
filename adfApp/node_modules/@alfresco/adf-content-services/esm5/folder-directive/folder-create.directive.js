/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material';
import { FolderDialogComponent } from '../dialogs/folder.dialog';
import { ContentService } from '@alfresco/adf-core';
/** @type {?} */
var DEFAULT_FOLDER_PARENT_ID = '-my-';
var FolderCreateDirective = /** @class */ (function () {
    function FolderCreateDirective(dialogRef, content) {
        this.dialogRef = dialogRef;
        this.content = content;
        /**
         * Parent folder where the new folder will be located after creation.
         */
        this.parentNodeId = DEFAULT_FOLDER_PARENT_ID;
        /**
         * Title of folder creation dialog.
         */
        this.title = null;
        /**
         * Type of node to create.
         */
        this.nodeType = 'cm:folder';
        /**
         * Emitted when an error occurs (eg, a folder with same name already exists).
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the folder is created successfully.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FolderCreateDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.openDialog();
    };
    Object.defineProperty(FolderCreateDirective.prototype, "dialogConfig", {
        get: /**
         * @return {?}
         */
        function () {
            var width = FolderCreateDirective.DIALOG_WIDTH;
            var _a = this, parentNodeId = _a.parentNodeId, createTitle = _a.title, nodeType = _a.nodeType;
            return {
                data: { parentNodeId: parentNodeId, createTitle: createTitle, nodeType: nodeType },
                width: width + "px"
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderCreateDirective.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
        /** @type {?} */
        var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe(function (error) {
            _this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe(function (node) {
            _this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe(function (node) {
            if (node) {
                content.folderCreate.next(node);
            }
        });
    };
    FolderCreateDirective.DIALOG_WIDTH = 400;
    FolderCreateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-create-folder]'
                },] }
    ];
    /** @nocollapse */
    FolderCreateDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ContentService }
    ]; };
    FolderCreateDirective.propDecorators = {
        parentNodeId: [{ type: Input, args: ['adf-create-folder',] }],
        title: [{ type: Input }],
        nodeType: [{ type: Input }],
        error: [{ type: Output }],
        success: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FolderCreateDirective;
}());
export { FolderCreateDirective };
if (false) {
    /** @type {?} */
    FolderCreateDirective.DIALOG_WIDTH;
    /**
     * Parent folder where the new folder will be located after creation.
     * @type {?}
     */
    FolderCreateDirective.prototype.parentNodeId;
    /**
     * Title of folder creation dialog.
     * @type {?}
     */
    FolderCreateDirective.prototype.title;
    /**
     * Type of node to create.
     * @type {?}
     */
    FolderCreateDirective.prototype.nodeType;
    /**
     * Emitted when an error occurs (eg, a folder with same name already exists).
     * @type {?}
     */
    FolderCreateDirective.prototype.error;
    /**
     * Emitted when the folder is created successfully.
     * @type {?}
     */
    FolderCreateDirective.prototype.success;
    /** @type {?} */
    FolderCreateDirective.prototype.dialogRef;
    /** @type {?} */
    FolderCreateDirective.prototype.content;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWNyZWF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJmb2xkZXItZGlyZWN0aXZlL2ZvbGRlci1jcmVhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFFL0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUVwRCxJQUFNLHdCQUF3QixHQUFHLE1BQU0sQ0FBQzs7SUFrQ3BDLCtCQUNXLFdBQ0E7UUFEQSxjQUFTLEdBQVQsU0FBUztRQUNULFlBQU8sR0FBUCxPQUFPOzs7OzRCQTFCSyx3QkFBd0I7Ozs7cUJBSS9CLElBQUk7Ozs7d0JBSVQsV0FBVzs7OztxQkFJSyxJQUFJLFlBQVksRUFBTzs7Ozt1QkFJRixJQUFJLFlBQVksRUFBMEI7S0FXdEY7Ozs7O0lBUkosdUNBQU87Ozs7SUFEUCxVQUNRLEtBQUs7UUFDVCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ3JCOzBCQU9XLCtDQUFZOzs7OztZQUNaLElBQUEsMENBQW1CLENBQTJCO1lBQ3RELGVBQVEsOEJBQVksRUFBRSxzQkFBa0IsRUFBRSxzQkFBUSxDQUFVO1lBRTVELE9BQU87Z0JBQ0gsSUFBSSxFQUFFLEVBQUUsWUFBWSxjQUFBLEVBQUUsV0FBVyxhQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUU7Z0JBQzdDLEtBQUssRUFBSyxLQUFLLE9BQUk7YUFDdEIsQ0FBQzs7Ozs7Ozs7SUFHRSwwQ0FBVTs7Ozs7UUFDZCxlQUFRLHdCQUFTLEVBQUUsOEJBQVksRUFBRSxvQkFBTyxDQUFVOztRQUNsRCxJQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRTNFLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQUMsS0FBSztZQUNuRCxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQixDQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQTRCO1lBQzVFLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCLENBQUMsQ0FBQztRQUVILGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUE0QjtZQUNoRSxJQUFJLElBQUksRUFBRTtnQkFDTixPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQztTQUNKLENBQUMsQ0FBQzs7eUNBM0R1QixHQUFHOztnQkFKcEMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7aUJBQ2xDOzs7O2dCQVRRLFNBQVM7Z0JBR1QsY0FBYzs7OytCQVdsQixLQUFLLFNBQUMsbUJBQW1CO3dCQUl6QixLQUFLOzJCQUlMLEtBQUs7d0JBSUwsTUFBTTswQkFJTixNQUFNOzBCQUdOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBRSxRQUFRLENBQUU7O2dDQXJEdkM7O1NBOEJhLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAgKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nLCBNYXREaWFsb2dDb25maWcgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudHJ5RW50aXR5IH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IEZvbGRlckRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvZm9sZGVyLmRpYWxvZyc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbmNvbnN0IERFRkFVTFRfRk9MREVSX1BBUkVOVF9JRCA9ICctbXktJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbYWRmLWNyZWF0ZS1mb2xkZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBGb2xkZXJDcmVhdGVEaXJlY3RpdmUge1xuICAgIHN0YXRpYyBESUFMT0dfV0lEVEg6IG51bWJlciA9IDQwMDtcblxuICAgIC8qKiBQYXJlbnQgZm9sZGVyIHdoZXJlIHRoZSBuZXcgZm9sZGVyIHdpbGwgYmUgbG9jYXRlZCBhZnRlciBjcmVhdGlvbi4gKi9cbiAgICBASW5wdXQoJ2FkZi1jcmVhdGUtZm9sZGVyJylcbiAgICBwYXJlbnROb2RlSWQ6IHN0cmluZyA9IERFRkFVTFRfRk9MREVSX1BBUkVOVF9JRDtcblxuICAgIC8qKiBUaXRsZSBvZiBmb2xkZXIgY3JlYXRpb24gZGlhbG9nLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGl0bGU6IHN0cmluZyA9IG51bGw7XG5cbiAgICAvKiogVHlwZSBvZiBub2RlIHRvIGNyZWF0ZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVUeXBlID0gJ2NtOmZvbGRlcic7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyAoZWcsIGEgZm9sZGVyIHdpdGggc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzKS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvbGRlciBpcyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8TWluaW1hbE5vZGVFbnRyeUVudGl0eT4gPSBuZXcgRXZlbnRFbWl0dGVyPE1pbmltYWxOb2RlRW50cnlFbnRpdHk+KCk7XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsgJyRldmVudCcgXSlcbiAgICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMub3BlbkRpYWxvZygpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2csXG4gICAgICAgIHB1YmxpYyBjb250ZW50OiBDb250ZW50U2VydmljZVxuICAgICkge31cblxuICAgIHByaXZhdGUgZ2V0IGRpYWxvZ0NvbmZpZygpOiBNYXREaWFsb2dDb25maWcge1xuICAgICAgICBjb25zdCB7IERJQUxPR19XSURUSDogd2lkdGggfSA9IEZvbGRlckNyZWF0ZURpcmVjdGl2ZTtcbiAgICAgICAgY29uc3QgeyBwYXJlbnROb2RlSWQsIHRpdGxlOiBjcmVhdGVUaXRsZSwgbm9kZVR5cGUgfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHsgcGFyZW50Tm9kZUlkLCBjcmVhdGVUaXRsZSwgbm9kZVR5cGUgfSxcbiAgICAgICAgICAgIHdpZHRoOiBgJHt3aWR0aH1weGBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5EaWFsb2coKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZGlhbG9nUmVmLCBkaWFsb2dDb25maWcsIGNvbnRlbnQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRpYWxvZ0luc3RhbmNlID0gZGlhbG9nUmVmLm9wZW4oRm9sZGVyRGlhbG9nQ29tcG9uZW50LCBkaWFsb2dDb25maWcpO1xuXG4gICAgICAgIGRpYWxvZ0luc3RhbmNlLmNvbXBvbmVudEluc3RhbmNlLmVycm9yLnN1YnNjcmliZSgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpYWxvZ0luc3RhbmNlLmNvbXBvbmVudEluc3RhbmNlLnN1Y2Nlc3Muc3Vic2NyaWJlKChub2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChub2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlhbG9nSW5zdGFuY2UuYWZ0ZXJDbG9zZWQoKS5zdWJzY3JpYmUoKG5vZGU6IE1pbmltYWxOb2RlRW50cnlFbnRpdHkpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5mb2xkZXJDcmVhdGUubmV4dChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19