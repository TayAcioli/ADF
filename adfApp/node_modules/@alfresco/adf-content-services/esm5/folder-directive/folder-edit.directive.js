/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { FolderDialogComponent } from '../dialogs/folder.dialog';
import { ContentService } from '@alfresco/adf-core';
var FolderEditDirective = /** @class */ (function () {
    function FolderEditDirective(dialogRef, elementRef, content) {
        this.dialogRef = dialogRef;
        this.elementRef = elementRef;
        this.content = content;
        /**
         * Emitted when an error occurs (eg, a folder with same name already exists).
         */
        this.error = new EventEmitter();
        /**
         * Title of folder edit dialog.
         */
        this.title = null;
        /**
         * Emitted when the folder has been edited successfully.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FolderEditDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.folder) {
            this.openDialog();
        }
    };
    Object.defineProperty(FolderEditDirective.prototype, "dialogConfig", {
        get: /**
         * @return {?}
         */
        function () {
            var width = FolderEditDirective.DIALOG_WIDTH;
            var folder = this.folder;
            return {
                data: {
                    folder: folder,
                    editTitle: this.title
                },
                width: width + "px"
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderEditDirective.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
        /** @type {?} */
        var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe(function (error) {
            _this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe(function (node) {
            _this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe(function (node) {
            if (node) {
                content.folderEdit.next(node);
            }
        });
    };
    FolderEditDirective.DIALOG_WIDTH = 400;
    FolderEditDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-edit-folder]'
                },] }
    ];
    /** @nocollapse */
    FolderEditDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ElementRef },
        { type: ContentService }
    ]; };
    FolderEditDirective.propDecorators = {
        folder: [{ type: Input, args: ['adf-edit-folder',] }],
        error: [{ type: Output }],
        title: [{ type: Input }],
        success: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FolderEditDirective;
}());
export { FolderEditDirective };
if (false) {
    /** @type {?} */
    FolderEditDirective.DIALOG_WIDTH;
    /**
     * Folder node to edit.
     * @type {?}
     */
    FolderEditDirective.prototype.folder;
    /**
     * Emitted when an error occurs (eg, a folder with same name already exists).
     * @type {?}
     */
    FolderEditDirective.prototype.error;
    /**
     * Title of folder edit dialog.
     * @type {?}
     */
    FolderEditDirective.prototype.title;
    /**
     * Emitted when the folder has been edited successfully.
     * @type {?}
     */
    FolderEditDirective.prototype.success;
    /** @type {?} */
    FolderEditDirective.prototype.dialogRef;
    /** @type {?} */
    FolderEditDirective.prototype.elementRef;
    /** @type {?} */
    FolderEditDirective.prototype.content;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWVkaXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiZm9sZGVyLWRpcmVjdGl2ZS9mb2xkZXItZWRpdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFFL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQWdDaEQsNkJBQ1csV0FDQSxZQUNBO1FBRkEsY0FBUyxHQUFULFNBQVM7UUFDVCxlQUFVLEdBQVYsVUFBVTtRQUNWLFlBQU8sR0FBUCxPQUFPOzs7O3FCQXJCUyxJQUFJLFlBQVksRUFBTzs7OztxQkFJbEMsSUFBSTs7Ozt1QkFJNEIsSUFBSSxZQUFZLEVBQTBCO0tBY3RGOzs7OztJQVhKLHFDQUFPOzs7O0lBRFAsVUFDUSxLQUFLO1FBQ1QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtLQUNKOzBCQVFXLDZDQUFZOzs7OztZQUNaLElBQUEsd0NBQW1CLENBQXlCO1lBQzVDLElBQUEsb0JBQU0sQ0FBVTtZQUV4QixPQUFPO2dCQUNILElBQUksRUFBRTtvQkFDRixNQUFNLFFBQUE7b0JBQ04sU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO2lCQUN4QjtnQkFDRCxLQUFLLEVBQUssS0FBSyxPQUFJO2FBQ3RCLENBQUM7Ozs7Ozs7O0lBR0Usd0NBQVU7Ozs7O1FBQ2QsZUFBUSx3QkFBUyxFQUFFLDhCQUFZLEVBQUUsb0JBQU8sQ0FBVTs7UUFDbEQsSUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUUzRSxjQUFjLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEtBQUs7WUFDbkQsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUIsQ0FBQyxDQUFDO1FBRUgsY0FBYyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUE0QjtZQUM1RSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQixDQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsSUFBNEI7WUFDaEUsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakM7U0FDSixDQUFDLENBQUM7O3VDQTdEdUIsR0FBRzs7Z0JBSnBDLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs7OztnQkFUUSxTQUFTO2dCQURFLFVBQVU7Z0JBTXJCLGNBQWM7Ozt5QkFTbEIsS0FBSyxTQUFDLGlCQUFpQjt3QkFJdkIsTUFBTTt3QkFJTixLQUFLOzBCQUlMLE1BQU07MEJBR04sWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFFLFFBQVEsQ0FBRTs7OEJBakR2Qzs7U0E4QmEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2csIE1hdERpYWxvZ0NvbmZpZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuaW1wb3J0IHsgTWluaW1hbE5vZGVFbnRyeUVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5cbmltcG9ydCB7IEZvbGRlckRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvZm9sZGVyLmRpYWxvZyc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1lZGl0LWZvbGRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEZvbGRlckVkaXREaXJlY3RpdmUge1xuICAgIHN0YXRpYyBESUFMT0dfV0lEVEg6IG51bWJlciA9IDQwMDtcblxuICAgIC8qKiBGb2xkZXIgbm9kZSB0byBlZGl0LiAqL1xuICAgIEBJbnB1dCgnYWRmLWVkaXQtZm9sZGVyJylcbiAgICBmb2xkZXI6IE1pbmltYWxOb2RlRW50cnlFbnRpdHk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyAoZWcsIGEgZm9sZGVyIHdpdGggc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzKS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBUaXRsZSBvZiBmb2xkZXIgZWRpdCBkaWFsb2cuICovXG4gICAgQElucHV0KClcbiAgICB0aXRsZTogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvbGRlciBoYXMgYmVlbiBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxNaW5pbWFsTm9kZUVudHJ5RW50aXR5PiA9IG5ldyBFdmVudEVtaXR0ZXI8TWluaW1hbE5vZGVFbnRyeUVudGl0eT4oKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICAgIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMuZm9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2csXG4gICAgICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwdWJsaWMgY29udGVudDogQ29udGVudFNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGdldCBkaWFsb2dDb25maWcoKTogTWF0RGlhbG9nQ29uZmlnIHtcbiAgICAgICAgY29uc3QgeyBESUFMT0dfV0lEVEg6IHdpZHRoIH0gPSBGb2xkZXJFZGl0RGlyZWN0aXZlO1xuICAgICAgICBjb25zdCB7IGZvbGRlciB9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGZvbGRlcixcbiAgICAgICAgICAgICAgICBlZGl0VGl0bGU6IHRoaXMudGl0bGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aWR0aDogYCR7d2lkdGh9cHhgXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuRGlhbG9nKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGRpYWxvZ1JlZiwgZGlhbG9nQ29uZmlnLCBjb250ZW50IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaWFsb2dJbnN0YW5jZSA9IGRpYWxvZ1JlZi5vcGVuKEZvbGRlckRpYWxvZ0NvbXBvbmVudCwgZGlhbG9nQ29uZmlnKTtcblxuICAgICAgICBkaWFsb2dJbnN0YW5jZS5jb21wb25lbnRJbnN0YW5jZS5lcnJvci5zdWJzY3JpYmUoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkaWFsb2dJbnN0YW5jZS5jb21wb25lbnRJbnN0YW5jZS5zdWNjZXNzLnN1YnNjcmliZSgobm9kZTogTWluaW1hbE5vZGVFbnRyeUVudGl0eSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpYWxvZ0luc3RhbmNlLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKChub2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5KSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuZm9sZGVyRWRpdC5uZXh0KG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=