/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
var SearchQueryBuilderService = /** @class */ (function () {
    function SearchQueryBuilderService(appConfig, alfrescoApiService) {
        this.appConfig = appConfig;
        this.alfrescoApiService = alfrescoApiService;
        this._userQuery = '';
        this.updated = new Subject();
        this.executed = new Subject();
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.paging = null;
        this.sorting = [];
        this.userFacetQueries = [];
        this.userFacetBuckets = {};
        // TODO: to be supported in future iterations
        this.ranges = {};
        this.resetToDefaults();
    }
    Object.defineProperty(SearchQueryBuilderService.prototype, "userQuery", {
        get: /**
         * @return {?}
         */
        function () {
            return this._userQuery;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = (value || '').trim();
            this._userQuery = value ? "(" + value + ")" : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.resetToDefaults = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var template = this.appConfig.get('search');
        if (template) {
            this.config = JSON.parse(JSON.stringify(template));
            this.categories = (this.config.categories || []).filter(function (category) { return category.enabled; });
            this.filterQueries = this.config.filterQueries || [];
            this.userFacetBuckets = {};
            this.userFacetQueries = [];
            if (this.config.sorting) {
                this.sorting = this.config.sorting.defaults || [];
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addUserFacetQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            /** @type {?} */
            var existing = this.userFacetQueries.find(function (facetQuery) { return facetQuery.label === query.label; });
            if (existing) {
                existing.query = query.query;
            }
            else {
                this.userFacetQueries.push(tslib_1.__assign({}, query));
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeUserFacetQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            this.userFacetQueries = this.userFacetQueries
                .filter(function (facetQuery) { return facetQuery.label !== query.label; });
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addUserFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            var buckets = this.userFacetBuckets[field.field] || [];
            /** @type {?} */
            var existing = buckets.find(function (facetBucket) { return facetBucket.label === bucket.label; });
            if (!existing) {
                buckets.push(bucket);
            }
            this.userFacetBuckets[field.field] = buckets;
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getUserFacetBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.userFacetBuckets[field] || [];
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeUserFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            var buckets = this.userFacetBuckets[field.field] || [];
            this.userFacetBuckets[field.field] = buckets
                .filter(function (facetBucket) { return facetBucket.label !== bucket.label; });
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addFilterQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            /** @type {?} */
            var existing = this.filterQueries.find(function (filterQuery) { return filterQuery.query === query; });
            if (!existing) {
                this.filterQueries.push({ query: query });
            }
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeFilterQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        if (query) {
            this.filterQueries = this.filterQueries
                .filter(function (filterQuery) { return filterQuery.query !== query; });
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFacetQuery = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        if (label && this.hasFacetQueries) {
            /** @type {?} */
            var result = this.config.facetQueries.queries.find(function (query) { return query.label === label; });
            if (result) {
                return tslib_1.__assign({}, result);
            }
        }
        return null;
    };
    /**
     * @param {?} label
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFacetField = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        if (label) {
            /** @type {?} */
            var fields = this.config.facetFields.fields || [];
            /** @type {?} */
            var result = fields.find(function (field) { return field.label === label; });
            if (result) {
                return tslib_1.__assign({}, result);
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.update = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var query = this.buildQuery();
        this.updated.next(query);
    };
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.execute = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.buildQuery();
                        if (!query) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.alfrescoApiService.searchApi.search(query)];
                    case 1:
                        data = _a.sent();
                        this.executed.next(data);
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.buildQuery = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var query = this.getFinalQuery();
        /** @type {?} */
        var include = this.config.include || [];
        if (include.length === 0) {
            include.push('path', 'allowableOperations');
        }
        if (query) {
            /** @type {?} */
            var result = {
                query: {
                    query: query,
                    language: 'afts'
                },
                include: include,
                paging: this.paging,
                fields: this.config.fields,
                filterQueries: this.filterQueries,
                facetQueries: this.facetQueries,
                facetFields: this.facetFields,
                sort: this.sort
            };
            return result;
        }
        return null;
    };
    /**
     * Returns primary sorting definition.
     */
    /**
     * Returns primary sorting definition.
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getPrimarySorting = /**
     * Returns primary sorting definition.
     * @return {?}
     */
    function () {
        if (this.sorting && this.sorting.length > 0) {
            return this.sorting[0];
        }
        return null;
    };
    /**
     * Returns all pre-configured sorting options that users can choose from.
     */
    /**
     * Returns all pre-configured sorting options that users can choose from.
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getSortingOptions = /**
     * Returns all pre-configured sorting options that users can choose from.
     * @return {?}
     */
    function () {
        if (this.config && this.config.sorting) {
            return this.config.sorting.options || [];
        }
        return [];
    };
    Object.defineProperty(SearchQueryBuilderService.prototype, "hasFacetQueries", {
        /**
         * Check if FacetQueries has been defined
         */
        get: /**
         * Check if FacetQueries has been defined
         * @return {?}
         */
        function () {
            if (this.config
                && this.config.facetQueries
                && this.config.facetQueries.queries
                && this.config.facetQueries.queries.length > 0) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sorting.map(function (def) {
                return {
                    type: def.type,
                    field: def.field,
                    ascending: def.ascending
                };
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetQueries", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.hasFacetQueries) {
                return this.config.facetQueries.queries.map(function (query) {
                    return /** @type {?} */ (tslib_1.__assign({}, query));
                });
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFinalQuery = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var query = '';
        this.categories.forEach(function (facet) {
            /** @type {?} */
            var customQuery = _this.queryFragments[facet.id];
            if (customQuery) {
                if (query.length > 0) {
                    query += ' AND ';
                }
                query += "(" + customQuery + ")";
            }
        });
        /** @type {?} */
        var result = [this.userQuery, query]
            .filter(function (entry) { return entry; })
            .join(' AND ');
        if (this.userFacetQueries && this.userFacetQueries.length > 0) {
            /** @type {?} */
            var combined = this.userFacetQueries
                .map(function (userQuery) { return userQuery.query; })
                .join(' OR ');
            result += " AND (" + combined + ")";
        }
        if (this.userFacetBuckets) {
            Object.keys(this.userFacetBuckets).forEach(function (key) {
                /** @type {?} */
                var subQuery = (_this.userFacetBuckets[key] || [])
                    .map(function (bucket) { return bucket.filterQuery; })
                    .join(' OR ');
                if (subQuery) {
                    if (result.length > 0) {
                        result += ' AND ';
                    }
                    result += "(" + subQuery + ")";
                }
            });
        }
        return result;
    };
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetFields", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var facetFields = this.config.facetFields && this.config.facetFields.fields;
            if (facetFields && facetFields.length > 0) {
                return {
                    facets: facetFields.map(function (facet) { return ({
                        field: facet.field,
                        mincount: facet.mincount,
                        label: facet.label,
                        limit: facet.limit,
                        offset: facet.offset,
                        prefix: facet.prefix
                    }); })
                };
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    SearchQueryBuilderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SearchQueryBuilderService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService }
    ]; };
    return SearchQueryBuilderService;
}());
export { SearchQueryBuilderService };
if (false) {
    /** @type {?} */
    SearchQueryBuilderService.prototype._userQuery;
    /** @type {?} */
    SearchQueryBuilderService.prototype.updated;
    /** @type {?} */
    SearchQueryBuilderService.prototype.executed;
    /** @type {?} */
    SearchQueryBuilderService.prototype.categories;
    /** @type {?} */
    SearchQueryBuilderService.prototype.queryFragments;
    /** @type {?} */
    SearchQueryBuilderService.prototype.filterQueries;
    /** @type {?} */
    SearchQueryBuilderService.prototype.paging;
    /** @type {?} */
    SearchQueryBuilderService.prototype.sorting;
    /** @type {?} */
    SearchQueryBuilderService.prototype.userFacetQueries;
    /** @type {?} */
    SearchQueryBuilderService.prototype.userFacetBuckets;
    /** @type {?} */
    SearchQueryBuilderService.prototype.config;
    /** @type {?} */
    SearchQueryBuilderService.prototype.ranges;
    /** @type {?} */
    SearchQueryBuilderService.prototype.appConfig;
    /** @type {?} */
    SearchQueryBuilderService.prototype.alfrescoApiService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXF1ZXJ5LWJ1aWxkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNlYXJjaC9zZWFyY2gtcXVlcnktYnVpbGRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0lBMEN0RSxtQ0FBb0IsU0FBMkIsRUFBVSxrQkFBc0M7UUFBM0UsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9COzBCQTVCMUUsRUFBRTt1QkFFTyxJQUFJLE9BQU8sRUFBRTt3QkFDbEIsSUFBSSxPQUFPLEVBQUU7MEJBRUYsRUFBRTs4QkFDSyxFQUFFOzZCQUNkLEVBQUU7c0JBQ21CLElBQUk7dUJBQ2QsRUFBRTtnQ0FFRCxFQUFFO2dDQUM0QixFQUFFOztzQkFjbkMsRUFBRTtRQUd0QyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDMUI7SUFoQkQsc0JBQUksZ0RBQVM7Ozs7UUFBYjtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUMxQjs7Ozs7UUFFRCxVQUFjLEtBQWE7WUFDdkIsS0FBSyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFJLEtBQUssTUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDL0M7OztPQUxBOzs7O0lBZ0JELG1EQUFlOzs7SUFBZjs7UUFDSSxJQUFNLFFBQVEsR0FB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YUFDSixDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBRUQsc0JBQWMsa0RBQVc7Ozs7UUFBekI7O1lBQ0ksSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1lBRTlFLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPO29CQUNILE1BQU0sRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUEsS0FBSyxZQUF3Qjt3QkFDakQsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO3dCQUNsQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7d0JBQ3hCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSzt3QkFDbEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO3dCQUNsQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07d0JBQ3BCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtxQkFDdkIsSUFBQSxDQUFDO2lCQUNMLENBQUM7YUFDTDtZQUVELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7OztPQUFBOztnQkF4UkosVUFBVTs7OztnQkFYa0IsZ0JBQWdCO2dCQUFwQyxrQkFBa0I7O29DQW5CM0I7O1NBK0JhLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBRdWVyeUJvZHksIFJlcXVlc3RGYWNldEZpZWxkcywgUmVxdWVzdEZhY2V0RmllbGQsIFJlcXVlc3RTb3J0RGVmaW5pdGlvbklubmVyIH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IFNlYXJjaENhdGVnb3J5IH0gZnJvbSAnLi9zZWFyY2gtY2F0ZWdvcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZpbHRlclF1ZXJ5IH0gZnJvbSAnLi9maWx0ZXItcXVlcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNlYXJjaFJhbmdlIH0gZnJvbSAnLi9zZWFyY2gtcmFuZ2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNlYXJjaENvbmZpZ3VyYXRpb24gfSBmcm9tICcuL3NlYXJjaC1jb25maWd1cmF0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGYWNldFF1ZXJ5IH0gZnJvbSAnLi9mYWNldC1xdWVyeS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU2VhcmNoU29ydGluZ0RlZmluaXRpb24gfSBmcm9tICcuL3NlYXJjaC1zb3J0aW5nLWRlZmluaXRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IEZhY2V0RmllbGQgfSBmcm9tICcuL2ZhY2V0LWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGYWNldEZpZWxkQnVja2V0IH0gZnJvbSAnLi9mYWNldC1maWVsZC1idWNrZXQuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBfdXNlclF1ZXJ5ID0gJyc7XG5cbiAgICB1cGRhdGVkOiBTdWJqZWN0PFF1ZXJ5Qm9keT4gPSBuZXcgU3ViamVjdCgpO1xuICAgIGV4ZWN1dGVkOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdCgpO1xuXG4gICAgY2F0ZWdvcmllczogQXJyYXk8U2VhcmNoQ2F0ZWdvcnk+ID0gW107XG4gICAgcXVlcnlGcmFnbWVudHM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICAgIGZpbHRlclF1ZXJpZXM6IEZpbHRlclF1ZXJ5W10gPSBbXTtcbiAgICBwYWdpbmc6IHsgbWF4SXRlbXM/OiBudW1iZXI7IHNraXBDb3VudD86IG51bWJlciB9ID0gbnVsbDtcbiAgICBzb3J0aW5nOiBBcnJheTxTZWFyY2hTb3J0aW5nRGVmaW5pdGlvbj4gPSBbXTtcblxuICAgIHByb3RlY3RlZCB1c2VyRmFjZXRRdWVyaWVzOiBGYWNldFF1ZXJ5W10gPSBbXTtcbiAgICBwcm90ZWN0ZWQgdXNlckZhY2V0QnVja2V0czogeyBba2V5OiBzdHJpbmddOiBBcnJheTxGYWNldEZpZWxkQnVja2V0PiB9ID0ge307XG5cbiAgICBnZXQgdXNlclF1ZXJ5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyUXVlcnk7XG4gICAgfVxuXG4gICAgc2V0IHVzZXJRdWVyeSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHx8ICcnKS50cmltKCk7XG4gICAgICAgIHRoaXMuX3VzZXJRdWVyeSA9IHZhbHVlID8gYCgke3ZhbHVlfSlgIDogJyc7XG4gICAgfVxuXG4gICAgY29uZmlnOiBTZWFyY2hDb25maWd1cmF0aW9uO1xuXG4gICAgLy8gVE9ETzogdG8gYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSBpdGVyYXRpb25zXG4gICAgcmFuZ2VzOiB7IFtpZDogc3RyaW5nXTogU2VhcmNoUmFuZ2UgfSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsIHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5yZXNldFRvRGVmYXVsdHMoKTtcbiAgICB9XG5cbiAgICByZXNldFRvRGVmYXVsdHMoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5hcHBDb25maWcuZ2V0PFNlYXJjaENvbmZpZ3VyYXRpb24+KCdzZWFyY2gnKTtcbiAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGVtcGxhdGUpKTtcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcmllcyA9ICh0aGlzLmNvbmZpZy5jYXRlZ29yaWVzIHx8IFtdKS5maWx0ZXIoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkuZW5hYmxlZCk7XG4gICAgICAgICAgICB0aGlzLmZpbHRlclF1ZXJpZXMgPSB0aGlzLmNvbmZpZy5maWx0ZXJRdWVyaWVzIHx8IFtdO1xuICAgICAgICAgICAgdGhpcy51c2VyRmFjZXRCdWNrZXRzID0ge307XG4gICAgICAgICAgICB0aGlzLnVzZXJGYWNldFF1ZXJpZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5zb3J0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0aW5nID0gdGhpcy5jb25maWcuc29ydGluZy5kZWZhdWx0cyB8fCBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFVzZXJGYWNldFF1ZXJ5KHF1ZXJ5OiBGYWNldFF1ZXJ5KSB7XG4gICAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnVzZXJGYWNldFF1ZXJpZXMuZmluZChmYWNldFF1ZXJ5ID0+IGZhY2V0UXVlcnkubGFiZWwgPT09IHF1ZXJ5LmxhYmVsKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nLnF1ZXJ5ID0gcXVlcnkucXVlcnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlckZhY2V0UXVlcmllcy5wdXNoKHsgLi4ucXVlcnkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVVc2VyRmFjZXRRdWVyeShxdWVyeTogRmFjZXRRdWVyeSkge1xuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICAgIHRoaXMudXNlckZhY2V0UXVlcmllcyA9IHRoaXMudXNlckZhY2V0UXVlcmllc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZmFjZXRRdWVyeSA9PiBmYWNldFF1ZXJ5LmxhYmVsICE9PSBxdWVyeS5sYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRVc2VyRmFjZXRCdWNrZXQoZmllbGQ6IEZhY2V0RmllbGQsIGJ1Y2tldDogRmFjZXRGaWVsZEJ1Y2tldCkge1xuICAgICAgICBpZiAoZmllbGQgJiYgZmllbGQuZmllbGQgJiYgYnVja2V0KSB7XG4gICAgICAgICAgICBjb25zdCBidWNrZXRzID0gdGhpcy51c2VyRmFjZXRCdWNrZXRzW2ZpZWxkLmZpZWxkXSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gYnVja2V0cy5maW5kKGZhY2V0QnVja2V0ID0+IGZhY2V0QnVja2V0LmxhYmVsID09PSBidWNrZXQubGFiZWwpO1xuICAgICAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGJ1Y2tldHMucHVzaChidWNrZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51c2VyRmFjZXRCdWNrZXRzW2ZpZWxkLmZpZWxkXSA9IGJ1Y2tldHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRVc2VyRmFjZXRCdWNrZXRzKGZpZWxkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlckZhY2V0QnVja2V0c1tmaWVsZF0gfHwgW107XG4gICAgfVxuXG4gICAgcmVtb3ZlVXNlckZhY2V0QnVja2V0KGZpZWxkOiBGYWNldEZpZWxkLCBidWNrZXQ6IEZhY2V0RmllbGRCdWNrZXQpIHtcbiAgICAgICAgaWYgKGZpZWxkICYmIGZpZWxkLmZpZWxkICYmIGJ1Y2tldCkge1xuICAgICAgICAgICAgY29uc3QgYnVja2V0cyA9IHRoaXMudXNlckZhY2V0QnVja2V0c1tmaWVsZC5maWVsZF0gfHwgW107XG4gICAgICAgICAgICB0aGlzLnVzZXJGYWNldEJ1Y2tldHNbZmllbGQuZmllbGRdID0gYnVja2V0c1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZmFjZXRCdWNrZXQgPT4gZmFjZXRCdWNrZXQubGFiZWwgIT09IGJ1Y2tldC5sYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRGaWx0ZXJRdWVyeShxdWVyeTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmZpbHRlclF1ZXJpZXMuZmluZChmaWx0ZXJRdWVyeSA9PiBmaWx0ZXJRdWVyeS5xdWVyeSA9PT0gcXVlcnkpO1xuICAgICAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyUXVlcmllcy5wdXNoKHsgcXVlcnk6IHF1ZXJ5IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRmlsdGVyUXVlcnkocXVlcnk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUXVlcmllcyA9IHRoaXMuZmlsdGVyUXVlcmllc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZmlsdGVyUXVlcnkgPT4gZmlsdGVyUXVlcnkucXVlcnkgIT09IHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZhY2V0UXVlcnkobGFiZWw6IHN0cmluZyk6IEZhY2V0UXVlcnkge1xuICAgICAgICBpZiAobGFiZWwgJiYgdGhpcy5oYXNGYWNldFF1ZXJpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29uZmlnLmZhY2V0UXVlcmllcy5xdWVyaWVzLmZpbmQocXVlcnkgPT4gcXVlcnkubGFiZWwgPT09IGxhYmVsKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRGYWNldEZpZWxkKGxhYmVsOiBzdHJpbmcpOiBGYWNldEZpZWxkIHtcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLmNvbmZpZy5mYWNldEZpZWxkcy5maWVsZHMgfHwgW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmaWVsZHMuZmluZChmaWVsZCA9PiBmaWVsZC5sYWJlbCA9PT0gbGFiZWwpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLmJ1aWxkUXVlcnkoKTtcbiAgICAgICAgdGhpcy51cGRhdGVkLm5leHQocXVlcnkpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5idWlsZFF1ZXJ5KCk7XG4gICAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLnNlYXJjaEFwaS5zZWFyY2gocXVlcnkpO1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlZC5uZXh0KGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYnVpbGRRdWVyeSgpOiBRdWVyeUJvZHkge1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLmdldEZpbmFsUXVlcnkoKTtcblxuICAgICAgICBjb25zdCBpbmNsdWRlID0gdGhpcy5jb25maWcuaW5jbHVkZSB8fCBbXTtcbiAgICAgICAgaWYgKGluY2x1ZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpbmNsdWRlLnB1c2goJ3BhdGgnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IFF1ZXJ5Qm9keSA9IHtcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiAnYWZ0cydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IGluY2x1ZGUsXG4gICAgICAgICAgICAgICAgcGFnaW5nOiB0aGlzLnBhZ2luZyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHRoaXMuY29uZmlnLmZpZWxkcyxcbiAgICAgICAgICAgICAgICBmaWx0ZXJRdWVyaWVzOiB0aGlzLmZpbHRlclF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgZmFjZXRRdWVyaWVzOiB0aGlzLmZhY2V0UXVlcmllcyxcbiAgICAgICAgICAgICAgICBmYWNldEZpZWxkczogdGhpcy5mYWNldEZpZWxkcyxcbiAgICAgICAgICAgICAgICBzb3J0OiB0aGlzLnNvcnRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHByaW1hcnkgc29ydGluZyBkZWZpbml0aW9uLlxuICAgICAqL1xuICAgIGdldFByaW1hcnlTb3J0aW5nKCk6IFNlYXJjaFNvcnRpbmdEZWZpbml0aW9uIHtcbiAgICAgICAgaWYgKHRoaXMuc29ydGluZyAmJiB0aGlzLnNvcnRpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ydGluZ1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBwcmUtY29uZmlndXJlZCBzb3J0aW5nIG9wdGlvbnMgdGhhdCB1c2VycyBjYW4gY2hvb3NlIGZyb20uXG4gICAgICovXG4gICAgZ2V0U29ydGluZ09wdGlvbnMoKTogU2VhcmNoU29ydGluZ0RlZmluaXRpb25bXSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5zb3J0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuc29ydGluZy5vcHRpb25zIHx8IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBGYWNldFF1ZXJpZXMgaGFzIGJlZW4gZGVmaW5lZFxuICAgICAqL1xuICAgIGdldCBoYXNGYWNldFF1ZXJpZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1xuICAgICAgICAgICAgJiYgdGhpcy5jb25maWcuZmFjZXRRdWVyaWVzXG4gICAgICAgICAgICAmJiB0aGlzLmNvbmZpZy5mYWNldFF1ZXJpZXMucXVlcmllc1xuICAgICAgICAgICAgJiYgdGhpcy5jb25maWcuZmFjZXRRdWVyaWVzLnF1ZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc29ydCgpOiBSZXF1ZXN0U29ydERlZmluaXRpb25Jbm5lcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydGluZy5tYXAoZGVmID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogZGVmLnR5cGUsXG4gICAgICAgICAgICAgICAgZmllbGQ6IGRlZi5maWVsZCxcbiAgICAgICAgICAgICAgICBhc2NlbmRpbmc6IGRlZi5hc2NlbmRpbmdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZmFjZXRRdWVyaWVzKCk6IEZhY2V0UXVlcnlbXSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0ZhY2V0UXVlcmllcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmZhY2V0UXVlcmllcy5xdWVyaWVzLm1hcChxdWVyeSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxGYWNldFF1ZXJ5PiB7IC4uLnF1ZXJ5IH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRGaW5hbFF1ZXJ5KCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBxdWVyeSA9ICcnO1xuXG4gICAgICAgIHRoaXMuY2F0ZWdvcmllcy5mb3JFYWNoKGZhY2V0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbVF1ZXJ5ID0gdGhpcy5xdWVyeUZyYWdtZW50c1tmYWNldC5pZF07XG4gICAgICAgICAgICBpZiAoY3VzdG9tUXVlcnkpIHtcbiAgICAgICAgICAgICAgICBpZiAocXVlcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeSArPSAnIEFORCAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBxdWVyeSArPSBgKCR7Y3VzdG9tUXVlcnl9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBbdGhpcy51c2VyUXVlcnksIHF1ZXJ5XVxuICAgICAgICAgICAgLmZpbHRlcihlbnRyeSA9PiBlbnRyeSlcbiAgICAgICAgICAgIC5qb2luKCcgQU5EICcpO1xuXG4gICAgICAgIGlmICh0aGlzLnVzZXJGYWNldFF1ZXJpZXMgJiYgdGhpcy51c2VyRmFjZXRRdWVyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkID0gdGhpcy51c2VyRmFjZXRRdWVyaWVzXG4gICAgICAgICAgICAgICAgLm1hcCh1c2VyUXVlcnkgPT4gdXNlclF1ZXJ5LnF1ZXJ5KVxuICAgICAgICAgICAgICAgIC5qb2luKCcgT1IgJyk7XG4gICAgICAgICAgICByZXN1bHQgKz0gYCBBTkQgKCR7Y29tYmluZWR9KWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy51c2VyRmFjZXRCdWNrZXRzKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnVzZXJGYWNldEJ1Y2tldHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJRdWVyeSA9ICh0aGlzLnVzZXJGYWNldEJ1Y2tldHNba2V5XSB8fCBbXSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcChidWNrZXQgPT4gYnVja2V0LmZpbHRlclF1ZXJ5KVxuICAgICAgICAgICAgICAgICAgICAuam9pbignIE9SICcpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJRdWVyeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnIEFORCAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBgKCR7c3ViUXVlcnl9KWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZmFjZXRGaWVsZHMoKTogUmVxdWVzdEZhY2V0RmllbGRzIHtcbiAgICAgICAgY29uc3QgZmFjZXRGaWVsZHMgPSB0aGlzLmNvbmZpZy5mYWNldEZpZWxkcyAmJiB0aGlzLmNvbmZpZy5mYWNldEZpZWxkcy5maWVsZHM7XG5cbiAgICAgICAgaWYgKGZhY2V0RmllbGRzICYmIGZhY2V0RmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmFjZXRzOiBmYWNldEZpZWxkcy5tYXAoZmFjZXQgPT4gPFJlcXVlc3RGYWNldEZpZWxkPiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBmYWNldC5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgbWluY291bnQ6IGZhY2V0Lm1pbmNvdW50LFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZmFjZXQubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGxpbWl0OiBmYWNldC5saW1pdCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBmYWNldC5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeDogZmFjZXQucHJlZml4XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXX0=