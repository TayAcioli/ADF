/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { SearchFilterList } from './search-filter-list.model';
var ResponseFacetQueryList = /** @class */ (function (_super) {
    tslib_1.__extends(ResponseFacetQueryList, _super);
    function ResponseFacetQueryList(items, pageSize) {
        if (items === void 0) { items = []; }
        if (pageSize === void 0) { pageSize = 5; }
        var _this = _super.call(this, items
            .filter(function (item) {
            return item.count > 0;
        }), pageSize) || this;
        _this.filter = function (query) {
            if (_this.filterText && query.label) {
                /** @type {?} */
                var pattern = (_this.filterText || '').toLowerCase();
                /** @type {?} */
                var label = query.label.toLowerCase();
                return label.startsWith(pattern);
            }
            return true;
        };
        return _this;
    }
    return ResponseFacetQueryList;
}(SearchFilterList));
export { ResponseFacetQueryList };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtZmFjZXQtcXVlcnktbGlzdC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNlYXJjaC9jb21wb25lbnRzL3NlYXJjaC1maWx0ZXIvbW9kZWxzL3Jlc3BvbnNlLWZhY2V0LXF1ZXJ5LWxpc3QubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTlELElBQUE7SUFBNEMsa0RBQTRCO0lBQ3BFLGdDQUFZLEtBQXdCLEVBQUUsUUFBb0I7UUFBOUMsc0JBQUEsRUFBQSxVQUF3QjtRQUFFLHlCQUFBLEVBQUEsWUFBb0I7UUFBMUQsWUFDSSxrQkFDSSxLQUFLO2FBQ0EsTUFBTSxDQUFDLFVBQUEsSUFBSTtZQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDekIsQ0FBQyxFQUNOLFFBQVEsQ0FDWCxTQVVKO1FBUkcsS0FBSSxDQUFDLE1BQU0sR0FBRyxVQUFDLEtBQWlCO1lBQzVCLElBQUksS0FBSSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFOztnQkFDaEMsSUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFJLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDOztnQkFDdEQsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDeEMsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3BDO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDZixDQUFDOztLQUNMO2lDQXRDTDtFQW9CNEMsZ0JBQWdCLEVBbUIzRCxDQUFBO0FBbkJELGtDQW1CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZhY2V0UXVlcnkgfSBmcm9tICcuLi8uLi8uLi9mYWNldC1xdWVyeS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU2VhcmNoRmlsdGVyTGlzdCB9IGZyb20gJy4vc2VhcmNoLWZpbHRlci1saXN0Lm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlRmFjZXRRdWVyeUxpc3QgZXh0ZW5kcyBTZWFyY2hGaWx0ZXJMaXN0PEZhY2V0UXVlcnk+IHtcbiAgICBjb25zdHJ1Y3RvcihpdGVtczogRmFjZXRRdWVyeVtdID0gW10sIHBhZ2VTaXplOiBudW1iZXIgPSA1KSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgaXRlbXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jb3VudCA+IDA7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYWdlU2l6ZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmlsdGVyID0gKHF1ZXJ5OiBGYWNldFF1ZXJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJUZXh0ICYmIHF1ZXJ5LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9ICh0aGlzLmZpbHRlclRleHQgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBxdWVyeS5sYWJlbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbC5zdGFydHNXaXRoKHBhdHRlcm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxufVxuIl19