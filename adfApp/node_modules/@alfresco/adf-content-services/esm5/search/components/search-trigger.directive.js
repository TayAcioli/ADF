/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, Inject, Input, NgZone, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { Subject, merge, of, fromEvent } from 'rxjs';
import { SearchComponent } from './search.component';
import { filter, switchMap, takeUntil } from 'rxjs/operators';
/** @type {?} */
export var SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SearchTriggerDirective; }),
    multi: true
};
var SearchTriggerDirective = /** @class */ (function () {
    function SearchTriggerDirective(element, ngZone, changeDetectorRef, document) {
        this.element = element;
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.onDestroy$ = new Subject();
        this.autocomplete = 'off';
        this._panelOpen = false;
        this.escapeEventStream = new Subject();
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
        if (this.escapeEventStream) {
            this.escapeEventStream.unsubscribe();
            this.escapeEventStream = null;
        }
        if (this.closingActionsSubscription) {
            this.closingActionsSubscription.unsubscribe();
        }
    };
    Object.defineProperty(SearchTriggerDirective.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._panelOpen && this.searchPanel.showPanel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.openPanel = /**
     * @return {?}
     */
    function () {
        this.searchPanel.isOpen = this._panelOpen = true;
        this.closingActionsSubscription = this.subscribeToClosingActions();
    };
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        if (this._panelOpen) {
            this.closingActionsSubscription.unsubscribe();
            this._panelOpen = false;
            this.searchPanel.resetResults();
            this.searchPanel.hidePanel();
            this.changeDetectorRef.detectChanges();
        }
    };
    Object.defineProperty(SearchTriggerDirective.prototype, "panelClosingActions", {
        get: /**
         * @return {?}
         */
        function () {
            return merge(this.escapeEventStream, this.outsideClickStream);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchTriggerDirective.prototype, "outsideClickStream", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.document) {
                return of(null);
            }
            return merge(fromEvent(this.document, 'click'), fromEvent(this.document, 'touchend')).pipe(filter(function (event) {
                /** @type {?} */
                var clickTarget = /** @type {?} */ (event.target);
                return _this._panelOpen && clickTarget !== _this.element.nativeElement;
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    SearchTriggerDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this.setTriggerValue(value); });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchTriggerDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchTriggerDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.handleKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyCode = event.keyCode;
        if (keyCode === ESCAPE && this.panelOpen) {
            this.escapeEventStream.next();
            event.stopPropagation();
        }
        else if (keyCode === ENTER) {
            this.escapeEventStream.next();
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.handleInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (document.activeElement === event.target) {
            /** @type {?} */
            var inputValue = (/** @type {?} */ (event.target)).value;
            this.onChange(inputValue);
            if (inputValue) {
                this.searchPanel.keyPressedStream.next(inputValue);
                this.openPanel();
            }
            else {
                this.searchPanel.resetResults();
                this.closePanel();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.isPanelOptionClicked = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var isPanelOption = false;
        if (event) {
            /** @type {?} */
            var clickTarget = /** @type {?} */ (event.target);
            isPanelOption = !this.isNoResultOption(event) &&
                !!this.searchPanel.panel &&
                !!this.searchPanel.panel.nativeElement.contains(clickTarget);
        }
        return isPanelOption;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.isNoResultOption = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;
    };
    /**
     * @return {?}
     */
    SearchTriggerDirective.prototype.subscribeToClosingActions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var firstStable = this.ngZone.onStable.asObservable();
        /** @type {?} */
        var optionChanges = this.searchPanel.keyPressedStream.asObservable();
        return merge(firstStable, optionChanges)
            .pipe(takeUntil(this.onDestroy$), switchMap(function () {
            _this.searchPanel.setVisibility();
            return _this.panelClosingActions;
        }))
            .subscribe(function (event) { return _this.setValueAndClose(event); });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SearchTriggerDirective.prototype.setTriggerValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var toDisplay = this.searchPanel && this.searchPanel.displayWith ?
            this.searchPanel.displayWith(value) : value;
        /** @type {?} */
        var inputValue = toDisplay != null ? toDisplay : '';
        this.element.nativeElement.value = inputValue;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchTriggerDirective.prototype.setValueAndClose = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {
            this.setTriggerValue(event.target.textContent.trim());
            this.onChange(event.target.textContent.trim());
            this.element.nativeElement.focus();
        }
        this.closePanel();
    };
    SearchTriggerDirective.decorators = [
        { type: Directive, args: [{
                    selector: "input[searchAutocomplete], textarea[searchAutocomplete]",
                    host: {
                        'role': 'combobox',
                        '[attr.autocomplete]': 'autocomplete',
                        'aria-autocomplete': 'list',
                        '[attr.aria-expanded]': 'panelOpen.toString()',
                        '(blur)': 'onTouched()',
                        '(input)': 'handleInput($event)',
                        '(keydown)': 'handleKeydown($event)'
                    },
                    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]
                },] }
    ];
    /** @nocollapse */
    SearchTriggerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    SearchTriggerDirective.propDecorators = {
        searchPanel: [{ type: Input, args: ['searchAutocomplete',] }],
        autocomplete: [{ type: Input }]
    };
    return SearchTriggerDirective;
}());
export { SearchTriggerDirective };
if (false) {
    /** @type {?} */
    SearchTriggerDirective.prototype.onDestroy$;
    /** @type {?} */
    SearchTriggerDirective.prototype.searchPanel;
    /** @type {?} */
    SearchTriggerDirective.prototype.autocomplete;
    /** @type {?} */
    SearchTriggerDirective.prototype._panelOpen;
    /** @type {?} */
    SearchTriggerDirective.prototype.closingActionsSubscription;
    /** @type {?} */
    SearchTriggerDirective.prototype.escapeEventStream;
    /** @type {?} */
    SearchTriggerDirective.prototype.onChange;
    /** @type {?} */
    SearchTriggerDirective.prototype.onTouched;
    /** @type {?} */
    SearchTriggerDirective.prototype.element;
    /** @type {?} */
    SearchTriggerDirective.prototype.ngZone;
    /** @type {?} */
    SearchTriggerDirective.prototype.changeDetectorRef;
    /** @type {?} */
    SearchTriggerDirective.prototype.document;
}

//# sourceMappingURL=data:application/json;base64,