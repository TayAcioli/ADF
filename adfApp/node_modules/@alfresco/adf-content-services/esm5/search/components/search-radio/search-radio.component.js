/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input } from '@angular/core';
import { SearchFilterList } from '../search-filter/models/search-filter-list.model';
/**
 * @record
 */
export function SearchRadioOption() { }
/** @type {?} */
SearchRadioOption.prototype.name;
/** @type {?} */
SearchRadioOption.prototype.value;
var SearchRadioComponent = /** @class */ (function () {
    function SearchRadioComponent() {
        this.pageSize = 5;
        this.options = new SearchFilterList();
    }
    /**
     * @return {?}
     */
    SearchRadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.settings) {
            this.pageSize = this.settings["pageSize"] || 5;
            if (this.settings["options"] && this.settings["options"].length > 0) {
                this.options = new SearchFilterList(this.settings["options"], this.pageSize);
            }
        }
        this.setValue(this.getSelectedValue());
    };
    /**
     * @return {?}
     */
    SearchRadioComponent.prototype.getSelectedValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = this.settings['options'] || [];
        if (options && options.length > 0) {
            /** @type {?} */
            var selected = options.find(function (opt) { return opt.default; });
            if (!selected) {
                selected = options[0];
            }
            return selected.value;
        }
        return null;
    };
    /**
     * @param {?} newValue
     * @return {?}
     */
    SearchRadioComponent.prototype.setValue = /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        this.value = newValue;
        this.context.queryFragments[this.id] = newValue;
        this.context.update();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchRadioComponent.prototype.changeHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setValue(event.value);
    };
    SearchRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-radio',
                    template: "<mat-radio-group\n    [(ngModel)]=\"value\"\n    (change)=\"changeHandler($event)\">\n    <mat-radio-button\n        *ngFor=\"let option of options\"\n        [value]=\"option.value\">\n        {{ option.name | translate }}\n    </mat-radio-button>\n</mat-radio-group>\n\n<div class=\"facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-radio' },
                    styles: [".adf-search-radio .mat-radio-group{display:inline-flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}"]
                }] }
    ];
    /** @nocollapse */
    SearchRadioComponent.ctorParameters = function () { return []; };
    SearchRadioComponent.propDecorators = {
        value: [{ type: Input }]
    };
    return SearchRadioComponent;
}());
export { SearchRadioComponent };
if (false) {
    /**
     * The value of the selected radio button.
     * @type {?}
     */
    SearchRadioComponent.prototype.value;
    /** @type {?} */
    SearchRadioComponent.prototype.id;
    /** @type {?} */
    SearchRadioComponent.prototype.settings;
    /** @type {?} */
    SearchRadioComponent.prototype.context;
    /** @type {?} */
    SearchRadioComponent.prototype.options;
    /** @type {?} */
    SearchRadioComponent.prototype.pageSize;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXJhZGlvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNlYXJjaC9jb21wb25lbnRzL3NlYXJjaC1yYWRpby9zZWFyY2gtcmFkaW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTVFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDOzs7Ozs7Ozs7O0lBMEJoRjt3QkFGVyxDQUFDO1FBR1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGdCQUFnQixFQUFxQixDQUFDO0tBQzVEOzs7O0lBRUQsdUNBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxnQkFBYSxDQUFDLENBQUM7WUFFNUMsSUFBSSxJQUFJLENBQUMsUUFBUSxlQUFZLElBQUksQ0FBQyxRQUFRLFlBQVMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGdCQUFnQixDQUMvQixJQUFJLENBQUMsUUFBUSxhQUFVLElBQUksQ0FBQyxRQUFRLENBQ3ZDLENBQUM7YUFDTDtTQUNKO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FDVCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FDMUIsQ0FBQztLQUNMOzs7O0lBRU8sK0NBQWdCOzs7OztRQUNwQixJQUFNLE9BQU8sR0FBVSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0RCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7WUFDL0IsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxPQUFPLEVBQVgsQ0FBVyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDWCxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1lBQ0QsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLENBQUM7Ozs7OztJQUdSLHVDQUFROzs7O2NBQUMsUUFBZ0I7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7SUFHMUIsNENBQWE7Ozs7SUFBYixVQUFjLEtBQXFCO1FBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlCOztnQkEzREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLDIxQkFBNEM7b0JBRTVDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7O2lCQUN0Qzs7Ozs7d0JBSUksS0FBSzs7K0JBeENWOztTQXFDYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRSYWRpb0NoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuaW1wb3J0IHsgU2VhcmNoV2lkZ2V0IH0gZnJvbSAnLi4vLi4vc2VhcmNoLXdpZGdldC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU2VhcmNoV2lkZ2V0U2V0dGluZ3MgfSBmcm9tICcuLi8uLi9zZWFyY2gtd2lkZ2V0LXNldHRpbmdzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VhcmNoLXF1ZXJ5LWJ1aWxkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTZWFyY2hGaWx0ZXJMaXN0IH0gZnJvbSAnLi4vc2VhcmNoLWZpbHRlci9tb2RlbHMvc2VhcmNoLWZpbHRlci1saXN0Lm1vZGVsJztcblxuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hSYWRpb09wdGlvbiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlYXJjaC1yYWRpbycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1yYWRpby5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2VhcmNoLXJhZGlvLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXNlYXJjaC1yYWRpbycgfVxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hSYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIFNlYXJjaFdpZGdldCwgT25Jbml0IHtcblxuICAgIC8qKiBUaGUgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIHJhZGlvIGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHZhbHVlOiBzdHJpbmc7XG5cbiAgICBpZDogc3RyaW5nO1xuICAgIHNldHRpbmdzOiBTZWFyY2hXaWRnZXRTZXR0aW5ncztcbiAgICBjb250ZXh0OiBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlO1xuICAgIG9wdGlvbnM6IFNlYXJjaEZpbHRlckxpc3Q8U2VhcmNoUmFkaW9PcHRpb24+O1xuICAgIHBhZ2VTaXplID0gNTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgU2VhcmNoRmlsdGVyTGlzdDxTZWFyY2hSYWRpb09wdGlvbj4oKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZVNpemUgPSB0aGlzLnNldHRpbmdzLnBhZ2VTaXplIHx8IDU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm9wdGlvbnMgJiYgdGhpcy5zZXR0aW5ncy5vcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgU2VhcmNoRmlsdGVyTGlzdDxTZWFyY2hSYWRpb09wdGlvbj4oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Mub3B0aW9ucywgdGhpcy5wYWdlU2l6ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFZhbHVlKFxuICAgICAgICAgICAgdGhpcy5nZXRTZWxlY3RlZFZhbHVlKClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNlbGVjdGVkVmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uczogYW55W10gPSB0aGlzLnNldHRpbmdzWydvcHRpb25zJ10gfHwgW107XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gb3B0aW9ucy5maW5kKG9wdCA9PiBvcHQuZGVmYXVsdCk7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBvcHRpb25zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VmFsdWUobmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMuY29udGV4dC5xdWVyeUZyYWdtZW50c1t0aGlzLmlkXSA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLmNvbnRleHQudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgY2hhbmdlSGFuZGxlcihldmVudDogTWF0UmFkaW9DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShldmVudC52YWx1ZSk7XG4gICAgfVxufVxuIl19