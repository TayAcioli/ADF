/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { QueryBody } from 'alfresco-js-api';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
var SearchComponent = /** @class */ (function () {
    function SearchComponent(searchService, _elementRef) {
        var _this = this;
        this.searchService = searchService;
        this._elementRef = _elementRef;
        /**
         * Function that maps an option's value to its display value in the trigger.
         */
        this.displayWith = null;
        /**
         * Maximum number of results to show in the search.
         */
        this.maxResults = 20;
        /**
         * Number of results to skip from the results pagination.
         */
        this.skipResults = 0;
        /**
         * Search term to use when executing the search. Updating this value will
         * run a new search and update the results.
         */
        this.searchTerm = '';
        /**
         * Emitted when search results have fully loaded.
         */
        this.resultLoaded = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.showPanel = false;
        this._isOpen = false;
        this.keyPressedStream = new Subject();
        this._classList = {};
        this.keyPressedStream.asObservable()
            .pipe(debounceTime(200))
            .subscribe(function (searchedWord) {
            _this.loadSearchResults(searchedWord);
        });
        searchService.dataLoaded.subscribe(function (data) { return _this.onSearchDataLoaded(data); }, function (error) { return _this.onSearchDataError(error); });
    }
    Object.defineProperty(SearchComponent.prototype, "classList", {
        /** CSS class for display. */
        set: /**
         * CSS class for display.
         * @param {?} classList
         * @return {?}
         */
        function (classList) {
            var _this = this;
            if (classList && classList.length) {
                classList.split(' ').forEach(function (className) { return _this._classList[className.trim()] = true; });
                this._elementRef.nativeElement.className = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchComponent.prototype, "isOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isOpen && this.showPanel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setVisibility();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SearchComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.queryBody &&
            this.hasDifferentQueryBody(changes.queryBody.previousValue, changes.queryBody.currentValue)) {
            this.loadSearchResults();
        }
        if (changes.searchTerm && changes.searchTerm.currentValue) {
            this.loadSearchResults(changes.searchTerm.currentValue);
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.resetResults = /**
     * @return {?}
     */
    function () {
        this.cleanResults();
        this.setVisibility();
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        this.loadSearchResults(this.searchTerm);
    };
    /**
     * @param {?} previousQueryBody
     * @param {?} currentQueryBody
     * @return {?}
     */
    SearchComponent.prototype.hasDifferentQueryBody = /**
     * @param {?} previousQueryBody
     * @param {?} currentQueryBody
     * @return {?}
     */
    function (previousQueryBody, currentQueryBody) {
        return JSON.stringify(previousQueryBody) !== JSON.stringify(currentQueryBody);
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.cleanResults = /**
     * @return {?}
     */
    function () {
        if (this.results) {
            this.results = {};
        }
    };
    /**
     * @param {?=} searchTerm
     * @return {?}
     */
    SearchComponent.prototype.loadSearchResults = /**
     * @param {?=} searchTerm
     * @return {?}
     */
    function (searchTerm) {
        var _this = this;
        this.resetResults();
        if (searchTerm) {
            if (this.queryBody) {
                this.searchService.searchByQueryBody(this.queryBody).subscribe(function (result) { return _this.onSearchDataLoaded(result); }, function (err) { return _this.onSearchDataError(err); });
            }
            else {
                this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(function (result) { return _this.onSearchDataLoaded(result); }, function (err) { return _this.onSearchDataError(err); });
            }
        }
        else {
            this.cleanResults();
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SearchComponent.prototype.onSearchDataLoaded = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            this.results = data;
            this.resultLoaded.emit(this.results);
            this.isOpen = true;
            this.setVisibility();
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    SearchComponent.prototype.onSearchDataError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error && error.status !== 400) {
            this.results = null;
            this.error.emit(error);
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this._classList['adf-search-show'] = false;
            this._classList['adf-search-hide'] = true;
            this.isOpen = false;
        }
    };
    /**
     * @return {?}
     */
    SearchComponent.prototype.setVisibility = /**
     * @return {?}
     */
    function () {
        this.showPanel = !!this.results && !!this.results.list;
        this._classList['adf-search-show'] = this.showPanel;
        this._classList['adf-search-hide'] = !this.showPanel;
    };
    SearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search',
                    template: "<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n\n\n",
                    encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                    exportAs: 'searchAutocomplete',
                    host: {
                        'class': 'adf-search'
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SearchComponent.ctorParameters = function () { return [
        { type: SearchService },
        { type: ElementRef }
    ]; };
    SearchComponent.propDecorators = {
        panel: [{ type: ViewChild, args: ['panel',] }],
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        displayWith: [{ type: Input }],
        maxResults: [{ type: Input }],
        skipResults: [{ type: Input }],
        queryBody: [{ type: Input }],
        searchTerm: [{ type: Input }],
        classList: [{ type: Input, args: ['class',] }],
        resultLoaded: [{ type: Output }],
        error: [{ type: Output }]
    };
    return SearchComponent;
}());
export { SearchComponent };
if (false) {
    /** @type {?} */
    SearchComponent.prototype.panel;
    /** @type {?} */
    SearchComponent.prototype.template;
    /**
     * Function that maps an option's value to its display value in the trigger.
     * @type {?}
     */
    SearchComponent.prototype.displayWith;
    /**
     * Maximum number of results to show in the search.
     * @type {?}
     */
    SearchComponent.prototype.maxResults;
    /**
     * Number of results to skip from the results pagination.
     * @type {?}
     */
    SearchComponent.prototype.skipResults;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    SearchComponent.prototype.queryBody;
    /**
     * Search term to use when executing the search. Updating this value will
     * run a new search and update the results.
     * @type {?}
     */
    SearchComponent.prototype.searchTerm;
    /**
     * Emitted when search results have fully loaded.
     * @type {?}
     */
    SearchComponent.prototype.resultLoaded;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    SearchComponent.prototype.error;
    /** @type {?} */
    SearchComponent.prototype.showPanel;
    /** @type {?} */
    SearchComponent.prototype.results;
    /** @type {?} */
    SearchComponent.prototype._isOpen;
    /** @type {?} */
    SearchComponent.prototype.keyPressedStream;
    /** @type {?} */
    SearchComponent.prototype._classList;
    /** @type {?} */
    SearchComponent.prototype.searchService;
    /** @type {?} */
    SearchComponent.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,