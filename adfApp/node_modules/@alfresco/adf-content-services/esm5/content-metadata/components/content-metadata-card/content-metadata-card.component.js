/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { ContentService, PermissionsEnum } from '@alfresco/adf-core';
var ContentMetadataCardComponent = /** @class */ (function () {
    function ContentMetadataCardComponent(contentService) {
        this.contentService = contentService;
        /**
         * (optional) This flag displays/hides empty metadata
         * fields.
         */
        this.displayEmpty = false;
        /**
         * (optional) This flag sets the metadata in read only mode
         * preventing changes.
         */
        this.readOnly = false;
        /**
         * (optional) This flag allows the component to display more
         * than one accordion at a time.
         */
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
    }
    Object.defineProperty(ContentMetadataCardComponent.prototype, "displayDefaultProperties", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayDefaultProperties;
        },
        /** (optional) This flag displays/hides the metadata
         * properties.
         */
        set: /**
         * (optional) This flag displays/hides the metadata
         * properties.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayDefaultProperties = value;
            this.onDisplayDefaultPropertiesChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.onDisplayDefaultPropertiesChange = /**
     * @return {?}
     */
    function () {
        this.expanded = !this._displayDefaultProperties;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleEdit = /**
     * @return {?}
     */
    function () {
        this.editable = !this.editable;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleExpanded = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.hasPermission = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.node, PermissionsEnum.UPDATE);
    };
    ContentMetadataCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-metadata-card',
                    template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"!readOnly && hasPermission()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-content-metadata-card' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentMetadataCardComponent.ctorParameters = function () { return [
        { type: ContentService }
    ]; };
    ContentMetadataCardComponent.propDecorators = {
        node: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        preset: [{ type: Input }],
        readOnly: [{ type: Input }],
        multi: [{ type: Input }],
        displayDefaultProperties: [{ type: Input }]
    };
    return ContentMetadataCardComponent;
}());
export { ContentMetadataCardComponent };
if (false) {
    /**
     * (required) The node entity to fetch metadata about
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.node;
    /**
     * (optional) This flag displays/hides empty metadata
     * fields.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.displayEmpty;
    /**
     * (required) Name of the metadata preset, which defines aspects
     * and their properties.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.preset;
    /**
     * (optional) This flag sets the metadata in read only mode
     * preventing changes.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.readOnly;
    /**
     * (optional) This flag allows the component to display more
     * than one accordion at a time.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.multi;
    /** @type {?} */
    ContentMetadataCardComponent.prototype._displayDefaultProperties;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.editable;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.expanded;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.contentService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvY29tcG9uZW50cy9jb250ZW50LW1ldGFkYXRhLWNhcmQvY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQXlEakUsc0NBQW9CLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjs7Ozs7NEJBdkMxQixLQUFLOzs7Ozt3QkFZbEIsS0FBSzs7Ozs7cUJBTVIsS0FBSzt5Q0FFZ0MsSUFBSTt3QkFlN0IsS0FBSztLQUt4QjtJQWZELHNCQUNJLGtFQUF3Qjs7OztRQUs1QjtZQUNJLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO1NBQ3pDO1FBWEQ7O1dBRUc7Ozs7Ozs7UUFDSCxVQUM2QixLQUFjO1lBQ3ZDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7WUFDdkMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7U0FDM0M7OztPQUFBOzs7O0lBYUQsdUVBQWdDOzs7SUFBaEM7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO0tBQ25EOzs7O0lBRUQsaURBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDbEM7Ozs7SUFFRCxxREFBYzs7O0lBQWQ7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUNsQzs7OztJQUVELG9EQUFhOzs7SUFBYjtRQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0U7O2dCQXhFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsK3FEQUFxRDtvQkFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRTs7aUJBQ2pEOzs7O2dCQVJRLGNBQWM7Ozt1QkFXbEIsS0FBSzsrQkFNTCxLQUFLO3lCQU1MLEtBQUs7MkJBTUwsS0FBSzt3QkFNTCxLQUFLOzJDQVFMLEtBQUs7O3VDQTlEVjs7U0E0QmEsNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1pbmltYWxOb2RlRW50cnlFbnRpdHkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UsIFBlcm1pc3Npb25zRW51bSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNvbnRlbnQtbWV0YWRhdGEtY2FyZCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NvbnRlbnQtbWV0YWRhdGEtY2FyZC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdhZGYtY29udGVudC1tZXRhZGF0YS1jYXJkJyB9XG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnRNZXRhZGF0YUNhcmRDb21wb25lbnQge1xuICAgIC8qKiAocmVxdWlyZWQpIFRoZSBub2RlIGVudGl0eSB0byBmZXRjaCBtZXRhZGF0YSBhYm91dCAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZTogTWluaW1hbE5vZGVFbnRyeUVudGl0eTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBkaXNwbGF5cy9oaWRlcyBlbXB0eSBtZXRhZGF0YVxuICAgICAqIGZpZWxkcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlFbXB0eTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIChyZXF1aXJlZCkgTmFtZSBvZiB0aGUgbWV0YWRhdGEgcHJlc2V0LCB3aGljaCBkZWZpbmVzIGFzcGVjdHNcbiAgICAgKiBhbmQgdGhlaXIgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHByZXNldDogc3RyaW5nO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIHNldHMgdGhlIG1ldGFkYXRhIGluIHJlYWQgb25seSBtb2RlXG4gICAgICogcHJldmVudGluZyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHkgPSBmYWxzZTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBhbGxvd3MgdGhlIGNvbXBvbmVudCB0byBkaXNwbGF5IG1vcmVcbiAgICAgKiB0aGFuIG9uZSBhY2NvcmRpb24gYXQgYSB0aW1lLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbXVsdGkgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgX2Rpc3BsYXlEZWZhdWx0UHJvcGVydGllczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgZGlzcGxheXMvaGlkZXMgdGhlIG1ldGFkYXRhXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBkaXNwbGF5RGVmYXVsdFByb3BlcnRpZXModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25EaXNwbGF5RGVmYXVsdFByb3BlcnRpZXNDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBnZXQgZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIGVkaXRhYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBleHBhbmRlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgb25EaXNwbGF5RGVmYXVsdFByb3BlcnRpZXNDaGFuZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5fZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIHRvZ2dsZUVkaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWRpdGFibGUgPSAhdGhpcy5lZGl0YWJsZTtcbiAgICB9XG5cbiAgICB0b2dnbGVFeHBhbmRlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuICAgIH1cblxuICAgIGhhc1Blcm1pc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc1Blcm1pc3Npb24odGhpcy5ub2RlLCBQZXJtaXNzaW9uc0VudW0uVVBEQVRFKTtcbiAgICB9XG59XG4iXX0=