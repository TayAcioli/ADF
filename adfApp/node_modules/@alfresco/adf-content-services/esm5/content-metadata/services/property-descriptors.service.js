/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { defer, forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
var PropertyDescriptorsService = /** @class */ (function () {
    function PropertyDescriptorsService(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * @param {?} groupNames
     * @return {?}
     */
    PropertyDescriptorsService.prototype.load = /**
     * @param {?} groupNames
     * @return {?}
     */
    function (groupNames) {
        var _this = this;
        /** @type {?} */
        var groupFetchStreams = groupNames
            .map(function (groupName) { return groupName.replace(':', '_'); })
            .map(function (groupName) { return defer(function () { return _this.alfrescoApiService.classesApi.getClass(groupName); }); });
        return forkJoin(groupFetchStreams).pipe(map(this.convertToObject));
    };
    /**
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    PropertyDescriptorsService.prototype.convertToObject = /**
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    function (propertyGroupsArray) {
        return propertyGroupsArray.reduce(function (propertyGroups, propertyGroup) {
            var _a;
            return Object.assign({}, propertyGroups, (_a = {},
                _a[propertyGroup.name] = propertyGroup,
                _a));
        }, {});
    };
    PropertyDescriptorsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PropertyDescriptorsService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    return PropertyDescriptorsService;
}());
export { PropertyDescriptorsService };
if (false) {
    /** @type {?} */
    PropertyDescriptorsService.prototype.alfrescoApiService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvcHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBYyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7SUFLakMsb0NBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0tBQUk7Ozs7O0lBRTlELHlDQUFJOzs7O0lBQUosVUFBSyxVQUFvQjtRQUF6QixpQkFRQzs7UUFQRyxJQUFNLGlCQUFpQixHQUFHLFVBQVU7YUFDL0IsR0FBRyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQTNCLENBQTJCLENBQUM7YUFDN0MsR0FBRyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsS0FBSyxDQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBdEQsQ0FBc0QsQ0FBQyxFQUFwRSxDQUFvRSxDQUFFLENBQUM7UUFFN0YsT0FBTyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQzVCLENBQUM7S0FDTDs7Ozs7SUFFTyxvREFBZTs7OztjQUFDLG1CQUFvQztRQUN4RCxPQUFPLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxVQUFDLGNBQWMsRUFBRSxhQUFhOztZQUM1RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWM7Z0JBQ25DLEdBQUMsYUFBYSxDQUFDLElBQUksSUFBRyxhQUFhO29CQUNyQyxDQUFDO1NBQ04sRUFBRSxFQUFFLENBQUMsQ0FBQzs7O2dCQXBCZCxVQUFVOzs7O2dCQUxGLGtCQUFrQjs7cUNBbEIzQjs7U0F3QmEsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGRlZmVyLCBmb3JrSm9pbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvcGVydHlHcm91cCwgUHJvcGVydHlHcm91cENvbnRhaW5lciB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHt9XG5cbiAgICBsb2FkKGdyb3VwTmFtZXM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxQcm9wZXJ0eUdyb3VwQ29udGFpbmVyPiB7XG4gICAgICAgIGNvbnN0IGdyb3VwRmV0Y2hTdHJlYW1zID0gZ3JvdXBOYW1lc1xuICAgICAgICAgICAgLm1hcChncm91cE5hbWUgPT4gZ3JvdXBOYW1lLnJlcGxhY2UoJzonLCAnXycpKVxuICAgICAgICAgICAgLm1hcChncm91cE5hbWUgPT4gZGVmZXIoICgpID0+IHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmNsYXNzZXNBcGkuZ2V0Q2xhc3MoZ3JvdXBOYW1lKSkgKTtcblxuICAgICAgICByZXR1cm4gZm9ya0pvaW4oZ3JvdXBGZXRjaFN0cmVhbXMpLnBpcGUoXG4gICAgICAgICAgICBtYXAodGhpcy5jb252ZXJ0VG9PYmplY3QpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb252ZXJ0VG9PYmplY3QocHJvcGVydHlHcm91cHNBcnJheTogUHJvcGVydHlHcm91cFtdKTogUHJvcGVydHlHcm91cENvbnRhaW5lciB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3Vwc0FycmF5LnJlZHVjZSgocHJvcGVydHlHcm91cHMsIHByb3BlcnR5R3JvdXApID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcm9wZXJ0eUdyb3Vwcywge1xuICAgICAgICAgICAgICAgIFtwcm9wZXJ0eUdyb3VwLm5hbWVdOiBwcm9wZXJ0eUdyb3VwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cbn1cbiJdfQ==