/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getProperty } from './property-group-reader';
var LayoutOrientedConfigService = /** @class */ (function () {
    function LayoutOrientedConfigService(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return this.getMatchingGroups(groupName).length > 0;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        var _this = this;
        /** @type {?} */
        var layoutBlocks = this.config;
        return layoutBlocks.map(function (layoutBlock) {
            /** @type {?} */
            var flattenedItems = _this.flattenItems(layoutBlock.items);
            /** @type {?} */
            var properties = flattenedItems.reduce(function (props, explodedItem) {
                /** @type {?} */
                var property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];
                return props.concat(property);
            }, []);
            return {
                title: layoutBlock.title,
                properties: properties
            };
        });
    };
    /**
     * @param {?} items
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.flattenItems = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        return items.reduce(function (accumulator, item) {
            /** @type {?} */
            var properties = Array.isArray(item.properties) ? item.properties : [item.properties];
            /** @type {?} */
            var flattenedProperties = properties.map(function (propertyName) {
                return {
                    groupName: item.aspect || item.type,
                    propertyName: propertyName
                };
            });
            return accumulator.concat(flattenedProperties);
        }, []);
    };
    /**
     * @param {?} groupName
     * @return {?}
     */
    LayoutOrientedConfigService.prototype.getMatchingGroups = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return this.config
            .map(function (layoutBlock) { return layoutBlock.items; })
            .reduce(function (accumulator, items) { return accumulator.concat(items); }, [])
            .filter(function (item) { return item.aspect === groupName || item.type === groupName; });
    };
    return LayoutOrientedConfigService;
}());
export { LayoutOrientedConfigService };
if (false) {
    /** @type {?} */
    LayoutOrientedConfigService.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb25maWcvbGF5b3V0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV0RCxJQUFBO0lBRUkscUNBQW9CLE1BQVc7UUFBWCxXQUFNLEdBQU4sTUFBTSxDQUFLO0tBQUk7Ozs7O0lBRTVCLG9EQUFjOzs7O2NBQUMsU0FBaUI7UUFDbkMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzs7Ozs7O0lBR2pELHdEQUFrQjs7OztjQUFDLGNBQXNDOzs7UUFDNUQsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUVqQyxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBQyxXQUFXOztZQUNoQyxJQUFNLGNBQWMsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FJaEQ7O1lBSlgsSUFDSSxVQUFVLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxZQUFZOztnQkFDbkQsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3RHLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRVgsT0FBTztnQkFDSCxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7Z0JBQ3hCLFVBQVUsWUFBQTthQUNiLENBQUM7U0FDTCxDQUFDLENBQUM7Ozs7OztJQUdDLGtEQUFZOzs7O2NBQUMsS0FBSztRQUN0QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxXQUFXLEVBQUUsSUFBSTs7WUFDbEMsSUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztZQUN4RixJQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBQSxZQUFZO2dCQUNuRCxPQUFPO29CQUNILFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJO29CQUNuQyxZQUFZLGNBQUE7aUJBQ2YsQ0FBQzthQUNMLENBQUMsQ0FBQztZQUVILE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2xELEVBQUUsRUFBRSxDQUFDLENBQUM7Ozs7OztJQUdILHVEQUFpQjs7OztjQUFDLFNBQWlCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLE1BQU07YUFDYixHQUFHLENBQUMsVUFBQSxXQUFXLElBQUksT0FBQSxXQUFXLENBQUMsS0FBSyxFQUFqQixDQUFpQixDQUFDO2FBQ3JDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxLQUFLLElBQUssT0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUF6QixDQUF5QixFQUFFLEVBQUUsQ0FBQzthQUM3RCxNQUFNLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBcEQsQ0FBb0QsQ0FBQyxDQUFDOztzQ0FwRXBGO0lBc0VDLENBQUE7QUE3Q0QsdUNBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb250ZW50TWV0YWRhdGFDb25maWcsXG4gICAgTGF5b3V0T3JpZW50ZWRDb25maWdJdGVtLFxuICAgIE9yZ2FuaXNlZFByb3BlcnR5R3JvdXAsXG4gICAgUHJvcGVydHlHcm91cENvbnRhaW5lclxufSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2NvbnRlbnQtbWV0YWRhdGEuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBnZXRQcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydHktZ3JvdXAtcmVhZGVyJztcblxuZXhwb3J0IGNsYXNzIExheW91dE9yaWVudGVkQ29uZmlnU2VydmljZSBpbXBsZW1lbnRzIENvbnRlbnRNZXRhZGF0YUNvbmZpZyB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogYW55KSB7fVxuXG4gICAgcHVibGljIGlzR3JvdXBBbGxvd2VkKGdyb3VwTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1hdGNoaW5nR3JvdXBzKGdyb3VwTmFtZSkubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVvcmdhbmlzZUJ5Q29uZmlnKHByb3BlcnR5R3JvdXBzOiBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyKTogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdIHtcbiAgICAgICAgY29uc3QgbGF5b3V0QmxvY2tzID0gdGhpcy5jb25maWc7XG5cbiAgICAgICAgcmV0dXJuIGxheW91dEJsb2Nrcy5tYXAoKGxheW91dEJsb2NrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmbGF0dGVuZWRJdGVtcyA9IHRoaXMuZmxhdHRlbkl0ZW1zKGxheW91dEJsb2NrLml0ZW1zKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gZmxhdHRlbmVkSXRlbXMucmVkdWNlKChwcm9wcywgZXhwbG9kZWRJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gZ2V0UHJvcGVydHkocHJvcGVydHlHcm91cHMsIGV4cGxvZGVkSXRlbS5ncm91cE5hbWUsIGV4cGxvZGVkSXRlbS5wcm9wZXJ0eU5hbWUpIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuY29uY2F0KHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGxheW91dEJsb2NrLnRpdGxlLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmxhdHRlbkl0ZW1zKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiBpdGVtcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBpdGVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gQXJyYXkuaXNBcnJheShpdGVtLnByb3BlcnRpZXMpID8gaXRlbS5wcm9wZXJ0aWVzIDogW2l0ZW0ucHJvcGVydGllc107XG4gICAgICAgICAgICBjb25zdCBmbGF0dGVuZWRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5tYXAocHJvcGVydHlOYW1lID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBncm91cE5hbWU6IGl0ZW0uYXNwZWN0IHx8IGl0ZW0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3IuY29uY2F0KGZsYXR0ZW5lZFByb3BlcnRpZXMpO1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNYXRjaGluZ0dyb3Vwcyhncm91cE5hbWU6IHN0cmluZyk6IExheW91dE9yaWVudGVkQ29uZmlnSXRlbVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnXG4gICAgICAgICAgICAubWFwKGxheW91dEJsb2NrID0+IGxheW91dEJsb2NrLml0ZW1zKVxuICAgICAgICAgICAgLnJlZHVjZSgoYWNjdW11bGF0b3IsIGl0ZW1zKSA9PiBhY2N1bXVsYXRvci5jb25jYXQoaXRlbXMpLCBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uYXNwZWN0ID09PSBncm91cE5hbWUgfHwgaXRlbS50eXBlID09PSBncm91cE5hbWUpO1xuICAgIH1cbn1cbiJdfQ==