/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map } from 'rxjs/operators';
var ContentMetadataService = /** @class */ (function () {
    function ContentMetadataService(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ContentMetadataService.prototype.getBasicProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return of(this.basicPropertiesService.getProperties(node));
    };
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataService.prototype.getGroupedProperties = /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    function (node, presetName) {
        var _this = this;
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            var config_1 = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            var groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter(function (groupName) { return config_1.isGroupAllowed(groupName); });
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(map(function (groups) { return config_1.reorganiseByConfig(groups); }), map(function (groups) { return _this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties); }));
            }
        }
        return groupedProperties;
    };
    ContentMetadataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentMetadataService.ctorParameters = function () { return [
        { type: BasicPropertiesService },
        { type: ContentMetadataConfigFactory },
        { type: PropertyGroupTranslatorService },
        { type: PropertyDescriptorsService }
    ]; };
    return ContentMetadataService;
}());
export { ContentMetadataService };
if (false) {
    /** @type {?} */
    ContentMetadataService.prototype.basicPropertiesService;
    /** @type {?} */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /** @type {?} */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /** @type {?} */
    ContentMetadataService.prototype.propertyDescriptorsService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBR3RGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7SUFLakMsZ0NBQW9CLHNCQUE4QyxFQUM5Qyw4QkFDQSxnQ0FDQTtRQUhBLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsaUNBQTRCLEdBQTVCLDRCQUE0QjtRQUM1QixtQ0FBOEIsR0FBOUIsOEJBQThCO1FBQzlCLCtCQUEwQixHQUExQiwwQkFBMEI7S0FDN0M7Ozs7O0lBRUQsbURBQWtCOzs7O0lBQWxCLFVBQW1CLElBQTRCO1FBQzNDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM5RDs7Ozs7O0lBRUQscURBQW9COzs7OztJQUFwQixVQUFxQixJQUE0QixFQUFFLFVBQThCO1FBQWpGLGlCQWtCQztRQWxCa0QsMkJBQUEsRUFBQSxzQkFBOEI7O1FBQzdFLElBQUksaUJBQWlCLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTs7WUFDbEIsSUFBTSxRQUFNLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FHRDs7WUFIL0QsSUFDSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVc7aUJBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUNyQixNQUFNLENBQUMsVUFBQSxTQUFTLElBQUksT0FBQSxRQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUM7WUFFL0QsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdkIsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ3JFLEdBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLFFBQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBakMsQ0FBaUMsQ0FBQyxFQUNoRCxHQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxLQUFJLENBQUMsOEJBQThCLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBdEYsQ0FBc0YsQ0FBQyxDQUN4RyxDQUFDO2FBQ0w7U0FDSjtRQUVELE9BQU8saUJBQWlCLENBQUM7S0FDNUI7O2dCQS9CSixVQUFVOzs7O2dCQVRGLHNCQUFzQjtnQkFLdEIsNEJBQTRCO2dCQUg1Qiw4QkFBOEI7Z0JBSTlCLDBCQUEwQjs7aUNBekJuQzs7U0E2QmEsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWluaW1hbE5vZGVFbnRyeUVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBCYXNpY1Byb3BlcnRpZXNTZXJ2aWNlIH0gZnJvbSAnLi9iYXNpYy1wcm9wZXJ0aWVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZSB9IGZyb20gJy4vcHJvcGVydHktZ3JvdXBzLXRyYW5zbGF0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBDYXJkVmlld0l0ZW0gfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdHcm91cCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkgfSBmcm9tICcuL2NvbmZpZy9jb250ZW50LW1ldGFkYXRhLWNvbmZpZy5mYWN0b3J5JztcbmltcG9ydCB7IFByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlIH0gZnJvbSAnLi9wcm9wZXJ0eS1kZXNjcmlwdG9ycy5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRlbnRNZXRhZGF0YVNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNpY1Byb3BlcnRpZXNTZXJ2aWNlOiBCYXNpY1Byb3BlcnRpZXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeTogQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZTogUHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2U6IFByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0QmFzaWNQcm9wZXJ0aWVzKG5vZGU6IE1pbmltYWxOb2RlRW50cnlFbnRpdHkpOiBPYnNlcnZhYmxlPENhcmRWaWV3SXRlbVtdPiB7XG4gICAgICAgIHJldHVybiBvZih0aGlzLmJhc2ljUHJvcGVydGllc1NlcnZpY2UuZ2V0UHJvcGVydGllcyhub2RlKSk7XG4gICAgfVxuXG4gICAgZ2V0R3JvdXBlZFByb3BlcnRpZXMobm9kZTogTWluaW1hbE5vZGVFbnRyeUVudGl0eSwgcHJlc2V0TmFtZTogc3RyaW5nID0gJ2RlZmF1bHQnKTogT2JzZXJ2YWJsZTxDYXJkVmlld0dyb3VwW10+IHtcbiAgICAgICAgbGV0IGdyb3VwZWRQcm9wZXJ0aWVzID0gb2YoW10pO1xuXG4gICAgICAgIGlmIChub2RlLmFzcGVjdE5hbWVzKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkuZ2V0KHByZXNldE5hbWUpLFxuICAgICAgICAgICAgICAgIGdyb3VwTmFtZXMgPSBub2RlLmFzcGVjdE5hbWVzXG4gICAgICAgICAgICAgICAgICAgIC5jb25jYXQobm9kZS5ub2RlVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihncm91cE5hbWUgPT4gY29uZmlnLmlzR3JvdXBBbGxvd2VkKGdyb3VwTmFtZSkpO1xuXG4gICAgICAgICAgICBpZiAoZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBlZFByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlLmxvYWQoZ3JvdXBOYW1lcykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKGdyb3VwcyA9PiBjb25maWcucmVvcmdhbmlzZUJ5Q29uZmlnKGdyb3VwcykpLFxuICAgICAgICAgICAgICAgICAgICBtYXAoZ3JvdXBzID0+IHRoaXMucHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlLnRyYW5zbGF0ZVRvQ2FyZFZpZXdHcm91cHMoZ3JvdXBzLCBub2RlLnByb3BlcnRpZXMpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ3JvdXBlZFByb3BlcnRpZXM7XG4gICAgfVxufVxuIl19