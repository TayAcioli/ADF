/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { SearchService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
/**
 * Internal service used by ContentNodeSelector component.
 */
var ContentNodeSelectorService = /** @class */ (function () {
    function ContentNodeSelectorService(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    ContentNodeSelectorService.prototype.search = /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    function (searchTerm, rootNodeId, skipCount, maxItems, extraNodeIds) {
        if (rootNodeId === void 0) { rootNodeId = null; }
        if (skipCount === void 0) { skipCount = 0; }
        if (maxItems === void 0) { maxItems = 25; }
        /** @type {?} */
        var extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter(function (id) { return id !== rootNodeId; })
                .forEach(function (extraId) {
                extraParentFiltering += " OR ANCESTOR:'workspace://SpacesStore/" + extraId + "'";
            });
        }
        /** @type {?} */
        var parentFiltering = rootNodeId ? [{ query: "ANCESTOR:'workspace://SpacesStore/" + rootNodeId + "'" + extraParentFiltering }] : [];
        /** @type {?} */
        var defaultSearchNode = {
            query: {
                query: searchTerm + "* OR name:" + searchTerm + "*"
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: tslib_1.__spread([
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' }
            ], parentFiltering),
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    };
    ContentNodeSelectorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentNodeSelectorService.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    return ContentNodeSelectorService;
}());
export { ContentNodeSelectorService };
if (false) {
    /** @type {?} */
    ContentNodeSelectorService.prototype.searchService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztJQVV2QyxvQ0FBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7S0FDL0M7Ozs7Ozs7Ozs7O0lBYU0sMkNBQU07Ozs7Ozs7Ozs7Y0FBQyxVQUFrQixFQUFFLFVBQXlCLEVBQUUsU0FBcUIsRUFBRSxRQUFxQixFQUFFLFlBQXVCO1FBQWhHLDJCQUFBLEVBQUEsaUJBQXlCO1FBQUUsMEJBQUEsRUFBQSxhQUFxQjtRQUFFLHlCQUFBLEVBQUEsYUFBcUI7O1FBRXJHLElBQUksb0JBQW9CLEdBQUcsRUFBRSxDQUFDO1FBRTlCLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDckMsWUFBWTtpQkFDUCxNQUFNLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLEtBQUssVUFBVSxFQUFqQixDQUFpQixDQUFDO2lCQUMvQixPQUFPLENBQUMsVUFBQSxPQUFPO2dCQUNaLG9CQUFvQixJQUFJLDJDQUF5QyxPQUFPLE1BQUcsQ0FBQzthQUMvRSxDQUFDLENBQUM7U0FDVjs7UUFFRCxJQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsdUNBQXFDLFVBQVUsU0FBSSxvQkFBc0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7UUFFakksSUFBSSxpQkFBaUIsR0FBUTtZQUN6QixLQUFLLEVBQUU7Z0JBQ0gsS0FBSyxFQUFLLFVBQVUsa0JBQWEsVUFBVSxNQUFHO2FBQ2pEO1lBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDO1lBQ3hDLE1BQU0sRUFBRTtnQkFDSixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsU0FBUyxFQUFFLFNBQVM7YUFDdkI7WUFDRCxhQUFhO2dCQUNULEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFO2dCQUM3QixFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRTtlQUMvQixlQUFlLENBQ3JCO1lBQ0QsS0FBSyxFQUFFO2dCQUNILFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQzthQUN2QjtTQUNKLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7O2dCQWxEdEUsVUFBVTs7OztnQkFSRixhQUFhOztxQ0FqQnRCOztTQTBCYSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVQYWdpbmcgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEludGVybmFsIHNlcnZpY2UgdXNlZCBieSBDb250ZW50Tm9kZVNlbGVjdG9yIGNvbXBvbmVudC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRlbnROb2RlU2VsZWN0b3JTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VhcmNoU2VydmljZTogU2VhcmNoU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgc2VhcmNoIGZvciBjb250ZW50IG5vZGUgc2VsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VhcmNoVGVybSAgICBUaGUgdGVybSB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIHJvb3ROb2RlSWQgICAgVGhlIHJvb3QgaXMgdG8gc3RhcnQgdGhlIHNlYXJjaCBmcm9tXG4gICAgICogQHBhcmFtIHNraXBDb3VudCAgICAgRnJvbSB3aGVyZSB0byBzdGFydCB0aGUgbG9hZGluZ1xuICAgICAqIEBwYXJhbSBtYXhJdGVtcyAgICAgIEhvdyBtYW55IGl0ZW1zIHRvIGxvYWRcbiAgICAgKiBAcGFyYW0gW2V4dHJhTm9kZUlkc10gIExpc3Qgb2YgZXh0cmEgbm9kZSBpZHMgdG8gc2VhcmNoIGZyb20uIFRoaXMgbGFzdCBwYXJhbWV0ZXIgaXMgbmVjZXNzYXJ5IHdoZW5cbiAgICAgKiB0aGUgcm9vdE5vZGVJZCBpcyBvbmUgb2YgdGhlIHN1cHBvcnRlZCBhbGlhc2VzIChlLmcuICctbXktJywgJy1yb290LScsICctbXlzaXRlcy0nLCBldGMuKVxuICAgICAqIGFuZCBzZWFyY2ggaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhhdCBhbGlhcywgYnV0IGNhbiBiZSBwZXJmb3JtZWQgb24gaXRzIGNvcnJlc3BvbmRpbmcgbm9kZXMuXG4gICAgICovXG4gICAgcHVibGljIHNlYXJjaChzZWFyY2hUZXJtOiBzdHJpbmcsIHJvb3ROb2RlSWQ6IHN0cmluZyA9IG51bGwsIHNraXBDb3VudDogbnVtYmVyID0gMCwgbWF4SXRlbXM6IG51bWJlciA9IDI1LCBleHRyYU5vZGVJZHM/OiBzdHJpbmdbXSk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuXG4gICAgICAgIGxldCBleHRyYVBhcmVudEZpbHRlcmluZyA9ICcnO1xuXG4gICAgICAgIGlmIChleHRyYU5vZGVJZHMgJiYgZXh0cmFOb2RlSWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZXh0cmFOb2RlSWRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihpZCA9PiBpZCAhPT0gcm9vdE5vZGVJZClcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChleHRyYUlkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFQYXJlbnRGaWx0ZXJpbmcgKz0gYCBPUiBBTkNFU1RPUjond29ya3NwYWNlOi8vU3BhY2VzU3RvcmUvJHtleHRyYUlkfSdgO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyZW50RmlsdGVyaW5nID0gcm9vdE5vZGVJZCA/IFt7IHF1ZXJ5OiBgQU5DRVNUT1I6J3dvcmtzcGFjZTovL1NwYWNlc1N0b3JlLyR7cm9vdE5vZGVJZH0nJHtleHRyYVBhcmVudEZpbHRlcmluZ31gIH1dIDogW107XG5cbiAgICAgICAgbGV0IGRlZmF1bHRTZWFyY2hOb2RlOiBhbnkgPSB7XG4gICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBgJHtzZWFyY2hUZXJtfSogT1IgbmFtZToke3NlYXJjaFRlcm19KmBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3BhdGgnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucyddLFxuICAgICAgICAgICAgcGFnaW5nOiB7XG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IG1heEl0ZW1zLFxuICAgICAgICAgICAgICAgIHNraXBDb3VudDogc2tpcENvdW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyUXVlcmllczogW1xuICAgICAgICAgICAgICAgIHsgcXVlcnk6IFwiVFlQRTonY206Zm9sZGVyJ1wiIH0sXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogJ05PVCBjbTpjcmVhdG9yOlN5c3RlbScgfSxcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRGaWx0ZXJpbmdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogWydub2RlcyddXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5zZWFyY2hCeVF1ZXJ5Qm9keShkZWZhdWx0U2VhcmNoTm9kZSk7XG4gICAgfVxufVxuIl19