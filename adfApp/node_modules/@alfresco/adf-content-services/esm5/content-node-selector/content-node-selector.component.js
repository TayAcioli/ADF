/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, Input } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material';
import { SitePaging } from 'alfresco-js-api';
var ContentNodeSelectorComponent = /** @class */ (function () {
    function ContentNodeSelectorComponent(data) {
        this.data = data;
        /**
         * @deprecated in 2.1.0
         */
        this.title = null;
        /**
         * @deprecated in 2.1.0
         */
        this.currentFolderId = null;
        /**
         * @deprecated in 2.1.0
         */
        this.dropdownHideMyFiles = false;
        /**
         * @deprecated in 2.1.0
         */
        this.dropdownSiteList = null;
        /**
         * @deprecated in 2.1.0
         */
        this.rowFilter = null;
        /**
         * @deprecated in 2.1.0
         */
        this.imageResolver = null;
        this.buttonActionName = data.actionName ? "NODE_SELECTOR." + data.actionName.toUpperCase() : 'NODE_SELECTOR.CHOOSE';
    }
    /**
     * @return {?}
     */
    ContentNodeSelectorComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.data.select.complete();
    };
    /**
     * @param {?} nodeList
     * @return {?}
     */
    ContentNodeSelectorComponent.prototype.onSelect = /**
     * @param {?} nodeList
     * @return {?}
     */
    function (nodeList) {
        this.chosenNode = nodeList;
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.data.select.next(this.chosenNode);
        this.data.select.complete();
    };
    ContentNodeSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-node-selector',
                    template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">{{title || data?.title}}\n</header>\n\n<mat-dialog-content>\n    <adf-content-node-selector-panel\n        [currentFolderId]=\"currentFolderId || data?.currentFolderId\"\n        [dropdownHideMyFiles]=\"dropdownHideMyFiles || data?.dropdownHideMyFiles\"\n        [dropdownSiteList]=\"dropdownSiteList || data?.dropdownSiteList\"\n        [rowFilter]=\"rowFilter || data?.rowFilter\"\n        [imageResolver]=\"imageResolver || data?.imageResolver\"\n        [isSelectionValid]=\"data?.isSelectionValid\"\n        [breadcrumbTransform]=\"data?.breadcrumbTransform\"\n        (select)=\"onSelect($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n    </button>\n\n    <button mat-button\n        [disabled]=\"!chosenNode\"\n        class=\"choose-action\"\n        (click)=\"onClick()\"\n        data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n</mat-dialog-actions>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentNodeSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    ContentNodeSelectorComponent.propDecorators = {
        title: [{ type: Input }],
        currentFolderId: [{ type: Input }],
        dropdownHideMyFiles: [{ type: Input }],
        dropdownSiteList: [{ type: Input }],
        rowFilter: [{ type: Input }],
        imageResolver: [{ type: Input }],
        pageSize: [{ type: Input }]
    };
    return ContentNodeSelectorComponent;
}());
export { ContentNodeSelectorComponent };
if (false) {
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.title;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.currentFolderId;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.dropdownHideMyFiles;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.dropdownSiteList;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.rowFilter;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.imageResolver;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    ContentNodeSelectorComponent.prototype.pageSize;
    /** @type {?} */
    ContentNodeSelectorComponent.prototype.buttonActionName;
    /** @type {?} */
    ContentNodeSelectorComponent.prototype.chosenNode;
    /** @type {?} */
    ContentNodeSelectorComponent.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbm9kZS1zZWxlY3Rvci9jb250ZW50LW5vZGUtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUEwQixVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7SUEwRGpFLHNDQUE0QyxJQUFzQztRQUF0QyxTQUFJLEdBQUosSUFBSSxDQUFrQzs7OztxQkF6Q2xFLElBQUk7Ozs7K0JBTU0sSUFBSTs7OzttQ0FNQyxLQUFLOzs7O2dDQU1MLElBQUk7Ozs7eUJBTVosSUFBSTs7Ozs2QkFNSSxJQUFJO1FBWS9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxtQkFBaUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUksQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7S0FDdkg7Ozs7SUFFRCw0Q0FBSzs7O0lBQUw7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMvQjs7Ozs7SUFFRCwrQ0FBUTs7OztJQUFSLFVBQVMsUUFBa0M7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7S0FDOUI7Ozs7SUFFRCw4Q0FBTzs7O0lBQVA7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQy9COztnQkFwRUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLDh1Q0FBcUQ7b0JBRXJELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0RBZ0RnQixNQUFNLFNBQUMsZUFBZTs7O3dCQTFDbEMsS0FBSztrQ0FNTCxLQUFLO3NDQU1MLEtBQUs7bUNBTUwsS0FBSzs0QkFNTCxLQUFLO2dDQU1MLEtBQUs7MkJBTUwsS0FBSzs7dUNBdkVWOztTQThCYSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudHJ5RW50aXR5LCBTaXRlUGFnaW5nIH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IENvbnRlbnROb2RlU2VsZWN0b3JDb21wb25lbnREYXRhIH0gZnJvbSAnLi9jb250ZW50LW5vZGUtc2VsZWN0b3IuY29tcG9uZW50LWRhdGEuaW50ZXJmYWNlJztcbmltcG9ydCB7IFJvd0ZpbHRlciB9IGZyb20gJy4uL2RvY3VtZW50LWxpc3QvZGF0YS9yb3ctZmlsdGVyLm1vZGVsJztcbmltcG9ydCB7IEltYWdlUmVzb2x2ZXIgfSBmcm9tICcuLi9kb2N1bWVudC1saXN0L2RhdGEvaW1hZ2UtcmVzb2x2ZXIubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb250ZW50LW5vZGUtc2VsZWN0b3InLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb250ZW50LW5vZGUtc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbnRlbnQtbm9kZS1zZWxlY3Rvci5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE5vZGVTZWxlY3RvckNvbXBvbmVudCB7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiAyLjEuMFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGl0bGU6IHN0cmluZyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiAyLjEuMFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgY3VycmVudEZvbGRlcklkOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gMi4xLjBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGRyb3Bkb3duSGlkZU15RmlsZXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGluIDIuMS4wXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBkcm9wZG93blNpdGVMaXN0OiBTaXRlUGFnaW5nID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGluIDIuMS4wXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICByb3dGaWx0ZXI6IFJvd0ZpbHRlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiAyLjEuMFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgaW1hZ2VSZXNvbHZlcjogSW1hZ2VSZXNvbHZlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiAyLjEuMFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGFnZVNpemU6IG51bWJlcjtcblxuICAgIGJ1dHRvbkFjdGlvbk5hbWU6IHN0cmluZztcbiAgICBjaG9zZW5Ob2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5W107XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IENvbnRlbnROb2RlU2VsZWN0b3JDb21wb25lbnREYXRhKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uQWN0aW9uTmFtZSA9IGRhdGEuYWN0aW9uTmFtZSA/IGBOT0RFX1NFTEVDVE9SLiR7ZGF0YS5hY3Rpb25OYW1lLnRvVXBwZXJDYXNlKCl9YCA6ICdOT0RFX1NFTEVDVE9SLkNIT09TRSc7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zZWxlY3QuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChub2RlTGlzdDogTWluaW1hbE5vZGVFbnRyeUVudGl0eVtdKSB7XG4gICAgICAgIHRoaXMuY2hvc2VuTm9kZSA9IG5vZGVMaXN0O1xuICAgIH1cblxuICAgIG9uQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF0YS5zZWxlY3QubmV4dCh0aGlzLmNob3Nlbk5vZGUpO1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0LmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19