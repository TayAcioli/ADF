/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { ContentService } from '@alfresco/adf-core';
import { Subject, throwError } from 'rxjs';
import { SitesService, TranslationService, PermissionsEnum } from '@alfresco/adf-core';
import { DocumentListService } from '../document-list/services/document-list.service';
import { ContentNodeSelectorComponent } from './content-node-selector.component';
import { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';
import { switchMap } from 'rxjs/operators';
var ContentNodeDialogService = /** @class */ (function () {
    function ContentNodeDialogService(dialog, contentService, documentListService, siteService, translation) {
        this.dialog = dialog;
        this.contentService = contentService;
        this.documentListService = documentListService;
        this.siteService = siteService;
        this.translation = translation;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * Opens a file browser at a chosen folder location.
     * @param folderNodeId ID of the folder to use
     * @returns Information about the selected file(s)
     */
    /**
     * Opens a file browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected file(s)
     */
    ContentNodeDialogService.prototype.openFileBrowseDialogByFolderId = /**
     * Opens a file browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected file(s)
     */
    function (folderNodeId) {
        var _this = this;
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap(function (node) {
            return _this.openUploadFileDialog('Choose', node);
        }));
    };
    /**
     * Opens a lock node dialog.
     * @param {?} contentEntry Node to lock
     * @return {?} Error/status message (if any)
     */
    ContentNodeDialogService.prototype.openLockNodeDialog = /**
     * Opens a lock node dialog.
     * @param {?} contentEntry Node to lock
     * @return {?} Error/status message (if any)
     */
    function (contentEntry) {
        var _this = this;
        /** @type {?} */
        var observable = new Subject();
        if (this.contentService.hasPermission(contentEntry, PermissionsEnum.LOCK)) {
            this.dialog.open(NodeLockDialogComponent, {
                data: {
                    node: contentEntry,
                    onError: function (error) {
                        _this.error.emit(error);
                        observable.error(error);
                    }
                },
                width: '400px'
            });
        }
        else {
            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');
        }
        return observable;
    };
    /**
     * Opens a file browser at a chosen site location.
     * @returns Information about the selected file(s)
     */
    /**
     * Opens a file browser at a chosen site location.
     * @return {?} Information about the selected file(s)
     */
    ContentNodeDialogService.prototype.openFileBrowseDialogBySite = /**
     * Opens a file browser at a chosen site location.
     * @return {?} Information about the selected file(s)
     */
    function () {
        var _this = this;
        return this.siteService.getSites().pipe(switchMap(function (response) {
            return _this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        }));
    };
    /**
     * Opens a folder browser at a chosen site location.
     * @returns Information about the selected folder(s)
     */
    /**
     * Opens a folder browser at a chosen site location.
     * @return {?} Information about the selected folder(s)
     */
    ContentNodeDialogService.prototype.openFolderBrowseDialogBySite = /**
     * Opens a folder browser at a chosen site location.
     * @return {?} Information about the selected folder(s)
     */
    function () {
        var _this = this;
        return this.siteService.getSites().pipe(switchMap(function (response) {
            return _this.openFolderBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        }));
    };
    /**
     * Opens a folder browser at a chosen folder location.
     * @param folderNodeId ID of the folder to use
     * @returns Information about the selected folder(s)
     */
    /**
     * Opens a folder browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected folder(s)
     */
    ContentNodeDialogService.prototype.openFolderBrowseDialogByFolderId = /**
     * Opens a folder browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected folder(s)
     */
    function (folderNodeId) {
        var _this = this;
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap(function (node) {
            return _this.openUploadFolderDialog('Choose', node);
        }));
    };
    /**
     * Opens a dialog to copy or move an item to a new location.
     * @param action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param contentEntry Item to be copied or moved
     * @param permission Permission for the operation
     * @returns Information about files that were copied/moved
     */
    /**
     * Opens a dialog to copy or move an item to a new location.
     * @param {?} action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param {?} contentEntry Item to be copied or moved
     * @param {?=} permission Permission for the operation
     * @return {?} Information about files that were copied/moved
     */
    ContentNodeDialogService.prototype.openCopyMoveDialog = /**
     * Opens a dialog to copy or move an item to a new location.
     * @param {?} action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param {?} contentEntry Item to be copied or moved
     * @param {?=} permission Permission for the operation
     * @return {?} Information about files that were copied/moved
     */
    function (action, contentEntry, permission) {
        if (this.contentService.hasPermission(contentEntry, permission)) {
            /** @type {?} */
            var select = new Subject();
            select.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            var title = this.getTitleTranslation(action, contentEntry.name);
            /** @type {?} */
            var data = {
                title: title,
                actionName: action,
                currentFolderId: contentEntry.parentId,
                imageResolver: this.imageResolver.bind(this),
                rowFilter: this.rowFilter.bind(this, contentEntry.id),
                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),
                select: select
            };
            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            return select;
        }
        else {
            /** @type {?} */
            var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            return throwError(errors);
        }
    };
    /**
     * Gets the translation of the dialog title.
     * @param action Name of the action to display in the dialog title
     * @param name Name of the item on which the action is being performed
     * @returns Translated version of the title
     */
    /**
     * Gets the translation of the dialog title.
     * @param {?} action Name of the action to display in the dialog title
     * @param {?} name Name of the item on which the action is being performed
     * @return {?} Translated version of the title
     */
    ContentNodeDialogService.prototype.getTitleTranslation = /**
     * Gets the translation of the dialog title.
     * @param {?} action Name of the action to display in the dialog title
     * @param {?} name Name of the item on which the action is being performed
     * @return {?} Translated version of the title
     */
    function (action, name) {
        return this.translation.instant("NODE_SELECTOR." + action.toUpperCase() + "_ITEM", { name: name });
    };
    /**
     * Opens a dialog to choose folders to upload.
     * @param action Name of the action to show in the title
     * @param contentEntry  Item to upload
     * @returns Information about the chosed folder(s)
     */
    /**
     * Opens a dialog to choose folders to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry  Item to upload
     * @return {?} Information about the chosed folder(s)
     */
    ContentNodeDialogService.prototype.openUploadFolderDialog = /**
     * Opens a dialog to choose folders to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry  Item to upload
     * @return {?} Information about the chosed folder(s)
     */
    function (action, contentEntry) {
        /** @type {?} */
        var select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: action + " '" + contentEntry.name + "' to ...",
            actionName: action,
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.hasPermissionOnNodeFolder.bind(this),
            rowFilter: this.rowFilter.bind(this, contentEntry.id),
            select: select
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        return select;
    };
    /**
     * Opens a dialog to choose a file to upload.
     * @param action Name of the action to show in the title
     * @param contentEntry Item to upload
     * @returns Information about the chosen file(s)
     */
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry Item to upload
     * @return {?} Information about the chosen file(s)
     */
    ContentNodeDialogService.prototype.openUploadFileDialog = /**
     * Opens a dialog to choose a file to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry Item to upload
     * @return {?} Information about the chosen file(s)
     */
    function (action, contentEntry) {
        /** @type {?} */
        var select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: action + " '" + contentEntry.name + "' to ...",
            actionName: action,
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.isNodeFile.bind(this),
            select: select
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        return select;
    };
    /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    ContentNodeDialogService.prototype.openContentNodeDialog = /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(ContentNodeSelectorComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ContentNodeDialogService.prototype.imageResolver = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        /** @type {?} */
        var entry = row.node.entry;
        if (!this.contentService.hasPermission(entry, 'create')) {
            return this.documentListService.getMimeTypeIcon('disable/folder');
        }
        return null;
    };
    /**
     * @param {?} currentNodeId
     * @param {?} row
     * @return {?}
     */
    ContentNodeDialogService.prototype.rowFilter = /**
     * @param {?} currentNodeId
     * @param {?} row
     * @return {?}
     */
    function (currentNodeId, row) {
        /** @type {?} */
        var node = row.node.entry;
        if (node.id === currentNodeId || node.isFile) {
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isNodeFile = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return entry.isFile;
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.hasPermissionOnNodeFolder = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return this.isNodeFolder(entry) && this.contentService.hasPermission(entry, 'create');
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isNodeFolder = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return entry.isFolder;
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isCopyMoveSelectionValid = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.hasEntityCreatePermission = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return this.contentService.hasPermission(entry, 'create');
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ContentNodeDialogService.prototype.isSite = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';
    };
    /** Closes the currently open dialog. */
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    ContentNodeDialogService.prototype.close = /**
     * Closes the currently open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    ContentNodeDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContentNodeDialogService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ContentService },
        { type: DocumentListService },
        { type: SitesService },
        { type: TranslationService }
    ]; };
    ContentNodeDialogService.propDecorators = {
        error: [{ type: Output }]
    };
    return ContentNodeDialogService;
}());
export { ContentNodeDialogService };
if (false) {
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ContentNodeDialogService.prototype.error;
    /** @type {?} */
    ContentNodeDialogService.prototype.dialog;
    /** @type {?} */
    ContentNodeDialogService.prototype.contentService;
    /** @type {?} */
    ContentNodeDialogService.prototype.documentListService;
    /** @type {?} */
    ContentNodeDialogService.prototype.siteService;
    /** @type {?} */
    ContentNodeDialogService.prototype.translation;
}

//# sourceMappingURL=data:application/json;base64,