/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material';
import { MinimalNodeEntity } from 'alfresco-js-api';
import { ShareDialogComponent } from './content-node-share.dialog';
var NodeSharedDirective = /** @class */ (function () {
    function NodeSharedDirective(dialog, zone) {
        this.dialog = dialog;
        this.zone = zone;
        this.isFile = false;
        this.isShared = false;
    }
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.node) {
            this.shareNode(this.node);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeSharedDirective.prototype.shareNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node && node.entry && node.entry.isFile) {
            this.dialog.open(ShareDialogComponent, {
                width: '600px',
                panelClass: 'adf-share-link-dialog',
                data: {
                    node: node,
                    baseShareUrl: this.baseShareUrl
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.onStable.subscribe(function () {
            if (_this.node) {
                _this.isFile = _this.node.entry.isFile;
                _this.isShared = _this.node.entry.properties['qshare:sharedId'];
            }
        });
    };
    NodeSharedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-share]',
                    exportAs: 'adfShare'
                },] }
    ];
    /** @nocollapse */
    NodeSharedDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NgZone }
    ]; };
    NodeSharedDirective.propDecorators = {
        node: [{ type: Input, args: ['adf-share',] }],
        baseShareUrl: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeSharedDirective;
}());
export { NodeSharedDirective };
if (false) {
    /** @type {?} */
    NodeSharedDirective.prototype.isFile;
    /** @type {?} */
    NodeSharedDirective.prototype.isShared;
    /**
     * Node to share.
     * @type {?}
     */
    NodeSharedDirective.prototype.node;
    /** @type {?} */
    NodeSharedDirective.prototype.baseShareUrl;
    /** @type {?} */
    NodeSharedDirective.prototype.dialog;
    /** @type {?} */
    NodeSharedDirective.prototype.zone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNoYXJlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbm9kZS1zaGFyZS9jb250ZW50LW5vZGUtc2hhcmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztJQTBCL0QsNkJBQW9CLE1BQWlCLEVBQVUsSUFBWTtRQUF2QyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBUTtzQkFsQnpDLEtBQUs7d0JBQ0gsS0FBSztLQWlCc0M7Ozs7SUFOL0QscUNBQU87OztJQURQO1FBRUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7S0FDSjs7Ozs7SUFJRCx1Q0FBUzs7OztJQUFULFVBQVUsSUFBdUI7UUFDN0IsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDbkMsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsVUFBVSxFQUFFLHVCQUF1QjtnQkFDbkMsSUFBSSxFQUFFO29CQUNGLElBQUksRUFBRSxJQUFJO29CQUNWLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtpQkFDbEM7YUFDSixDQUFDLENBQUM7U0FDTjtLQUNKOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFDekIsSUFBSSxLQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNYLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO2dCQUNyQyxLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ2pFO1NBQ0osQ0FBQyxDQUFDO0tBQ047O2dCQTlDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxVQUFVO2lCQUN2Qjs7OztnQkFSUSxTQUFTO2dCQURrQyxNQUFNOzs7dUJBaUJyRCxLQUFLLFNBQUMsV0FBVzsrQkFHakIsS0FBSzswQkFHTCxZQUFZLFNBQUMsT0FBTzs7OEJBeEN6Qjs7U0EyQmEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBPbkNoYW5nZXMsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgTWluaW1hbE5vZGVFbnRpdHkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuXG5pbXBvcnQgeyBTaGFyZURpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vY29udGVudC1ub2RlLXNoYXJlLmRpYWxvZyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1zaGFyZV0nLFxuICAgIGV4cG9ydEFzOiAnYWRmU2hhcmUnXG59KVxuZXhwb3J0IGNsYXNzIE5vZGVTaGFyZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgaXNGaWxlOiBib29sZWFuID0gZmFsc2U7XG4gICAgaXNTaGFyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBOb2RlIHRvIHNoYXJlLiAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcbiAgICBASW5wdXQoJ2FkZi1zaGFyZScpXG4gICAgbm9kZTogTWluaW1hbE5vZGVFbnRpdHk7XG5cbiAgICBASW5wdXQoKVxuICAgIGJhc2VTaGFyZVVybDogc3RyaW5nO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2hhcmVOb2RlKHRoaXMubm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nLCBwcml2YXRlIHpvbmU6IE5nWm9uZSkge31cblxuICAgIHNoYXJlTm9kZShub2RlOiBNaW5pbWFsTm9kZUVudGl0eSkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmVudHJ5ICYmIG5vZGUuZW50cnkuaXNGaWxlKSB7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5vcGVuKFNoYXJlRGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICc2MDBweCcsXG4gICAgICAgICAgICAgICAgcGFuZWxDbGFzczogJ2FkZi1zaGFyZS1saW5rLWRpYWxvZycsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICBiYXNlU2hhcmVVcmw6IHRoaXMuYmFzZVNoYXJlVXJsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgdGhpcy56b25lLm9uU3RhYmxlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0ZpbGUgPSB0aGlzLm5vZGUuZW50cnkuaXNGaWxlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTaGFyZWQgPSB0aGlzLm5vZGUuZW50cnkucHJvcGVydGllc1sncXNoYXJlOnNoYXJlZElkJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==