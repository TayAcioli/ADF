/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { of, from, throwError } from 'rxjs';
import { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';
import { switchMap, map } from 'rxjs/operators';
var NodePermissionService = /** @class */ (function () {
    function NodePermissionService(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    /**
     * Gets a list of roles for the current node.
     * @param node The target node
     * @returns Array of strings representing the roles
     */
    /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    NodePermissionService.prototype.getNodeRoles = /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap(function (siteNodeList) {
            if (siteNodeList.list.entries.length > 0) {
                /** @type {?} */
                var siteName = siteNodeList.list.entries[0].entry.name;
                return _this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of(node.permissions.settable);
            }
        }));
    };
    /**
     * Updates the permission role for a node.
     * @param node Target node
     * @param updatedPermissionRole Permission role to update or add
     * @returns Node with updated permission
     */
    /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    NodePermissionService.prototype.updatePermissionRole = /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    function (node, updatedPermissionRole) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    };
    /**
     * Update permissions for a node.
     * @param nodeId ID of the target node
     * @param permissionList New permission settings
     * @returns Node with updated permissions
     */
    /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    NodePermissionService.prototype.updateNodePermissions = /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    function (nodeId, permissionList) {
        var _this = this;
        return this.nodeService.getNode(nodeId).pipe(switchMap(function (node) {
            return _this.getNodeRoles(node).pipe(switchMap(function (nodeRoles) { return of({ node: node, nodeRoles: nodeRoles }); }));
        }), switchMap(function (_a) {
            var node = _a.node, nodeRoles = _a.nodeRoles;
            return _this.updateLocallySetPermissions(node, permissionList, nodeRoles);
        }));
    };
    /**
     * Updates the locally set permissions for a node.
     * @param node ID of the target node
     * @param nodes Permission settings
     * @param nodeRole Permission role
     * @returns Node with updated permissions
     */
    /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    NodePermissionService.prototype.updateLocallySetPermissions = /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    function (node, nodes, nodeRole) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);
        /** @type {?} */
        var duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            /** @type {?} */
            var list = duplicatedPermissions.map(function (permission) { return 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name; }).join(', ');
            /** @type {?} */
            var duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list: list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    };
    /**
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    NodePermissionService.prototype.getDuplicatedPermissions = /**
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    function (nodeLocallySet, permissionListAdded) {
        var _this = this;
        /** @type {?} */
        var duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach(function (permission) {
                /** @type {?} */
                var duplicate = nodeLocallySet.find(function (localPermission) { return _this.isEqualPermission(localPermission, permission); });
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            });
        }
        return duplicatePermissions;
    };
    /**
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    NodePermissionService.prototype.isEqualPermission = /**
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    function (oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    };
    /**
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    NodePermissionService.prototype.transformNodeToPermissionElement = /**
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    function (nodes, nodeRole) {
        return nodes.map(function (node) {
            /** @type {?} */
            var newPermissionElement = /** @type {?} */ ({
                'authorityId': node.entry.properties['cm:authorityName'] ?
                    node.entry.properties['cm:authorityName'] :
                    node.entry.properties['cm:userName'],
                'name': nodeRole,
                'accessStatus': 'ALLOWED'
            });
            return newPermissionElement;
        });
    };
    /**
     * Removes a permission setting from a node.
     * @param node ID of the target node
     * @param permissionToRemove Permission setting to remove
     * @returns Node with modified permissions
     */
    /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    NodePermissionService.prototype.removePermission = /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    function (node, permissionToRemove) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
    };
    /**
     * @param {?} siteName
     * @return {?}
     */
    NodePermissionService.prototype.getGroupMembersBySiteName = /**
     * @param {?} siteName
     * @return {?}
     */
    function (siteName) {
        var _this = this;
        /** @type {?} */
        var groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemeberByGroupName(groupName)
            .pipe(map(function (res) {
            /** @type {?} */
            var displayResult = [];
            res.list.entries.forEach(function (member) {
                displayResult.push(_this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            });
            return displayResult;
        }));
    };
    /**
     * Gets all members related to a group name.
     * @param groupName Name of group to look for members
     * @param opts Extra options supported by JSAPI
     * @returns List of members
     */
    /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JSAPI
     * @return {?} List of members
     */
    NodePermissionService.prototype.getGroupMemeberByGroupName = /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JSAPI
     * @return {?} List of members
     */
    function (groupName, opts) {
        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));
    };
    /**
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    NodePermissionService.prototype.formattedRoleName = /**
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    function (displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    };
    /**
     * @param {?} nodePath
     * @return {?}
     */
    NodePermissionService.prototype.buildRetrieveSiteQueryBody = /**
     * @param {?} nodePath
     * @return {?}
     */
    function (nodePath) {
        /** @type {?} */
        var pathNames = nodePath.map(function (node) { return 'name: "' + node.name + '"'; });
        /** @type {?} */
        var buildedPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': buildedPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    };
    NodePermissionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NodePermissionService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: SearchService },
        { type: NodesApiService },
        { type: TranslationService }
    ]; };
    return NodePermissionService;
}());
export { NodePermissionService };
if (false) {
    /** @type {?} */
    NodePermissionService.prototype.apiService;
    /** @type {?} */
    NodePermissionService.prototype.searchApiService;
    /** @type {?} */
    NodePermissionService.prototype.nodeService;
    /** @type {?} */
    NodePermissionService.prototype.translation;
}

//# sourceMappingURL=data:application/json;base64,