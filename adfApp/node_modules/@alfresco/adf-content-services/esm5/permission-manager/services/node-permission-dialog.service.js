/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';
import { NodePermissionService } from './node-permission.service';
import { ContentService, PermissionsEnum } from '@alfresco/adf-core';
import { switchMap } from 'rxjs/operators';
var NodePermissionDialogService = /** @class */ (function () {
    function NodePermissionDialogService(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    /**
     * Opens a dialog to add permissions to a node.
     * @param node ID of the target node
     * @param title Dialog title
     * @returns Node with updated permissions
     */
    /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    NodePermissionDialogService.prototype.openAddPermissionDialog = /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    function (node, title) {
        if (this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {
            /** @type {?} */
            var confirm_1 = new Subject();
            confirm_1.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            var data = {
                nodeId: node.id,
                title: title,
                confirm: confirm_1
            };
            this.openDialog(data, 'adf-add-permission-dialog', '630px');
            return confirm_1;
        }
        else {
            /** @type {?} */
            var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    };
    /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    NodePermissionDialogService.prototype.openDialog = /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /**
     * Closes the currently-open dialog.
     */
    /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    NodePermissionDialogService.prototype.close = /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * Opens a dialog to update permissions for a node.
     * @param nodeId ID of the target node
     * @param title Dialog title
     * @returns Node with updated permissions
     */
    /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    NodePermissionDialogService.prototype.updateNodePermissionByDialog = /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    function (nodeId, title) {
        var _this = this;
        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })
            .pipe(switchMap(function (node) {
            return _this.openAddPermissionDialog(node.entry, title)
                .pipe(switchMap(function (selection) {
                return _this.nodePermissionService.updateNodePermissions(nodeId, selection);
            }));
        }));
    };
    NodePermissionDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NodePermissionDialogService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NodePermissionService },
        { type: ContentService }
    ]; };
    return NodePermissionDialogService;
}());
export { NodePermissionDialogService };
if (false) {
    /** @type {?} */
    NodePermissionDialogService.prototype.dialog;
    /** @type {?} */
    NodePermissionDialogService.prototype.nodePermissionService;
    /** @type {?} */
    NodePermissionDialogService.prototype.contentService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1wZXJtaXNzaW9uLWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicGVybWlzc2lvbi1tYW5hZ2VyL3NlcnZpY2VzL25vZGUtcGVybWlzc2lvbi1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUc1RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7SUFLdkMscUNBQW9CLE1BQWlCLEVBQ2pCLHVCQUNBO1FBRkEsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQiwwQkFBcUIsR0FBckIscUJBQXFCO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYztLQUNqQztJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsNkRBQXVCOzs7Ozs7SUFBdkIsVUFBd0IsSUFBVSxFQUFFLEtBQWM7UUFDOUMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7O1lBQzVFLElBQU0sU0FBTyxHQUFHLElBQUksT0FBTyxFQUF1QixDQUFDO1lBRW5ELFNBQU8sQ0FBQyxTQUFTLENBQUM7Z0JBQ2QsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNsQyxDQUFDLENBQUM7O1lBRUgsSUFBTSxJQUFJLEdBQTRCO2dCQUNsQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ2YsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osT0FBTyxFQUFFLFNBQU87YUFDbkIsQ0FBQztZQUVGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVELE9BQU8sU0FBTyxDQUFDO1NBQ2xCO2FBQU07O1lBQ0gsSUFBSSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2RSxNQUFNLENBQUMsT0FBTyxHQUFHLHNDQUFzQyxDQUFDO1lBQ3hELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO0tBQ0o7Ozs7Ozs7SUFFTyxnREFBVTs7Ozs7O2NBQUMsSUFBUyxFQUFFLGlCQUF5QixFQUFFLFdBQW1CO1FBQ3hFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEVBQUUsSUFBSSxNQUFBLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDOztJQUdoSDs7T0FFRzs7Ozs7SUFDSCwyQ0FBSzs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMxQjtJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsa0VBQTRCOzs7Ozs7SUFBNUIsVUFBNkIsTUFBZSxFQUFFLEtBQWM7UUFBNUQsaUJBWUM7UUFYRyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQzthQUMzRSxJQUFJLENBQ0QsU0FBUyxDQUFDLFVBQUEsSUFBSTtZQUNWLE9BQU8sS0FBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2lCQUNqRCxJQUFJLENBQ0QsU0FBUyxDQUFDLFVBQUEsU0FBUztnQkFDZixPQUFPLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDOUUsQ0FBQyxDQUNMLENBQUM7U0FDVCxDQUFDLENBQ0wsQ0FBQztLQUNUOztnQkFsRUosVUFBVTs7OztnQkFWRixTQUFTO2dCQU1ULHFCQUFxQjtnQkFDckIsY0FBYzs7c0NBeEJ2Qjs7U0E0QmEsMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWRkUGVybWlzc2lvbkRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBZGRQZXJtaXNzaW9uRGlhbG9nRGF0YSB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tZGlhbG9nLWRhdGEuaW50ZXJmYWNlJztcbmltcG9ydCB7IE1pbmltYWxOb2RlRW50aXR5LCBNaW5pbWFsTm9kZUVudHJ5RW50aXR5LCBOb2RlIH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IE5vZGVQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4vbm9kZS1wZXJtaXNzaW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UsIFBlcm1pc3Npb25zRW51bSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb2RlUGVybWlzc2lvbkRpYWxvZ1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5vZGVQZXJtaXNzaW9uU2VydmljZTogTm9kZVBlcm1pc3Npb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkaWFsb2cgdG8gYWRkIHBlcm1pc3Npb25zIHRvIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZSBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgRGlhbG9nIHRpdGxlXG4gICAgICogQHJldHVybnMgTm9kZSB3aXRoIHVwZGF0ZWQgcGVybWlzc2lvbnNcbiAgICAgKi9cbiAgICBvcGVuQWRkUGVybWlzc2lvbkRpYWxvZyhub2RlOiBOb2RlLCB0aXRsZT86IHN0cmluZyk6IE9ic2VydmFibGU8TWluaW1hbE5vZGVFbnRpdHlbXT4ge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50U2VydmljZS5oYXNQZXJtaXNzaW9uKG5vZGUsIFBlcm1pc3Npb25zRW51bS5VUERBVEVQRVJNSVNTSU9OUykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpcm0gPSBuZXcgU3ViamVjdDxNaW5pbWFsTm9kZUVudGl0eVtdPigpO1xuXG4gICAgICAgICAgICBjb25maXJtLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHRoaXMuY2xvc2UuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IEFkZFBlcm1pc3Npb25EaWFsb2dEYXRhID0ge1xuICAgICAgICAgICAgICAgIG5vZGVJZDogbm9kZS5pZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgY29uZmlybTogY29uZmlybVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5vcGVuRGlhbG9nKGRhdGEsICdhZGYtYWRkLXBlcm1pc3Npb24tZGlhbG9nJywgJzYzMHB4Jyk7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlybTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBlcnJvcnMgPSBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogeyBzdGF0dXNDb2RlOiA0MDMgfSB9KSk7XG4gICAgICAgICAgICBlcnJvcnMubWVzc2FnZSA9ICdQRVJNSVNTSU9OX01BTkFHRVIuRVJST1IuTk9ULUFMTE9XRUQnO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbkRpYWxvZyhkYXRhOiBhbnksIGN1cnJlbnRQYW5lbENsYXNzOiBzdHJpbmcsIGNob3NlbldpZHRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cub3BlbihBZGRQZXJtaXNzaW9uRGlhbG9nQ29tcG9uZW50LCB7IGRhdGEsIHBhbmVsQ2xhc3M6IGN1cnJlbnRQYW5lbENsYXNzLCB3aWR0aDogY2hvc2VuV2lkdGggfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjdXJyZW50bHktb3BlbiBkaWFsb2cuXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nLmNsb3NlQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkaWFsb2cgdG8gdXBkYXRlIHBlcm1pc3Npb25zIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgRGlhbG9nIHRpdGxlXG4gICAgICogQHJldHVybnMgTm9kZSB3aXRoIHVwZGF0ZWQgcGVybWlzc2lvbnNcbiAgICAgKi9cbiAgICB1cGRhdGVOb2RlUGVybWlzc2lvbkJ5RGlhbG9nKG5vZGVJZD86IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPE1pbmltYWxOb2RlRW50cnlFbnRpdHk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuZ2V0Tm9kZShub2RlSWQsIHsgaW5jbHVkZTogWydhbGxvd2FibGVPcGVyYXRpb25zJ10gfSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChub2RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3BlbkFkZFBlcm1pc3Npb25EaWFsb2cobm9kZS5lbnRyeSwgdGl0bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoc2VsZWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZVBlcm1pc3Npb25TZXJ2aWNlLnVwZGF0ZU5vZGVQZXJtaXNzaW9ucyhub2RlSWQsIHNlbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgfVxufVxuIl19