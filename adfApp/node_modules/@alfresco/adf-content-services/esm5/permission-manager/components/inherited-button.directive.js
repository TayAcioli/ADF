/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { NodesApiService, ContentService, PermissionsEnum } from '@alfresco/adf-core';
var InheritPermissionDirective = /** @class */ (function () {
    function InheritPermissionDirective(nodeService, contentService) {
        this.nodeService = nodeService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated.
         */
        this.updated = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InheritPermissionDirective.prototype.onInheritPermissionClicked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.nodeService.getNode(this.nodeId).subscribe(function (node) {
            if (_this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {
                /** @type {?} */
                var nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };
                _this.nodeService.updateNode(_this.nodeId, nodeBody, { include: ['permissions'] }).subscribe(function (nodeUpdated) {
                    _this.updated.emit(nodeUpdated);
                }, function (error) { return _this.error.emit(error); });
            }
            else {
                _this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        });
    };
    InheritPermissionDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                    host: {
                        'role': 'button',
                        '(click)': 'onInheritPermissionClicked()'
                    }
                },] }
    ];
    /** @nocollapse */
    InheritPermissionDirective.ctorParameters = function () { return [
        { type: NodesApiService },
        { type: ContentService }
    ]; };
    InheritPermissionDirective.propDecorators = {
        nodeId: [{ type: Input }],
        updated: [{ type: Output }],
        error: [{ type: Output }]
    };
    return InheritPermissionDirective;
}());
export { InheritPermissionDirective };
if (false) {
    /**
     * ID of the node to add/remove inherited permissions.
     * @type {?}
     */
    InheritPermissionDirective.prototype.nodeId;
    /**
     * Emitted when the node is updated.
     * @type {?}
     */
    InheritPermissionDirective.prototype.updated;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    InheritPermissionDirective.prototype.error;
    /** @type {?} */
    InheritPermissionDirective.prototype.nodeService;
    /** @type {?} */
    InheritPermissionDirective.prototype.contentService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5oZXJpdGVkLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJwZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy9pbmhlcml0ZWQtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQXdCbEYsb0NBQW9CLFdBQTRCLEVBQzVCO1FBREEsZ0JBQVcsR0FBWCxXQUFXLENBQWlCO1FBQzVCLG1CQUFjLEdBQWQsY0FBYzs7Ozt1QkFQYyxJQUFJLFlBQVksRUFBMEI7Ozs7cUJBSS9ELElBQUksWUFBWSxFQUFPO0tBSWpEOzs7O0lBRUQsK0RBQTBCOzs7SUFBMUI7UUFBQSxpQkFXQztRQVZHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUE0QjtZQUN6RSxJQUFJLEtBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsRUFBRTs7Z0JBQzVFLElBQU0sUUFBUSxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQztnQkFDbkcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUMsV0FBbUM7b0JBQzNILEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUNsQyxFQUFFLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQzthQUN6QztpQkFBTTtnQkFDSCxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO2FBQzNEO1NBQ0osQ0FBQyxDQUFDO0tBQ047O2dCQXBDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDJFQUEyRTtvQkFDckYsSUFBSSxFQUFFO3dCQUNGLE1BQU0sRUFBRSxRQUFRO3dCQUNoQixTQUFTLEVBQUUsOEJBQThCO3FCQUM1QztpQkFDSjs7OztnQkFUUSxlQUFlO2dCQUFFLGNBQWM7Ozt5QkFhbkMsS0FBSzswQkFJTCxNQUFNO3dCQUlOLE1BQU07O3FDQXhDWDs7U0E2QmEsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVzQXBpU2VydmljZSwgQ29udGVudFNlcnZpY2UsIFBlcm1pc3Npb25zRW51bSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudHJ5RW50aXR5IH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdidXR0b25bYWRmLWluaGVyaXQtcGVybWlzc2lvbl0sIG1hdC1idXR0b24tdG9nZ2xlW2FkZi1pbmhlcml0LXBlcm1pc3Npb25dJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdyb2xlJzogJ2J1dHRvbicsXG4gICAgICAgICcoY2xpY2spJzogJ29uSW5oZXJpdFBlcm1pc3Npb25DbGlja2VkKCknXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBJbmhlcml0UGVybWlzc2lvbkRpcmVjdGl2ZSB7XG5cbiAgICAvKiogSUQgb2YgdGhlIG5vZGUgdG8gYWRkL3JlbW92ZSBpbmhlcml0ZWQgcGVybWlzc2lvbnMuICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIG5vZGUgaXMgdXBkYXRlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICB1cGRhdGVkOiBFdmVudEVtaXR0ZXI8TWluaW1hbE5vZGVFbnRyeUVudGl0eT4gPSBuZXcgRXZlbnRFbWl0dGVyPE1pbmltYWxOb2RlRW50cnlFbnRpdHk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm9kZVNlcnZpY2U6IE5vZGVzQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnRTZXJ2aWNlOiBDb250ZW50U2VydmljZSkge1xuICAgIH1cblxuICAgIG9uSW5oZXJpdFBlcm1pc3Npb25DbGlja2VkKCkge1xuICAgICAgICB0aGlzLm5vZGVTZXJ2aWNlLmdldE5vZGUodGhpcy5ub2RlSWQpLnN1YnNjcmliZSgobm9kZTogTWluaW1hbE5vZGVFbnRyeUVudGl0eSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudFNlcnZpY2UuaGFzUGVybWlzc2lvbihub2RlLCBQZXJtaXNzaW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUJvZHkgPSB7IHBlcm1pc3Npb25zOiB7IGlzSW5oZXJpdGFuY2VFbmFibGVkOiAhbm9kZS5wZXJtaXNzaW9ucy5pc0luaGVyaXRhbmNlRW5hYmxlZCB9IH07XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU2VydmljZS51cGRhdGVOb2RlKHRoaXMubm9kZUlkLCBub2RlQm9keSwgeyBpbmNsdWRlOiBbJ3Blcm1pc3Npb25zJ10gfSkuc3Vic2NyaWJlKChub2RlVXBkYXRlZDogTWluaW1hbE5vZGVFbnRyeUVudGl0eSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZWQuZW1pdChub2RlVXBkYXRlZCk7XG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB0aGlzLmVycm9yLmVtaXQoZXJyb3IpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KCdQRVJNSVNTSU9OX01BTkFHRVIuRVJST1IuTk9ULUFMTE9XRUQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iXX0=