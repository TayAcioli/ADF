/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input, EventEmitter, Output } from '@angular/core';
import { NodesApiService } from '@alfresco/adf-core';
import { PermissionDisplayModel } from '../../models/permission.model';
import { NodePermissionService } from '../../services/node-permission.service';
var PermissionListComponent = /** @class */ (function () {
    function PermissionListComponent(nodeService, nodePermissionService) {
        this.nodeService = nodeService;
        this.nodePermissionService = nodePermissionService;
        /**
         * ID of the node whose permissions you want to show.
         */
        this.nodeId = '';
        /**
         * Emitted when the permission is updated.
         */
        this.update = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PermissionListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.fetchNodePermissions();
    };
    /**
     * @return {?}
     */
    PermissionListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        this.fetchNodePermissions();
    };
    /**
     * @return {?}
     */
    PermissionListComponent.prototype.fetchNodePermissions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.nodeService.getNode(this.nodeId).subscribe(function (node) {
            _this.actualNode = node;
            _this.permissionList = _this.getPermissionList(node);
            _this.nodePermissionService.getNodeRoles(node).subscribe(function (settableList) {
                _this.settableRoles = settableList;
            });
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    PermissionListComponent.prototype.getPermissionList = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var allPermissions = [];
        if (node.permissions.locallySet) {
            node.permissions.locallySet.map(function (element) {
                /** @type {?} */
                var permission = new PermissionDisplayModel(element);
                allPermissions.push(permission);
            });
        }
        if (node.permissions.inherited) {
            node.permissions.inherited.map(function (element) {
                /** @type {?} */
                var permissionInherited = new PermissionDisplayModel(element);
                permissionInherited.isInherited = true;
                allPermissions.push(permissionInherited);
            });
        }
        return allPermissions;
    };
    /**
     * @param {?} event
     * @param {?} permissionRow
     * @return {?}
     */
    PermissionListComponent.prototype.saveNewRole = /**
     * @param {?} event
     * @param {?} permissionRow
     * @return {?}
     */
    function (event, permissionRow) {
        var _this = this;
        /** @type {?} */
        var updatedPermissionRole = this.buildUpdatedPermission(event.value, permissionRow);
        this.nodePermissionService.updatePermissionRole(this.actualNode, updatedPermissionRole)
            .subscribe(function (node) {
            _this.update.emit(updatedPermissionRole);
        });
    };
    /**
     * @param {?} newRole
     * @param {?} permissionRow
     * @return {?}
     */
    PermissionListComponent.prototype.buildUpdatedPermission = /**
     * @param {?} newRole
     * @param {?} permissionRow
     * @return {?}
     */
    function (newRole, permissionRow) {
        /** @type {?} */
        var permissionRole = {};
        permissionRole.accessStatus = permissionRow.accessStatus;
        permissionRole.name = newRole;
        permissionRole.authorityId = permissionRow.authorityId;
        return permissionRole;
    };
    /**
     * @param {?} permissionRow
     * @return {?}
     */
    PermissionListComponent.prototype.removePermission = /**
     * @param {?} permissionRow
     * @return {?}
     */
    function (permissionRow) {
        var _this = this;
        this.nodePermissionService.removePermission(this.actualNode, permissionRow).subscribe(function (node) {
            _this.update.emit(node);
        }, function (error) { return _this.error.emit(error); });
    };
    PermissionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-permission-list',
                    template: "<div id=\"adf-permission-display-container\" class=\"adf-display-permission-container\">\n\n    <div *ngIf=\"!permissionList || !permissionList.length\" id=\"adf-no-permissions-template\">\n        <div #ref>\n            <ng-content select=\"adf-no-permission-template\"></ng-content>\n        </div>\n\n        <p *ngIf=\"ref.children.length == 0\">\n            {{ 'PERMISSION_MANAGER.PERMISSION_DISPLAY.NO_PERMISSIONS' | translate }}\n        </p>\n    </div>\n\n    <adf-datatable [rows]=\"permissionList\" class=\"adf-datatable-permission\" *ngIf=\"permissionList && permissionList.length\">\n        <data-columns>\n            <data-column key=\"icon\" type=\"icon\" [sortable]=\"false\">\n            </data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.AUTHORITY_ID' | translate}}\" key=\"authorityId\"></data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE' | translate}}\" key=\"name\">\n                <ng-template let-entry=\"$implicit\">\n                    <mat-form-field *ngIf=\"!entry.row.getValue('isInherited') else show_only_label\">\n                        <mat-select id=\"adf-select-role-permission\"\n                                    [placeholder]=\"entry.data.getValue(entry.row, entry.col)\"\n                                    value=\"{{entry.data.getValue(entry.row, entry.col)}}\"\n                                    (selectionChange)=\"saveNewRole($event, entry.row.obj)\">\n                          <mat-option *ngFor=\"let role of settableRoles\" [value]=\"role\">\n                            {{ role }}\n                          </mat-option>\n                        </mat-select>\n                      </mat-form-field>\n                      <ng-template #show_only_label>\n                          <span>{{entry.data.getValue(entry.row, entry.col)}}</span>\n                      </ng-template>\n                </ng-template>\n            </data-column>\n            <data-column title=\"{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.INHERITED' | translate}}\" key=\"isInherited\">\n                <ng-template let-entry=\"$implicit\">\n                    <mat-chip-list>\n                        <mat-chip *ngIf=\"!!entry.data.getValue(entry.row, entry.col) else locally_set_chip\"\n                                id=\"adf-permission-inherited-label\"\n                                color=\"primary\" selected=\"true\">{{'PERMISSION_MANAGER.PERMISSION_DISPLAY.INHERITED' | translate}}</mat-chip>\n                    </mat-chip-list>\n                    <ng-template #locally_set_chip>\n                            <mat-chip-list>\n                                    <mat-chip id=\"adf-permission-locallyset-label\"\n                                              color=\"accent\" selected=\"true\">\n                                              {{'PERMISSION_MANAGER.PERMISSION_DISPLAY.LOCALLY_SET' | translate}}\n                                    </mat-chip>\n                            </mat-chip-list>\n                    </ng-template>\n                </ng-template>\n            </data-column>\n            <data-column key=\"delete\">\n            <ng-template let-entry=\"$implicit\">\n                <button *ngIf=\"!entry.row.getValue('isInherited')\" mat-icon-button color=\"primary\" (click)=\"removePermission(entry.row.obj)\">\n                    <mat-icon>highlight_off</mat-icon>\n                </button>\n            </ng-template>\n        </data-column>\n        </data-columns>\n    </adf-datatable>\n</div>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PermissionListComponent.ctorParameters = function () { return [
        { type: NodesApiService },
        { type: NodePermissionService }
    ]; };
    PermissionListComponent.propDecorators = {
        nodeId: [{ type: Input }],
        update: [{ type: Output }],
        error: [{ type: Output }]
    };
    return PermissionListComponent;
}());
export { PermissionListComponent };
if (false) {
    /**
     * ID of the node whose permissions you want to show.
     * @type {?}
     */
    PermissionListComponent.prototype.nodeId;
    /**
     * Emitted when the permission is updated.
     * @type {?}
     */
    PermissionListComponent.prototype.update;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    PermissionListComponent.prototype.error;
    /** @type {?} */
    PermissionListComponent.prototype.permissionList;
    /** @type {?} */
    PermissionListComponent.prototype.settableRoles;
    /** @type {?} */
    PermissionListComponent.prototype.actualNode;
    /** @type {?} */
    PermissionListComponent.prototype.nodeService;
    /** @type {?} */
    PermissionListComponent.prototype.nodePermissionService;
}

//# sourceMappingURL=data:application/json;base64,