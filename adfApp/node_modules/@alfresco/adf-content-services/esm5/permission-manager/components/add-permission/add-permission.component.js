/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';
import { NodePermissionService } from '../../services/node-permission.service';
import { NodesApiService, ContentService, PermissionsEnum } from '@alfresco/adf-core';
var AddPermissionComponent = /** @class */ (function () {
    function AddPermissionComponent(nodePermissionService, nodeApiService, contentService) {
        var _this = this;
        this.nodePermissionService = nodePermissionService;
        this.nodeApiService = nodeApiService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs during the update.
         */
        this.error = new EventEmitter();
        this.selectedItems = [];
        this.nodeApiService.getNode(this.nodeId).subscribe(function (node) { return _this.currentNode = node; });
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    AddPermissionComponent.prototype.onSelect = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        this.selectedItems = selection;
    };
    /**
     * @return {?}
     */
    AddPermissionComponent.prototype.isAddEnabled = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasPermission(this.currentNode, PermissionsEnum.UPDATEPERMISSIONS) &&
            this.selectedItems.length !== 0;
    };
    /**
     * @return {?}
     */
    AddPermissionComponent.prototype.applySelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.contentService.hasPermission(this.currentNode, PermissionsEnum.UPDATEPERMISSIONS)) {
            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)
                .subscribe(function (node) {
                _this.success.emit(node);
            }, function (error) {
                _this.error.emit(error);
            });
        }
    };
    AddPermissionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-add-permission',
                    template: "<adf-add-permission-panel\n    (select)=\"onSelect($event)\">\n</adf-add-permission-panel>\n<div id=\"adf-add-permission-actions\">\n   <button mat-button\n          id=\"adf-add-permission-action-button\"\n          class=\"adf-permission-action\"\n          [disabled]=\"!isAddEnabled()\"\n          (click)=\"applySelection()\">\n     {{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}\n    </button>\n</div>\n\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AddPermissionComponent.ctorParameters = function () { return [
        { type: NodePermissionService },
        { type: NodesApiService },
        { type: ContentService }
    ]; };
    AddPermissionComponent.propDecorators = {
        nodeId: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return AddPermissionComponent;
}());
export { AddPermissionComponent };
if (false) {
    /**
     * ID of the target node.
     * @type {?}
     */
    AddPermissionComponent.prototype.nodeId;
    /**
     * Emitted when the node is updated successfully.
     * @type {?}
     */
    AddPermissionComponent.prototype.success;
    /**
     * Emitted when an error occurs during the update.
     * @type {?}
     */
    AddPermissionComponent.prototype.error;
    /** @type {?} */
    AddPermissionComponent.prototype.selectedItems;
    /** @type {?} */
    AddPermissionComponent.prototype.currentNode;
    /** @type {?} */
    AddPermissionComponent.prototype.currentNodeRoles;
    /** @type {?} */
    AddPermissionComponent.prototype.nodePermissionService;
    /** @type {?} */
    AddPermissionComponent.prototype.nodeApiService;
    /** @type {?} */
    AddPermissionComponent.prototype.contentService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXBlcm1pc3Npb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicGVybWlzc2lvbi1tYW5hZ2VyL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0lBMEJsRixnQ0FBb0IscUJBQTRDLEVBQzVDLGdCQUNBO1FBRnBCLGlCQUlDO1FBSm1CLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsbUJBQWMsR0FBZCxjQUFjO1FBQ2QsbUJBQWMsR0FBZCxjQUFjOzs7O3VCQVpjLElBQUksWUFBWSxFQUFFOzs7O3FCQUl2QyxJQUFJLFlBQVksRUFBRTs2QkFFUixFQUFFO1FBT25DLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO0tBQ3pGOzs7OztJQUVELHlDQUFROzs7O0lBQVIsVUFBUyxTQUE4QjtRQUNuQyxJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztLQUNsQzs7OztJQUVELDZDQUFZOzs7SUFBWjtRQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsaUJBQWlCLENBQUM7WUFDckYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0tBQzNDOzs7O0lBRUQsK0NBQWM7OztJQUFkO1FBQUEsaUJBV0M7UUFWRyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDeEYsSUFBSSxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQztpQkFDNUUsU0FBUyxDQUNOLFVBQUMsSUFBSTtnQkFDRCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzQixFQUNELFVBQUMsS0FBSztnQkFDRixLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQixDQUFDLENBQUM7U0FDZDtLQUNKOztnQkFsREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLHliQUE4QztvQkFFOUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkFSUSxxQkFBcUI7Z0JBQ3JCLGVBQWU7Z0JBQUUsY0FBYzs7O3lCQVduQyxLQUFLOzBCQUlMLE1BQU07d0JBSU4sTUFBTTs7aUNBdkNYOztTQTRCYSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1pbmltYWxOb2RlRW50aXR5LCBNaW5pbWFsTm9kZUVudHJ5RW50aXR5IH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IE5vZGVQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25vZGUtcGVybWlzc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vZGVzQXBpU2VydmljZSwgQ29udGVudFNlcnZpY2UsIFBlcm1pc3Npb25zRW51bSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWFkZC1wZXJtaXNzaW9uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYWRkLXBlcm1pc3Npb24uY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2FkZC1wZXJtaXNzaW9uLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBBZGRQZXJtaXNzaW9uQ29tcG9uZW50IHtcblxuICAgIC8qKiBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIG5vZGUgaXMgdXBkYXRlZCBzdWNjZXNzZnVsbHkuICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPE1pbmltYWxOb2RlRW50cnlFbnRpdHk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIHRoZSB1cGRhdGUuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgc2VsZWN0ZWRJdGVtczogTWluaW1hbE5vZGVFbnRpdHlbXSA9IFtdO1xuICAgIGN1cnJlbnROb2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5O1xuICAgIGN1cnJlbnROb2RlUm9sZXM6IHN0cmluZ1tdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlUGVybWlzc2lvblNlcnZpY2U6IE5vZGVQZXJtaXNzaW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5vZGVBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5ub2RlQXBpU2VydmljZS5nZXROb2RlKHRoaXMubm9kZUlkKS5zdWJzY3JpYmUoKG5vZGUpID0+IHRoaXMuY3VycmVudE5vZGUgPSBub2RlKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChzZWxlY3Rpb246IE1pbmltYWxOb2RlRW50aXR5W10pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zID0gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIGlzQWRkRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuaGFzUGVybWlzc2lvbih0aGlzLmN1cnJlbnROb2RlLCBQZXJtaXNzaW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCAhPT0gMDtcbiAgICB9XG5cbiAgICBhcHBseVNlbGVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFNlcnZpY2UuaGFzUGVybWlzc2lvbih0aGlzLmN1cnJlbnROb2RlLCBQZXJtaXNzaW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVQZXJtaXNzaW9uU2VydmljZS51cGRhdGVOb2RlUGVybWlzc2lvbnModGhpcy5ub2RlSWQsIHRoaXMuc2VsZWN0ZWRJdGVtcylcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==