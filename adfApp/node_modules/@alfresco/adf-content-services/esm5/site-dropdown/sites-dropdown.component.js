/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { SitesService, LogService } from '@alfresco/adf-core';
import { SitePaging } from 'alfresco-js-api';
/** @enum {string} */
var Relations = {
    Members: 'members',
    Containers: 'containers',
};
export { Relations };
var DropdownSitesComponent = /** @class */ (function () {
    function DropdownSitesComponent(sitesService, logService) {
        this.sitesService = sitesService;
        this.logService = logService;
        /**
         * Hide the "My Files" option.
         */
        this.hideMyFiles = false;
        /**
         * A custom list of sites to be displayed by the dropdown. If no value
         * is given, the sites of the current user are displayed by default. A
         * list of objects only with properties 'title' and 'guid' is enough to
         * be able to display the dropdown.
         */
        this.siteList = null;
        /**
         * Id of the selected site
         */
        this.value = null;
        /**
         * Text or a translation key to act as a placeholder. Default value is the
         * key "DROPDOWN.PLACEHOLDER_LABEL".
         */
        this.placeholder = 'DROPDOWN.PLACEHOLDER_LABEL';
        /**
         * Emitted when the user selects a site. When the default option is selected,
         * an empty model is emitted.
         */
        this.change = new EventEmitter();
        this.selected = null;
        this.MY_FILES_VALUE = '-my-';
    }
    /**
     * @return {?}
     */
    DropdownSitesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.siteList) {
            this.setDefaultSiteList();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropdownSitesComponent.prototype.selectedSite = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.change.emit(event.value);
    };
    /**
     * @return {?}
     */
    DropdownSitesComponent.prototype.setDefaultSiteList = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var extendedOptions = null;
        if (this.relations) {
            extendedOptions = { relations: [this.relations] };
        }
        this.sitesService.getSites(extendedOptions).subscribe(function (result) {
            _this.siteList = _this.relations === Relations.Members ? _this.filteredResultsByMember(result) : result;
            if (!_this.hideMyFiles) {
                /** @type {?} */
                var myItem = { entry: { id: '-my-', guid: '-my-', title: 'DROPDOWN.MY_FILES_OPTION' } };
                _this.siteList.list.entries.unshift(myItem);
                if (!_this.value) {
                    _this.value = '-my-';
                }
            }
            _this.selected = _this.siteList.list.entries.find(function (site) { return site.entry.id === _this.value; });
        }, function (error) {
            _this.logService.error(error);
        });
    };
    /**
     * @param {?} sites
     * @return {?}
     */
    DropdownSitesComponent.prototype.filteredResultsByMember = /**
     * @param {?} sites
     * @return {?}
     */
    function (sites) {
        var _this = this;
        /** @type {?} */
        var loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();
        sites.list.entries = sites.list.entries.filter(function (site) { return _this.isCurrentUserMember(site, loggedUserName); });
        return sites;
    };
    /**
     * @param {?} site
     * @param {?} loggedUserName
     * @return {?}
     */
    DropdownSitesComponent.prototype.isCurrentUserMember = /**
     * @param {?} site
     * @param {?} loggedUserName
     * @return {?}
     */
    function (site, loggedUserName) {
        return site.entry.visibility === 'PUBLIC' ||
            !!site.relations.members.list.entries.find(function (member) {
                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();
            });
    };
    DropdownSitesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-sites-dropdown',
                    template: "<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            data-automation-id=\"site-my-files-select\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-sites-dropdown' },
                    styles: [".adf-sites-dropdown.full-width .mat-form-field{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    DropdownSitesComponent.ctorParameters = function () { return [
        { type: SitesService },
        { type: LogService }
    ]; };
    DropdownSitesComponent.propDecorators = {
        hideMyFiles: [{ type: Input }],
        siteList: [{ type: Input }],
        value: [{ type: Input }],
        placeholder: [{ type: Input }],
        relations: [{ type: Input }],
        change: [{ type: Output }]
    };
    return DropdownSitesComponent;
}());
export { DropdownSitesComponent };
if (false) {
    /**
     * Hide the "My Files" option.
     * @type {?}
     */
    DropdownSitesComponent.prototype.hideMyFiles;
    /**
     * A custom list of sites to be displayed by the dropdown. If no value
     * is given, the sites of the current user are displayed by default. A
     * list of objects only with properties 'title' and 'guid' is enough to
     * be able to display the dropdown.
     * @type {?}
     */
    DropdownSitesComponent.prototype.siteList;
    /**
     * Id of the selected site
     * @type {?}
     */
    DropdownSitesComponent.prototype.value;
    /**
     * Text or a translation key to act as a placeholder. Default value is the
     * key "DROPDOWN.PLACEHOLDER_LABEL".
     * @type {?}
     */
    DropdownSitesComponent.prototype.placeholder;
    /**
     * Filter for the results of the sites query. Possible values are
     * "members" and "containers". When "members" is used, the site list
     * will be restricted to the sites that the user is a member of.
     * @type {?}
     */
    DropdownSitesComponent.prototype.relations;
    /**
     * Emitted when the user selects a site. When the default option is selected,
     * an empty model is emitted.
     * @type {?}
     */
    DropdownSitesComponent.prototype.change;
    /** @type {?} */
    DropdownSitesComponent.prototype.selected;
    /** @type {?} */
    DropdownSitesComponent.prototype.MY_FILES_VALUE;
    /** @type {?} */
    DropdownSitesComponent.prototype.sitesService;
    /** @type {?} */
    DropdownSitesComponent.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,