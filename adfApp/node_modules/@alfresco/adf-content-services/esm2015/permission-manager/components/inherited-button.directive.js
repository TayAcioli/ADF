/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { NodesApiService, ContentService, PermissionsEnum } from '@alfresco/adf-core';
export class InheritPermissionDirective {
    /**
     * @param {?} nodeService
     * @param {?} contentService
     */
    constructor(nodeService, contentService) {
        this.nodeService = nodeService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated.
         */
        this.updated = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onInheritPermissionClicked() {
        this.nodeService.getNode(this.nodeId).subscribe((node) => {
            if (this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {
                /** @type {?} */
                const nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };
                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((nodeUpdated) => {
                    this.updated.emit(nodeUpdated);
                }, (error) => this.error.emit(error));
            }
            else {
                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        });
    }
}
InheritPermissionDirective.decorators = [
    { type: Directive, args: [{
                selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                host: {
                    'role': 'button',
                    '(click)': 'onInheritPermissionClicked()'
                }
            },] }
];
/** @nocollapse */
InheritPermissionDirective.ctorParameters = () => [
    { type: NodesApiService },
    { type: ContentService }
];
InheritPermissionDirective.propDecorators = {
    nodeId: [{ type: Input }],
    updated: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * ID of the node to add/remove inherited permissions.
     * @type {?}
     */
    InheritPermissionDirective.prototype.nodeId;
    /**
     * Emitted when the node is updated.
     * @type {?}
     */
    InheritPermissionDirective.prototype.updated;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    InheritPermissionDirective.prototype.error;
    /** @type {?} */
    InheritPermissionDirective.prototype.nodeService;
    /** @type {?} */
    InheritPermissionDirective.prototype.contentService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5oZXJpdGVkLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJwZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy9pbmhlcml0ZWQtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBVXRGLE1BQU07Ozs7O0lBY0YsWUFBb0IsV0FBNEIsRUFDNUI7UUFEQSxnQkFBVyxHQUFYLFdBQVcsQ0FBaUI7UUFDNUIsbUJBQWMsR0FBZCxjQUFjOzs7O3VCQVBjLElBQUksWUFBWSxFQUEwQjs7OztxQkFJL0QsSUFBSSxZQUFZLEVBQU87S0FJakQ7Ozs7SUFFRCwwQkFBMEI7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQTRCLEVBQUUsRUFBRTtZQUM3RSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsaUJBQWlCLENBQUMsRUFBRTs7Z0JBQzVFLE1BQU0sUUFBUSxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQztnQkFDbkcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBbUMsRUFBRSxFQUFFO29CQUMvSCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDbEMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUN6QztpQkFBTTtnQkFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO2FBQzNEO1NBQ0osQ0FBQyxDQUFDO0tBQ047OztZQXBDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJFQUEyRTtnQkFDckYsSUFBSSxFQUFFO29CQUNGLE1BQU0sRUFBRSxRQUFRO29CQUNoQixTQUFTLEVBQUUsOEJBQThCO2lCQUM1QzthQUNKOzs7O1lBVFEsZUFBZTtZQUFFLGNBQWM7OztxQkFhbkMsS0FBSztzQkFJTCxNQUFNO29CQUlOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZXNBcGlTZXJ2aWNlLCBDb250ZW50U2VydmljZSwgUGVybWlzc2lvbnNFbnVtIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IE1pbmltYWxOb2RlRW50cnlFbnRpdHkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2J1dHRvblthZGYtaW5oZXJpdC1wZXJtaXNzaW9uXSwgbWF0LWJ1dHRvbi10b2dnbGVbYWRmLWluaGVyaXQtcGVybWlzc2lvbl0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ3JvbGUnOiAnYnV0dG9uJyxcbiAgICAgICAgJyhjbGljayknOiAnb25Jbmhlcml0UGVybWlzc2lvbkNsaWNrZWQoKSdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIEluaGVyaXRQZXJtaXNzaW9uRGlyZWN0aXZlIHtcblxuICAgIC8qKiBJRCBvZiB0aGUgbm9kZSB0byBhZGQvcmVtb3ZlIGluaGVyaXRlZCBwZXJtaXNzaW9ucy4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbm9kZSBpcyB1cGRhdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHVwZGF0ZWQ6IEV2ZW50RW1pdHRlcjxNaW5pbWFsTm9kZUVudHJ5RW50aXR5PiA9IG5ldyBFdmVudEVtaXR0ZXI8TWluaW1hbE5vZGVFbnRyeUVudGl0eT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlU2VydmljZTogTm9kZXNBcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgb25Jbmhlcml0UGVybWlzc2lvbkNsaWNrZWQoKSB7XG4gICAgICAgIHRoaXMubm9kZVNlcnZpY2UuZ2V0Tm9kZSh0aGlzLm5vZGVJZCkuc3Vic2NyaWJlKChub2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50U2VydmljZS5oYXNQZXJtaXNzaW9uKG5vZGUsIFBlcm1pc3Npb25zRW51bS5VUERBVEVQRVJNSVNTSU9OUykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlQm9keSA9IHsgcGVybWlzc2lvbnM6IHsgaXNJbmhlcml0YW5jZUVuYWJsZWQ6ICFub2RlLnBlcm1pc3Npb25zLmlzSW5oZXJpdGFuY2VFbmFibGVkIH0gfTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTZXJ2aWNlLnVwZGF0ZU5vZGUodGhpcy5ub2RlSWQsIG5vZGVCb2R5LCB7IGluY2x1ZGU6IFsncGVybWlzc2lvbnMnXSB9KS5zdWJzY3JpYmUoKG5vZGVVcGRhdGVkOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlZC5lbWl0KG5vZGVVcGRhdGVkKTtcbiAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHRoaXMuZXJyb3IuZW1pdChlcnJvcikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoJ1BFUk1JU1NJT05fTUFOQUdFUi5FUlJPUi5OT1QtQUxMT1dFRCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiJdfQ==