/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map } from 'rxjs/operators';
export class ContentMetadataService {
    /**
     * @param {?} basicPropertiesService
     * @param {?} contentMetadataConfigFactory
     * @param {?} propertyGroupTranslatorService
     * @param {?} propertyDescriptorsService
     */
    constructor(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getBasicProperties(node) {
        return of(this.basicPropertiesService.getProperties(node));
    }
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    getGroupedProperties(node, presetName = 'default') {
        /** @type {?} */
        let groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            const config = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            const groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter(groupName => config.isGroupAllowed(groupName));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(map(groups => config.reorganiseByConfig(groups)), map(groups => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties)));
            }
        }
        return groupedProperties;
    }
}
ContentMetadataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ContentMetadataService.ctorParameters = () => [
    { type: BasicPropertiesService },
    { type: ContentMetadataConfigFactory },
    { type: PropertyGroupTranslatorService },
    { type: PropertyDescriptorsService }
];
if (false) {
    /** @type {?} */
    ContentMetadataService.prototype.basicPropertiesService;
    /** @type {?} */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /** @type {?} */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /** @type {?} */
    ContentMetadataService.prototype.propertyDescriptorsService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBR3RGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdyQyxNQUFNOzs7Ozs7O0lBRUYsWUFBb0Isc0JBQThDLEVBQzlDLDhCQUNBLGdDQUNBO1FBSEEsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxpQ0FBNEIsR0FBNUIsNEJBQTRCO1FBQzVCLG1DQUE4QixHQUE5Qiw4QkFBOEI7UUFDOUIsK0JBQTBCLEdBQTFCLDBCQUEwQjtLQUM3Qzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxJQUE0QjtRQUMzQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDOUQ7Ozs7OztJQUVELG9CQUFvQixDQUFDLElBQTRCLEVBQUUsYUFBcUIsU0FBUzs7UUFDN0UsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFL0IsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFOztZQUNsQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUdEOztZQUgvRCxNQUNJLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVztpQkFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQ3JCLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUUvRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixpQkFBaUIsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDckUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQ2hELEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQ3hHLENBQUM7YUFDTDtTQUNKO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztLQUM1Qjs7O1lBL0JKLFVBQVU7Ozs7WUFURixzQkFBc0I7WUFLdEIsNEJBQTRCO1lBSDVCLDhCQUE4QjtZQUk5QiwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudHJ5RW50aXR5IH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IEJhc2ljUHJvcGVydGllc1NlcnZpY2UgfSBmcm9tICcuL2Jhc2ljLXByb3BlcnRpZXMuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9wcm9wZXJ0eS1ncm91cHMtdHJhbnNsYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3SXRlbSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld0dyb3VwIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeSB9IGZyb20gJy4vY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnknO1xuaW1wb3J0IHsgUHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UgfSBmcm9tICcuL3Byb3BlcnR5LWRlc2NyaXB0b3JzLnNlcnZpY2UnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2ljUHJvcGVydGllc1NlcnZpY2U6IEJhc2ljUHJvcGVydGllc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5OiBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlOiBQcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZTogUHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXRCYXNpY1Byb3BlcnRpZXMobm9kZTogTWluaW1hbE5vZGVFbnRyeUVudGl0eSk6IE9ic2VydmFibGU8Q2FyZFZpZXdJdGVtW10+IHtcbiAgICAgICAgcmV0dXJuIG9mKHRoaXMuYmFzaWNQcm9wZXJ0aWVzU2VydmljZS5nZXRQcm9wZXJ0aWVzKG5vZGUpKTtcbiAgICB9XG5cbiAgICBnZXRHcm91cGVkUHJvcGVydGllcyhub2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5LCBwcmVzZXROYW1lOiBzdHJpbmcgPSAnZGVmYXVsdCcpOiBPYnNlcnZhYmxlPENhcmRWaWV3R3JvdXBbXT4ge1xuICAgICAgICBsZXQgZ3JvdXBlZFByb3BlcnRpZXMgPSBvZihbXSk7XG5cbiAgICAgICAgaWYgKG5vZGUuYXNwZWN0TmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeS5nZXQocHJlc2V0TmFtZSksXG4gICAgICAgICAgICAgICAgZ3JvdXBOYW1lcyA9IG5vZGUuYXNwZWN0TmFtZXNcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChub2RlLm5vZGVUeXBlKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGdyb3VwTmFtZSA9PiBjb25maWcuaXNHcm91cEFsbG93ZWQoZ3JvdXBOYW1lKSk7XG5cbiAgICAgICAgICAgIGlmIChncm91cE5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBncm91cGVkUHJvcGVydGllcyA9IHRoaXMucHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UubG9hZChncm91cE5hbWVzKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtYXAoZ3JvdXBzID0+IGNvbmZpZy5yZW9yZ2FuaXNlQnlDb25maWcoZ3JvdXBzKSksXG4gICAgICAgICAgICAgICAgICAgIG1hcChncm91cHMgPT4gdGhpcy5wcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2UudHJhbnNsYXRlVG9DYXJkVmlld0dyb3Vwcyhncm91cHMsIG5vZGUucHJvcGVydGllcykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBncm91cGVkUHJvcGVydGllcztcbiAgICB9XG59XG4iXX0=