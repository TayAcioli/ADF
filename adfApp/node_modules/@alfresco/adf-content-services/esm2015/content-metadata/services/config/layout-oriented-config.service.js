/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getProperty } from './property-group-reader';
export class LayoutOrientedConfigService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    isGroupAllowed(groupName) {
        return this.getMatchingGroups(groupName).length > 0;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    reorganiseByConfig(propertyGroups) {
        /** @type {?} */
        const layoutBlocks = this.config;
        return layoutBlocks.map((layoutBlock) => {
            /** @type {?} */
            const flattenedItems = this.flattenItems(layoutBlock.items);
            /** @type {?} */
            const properties = flattenedItems.reduce((props, explodedItem) => {
                /** @type {?} */
                const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];
                return props.concat(property);
            }, []);
            return {
                title: layoutBlock.title,
                properties
            };
        });
    }
    /**
     * @param {?} items
     * @return {?}
     */
    flattenItems(items) {
        return items.reduce((accumulator, item) => {
            /** @type {?} */
            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];
            /** @type {?} */
            const flattenedProperties = properties.map(propertyName => {
                return {
                    groupName: item.aspect || item.type,
                    propertyName
                };
            });
            return accumulator.concat(flattenedProperties);
        }, []);
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    getMatchingGroups(groupName) {
        return this.config
            .map(layoutBlock => layoutBlock.items)
            .reduce((accumulator, items) => accumulator.concat(items), [])
            .filter((item) => item.aspect === groupName || item.type === groupName);
    }
}
if (false) {
    /** @type {?} */
    LayoutOrientedConfigService.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb25maWcvbGF5b3V0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV0RCxNQUFNOzs7O0lBRUYsWUFBb0IsTUFBVztRQUFYLFdBQU0sR0FBTixNQUFNLENBQUs7S0FBSTs7Ozs7SUFFNUIsY0FBYyxDQUFDLFNBQWlCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Ozs7OztJQUdqRCxrQkFBa0IsQ0FBQyxjQUFzQzs7UUFDNUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUVqQyxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTs7WUFDcEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBSWhEOztZQUpYLE1BQ0ksVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUU7O2dCQUN2RCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEcsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2pDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFWCxPQUFPO2dCQUNILEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSztnQkFDeEIsVUFBVTthQUNiLENBQUM7U0FDTCxDQUFDLENBQUM7Ozs7OztJQUdDLFlBQVksQ0FBQyxLQUFLO1FBQ3RCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFBRTs7WUFDdEMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztZQUN4RixNQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ3RELE9BQU87b0JBQ0gsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUk7b0JBQ25DLFlBQVk7aUJBQ2YsQ0FBQzthQUNMLENBQUMsQ0FBQztZQUVILE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2xELEVBQUUsRUFBRSxDQUFDLENBQUM7Ozs7OztJQUdILGlCQUFpQixDQUFDLFNBQWlCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLE1BQU07YUFDYixHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO2FBQ3JDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQzdELE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQzs7Q0FFbkYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbnRlbnRNZXRhZGF0YUNvbmZpZyxcbiAgICBMYXlvdXRPcmllbnRlZENvbmZpZ0l0ZW0sXG4gICAgT3JnYW5pc2VkUHJvcGVydHlHcm91cCxcbiAgICBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyXG59IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IGdldFByb3BlcnR5IH0gZnJvbSAnLi9wcm9wZXJ0eS1ncm91cC1yZWFkZXInO1xuXG5leHBvcnQgY2xhc3MgTGF5b3V0T3JpZW50ZWRDb25maWdTZXJ2aWNlIGltcGxlbWVudHMgQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBhbnkpIHt9XG5cbiAgICBwdWJsaWMgaXNHcm91cEFsbG93ZWQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF0Y2hpbmdHcm91cHMoZ3JvdXBOYW1lKS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW9yZ2FuaXNlQnlDb25maWcocHJvcGVydHlHcm91cHM6IFByb3BlcnR5R3JvdXBDb250YWluZXIpOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10ge1xuICAgICAgICBjb25zdCBsYXlvdXRCbG9ja3MgPSB0aGlzLmNvbmZpZztcblxuICAgICAgICByZXR1cm4gbGF5b3V0QmxvY2tzLm1hcCgobGF5b3V0QmxvY2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsYXR0ZW5lZEl0ZW1zID0gdGhpcy5mbGF0dGVuSXRlbXMobGF5b3V0QmxvY2suaXRlbXMpLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBmbGF0dGVuZWRJdGVtcy5yZWR1Y2UoKHByb3BzLCBleHBsb2RlZEl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSBnZXRQcm9wZXJ0eShwcm9wZXJ0eUdyb3VwcywgZXhwbG9kZWRJdGVtLmdyb3VwTmFtZSwgZXhwbG9kZWRJdGVtLnByb3BlcnR5TmFtZSkgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5jb25jYXQocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbGF5b3V0QmxvY2sudGl0bGUsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmbGF0dGVuSXRlbXMoaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgoYWNjdW11bGF0b3IsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBBcnJheS5pc0FycmF5KGl0ZW0ucHJvcGVydGllcykgPyBpdGVtLnByb3BlcnRpZXMgOiBbaXRlbS5wcm9wZXJ0aWVzXTtcbiAgICAgICAgICAgIGNvbnN0IGZsYXR0ZW5lZFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eU5hbWUgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogaXRlbS5hc3BlY3QgfHwgaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvci5jb25jYXQoZmxhdHRlbmVkUHJvcGVydGllcyk7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldE1hdGNoaW5nR3JvdXBzKGdyb3VwTmFtZTogc3RyaW5nKTogTGF5b3V0T3JpZW50ZWRDb25maWdJdGVtW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWdcbiAgICAgICAgICAgIC5tYXAobGF5b3V0QmxvY2sgPT4gbGF5b3V0QmxvY2suaXRlbXMpXG4gICAgICAgICAgICAucmVkdWNlKChhY2N1bXVsYXRvciwgaXRlbXMpID0+IGFjY3VtdWxhdG9yLmNvbmNhdChpdGVtcyksIFtdKVxuICAgICAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5hc3BlY3QgPT09IGdyb3VwTmFtZSB8fCBpdGVtLnR5cGUgPT09IGdyb3VwTmFtZSk7XG4gICAgfVxufVxuIl19