/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, LogService } from '@alfresco/adf-core';
import { AspectOrientedConfigService } from './aspect-oriented-config.service';
import { IndifferentConfigService } from './indifferent-config.service';
import { LayoutOrientedConfigService } from './layout-oriented-config.service';
export class ContentMetadataConfigFactory {
    /**
     * @param {?} appConfigService
     * @param {?} logService
     */
    constructor(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    /**
     * @param {?=} presetName
     * @return {?}
     */
    get(presetName = 'default') {
        /** @type {?} */
        let presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error(`No content-metadata preset for: ${presetName}`);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    }
    /**
     * @param {?} presetConfig
     * @return {?}
     */
    createConfig(presetConfig) {
        /** @type {?} */
        let config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService(/** @type {?} */ (presetConfig));
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService(/** @type {?} */ (presetConfig));
        }
        else {
            config = new IndifferentConfigService(/** @type {?} */ (presetConfig));
        }
        Object.freeze(config);
        return config;
    }
    /**
     * @param {?} presetConfig
     * @return {?}
     */
    isAspectOrientedPreset(presetConfig) {
        return this.isObject(presetConfig);
    }
    /**
     * @param {?} presetConfig
     * @return {?}
     */
    isLayoutOrientedPreset(presetConfig) {
        return Array.isArray(presetConfig);
    }
    /**
     * @param {?} x
     * @return {?}
     */
    isObject(x) {
        return x != null && typeof x === 'object';
    }
}
ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
ContentMetadataConfigFactory.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ContentMetadataConfigFactory.ctorParameters = () => [
    { type: AppConfigService },
    { type: LogService }
];
if (false) {
    /** @type {?} */
    ContentMetadataConfigFactory.INDIFFERENT_PRESET;
    /** @type {?} */
    ContentMetadataConfigFactory.DEFAULT_PRESET_NAME;
    /** @type {?} */
    ContentMetadataConfigFactory.prototype.appConfigService;
    /** @type {?} */
    ContentMetadataConfigFactory.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jb25maWcuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFVL0UsTUFBTTs7Ozs7SUFLRixZQUFvQixnQkFBa0MsRUFBVSxVQUFzQjtRQUFsRSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtLQUFJOzs7OztJQUVuRixHQUFHLENBQUMsYUFBcUIsU0FBUzs7UUFDckMsSUFBSSxZQUFZLENBQUM7UUFDakIsSUFBSTtZQUNBLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3ZGO1FBQUMsV0FBTTtZQUNKLElBQUksVUFBVSxLQUFLLDRCQUE0QixDQUFDLG1CQUFtQixFQUFFO2dCQUNqRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsVUFBVSxFQUFFLENBQUMsQ0FBQzthQUMxRTtZQUNELFlBQVksR0FBRyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQztTQUNsRTtRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7O0lBR25DLFlBQVksQ0FBQyxZQUEwQjs7UUFDM0MsSUFBSSxNQUFNLENBQXdCO1FBRWxDLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzNDLE1BQU0sR0FBRyxJQUFJLDJCQUEyQixtQkFBd0IsWUFBWSxFQUFDLENBQUM7U0FDakY7YUFBTSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNsRCxNQUFNLEdBQUcsSUFBSSwyQkFBMkIsbUJBQXdCLFlBQVksRUFBQyxDQUFDO1NBQ2pGO2FBQU07WUFDSCxNQUFNLEdBQUcsSUFBSSx3QkFBd0IsbUJBQXFCLFlBQVksRUFBQyxDQUFDO1NBQzNFO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixPQUFPLE1BQU0sQ0FBQzs7Ozs7O0lBR1Ysc0JBQXNCLENBQUMsWUFBMEI7UUFDckQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7Ozs7SUFHL0Isc0JBQXNCLENBQUMsWUFBMEI7UUFDckQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7Ozs7SUFHL0IsUUFBUSxDQUFDLENBQUM7UUFDZCxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDOzs7a0RBM0NULEdBQUc7bURBQ0YsU0FBUzs7WUFKbEQsVUFBVTs7OztZQVpGLGdCQUFnQjtZQUFFLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEFzcGVjdE9yaWVudGVkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEluZGlmZmVyZW50Q29uZmlnU2VydmljZSB9IGZyb20gJy4vaW5kaWZmZXJlbnQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5b3V0T3JpZW50ZWRDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9sYXlvdXQtb3JpZW50ZWQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBQcmVzZXRDb25maWcsXG4gICAgQ29udGVudE1ldGFkYXRhQ29uZmlnLFxuICAgIEFzcGVjdE9yaWVudGVkQ29uZmlnLFxuICAgIEluRGlmZmVyZW50Q29uZmlnLFxuICAgIExheW91dE9yaWVudGVkQ29uZmlnXG59IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3Rvcnkge1xuXG4gICAgc3RhdGljIHJlYWRvbmx5IElORElGRkVSRU5UX1BSRVNFVCA9ICcqJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9QUkVTRVRfTkFNRSA9ICdkZWZhdWx0JztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSwgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7fVxuXG4gICAgcHVibGljIGdldChwcmVzZXROYW1lOiBzdHJpbmcgPSAnZGVmYXVsdCcpOiBDb250ZW50TWV0YWRhdGFDb25maWcge1xuICAgICAgICBsZXQgcHJlc2V0Q29uZmlnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJlc2V0Q29uZmlnID0gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmNvbmZpZ1snY29udGVudC1tZXRhZGF0YSddLnByZXNldHNbcHJlc2V0TmFtZV07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgaWYgKHByZXNldE5hbWUgIT09IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkuREVGQVVMVF9QUkVTRVRfTkFNRSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihgTm8gY29udGVudC1tZXRhZGF0YSBwcmVzZXQgZm9yOiAke3ByZXNldE5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVzZXRDb25maWcgPSBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LklORElGRkVSRU5UX1BSRVNFVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbmZpZyhwcmVzZXRDb25maWcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlQ29uZmlnKHByZXNldENvbmZpZzogUHJlc2V0Q29uZmlnKTogQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcbiAgICAgICAgbGV0IGNvbmZpZzogQ29udGVudE1ldGFkYXRhQ29uZmlnO1xuXG4gICAgICAgIGlmICh0aGlzLmlzTGF5b3V0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnID0gbmV3IExheW91dE9yaWVudGVkQ29uZmlnU2VydmljZSg8TGF5b3V0T3JpZW50ZWRDb25maWc+IHByZXNldENvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0FzcGVjdE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IG5ldyBBc3BlY3RPcmllbnRlZENvbmZpZ1NlcnZpY2UoPEFzcGVjdE9yaWVudGVkQ29uZmlnPiBwcmVzZXRDb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnID0gbmV3IEluZGlmZmVyZW50Q29uZmlnU2VydmljZSg8SW5EaWZmZXJlbnRDb25maWc+IHByZXNldENvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZnJlZXplKGNvbmZpZyk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0FzcGVjdE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZzogUHJlc2V0Q29uZmlnKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzT2JqZWN0KHByZXNldENvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0xheW91dE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZzogUHJlc2V0Q29uZmlnKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByZXNldENvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc09iamVjdCh4KSB7XG4gICAgICAgIHJldHVybiB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnO1xuICAgIH1cbn1cbiJdfQ==