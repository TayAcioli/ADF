/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { ResponseFacetQueryList } from './models/response-facet-query-list.model';
import { SearchFilterList } from './models/search-filter-list.model';
import { takeWhile } from 'rxjs/operators';
export class SearchFilterComponent {
    /**
     * @param {?} queryBuilder
     * @param {?} searchService
     * @param {?} translationService
     */
    constructor(queryBuilder, searchService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.DEFAULT_PAGE_SIZE = 5;
        this.isAlive = true;
        this.responseFacetQueries = null;
        this.responseFacetFields = null;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetQueriesExpanded = false;
        this.facetFieldsExpanded = false;
        this.canResetSelectedQueries = false;
        this.selectedFacetQueries = [];
        this.selectedBuckets = [];
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            this.facetQueriesExpanded = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetFieldsExpanded = queryBuilder.config.facetFields.expanded;
        }
        this.queryBuilder.updated.pipe(takeWhile(() => this.isAlive)).subscribe(() => {
            this.queryBuilder.execute();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.queryBuilder) {
            this.queryBuilder.executed.pipe(takeWhile(() => this.isAlive)).subscribe((data) => {
                this.onDataLoaded(data);
                this.searchService.dataLoaded.next(data);
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isAlive = false;
    }
    /**
     * @param {?} event
     * @param {?} facetQuery
     * @return {?}
     */
    onToggleFacetQuery(event, facetQuery) {
        if (event && facetQuery) {
            if (event.checked) {
                this.selectFacetQuery(facetQuery);
            }
            else {
                this.unselectFacetQuery(facetQuery);
            }
        }
    }
    /**
     * @param {?} query
     * @return {?}
     */
    selectFacetQuery(query) {
        if (query) {
            query.checked = true;
            this.queryBuilder.addUserFacetQuery(query);
            this.updateSelectedFields();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} query
     * @return {?}
     */
    unselectFacetQuery(query) {
        if (query) {
            query.checked = false;
            this.queryBuilder.removeUserFacetQuery(query);
            this.updateSelectedFields();
            this.queryBuilder.update();
        }
    }
    /**
     * @return {?}
     */
    updateSelectedBuckets() {
        if (this.responseFacetFields) {
            this.selectedBuckets = [];
            for (let field of this.responseFacetFields) {
                if (field.buckets) {
                    this.selectedBuckets.push(...this.queryBuilder.getUserFacetBuckets(field.field)
                        .filter(bucket => bucket.checked)
                        .map(bucket => {
                        return { field, bucket };
                    }));
                }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    }
    /**
     * @return {?}
     */
    updateSelectedFields() {
        if (this.responseFacetQueries) {
            this.selectedFacetQueries = this.responseFacetQueries.items.filter(item => item.checked);
            this.canResetSelectedQueries = this.selectedFacetQueries.length > 0;
        }
        else {
            this.selectedFacetQueries = [];
            this.canResetSelectedQueries = false;
        }
    }
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    onToggleBucket(event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    selectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @return {?}
     */
    resetSelectedQueries() {
        if (this.canResetSelectedQueries) {
            for (let query of this.responseFacetQueries.items) {
                query.checked = false;
                this.queryBuilder.removeUserFacetQuery(query);
            }
            this.selectedFacetQueries = [];
            this.canResetSelectedQueries = false;
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    canResetSelectedBuckets(field) {
        if (field && field.buckets) {
            return field.buckets.items.some(bucket => bucket.checked);
        }
        return false;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    resetSelectedBuckets(field) {
        if (field && field.buckets) {
            for (let bucket of field.buckets.items) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
            }
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onDataLoaded(data) {
        /** @type {?} */
        const context = data.list.context;
        if (context) {
            this.parseFacetFields(context);
            this.parseFacetQueries(context);
        }
        else {
            this.responseFacetQueries = null;
            this.responseFacetFields = null;
        }
    }
    /**
     * @param {?} context
     * @return {?}
     */
    parseFacetFields(context) {
        if (!this.responseFacetFields) {
            /** @type {?} */
            const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
            this.responseFacetFields = configFacetFields.map(field => {
                /** @type {?} */
                const responseField = (context.facetsFields || []).find(response => response.label === field.label);
                /** @type {?} */
                const buckets = ((responseField && responseField.buckets) || []).map(bucket => {
                    /** @type {?} */
                    const selectedBucket = this.selectedBuckets.find(facetBucket => facetBucket.bucket.label === bucket.label && facetBucket.field.field === field.field);
                    return /** @type {?} */ (Object.assign({}, bucket, { checked: !!selectedBucket, display: this.translationService.instant(bucket.display), label: this.translationService.instant(bucket.label) }));
                });
                /** @type {?} */
                const bucketList = new SearchFilterList(buckets, field.pageSize);
                bucketList.filter = (bucket) => {
                    if (bucket && bucketList.filterText) {
                        /** @type {?} */
                        const pattern = (bucketList.filterText || '').toLowerCase();
                        /** @type {?} */
                        const label = (bucket.display || bucket.label || '').toLowerCase();
                        return label.startsWith(pattern);
                    }
                    return true;
                };
                return Object.assign({}, field, { label: this.translationService.instant(field.label), pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, buckets: bucketList });
            });
        }
        else {
            this.responseFacetFields = this.responseFacetFields
                .map(field => {
                /** @type {?} */
                let responseField = (context.facetsFields || []).find(response => response.label === field.label);
                (field && field.buckets && field.buckets.items || [])
                    .map(bucket => {
                    /** @type {?} */
                    const responseBucket = ((responseField && responseField.buckets) || []).find(respBucket => respBucket.label === bucket.label);
                    bucket.count = responseBucket ? responseBucket.count : 0;
                    return bucket;
                });
                return field;
            });
        }
    }
    /**
     * @param {?} context
     * @return {?}
     */
    parseFacetQueries(context) {
        /** @type {?} */
        const responseQueries = this.getFacetQueryMap(context);
        if (this.queryBuilder.config.facetQueries) {
            /** @type {?} */
            const bkpResponseFacetQueries = Object.assign({}, this.responseFacetQueries);
            /** @type {?} */
            const facetQueries = (this.queryBuilder.config.facetQueries.queries || [])
                .map(query => {
                /** @type {?} */
                const queryResult = responseQueries[query.label];
                /** @type {?} */
                const bkpQuery = (bkpResponseFacetQueries.items || []).find(item => item.label === query.label);
                if (bkpQuery) {
                    bkpQuery.count = queryResult.count;
                    return bkpQuery;
                }
                return /** @type {?} */ (Object.assign({}, query, { label: this.translationService.instant(query.label), count: queryResult.count }));
            });
            if (facetQueries.length > 0) {
                if (this.responseFacetQueries) {
                    this.responseFacetQueries.items = facetQueries;
                }
                else {
                    this.responseFacetQueries = new ResponseFacetQueryList(facetQueries, this.facetQueriesPageSize);
                }
            }
            else {
                this.responseFacetQueries = null;
            }
        }
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getFacetQueryMap(context) {
        /** @type {?} */
        const result = {};
        (context.facetQueries || []).forEach(query => {
            result[query.label] = query;
        });
        return result;
    }
}
SearchFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"responseFacetQueries\">\n        <mat-expansion-panel [expanded]=\"facetQueriesExpanded\" [attr.data-automation-id]=\"'expansion-panel-'+facetQueriesLabel\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ facetQueriesLabel | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n            <div class=\"facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+facetQueriesLabel\"\n                        [(ngModel)]=\"responseFacetQueries.filterText\">\n                    <button *ngIf=\"responseFacetQueries.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"responseFacetQueries.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n            <div class=\"checklist\">\n                <ng-container *ngFor=\"let query of responseFacetQueries\">\n                    <mat-checkbox\n                        [checked]=\"query.checked\"\n                        [attr.data-automation-id]=\"'checkbox-'+facetQueriesLabel+'-'+query.label\"\n                        (change)=\"onToggleFacetQuery($event, query)\">\n                        {{ query.label }} ({{ query.count }})\n                    </mat-checkbox>\n                </ng-container>\n            </div>\n            <div class=\"facet-buttons\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedQueries\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedQueries()\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"responseFacetQueries.canShowLessItems\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n                    (click)=\"responseFacetQueries.showLessItems()\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"responseFacetQueries.canShowMoreItems\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n                    (click)=\"responseFacetQueries.showMoreItems()\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n\n    <ng-container *ngIf=\"responseFacetFields\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of responseFacetFields\"\n                             [expanded]=\"facetFieldsExpanded\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <div class=\"facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+field.label\"\n                        [(ngModel)]=\"field.buckets.filterText\">\n                    <button *ngIf=\"field.buckets.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n\n            <div class=\"checklist\">\n                <mat-checkbox\n                    *ngFor=\"let bucket of field.buckets\"\n                    [checked]=\"bucket.checked\"\n                    [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n                    (change)=\"onToggleBucket($event, field, bucket)\">\n                    {{ bucket.display || bucket.label }} <span *ngIf=\"bucket.count!==null\">(</span>{{ bucket.count }}<span *ngIf=\"bucket.count!==null\">)</span>\n                </mat-checkbox>\n            </div>\n\n            <div class=\"facet-buttons\" *ngIf=\"field.buckets.fitsPage\">\n                <button *ngIf=\"canResetSelectedBuckets(field)\"\n                    mat-button\n                    color=\"primary\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n                </button>\n            </div>\n\n            <div class=\"facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedBuckets(field)\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowLessItems\"\n                    (click)=\"field.buckets.showLessItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowMoreItems\"\n                    (click)=\"field.buckets.showMoreItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [".adf-search-filter .checklist{display:flex;flex-direction:column}.adf-search-filter .checklist .mat-checkbox{margin:5px}.adf-search-filter .checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter .facet-result-filter{display:flex;flex-direction:column}.adf-search-filter .facet-result-filter>*{width:100%}.adf-search-filter .facet-buttons{text-align:right}.adf-search-filter .facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter .facet-buttons--topSpace{padding-top:15px}"]
            }] }
];
/** @nocollapse */
SearchFilterComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService },
    { type: SearchService },
    { type: TranslationService }
];
if (false) {
    /** @type {?} */
    SearchFilterComponent.prototype.DEFAULT_PAGE_SIZE;
    /** @type {?} */
    SearchFilterComponent.prototype.isAlive;
    /** @type {?} */
    SearchFilterComponent.prototype.responseFacetQueries;
    /** @type {?} */
    SearchFilterComponent.prototype.responseFacetFields;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesPageSize;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesLabel;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.facetFieldsExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.canResetSelectedQueries;
    /** @type {?} */
    SearchFilterComponent.prototype.selectedFacetQueries;
    /** @type {?} */
    SearchFilterComponent.prototype.selectedBuckets;
    /** @type {?} */
    SearchFilterComponent.prototype.queryBuilder;
    /** @type {?} */
    SearchFilterComponent.prototype.searchService;
    /** @type {?} */
    SearchFilterComponent.prototype.translationService;
}

//# sourceMappingURL=data:application/json;base64,