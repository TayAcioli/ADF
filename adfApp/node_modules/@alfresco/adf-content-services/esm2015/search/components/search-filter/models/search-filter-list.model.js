/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
const DEFAULT_PAGE_SIZE = 5;
/**
 * @template T
 */
export class SearchFilterList {
    /**
     * @param {?=} items
     * @param {?=} pageSize
     */
    constructor(items = [], pageSize) {
        this.filteredItems = [];
        this._filterText = '';
        this.items = [];
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.currentPageSize = DEFAULT_PAGE_SIZE;
        this._filter = () => true;
        this.items = items;
        this.filteredItems = items;
        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;
    }
    /**
     * @return {?}
     */
    get filterText() {
        return this._filterText;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set filterText(value) {
        this._filterText = value;
        this.applyFilter();
    }
    /**
     * @return {?}
     */
    get filter() {
        return this._filter;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set filter(value) {
        this._filter = value;
        this.applyFilter();
    }
    /**
     * @return {?}
     */
    applyFilter() {
        if (this.filter) {
            this.filteredItems = this.items.filter(this.filter);
        }
        else {
            this.filteredItems = this.items;
        }
        this.currentPageSize = this.pageSize;
    }
    /**
     * Returns visible portion of the items.
     * @return {?}
     */
    get visibleItems() {
        return this.filteredItems.slice(0, this.currentPageSize);
    }
    /**
     * Returns entire collection length including items not displayed on the page.
     * @return {?}
     */
    get length() {
        return this.items.length;
    }
    /**
     * Detects whether more items can be displayed.
     * @return {?}
     */
    get canShowMoreItems() {
        return this.filteredItems.length > this.currentPageSize;
    }
    /**
     * Detects whether less items can be displayed.
     * @return {?}
     */
    get canShowLessItems() {
        return this.currentPageSize > this.pageSize;
    }
    /**
     * Detects whether content fits single page.
     * @return {?}
     */
    get fitsPage() {
        return this.pageSize >= this.filteredItems.length;
    }
    /**
     * Display more items.
     * @return {?}
     */
    showMoreItems() {
        if (this.canShowMoreItems) {
            this.currentPageSize += this.pageSize;
        }
    }
    /**
     * Display less items.
     * @return {?}
     */
    showLessItems() {
        if (this.canShowLessItems) {
            this.currentPageSize -= this.pageSize;
        }
    }
    /**
     * Reset entire collection and page settings.
     * @return {?}
     */
    clear() {
        this.currentPageSize = this.pageSize;
        this.items = [];
        this.filteredItems = [];
        this.filterText = '';
    }
    /**
     * @return {?}
     */
    [Symbol.iterator]() {
        /** @type {?} */
        let pointer = 0;
        /** @type {?} */
        let items = this.visibleItems;
        return {
            /**
             * @return {?}
             */
            next() {
                if (pointer < items.length) {
                    return {
                        done: false,
                        value: items[pointer++]
                    };
                }
                else {
                    return {
                        done: true,
                        value: null
                    };
                }
            }
        };
    }
}
if (false) {
    /** @type {?} */
    SearchFilterList.prototype.filteredItems;
    /** @type {?} */
    SearchFilterList.prototype._filterText;
    /** @type {?} */
    SearchFilterList.prototype.items;
    /** @type {?} */
    SearchFilterList.prototype.pageSize;
    /** @type {?} */
    SearchFilterList.prototype.currentPageSize;
    /** @type {?} */
    SearchFilterList.prototype._filter;
}

//# sourceMappingURL=data:application/json;base64,