/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
export class SearchSortingPickerComponent {
    /**
     * @param {?} queryBuilder
     */
    constructor(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.options = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.queryBuilder.getSortingOptions();
        /** @type {?} */
        const primary = this.queryBuilder.getPrimarySorting();
        if (primary) {
            this.value = primary.key;
            this.ascending = primary.ascending;
        }
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    onChanged(sorting) {
        this.value = sorting.key;
        this.ascending = sorting.ascending;
        this.applySorting();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    findOptionByKey(key) {
        if (key) {
            return this.options.find(opt => opt.key === key);
        }
        return null;
    }
    /**
     * @return {?}
     */
    applySorting() {
        /** @type {?} */
        const option = this.findOptionByKey(this.value);
        if (option) {
            this.queryBuilder.sorting = [Object.assign({}, option, { ascending: this.ascending })];
            this.queryBuilder.update();
        }
    }
}
SearchSortingPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-sorting-picker',
                template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (change)=\"onChanged($event)\">\n</adf-sorting-picker>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-sorting-picker' }
            }] }
];
/** @nocollapse */
SearchSortingPickerComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService }
];
if (false) {
    /** @type {?} */
    SearchSortingPickerComponent.prototype.options;
    /** @type {?} */
    SearchSortingPickerComponent.prototype.value;
    /** @type {?} */
    SearchSortingPickerComponent.prototype.ascending;
    /** @type {?} */
    SearchSortingPickerComponent.prototype.queryBuilder;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNlYXJjaC9jb21wb25lbnRzL3NlYXJjaC1zb3J0aW5nLXBpY2tlci9zZWFyY2gtc29ydGluZy1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFTL0UsTUFBTTs7OztJQU1GLFlBQW9CLFlBQXVDO1FBQXZDLGlCQUFZLEdBQVosWUFBWSxDQUEyQjt1QkFKdEIsRUFBRTtLQUl3Qjs7OztJQUUvRCxRQUFRO1FBQ0osSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUM7O1FBRXJELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN0RCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDdEM7S0FDSjs7Ozs7SUFFRCxTQUFTLENBQUMsT0FBNEM7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDdkI7Ozs7O0lBRU8sZUFBZSxDQUFDLEdBQVc7UUFDL0IsSUFBSSxHQUFHLEVBQUU7WUFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNwRDtRQUNELE9BQU8sSUFBSSxDQUFDOzs7OztJQUdSLFlBQVk7O1FBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsbUJBQ3JCLE1BQU0sSUFDVCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsSUFDM0IsQ0FBQztZQUNILElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDOUI7Ozs7WUE3Q1IsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLGlMQUFxRDtnQkFDckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSwyQkFBMkIsRUFBRTthQUMvQzs7OztZQVJRLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VhcmNoUXVlcnlCdWlsZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlYXJjaC1xdWVyeS1idWlsZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VhcmNoU29ydGluZ0RlZmluaXRpb24gfSBmcm9tICcuLi8uLi9zZWFyY2gtc29ydGluZy1kZWZpbml0aW9uLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlYXJjaC1zb3J0aW5nLXBpY2tlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1zb3J0aW5nLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXNlYXJjaC1zb3J0aW5nLXBpY2tlcicgfVxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hTb3J0aW5nUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIG9wdGlvbnM6IFNlYXJjaFNvcnRpbmdEZWZpbml0aW9uW10gPSBbXTtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIGFzY2VuZGluZzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcXVlcnlCdWlsZGVyOiBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucXVlcnlCdWlsZGVyLmdldFNvcnRpbmdPcHRpb25zKCk7XG5cbiAgICAgICAgY29uc3QgcHJpbWFyeSA9IHRoaXMucXVlcnlCdWlsZGVyLmdldFByaW1hcnlTb3J0aW5nKCk7XG4gICAgICAgIGlmIChwcmltYXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gcHJpbWFyeS5rZXk7XG4gICAgICAgICAgICB0aGlzLmFzY2VuZGluZyA9IHByaW1hcnkuYXNjZW5kaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DaGFuZ2VkKHNvcnRpbmc6IHsga2V5OiBzdHJpbmcsIGFzY2VuZGluZzogYm9vbGVhbiB9KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBzb3J0aW5nLmtleTtcbiAgICAgICAgdGhpcy5hc2NlbmRpbmcgPSBzb3J0aW5nLmFzY2VuZGluZztcbiAgICAgICAgdGhpcy5hcHBseVNvcnRpbmcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmRPcHRpb25CeUtleShrZXk6IHN0cmluZyk6IFNlYXJjaFNvcnRpbmdEZWZpbml0aW9uIHtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maW5kKG9wdCA9PiBvcHQua2V5ID09PSBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlTb3J0aW5nKCkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmZpbmRPcHRpb25CeUtleSh0aGlzLnZhbHVlKTtcbiAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIuc29ydGluZyA9IFt7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9uLFxuICAgICAgICAgICAgICAgIGFzY2VuZGluZzogdGhpcy5hc2NlbmRpbmdcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==