/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { QueryBody } from 'alfresco-js-api';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
export class SearchComponent {
    /**
     * @param {?} searchService
     * @param {?} _elementRef
     */
    constructor(searchService, _elementRef) {
        this.searchService = searchService;
        this._elementRef = _elementRef;
        /**
         * Function that maps an option's value to its display value in the trigger.
         */
        this.displayWith = null;
        /**
         * Maximum number of results to show in the search.
         */
        this.maxResults = 20;
        /**
         * Number of results to skip from the results pagination.
         */
        this.skipResults = 0;
        /**
         * Search term to use when executing the search. Updating this value will
         * run a new search and update the results.
         */
        this.searchTerm = '';
        /**
         * Emitted when search results have fully loaded.
         */
        this.resultLoaded = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.showPanel = false;
        this._isOpen = false;
        this.keyPressedStream = new Subject();
        this._classList = {};
        this.keyPressedStream.asObservable()
            .pipe(debounceTime(200))
            .subscribe((searchedWord) => {
            this.loadSearchResults(searchedWord);
        });
        searchService.dataLoaded.subscribe(data => this.onSearchDataLoaded(data), error => this.onSearchDataError(error));
    }
    /**
     * CSS class for display.
     * @param {?} classList
     * @return {?}
     */
    set classList(classList) {
        if (classList && classList.length) {
            classList.split(' ').forEach(className => this._classList[className.trim()] = true);
            this._elementRef.nativeElement.className = '';
        }
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this._isOpen && this.showPanel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        this._isOpen = value;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.setVisibility();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.queryBody &&
            this.hasDifferentQueryBody(changes.queryBody.previousValue, changes.queryBody.currentValue)) {
            this.loadSearchResults();
        }
        if (changes.searchTerm && changes.searchTerm.currentValue) {
            this.loadSearchResults(changes.searchTerm.currentValue);
        }
    }
    /**
     * @return {?}
     */
    resetResults() {
        this.cleanResults();
        this.setVisibility();
    }
    /**
     * @return {?}
     */
    reload() {
        this.loadSearchResults(this.searchTerm);
    }
    /**
     * @param {?} previousQueryBody
     * @param {?} currentQueryBody
     * @return {?}
     */
    hasDifferentQueryBody(previousQueryBody, currentQueryBody) {
        return JSON.stringify(previousQueryBody) !== JSON.stringify(currentQueryBody);
    }
    /**
     * @return {?}
     */
    cleanResults() {
        if (this.results) {
            this.results = {};
        }
    }
    /**
     * @param {?=} searchTerm
     * @return {?}
     */
    loadSearchResults(searchTerm) {
        this.resetResults();
        if (searchTerm) {
            if (this.queryBody) {
                this.searchService.searchByQueryBody(this.queryBody).subscribe(result => this.onSearchDataLoaded(result), err => this.onSearchDataError(err));
            }
            else {
                this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(result => this.onSearchDataLoaded(result), err => this.onSearchDataError(err));
            }
        }
        else {
            this.cleanResults();
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onSearchDataLoaded(data) {
        if (data) {
            this.results = data;
            this.resultLoaded.emit(this.results);
            this.isOpen = true;
            this.setVisibility();
        }
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onSearchDataError(error) {
        if (error && error.status !== 400) {
            this.results = null;
            this.error.emit(error);
        }
    }
    /**
     * @return {?}
     */
    hidePanel() {
        if (this.isOpen) {
            this._classList['adf-search-show'] = false;
            this._classList['adf-search-hide'] = true;
            this.isOpen = false;
        }
    }
    /**
     * @return {?}
     */
    setVisibility() {
        this.showPanel = !!this.results && !!this.results.list;
        this._classList['adf-search-show'] = this.showPanel;
        this._classList['adf-search-hide'] = !this.showPanel;
    }
}
SearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search',
                template: "<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n\n\n",
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                exportAs: 'searchAutocomplete',
                host: {
                    'class': 'adf-search'
                },
                styles: [""]
            }] }
];
/** @nocollapse */
SearchComponent.ctorParameters = () => [
    { type: SearchService },
    { type: ElementRef }
];
SearchComponent.propDecorators = {
    panel: [{ type: ViewChild, args: ['panel',] }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    displayWith: [{ type: Input }],
    maxResults: [{ type: Input }],
    skipResults: [{ type: Input }],
    queryBody: [{ type: Input }],
    searchTerm: [{ type: Input }],
    classList: [{ type: Input, args: ['class',] }],
    resultLoaded: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SearchComponent.prototype.panel;
    /** @type {?} */
    SearchComponent.prototype.template;
    /**
     * Function that maps an option's value to its display value in the trigger.
     * @type {?}
     */
    SearchComponent.prototype.displayWith;
    /**
     * Maximum number of results to show in the search.
     * @type {?}
     */
    SearchComponent.prototype.maxResults;
    /**
     * Number of results to skip from the results pagination.
     * @type {?}
     */
    SearchComponent.prototype.skipResults;
    /**
     * @deprecated in 2.1.0
     * @type {?}
     */
    SearchComponent.prototype.queryBody;
    /**
     * Search term to use when executing the search. Updating this value will
     * run a new search and update the results.
     * @type {?}
     */
    SearchComponent.prototype.searchTerm;
    /**
     * Emitted when search results have fully loaded.
     * @type {?}
     */
    SearchComponent.prototype.resultLoaded;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    SearchComponent.prototype.error;
    /** @type {?} */
    SearchComponent.prototype.showPanel;
    /** @type {?} */
    SearchComponent.prototype.results;
    /** @type {?} */
    SearchComponent.prototype._isOpen;
    /** @type {?} */
    SearchComponent.prototype.keyPressedStream;
    /** @type {?} */
    SearchComponent.prototype._classList;
    /** @type {?} */
    SearchComponent.prototype.searchService;
    /** @type {?} */
    SearchComponent.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNlYXJjaC9jb21wb25lbnRzL3NlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFFSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFDTixXQUFXLEVBQ1gsU0FBUyxFQUNULGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWMsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFhOUMsTUFBTTs7Ozs7SUFnRUYsWUFBb0IsYUFBNEIsRUFDNUI7UUFEQSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixnQkFBVyxHQUFYLFdBQVc7Ozs7MkJBdkRnQixJQUFJOzs7OzBCQUk5QixFQUFFOzs7OzJCQUlELENBQUM7Ozs7OzBCQVVGLEVBQUU7Ozs7NEJBYWtCLElBQUksWUFBWSxFQUFFOzs7O3FCQUloQyxJQUFJLFlBQVksRUFBRTt5QkFFeEIsS0FBSzt1QkFXUCxLQUFLO2dDQUVZLElBQUksT0FBTyxFQUFFOzBCQUVSLEVBQUU7UUFJdkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRTthQUMvQixJQUFJLENBQ0QsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUNwQjthQUNBLFNBQVMsQ0FBQyxDQUFDLFlBQW9CLEVBQUUsRUFBRTtZQUNoQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDeEMs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Q0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztLQUN4RDs7O1lBM0tKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsZ1FBQXNDO2dCQUV0QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsSUFBSSxFQUFFO29CQUNGLE9BQU8sRUFBRSxZQUFZO2lCQUN4Qjs7YUFDSjs7OztZQTVCUSxhQUFhO1lBS2xCLFVBQVU7OztvQkEwQlQsU0FBUyxTQUFDLE9BQU87dUJBR2pCLFlBQVksU0FBQyxXQUFXOzBCQUl4QixLQUFLO3lCQUlMLEtBQUs7MEJBSUwsS0FBSzt3QkFJTCxLQUFLO3lCQU1MLEtBQUs7d0JBSUwsS0FBSyxTQUFDLE9BQU87MkJBU2IsTUFBTTtvQkFJTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgU2VhcmNoU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgT3V0cHV0LFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIFZpZXdDaGlsZCxcbiAgICBWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVQYWdpbmcsIFF1ZXJ5Qm9keSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlYXJjaCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2VhcmNoLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgICBleHBvcnRBczogJ3NlYXJjaEF1dG9jb21wbGV0ZScsXG4gICAgaG9zdDoge1xuICAgICAgICAnY2xhc3MnOiAnYWRmLXNlYXJjaCdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgICBAVmlld0NoaWxkKCdwYW5lbCcpXG4gICAgcGFuZWw6IEVsZW1lbnRSZWY7XG5cbiAgICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKVxuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqIEZ1bmN0aW9uIHRoYXQgbWFwcyBhbiBvcHRpb24ncyB2YWx1ZSB0byBpdHMgZGlzcGxheSB2YWx1ZSBpbiB0aGUgdHJpZ2dlci4gKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlXaXRoOiAoKHZhbHVlOiBhbnkpID0+IHN0cmluZykgfCBudWxsID0gbnVsbDtcblxuICAgIC8qKiBNYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHNob3cgaW4gdGhlIHNlYXJjaC4gKi9cbiAgICBASW5wdXQoKVxuICAgIG1heFJlc3VsdHM6IG51bWJlciA9IDIwO1xuXG4gICAgLyoqIE51bWJlciBvZiByZXN1bHRzIHRvIHNraXAgZnJvbSB0aGUgcmVzdWx0cyBwYWdpbmF0aW9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2tpcFJlc3VsdHM6IG51bWJlciA9IDA7XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMi4xLjAgKi9cbiAgICBASW5wdXQoKVxuICAgIHF1ZXJ5Qm9keTogUXVlcnlCb2R5O1xuXG4gICAgLyoqIFNlYXJjaCB0ZXJtIHRvIHVzZSB3aGVuIGV4ZWN1dGluZyB0aGUgc2VhcmNoLiBVcGRhdGluZyB0aGlzIHZhbHVlIHdpbGxcbiAgICAgKiBydW4gYSBuZXcgc2VhcmNoIGFuZCB1cGRhdGUgdGhlIHJlc3VsdHMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZWFyY2hUZXJtOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBDU1MgY2xhc3MgZm9yIGRpc3BsYXkuICovXG4gICAgQElucHV0KCdjbGFzcycpXG4gICAgc2V0IGNsYXNzTGlzdChjbGFzc0xpc3Q6IHN0cmluZykge1xuICAgICAgICBpZiAoY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5zcGxpdCgnICcpLmZvckVhY2goY2xhc3NOYW1lID0+IHRoaXMuX2NsYXNzTGlzdFtjbGFzc05hbWUudHJpbSgpXSA9IHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBzZWFyY2ggcmVzdWx0cyBoYXZlIGZ1bGx5IGxvYWRlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZXN1bHRMb2FkZWQ6IEV2ZW50RW1pdHRlcjxOb2RlUGFnaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHNob3dQYW5lbDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHJlc3VsdHM6IE5vZGVQYWdpbmc7XG5cbiAgICBnZXQgaXNPcGVuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNPcGVuICYmIHRoaXMuc2hvd1BhbmVsO1xuICAgIH1cblxuICAgIHNldCBpc09wZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNPcGVuID0gdmFsdWU7XG4gICAgfVxuXG4gICAgX2lzT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAga2V5UHJlc3NlZFN0cmVhbTogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcblxuICAgIF9jbGFzc0xpc3Q6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICB0aGlzLmtleVByZXNzZWRTdHJlYW0uYXNPYnNlcnZhYmxlKClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZSgyMDApXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChzZWFyY2hlZFdvcmQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZFNlYXJjaFJlc3VsdHMoc2VhcmNoZWRXb3JkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHNlYXJjaFNlcnZpY2UuZGF0YUxvYWRlZC5zdWJzY3JpYmUoXG4gICAgICAgICAgICBkYXRhID0+IHRoaXMub25TZWFyY2hEYXRhTG9hZGVkKGRhdGEpLFxuICAgICAgICAgICAgZXJyb3IgPT4gdGhpcy5vblNlYXJjaERhdGFFcnJvcihlcnJvcilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0VmlzaWJpbGl0eSgpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXMucXVlcnlCb2R5ICYmXG4gICAgICAgICAgICB0aGlzLmhhc0RpZmZlcmVudFF1ZXJ5Qm9keShjaGFuZ2VzLnF1ZXJ5Qm9keS5wcmV2aW91c1ZhbHVlLCBjaGFuZ2VzLnF1ZXJ5Qm9keS5jdXJyZW50VmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRTZWFyY2hSZXN1bHRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZXMuc2VhcmNoVGVybSAmJiBjaGFuZ2VzLnNlYXJjaFRlcm0uY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRTZWFyY2hSZXN1bHRzKGNoYW5nZXMuc2VhcmNoVGVybS5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXRSZXN1bHRzKCkge1xuICAgICAgICB0aGlzLmNsZWFuUmVzdWx0cygpO1xuICAgICAgICB0aGlzLnNldFZpc2liaWxpdHkoKTtcbiAgICB9XG5cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIHRoaXMubG9hZFNlYXJjaFJlc3VsdHModGhpcy5zZWFyY2hUZXJtKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc0RpZmZlcmVudFF1ZXJ5Qm9keShwcmV2aW91c1F1ZXJ5Qm9keTogUXVlcnlCb2R5LCBjdXJyZW50UXVlcnlCb2R5OiBRdWVyeUJvZHkpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHByZXZpb3VzUXVlcnlCb2R5KSAhPT0gSlNPTi5zdHJpbmdpZnkoY3VycmVudFF1ZXJ5Qm9keSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhblJlc3VsdHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdHMpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkU2VhcmNoUmVzdWx0cyhzZWFyY2hUZXJtPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucmVzZXRSZXN1bHRzKCk7XG4gICAgICAgIGlmIChzZWFyY2hUZXJtKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5xdWVyeUJvZHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VhcmNoQnlRdWVyeUJvZHkodGhpcy5xdWVyeUJvZHkpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0+IHRoaXMub25TZWFyY2hEYXRhTG9hZGVkKHJlc3VsdCksXG4gICAgICAgICAgICAgICAgICAgIGVyciA9PiB0aGlzLm9uU2VhcmNoRGF0YUVycm9yKGVycilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VhcmNoKHNlYXJjaFRlcm0sIHRoaXMubWF4UmVzdWx0cywgdGhpcy5za2lwUmVzdWx0cykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPT4gdGhpcy5vblNlYXJjaERhdGFMb2FkZWQocmVzdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgZXJyID0+IHRoaXMub25TZWFyY2hEYXRhRXJyb3IoZXJyKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFuUmVzdWx0cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TZWFyY2hEYXRhTG9hZGVkKGRhdGE6IE5vZGVQYWdpbmcpIHtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IGRhdGE7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdExvYWRlZC5lbWl0KHRoaXMucmVzdWx0cyk7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNldFZpc2liaWxpdHkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2VhcmNoRGF0YUVycm9yKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5zdGF0dXMgIT09IDQwMCkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoaWRlUGFuZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5fY2xhc3NMaXN0WydhZGYtc2VhcmNoLXNob3cnXSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fY2xhc3NMaXN0WydhZGYtc2VhcmNoLWhpZGUnXSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0VmlzaWJpbGl0eSgpIHtcbiAgICAgICAgdGhpcy5zaG93UGFuZWwgPSAhIXRoaXMucmVzdWx0cyAmJiAhIXRoaXMucmVzdWx0cy5saXN0O1xuICAgICAgICB0aGlzLl9jbGFzc0xpc3RbJ2FkZi1zZWFyY2gtc2hvdyddID0gdGhpcy5zaG93UGFuZWw7XG4gICAgICAgIHRoaXMuX2NsYXNzTGlzdFsnYWRmLXNlYXJjaC1oaWRlJ10gPSAhdGhpcy5zaG93UGFuZWw7XG4gICAgfVxufVxuIl19