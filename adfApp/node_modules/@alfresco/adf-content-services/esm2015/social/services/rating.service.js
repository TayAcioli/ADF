/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
export class RatingService {
    /**
     * @param {?} apiService
     */
    constructor(apiService) {
        this.apiService = apiService;
    }
    /**
     * Gets the current user's rating for a node.
     * @param {?} nodeId Node to get the rating from
     * @param {?} ratingType Type of rating (can be "likes" or "fiveStar")
     * @return {?} The rating value
     */
    getRating(nodeId, ratingType) {
        return from(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    }
    /**
     * Adds the current user's rating for a node.
     * @param {?} nodeId Target node for the rating
     * @param {?} ratingType Type of rating (can be "likes" or "fiveStar")
     * @param {?} vote Rating value (boolean for "likes", numeric 0..5 for "fiveStar")
     * @return {?} Details about the rating, including the new value
     */
    postRating(nodeId, ratingType, vote) {
        /** @type {?} */
        let ratingBody = {
            'id': ratingType,
            'myRating': vote
        };
        return from(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))
            .pipe(catchError(this.handleError));
    }
    /**
     * Removes the current user's rating for a node.
     * @param {?} nodeId Target node
     * @param {?} ratingType Type of rating to remove (can be "likes" or "fiveStar")
     * @return {?} Null response indicating that the operation is complete
     */
    deleteRating(nodeId, ratingType) {
        return from(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        console.error(error);
        return throwError(error || 'Server error');
    }
}
RatingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RatingService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
if (false) {
    /** @type {?} */
    RatingService.prototype.apiService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJzb2NpYWwvc2VydmljZXMvcmF0aW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHNUMsTUFBTTs7OztJQUVGLFlBQW9CLFVBQThCO1FBQTlCLGVBQVUsR0FBVixVQUFVLENBQW9CO0tBQ2pEOzs7Ozs7O0lBUUQsU0FBUyxDQUFDLE1BQWMsRUFBRSxVQUFlO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQ25GLElBQUksQ0FDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUMvQixDQUFDO0tBQ1Q7Ozs7Ozs7O0lBU0QsVUFBVSxDQUFDLE1BQWMsRUFBRSxVQUFlLEVBQUUsSUFBUzs7UUFDakQsSUFBSSxVQUFVLEdBQWU7WUFDekIsSUFBSSxFQUFFLFVBQVU7WUFDaEIsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzlFLElBQUksQ0FDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUMvQixDQUFDO0tBQ1Q7Ozs7Ozs7SUFRRCxZQUFZLENBQUMsTUFBYyxFQUFFLFVBQWU7UUFDeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDdEYsSUFBSSxDQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQy9CLENBQUM7S0FDVDs7Ozs7SUFFTyxXQUFXLENBQUMsS0FBZTtRQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQzs7OztZQXBEbEQsVUFBVTs7OztZQVBGLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgUmF0aW5nQm9keSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmF0aW5nU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgdXNlcidzIHJhdGluZyBmb3IgYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlSWQgTm9kZSB0byBnZXQgdGhlIHJhdGluZyBmcm9tXG4gICAgICogQHBhcmFtIHJhdGluZ1R5cGUgVHlwZSBvZiByYXRpbmcgKGNhbiBiZSBcImxpa2VzXCIgb3IgXCJmaXZlU3RhclwiKVxuICAgICAqIEByZXR1cm5zIFRoZSByYXRpbmcgdmFsdWVcbiAgICAgKi9cbiAgICBnZXRSYXRpbmcobm9kZUlkOiBzdHJpbmcsIHJhdGluZ1R5cGU6IGFueSk6IGFueSB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmNvcmUucmF0aW5nc0FwaS5nZXRSYXRpbmcobm9kZUlkLCByYXRpbmdUeXBlKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgY3VycmVudCB1c2VyJ3MgcmF0aW5nIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBUYXJnZXQgbm9kZSBmb3IgdGhlIHJhdGluZ1xuICAgICAqIEBwYXJhbSByYXRpbmdUeXBlIFR5cGUgb2YgcmF0aW5nIChjYW4gYmUgXCJsaWtlc1wiIG9yIFwiZml2ZVN0YXJcIilcbiAgICAgKiBAcGFyYW0gdm90ZSBSYXRpbmcgdmFsdWUgKGJvb2xlYW4gZm9yIFwibGlrZXNcIiwgbnVtZXJpYyAwLi41IGZvciBcImZpdmVTdGFyXCIpXG4gICAgICogQHJldHVybnMgRGV0YWlscyBhYm91dCB0aGUgcmF0aW5nLCBpbmNsdWRpbmcgdGhlIG5ldyB2YWx1ZVxuICAgICAqL1xuICAgIHBvc3RSYXRpbmcobm9kZUlkOiBzdHJpbmcsIHJhdGluZ1R5cGU6IGFueSwgdm90ZTogYW55KTogYW55IHtcbiAgICAgICAgbGV0IHJhdGluZ0JvZHk6IFJhdGluZ0JvZHkgPSB7XG4gICAgICAgICAgICAnaWQnOiByYXRpbmdUeXBlLFxuICAgICAgICAgICAgJ215UmF0aW5nJzogdm90ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLnJhdGluZ3NBcGkucmF0ZShub2RlSWQsIHJhdGluZ0JvZHkpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHVzZXIncyByYXRpbmcgZm9yIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIFRhcmdldCBub2RlXG4gICAgICogQHBhcmFtIHJhdGluZ1R5cGUgVHlwZSBvZiByYXRpbmcgdG8gcmVtb3ZlIChjYW4gYmUgXCJsaWtlc1wiIG9yIFwiZml2ZVN0YXJcIilcbiAgICAgKiBAcmV0dXJucyBOdWxsIHJlc3BvbnNlIGluZGljYXRpbmcgdGhhdCB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG4gICAgZGVsZXRlUmF0aW5nKG5vZGVJZDogc3RyaW5nLCByYXRpbmdUeXBlOiBhbnkpOiBhbnkge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLnJhdGluZ3NBcGkucmVtb3ZlUmF0aW5nKG5vZGVJZCwgcmF0aW5nVHlwZSkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IFJlc3BvbnNlKTogYW55IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG4iXX0=