/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
/**
 * Internal service used by ContentNodeSelector component.
 */
export class ContentNodeSelectorService {
    /**
     * @param {?} searchService
     */
    constructor(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    search(searchTerm, rootNodeId = null, skipCount = 0, maxItems = 25, extraNodeIds) {
        /** @type {?} */
        let extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter(id => id !== rootNodeId)
                .forEach(extraId => {
                extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;
            });
        }
        /** @type {?} */
        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];
        /** @type {?} */
        let defaultSearchNode = {
            query: {
                query: `${searchTerm}* OR name:${searchTerm}*`
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' },
                ...parentFiltering
            ],
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    }
}
ContentNodeSelectorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ContentNodeSelectorService.ctorParameters = () => [
    { type: SearchService }
];
if (false) {
    /** @type {?} */
    ContentNodeSelectorService.prototype.searchService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFRM0MsTUFBTTs7OztJQUVGLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0tBQy9DOzs7Ozs7Ozs7OztJQWFNLE1BQU0sQ0FBQyxVQUFrQixFQUFFLGFBQXFCLElBQUksRUFBRSxZQUFvQixDQUFDLEVBQUUsV0FBbUIsRUFBRSxFQUFFLFlBQXVCOztRQUU5SCxJQUFJLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztRQUU5QixJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFlBQVk7aUJBQ1AsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQztpQkFDL0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNmLG9CQUFvQixJQUFJLHlDQUF5QyxPQUFPLEdBQUcsQ0FBQzthQUMvRSxDQUFDLENBQUM7U0FDVjs7UUFFRCxNQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUscUNBQXFDLFVBQVUsSUFBSSxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOztRQUVqSSxJQUFJLGlCQUFpQixHQUFRO1lBQ3pCLEtBQUssRUFBRTtnQkFDSCxLQUFLLEVBQUUsR0FBRyxVQUFVLGFBQWEsVUFBVSxHQUFHO2FBQ2pEO1lBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDO1lBQ3hDLE1BQU0sRUFBRTtnQkFDSixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsU0FBUyxFQUFFLFNBQVM7YUFDdkI7WUFDRCxhQUFhLEVBQUU7Z0JBQ1gsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQzdCLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFO2dCQUNsQyxHQUFHLGVBQWU7YUFDckI7WUFDRCxLQUFLLEVBQUU7Z0JBQ0gsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO2FBQ3ZCO1NBQ0osQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOzs7O1lBbER0RSxVQUFVOzs7O1lBUkYsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZyB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogSW50ZXJuYWwgc2VydmljZSB1c2VkIGJ5IENvbnRlbnROb2RlU2VsZWN0b3IgY29tcG9uZW50LlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udGVudE5vZGVTZWxlY3RvclNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZWFyY2hTZXJ2aWNlOiBTZWFyY2hTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBzZWFyY2ggZm9yIGNvbnRlbnQgbm9kZSBzZWxlY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWFyY2hUZXJtICAgIFRoZSB0ZXJtIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gcm9vdE5vZGVJZCAgICBUaGUgcm9vdCBpcyB0byBzdGFydCB0aGUgc2VhcmNoIGZyb21cbiAgICAgKiBAcGFyYW0gc2tpcENvdW50ICAgICBGcm9tIHdoZXJlIHRvIHN0YXJ0IHRoZSBsb2FkaW5nXG4gICAgICogQHBhcmFtIG1heEl0ZW1zICAgICAgSG93IG1hbnkgaXRlbXMgdG8gbG9hZFxuICAgICAqIEBwYXJhbSBbZXh0cmFOb2RlSWRzXSAgTGlzdCBvZiBleHRyYSBub2RlIGlkcyB0byBzZWFyY2ggZnJvbS4gVGhpcyBsYXN0IHBhcmFtZXRlciBpcyBuZWNlc3Nhcnkgd2hlblxuICAgICAqIHRoZSByb290Tm9kZUlkIGlzIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGFsaWFzZXMgKGUuZy4gJy1teS0nLCAnLXJvb3QtJywgJy1teXNpdGVzLScsIGV0Yy4pXG4gICAgICogYW5kIHNlYXJjaCBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGF0IGFsaWFzLCBidXQgY2FuIGJlIHBlcmZvcm1lZCBvbiBpdHMgY29ycmVzcG9uZGluZyBub2Rlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VhcmNoKHNlYXJjaFRlcm06IHN0cmluZywgcm9vdE5vZGVJZDogc3RyaW5nID0gbnVsbCwgc2tpcENvdW50OiBudW1iZXIgPSAwLCBtYXhJdGVtczogbnVtYmVyID0gMjUsIGV4dHJhTm9kZUlkcz86IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxOb2RlUGFnaW5nPiB7XG5cbiAgICAgICAgbGV0IGV4dHJhUGFyZW50RmlsdGVyaW5nID0gJyc7XG5cbiAgICAgICAgaWYgKGV4dHJhTm9kZUlkcyAmJiBleHRyYU5vZGVJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBleHRyYU5vZGVJZHNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGlkID0+IGlkICE9PSByb290Tm9kZUlkKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGV4dHJhSWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcmVudEZpbHRlcmluZyArPSBgIE9SIEFOQ0VTVE9SOid3b3Jrc3BhY2U6Ly9TcGFjZXNTdG9yZS8ke2V4dHJhSWR9J2A7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJlbnRGaWx0ZXJpbmcgPSByb290Tm9kZUlkID8gW3sgcXVlcnk6IGBBTkNFU1RPUjond29ya3NwYWNlOi8vU3BhY2VzU3RvcmUvJHtyb290Tm9kZUlkfScke2V4dHJhUGFyZW50RmlsdGVyaW5nfWAgfV0gOiBbXTtcblxuICAgICAgICBsZXQgZGVmYXVsdFNlYXJjaE5vZGU6IGFueSA9IHtcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IGAke3NlYXJjaFRlcm19KiBPUiBuYW1lOiR7c2VhcmNoVGVybX0qYFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncGF0aCcsICdhbGxvd2FibGVPcGVyYXRpb25zJ10sXG4gICAgICAgICAgICBwYWdpbmc6IHtcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogbWF4SXRlbXMsXG4gICAgICAgICAgICAgICAgc2tpcENvdW50OiBza2lwQ291bnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXJRdWVyaWVzOiBbXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogXCJUWVBFOidjbTpmb2xkZXInXCIgfSxcbiAgICAgICAgICAgICAgICB7IHF1ZXJ5OiAnTk9UIGNtOmNyZWF0b3I6U3lzdGVtJyB9LFxuICAgICAgICAgICAgICAgIC4uLnBhcmVudEZpbHRlcmluZ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb25zOiBbJ25vZGVzJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hTZXJ2aWNlLnNlYXJjaEJ5UXVlcnlCb2R5KGRlZmF1bHRTZWFyY2hOb2RlKTtcbiAgICB9XG59XG4iXX0=