/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { AlfrescoApiService, HighlightDirective, UserPreferencesService } from '@alfresco/adf-core';
import { FormControl } from '@angular/forms';
import { SitePaging } from 'alfresco-js-api';
import { DocumentListComponent, PaginationStrategy } from '../document-list/components/document-list.component';
import { ContentNodeSelectorService } from './content-node-selector.service';
import { debounceTime } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { CustomResourcesService } from '../document-list/services/custom-resources.service';
/** @typedef {?} */
var ValidationFunction;
export { ValidationFunction };
/** @type {?} */
const defaultValidation = () => true;
const Éµ0 = defaultValidation;
export class ContentNodeSelectorPanelComponent {
    /**
     * @param {?} contentNodeSelectorService
     * @param {?} apiService
     * @param {?} customResourcesService
     * @param {?} preferences
     */
    constructor(contentNodeSelectorService, apiService, customResourcesService, preferences) {
        this.contentNodeSelectorService = contentNodeSelectorService;
        this.apiService = apiService;
        this.customResourcesService = customResourcesService;
        this.preferences = preferences;
        /**
         * Node ID of the folder currently listed.
         */
        this.currentFolderId = null;
        /**
         * Hide the "My Files" option added to the site list by default.
         * See the [Sites Dropdown component](sites-dropdown.component.md)
         * for more information.
         */
        this.dropdownHideMyFiles = false;
        /**
         * Custom site for site dropdown same as siteList. See the
         * [Sites Dropdown component](sites-dropdown.component.md)
         * for more information.
         */
        this.dropdownSiteList = null;
        /**
         * Custom row filter function. See the
         * [Document List component](document-list.component.md#custom-row-filter)
         * for more information.
         */
        this.rowFilter = null;
        /**
         * Custom image resolver function. See the
         * [Document List component](document-list.component.md#custom-row-filter)
         * for more information.
         */
        this.imageResolver = null;
        /**
         * Function used to decide if the selected node has permission to be selected.
         * Default value is a function that always returns true.
         */
        this.isSelectionValid = defaultValidation;
        /**
         * Emitted when the user has chosen an item.
         */
        this.select = new EventEmitter();
        this.nodes = null;
        this.searchTerm = '';
        this.showingSearchResults = false;
        this.loadingSearchResults = false;
        this.inDialog = false;
        this._chosenNode = null;
        this.folderIdToShow = null;
        this.paginationStrategy = PaginationStrategy.Infinite;
        this.skipCount = 0;
        this.infiniteScroll = false;
        this.debounceSearch = 200;
        this.searchInput = new FormControl();
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch))
            .subscribe((searchValue) => {
            this.search(searchValue);
        });
        this.pageSize = this.preferences.paginationSize;
        /** @type {?} */
        let defaultPagination = /** @type {?} */ ({
            maxItems: this.pageSize,
            skipCount: 0,
            totalItems: 0,
            hasMoreItems: false
        });
        this.pagination = new BehaviorSubject(defaultPagination);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set chosenNode(value) {
        this._chosenNode = value;
        /** @type {?} */
        let valuesArray = null;
        if (value) {
            valuesArray = [value];
        }
        this.select.next(valuesArray);
    }
    /**
     * @return {?}
     */
    get chosenNode() {
        return this._chosenNode;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.folderIdToShow = this.currentFolderId;
        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;
        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;
    }
    /**
     * Updates the site attribute and starts a new search
     *
     * @param {?} chosenSite SiteEntry to search within
     * @return {?}
     */
    siteChanged(chosenSite) {
        this.siteId = chosenSite.entry.guid;
        this.updateResults();
    }
    /**
     * Updates the searchTerm attribute and starts a new search
     *
     * @param {?} searchTerm string value to search against
     * @return {?}
     */
    search(searchTerm) {
        this.searchTerm = searchTerm;
        this.updateResults();
    }
    /**
     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb
     * @return {?}
     */
    get breadcrumbFolderNode() {
        /** @type {?} */
        let folderNode;
        if (this.showingSearchResults && this.chosenNode) {
            folderNode = this.chosenNode;
        }
        else {
            folderNode = this.documentList.folderNode;
        }
        return folderNode;
    }
    /**
     * Clear the search input and reset to last folder node in which search was performed
     * @return {?}
     */
    clear() {
        this.clearSearch();
        this.folderIdToShow = this.siteId || this.currentFolderId;
    }
    /**
     * Clear the search input and search related data
     * @return {?}
     */
    clearSearch() {
        this.searchTerm = '';
        this.nodes = null;
        this.skipCount = 0;
        this.chosenNode = null;
        this.showingSearchResults = false;
    }
    /**
     * Update the result list depending on the criterias
     * @return {?}
     */
    updateResults() {
        if (this.searchTerm.length === 0) {
            this.clear();
        }
        else {
            this.startNewSearch();
        }
    }
    /**
     * Load the first page of a new search result
     * @return {?}
     */
    startNewSearch() {
        this.nodes = null;
        this.skipCount = 0;
        this.chosenNode = null;
        this.folderIdToShow = null;
        this.querySearch();
    }
    /**
     * Loads the next batch of search results
     *
     * @param {?} pagination
     * @return {?}
     */
    updatePagination(pagination) {
        this.infiniteScroll = true;
        this.skipCount = pagination.skipCount;
        if (this.searchTerm.length > 0) {
            this.querySearch();
        }
    }
    /**
     * Perform the call to searchService with the proper parameters
     * @return {?}
     */
    querySearch() {
        this.loadingSearchResults = true;
        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {
            this.customResourcesService.getCorrespondingNodeIds(this.siteId)
                .subscribe(nodeIds => {
                this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize, nodeIds)
                    .subscribe(this.showSearchResults.bind(this));
            }, () => {
                this.showSearchResults({ list: { entries: [] } });
            });
        }
        else {
            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize)
                .subscribe(this.showSearchResults.bind(this));
        }
    }
    /**
     * Show the results of the search
     *
     * @param {?} nodePaging
     * @return {?}
     */
    showSearchResults(nodePaging) {
        this.showingSearchResults = true;
        this.loadingSearchResults = false;
        // Documentlist hack, since data displaying for preloaded nodes is a little bit messy there
        if (!this.nodes) {
            this.nodes = nodePaging;
        }
        else {
            this.documentList.data.loadPage(nodePaging, true);
        }
        this.pagination.next(nodePaging.list.pagination);
        this.highlight();
    }
    /**
     * Hightlight the actual searchterm in the next frame
     * @return {?}
     */
    highlight() {
        setTimeout(() => {
            this.highlighter.highlight(this.searchTerm);
        }, 0);
    }
    /**
     * Sets showingSearchResults state to be able to differentiate between search results or folder results
     * @return {?}
     */
    onFolderChange() {
        this.showingSearchResults = false;
        this.infiniteScroll = false;
        this.clearSearch();
    }
    /**
     * Attempts to set the currently loaded node
     * @param {?} nodePaging
     * @return {?}
     */
    onFolderLoaded(nodePaging) {
        if (!this.showingSearchResults) {
            this.attemptNodeSelection(this.documentList.folderNode);
        }
    }
    /**
     * Returns whether breadcrumb has to be shown or not
     * @return {?}
     */
    showBreadcrumbs() {
        return !this.showingSearchResults || this.chosenNode;
    }
    /**
     * Loads the next batch of search results
     *
     * @param {?} event Pagination object
     * @return {?}
     */
    getNextPageOfSearch(event) {
        this.infiniteScroll = true;
        this.skipCount = event.skipCount;
        if (this.searchTerm.length > 0) {
            this.querySearch();
        }
    }
    /**
     * Selects node as chosen if it has the right permission, clears the selection otherwise
     *
     * @param {?} entry
     * @return {?}
     */
    attemptNodeSelection(entry) {
        if (this.isSelectionValid(entry)) {
            this.chosenNode = entry;
        }
        else {
            this.resetChosenNode();
        }
    }
    /**
     * Clears the chosen node
     * @return {?}
     */
    resetChosenNode() {
        this.chosenNode = null;
    }
    /**
     * Invoked when user selects a node
     *
     * @param {?} event CustomEvent for node-select
     * @return {?}
     */
    onNodeSelect(event) {
        this.attemptNodeSelection(event.detail.node.entry);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onNodeDoubleClick(e) {
        /** @type {?} */
        const node = e.detail.node.entry;
        if (node && node.guid) {
            /** @type {?} */
            const options = {
                maxItems: this.pageSize,
                skipCount: this.skipCount,
                include: ['path', 'properties', 'allowableOperations']
            };
            this.apiService.nodesApi.getNode(node.guid, options)
                .then(documentLibrary => {
                this.documentList.performCustomSourceNavigation(documentLibrary);
            });
        }
    }
}
ContentNodeSelectorPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-node-selector-panel',
                template: "<div class=\"adf-content-node-selector-content\" (node-select)=\"onNodeSelect($event)\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n\n    <adf-sites-dropdown\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span class=\"search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            adf-highlight\n            adf-highlight-selector=\"adf-name-location-cell .adf-name-location-cell-name\"\n            [showHeader]=\"false\"\n            [node]=\"nodes\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            selectionMode=\"single\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            (folderChange)=\"onFolderChange()\"\n            (ready)=\"onFolderLoaded($event)\"\n            (node-dblclick)=\"onNodeDoubleClick($event)\"\n            data-automation-id=\"content-node-selector-document-list\">\n            <empty-folder-content>\n                <ng-template>\n                    <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n                </ng-template>\n            </empty-folder-content>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" class=\"full-width ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"modifiedByUser.displayName\" type=\"text\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"documentList\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-node-selector-panel' },
                styles: [""]
            }] }
];
/** @nocollapse */
ContentNodeSelectorPanelComponent.ctorParameters = () => [
    { type: ContentNodeSelectorService },
    { type: AlfrescoApiService },
    { type: CustomResourcesService },
    { type: UserPreferencesService }
];
ContentNodeSelectorPanelComponent.propDecorators = {
    currentFolderId: [{ type: Input }],
    dropdownHideMyFiles: [{ type: Input }],
    dropdownSiteList: [{ type: Input }],
    rowFilter: [{ type: Input }],
    imageResolver: [{ type: Input }],
    pageSize: [{ type: Input }],
    isSelectionValid: [{ type: Input }],
    breadcrumbTransform: [{ type: Input }],
    select: [{ type: Output }],
    documentList: [{ type: ViewChild, args: ['documentList',] }],
    highlighter: [{ type: ViewChild, args: [HighlightDirective,] }]
};
if (false) {
    /**
     * Node ID of the folder currently listed.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.currentFolderId;
    /**
     * Hide the "My Files" option added to the site list by default.
     * See the [Sites Dropdown component](sites-dropdown.component.md)
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.dropdownHideMyFiles;
    /**
     * Custom site for site dropdown same as siteList. See the
     * [Sites Dropdown component](sites-dropdown.component.md)
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.dropdownSiteList;
    /**
     * Custom row filter function. See the
     * [Document List component](document-list.component.md#custom-row-filter)
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.rowFilter;
    /**
     * Custom image resolver function. See the
     * [Document List component](document-list.component.md#custom-row-filter)
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.imageResolver;
    /**
     * Number of items shown per page in the list.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.pageSize;
    /**
     * Function used to decide if the selected node has permission to be selected.
     * Default value is a function that always returns true.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.isSelectionValid;
    /**
     * Transformation to be performed on the chosen/folder node before building the
     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.
     * You can change the path elements from the node that are used to build the
     * breadcrumb using this function.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.breadcrumbTransform;
    /**
     * Emitted when the user has chosen an item.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.select;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.documentList;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.highlighter;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.nodes;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.siteId;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.searchTerm;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.showingSearchResults;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.loadingSearchResults;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.inDialog;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype._chosenNode;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.folderIdToShow;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.paginationStrategy;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.pagination;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.skipCount;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.infiniteScroll;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.debounceSearch;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.searchInput;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.contentNodeSelectorService;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.apiService;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.customResourcesService;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.preferences;
}
export { Éµ0 };

//# sourceMappingURL=data:application/json;base64,