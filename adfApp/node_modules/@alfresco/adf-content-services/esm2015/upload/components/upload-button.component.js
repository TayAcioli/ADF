/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, EXTENDIBLE_COMPONENT, FileUtils, LogService, TranslationService, UploadService, PermissionsEnum } from '@alfresco/adf-core';
import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import { PermissionModel } from '../../document-list/models/permissions.model';
import { UploadBase } from './base-upload/upload-base';
export class UploadButtonComponent extends UploadBase {
    /**
     * @param {?} uploadService
     * @param {?} contentService
     * @param {?} translationService
     * @param {?} logService
     * @param {?} ngZone
     */
    constructor(uploadService, contentService, translationService, logService, ngZone) {
        super(uploadService, translationService, ngZone);
        this.uploadService = uploadService;
        this.contentService = contentService;
        this.translationService = translationService;
        this.logService = logService;
        this.ngZone = ngZone;
        /**
         * Allows/disallows upload folders (only for Chrome).
         */
        this.uploadFolders = false;
        /**
         * Allows/disallows multiple files
         */
        this.multipleFiles = false;
        /**
         * Custom tooltip text.
         */
        this.tooltip = null;
        /**
         * Emitted when create permission is missing.
         */
        this.permissionEvent = new EventEmitter();
        this.hasPermission = false;
        this.permissionValue = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.permissionValue.subscribe((permission) => {
            this.hasPermission = permission;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let rootFolderId = changes['rootFolderId'];
        if (rootFolderId && rootFolderId.currentValue) {
            this.checkPermission();
        }
    }
    /**
     * @return {?}
     */
    isButtonDisabled() {
        return this.disabled ? true : undefined;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFilesAdded($event) {
        /** @type {?} */
        let files = FileUtils.toFileArray($event.currentTarget.files);
        if (this.hasPermission) {
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        // reset the value of the input file
        $event.target.value = '';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDirectoryAdded($event) {
        if (this.hasPermission) {
            /** @type {?} */
            let files = FileUtils.toFileArray($event.currentTarget.files);
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        // reset the value of the input file
        $event.target.value = '';
    }
    /**
     * @return {?}
     */
    checkPermission() {
        if (this.rootFolderId) {
            /** @type {?} */
            let opts = {
                includeSource: true,
                include: ['allowableOperations']
            };
            this.contentService.getNode(this.rootFolderId, opts).subscribe(res => this.permissionValue.next(this.nodeHasPermission(res.entry, PermissionsEnum.CREATE)), error => this.error.emit(error));
        }
    }
    /**
     * @param {?} node
     * @param {?} permission
     * @return {?}
     */
    nodeHasPermission(node, permission) {
        return this.contentService.hasPermission(node, permission);
    }
}
UploadButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-upload-button',
                template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <a *ngIf=\"!uploadFolders\"\n        [disabled]=\"isButtonDisabled()\"\n        mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n\n        <!--Multiple Files Upload-->\n        <span *ngIf=\"multipleFiles\">\n            <label\n                id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-multiple-files\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n\n        <!--Single Files Upload-->\n        <span *ngIf=\"!multipleFiles\">\n            <label\n                id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-single-file\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n    </a>\n\n    <!--Folders Upload-->\n    <a *ngIf=\"uploadFolders\"\n        [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n        <label\n            id=\"uploadFolder-label\"\n            *ngIf=\"!staticTitle\"\n            for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n        <label\n            id=\"uploadFolder-label-static\"\n            *ngIf=\"staticTitle\"\n            for=\"uploadFolder\">{{ staticTitle }}</label>\n        <input #uploadFolders\n            id=\"uploadFolder\"\n            data-automation-id=\"uploadFolder\"\n            type=\"file\"\n            name=\"uploadFiles\"\n            multiple=\"multiple\"\n            accept=\"{{acceptedFilesType}}\"\n            webkitdirectory directory\n            [attr.disabled]=\"isButtonDisabled()\"\n            [title]=\"tooltip\"\n            (change)=\"onDirectoryAdded($event)\">\n    </a>\n</form>\n",
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-upload-button-file-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}"]
            }] }
];
/** @nocollapse */
UploadButtonComponent.ctorParameters = () => [
    { type: UploadService },
    { type: ContentService },
    { type: TranslationService },
    { type: LogService },
    { type: NgZone }
];
UploadButtonComponent.propDecorators = {
    uploadFolders: [{ type: Input }],
    multipleFiles: [{ type: Input }],
    staticTitle: [{ type: Input }],
    tooltip: [{ type: Input }],
    permissionEvent: [{ type: Output }]
};
if (false) {
    /**
     * Allows/disallows upload folders (only for Chrome).
     * @type {?}
     */
    UploadButtonComponent.prototype.uploadFolders;
    /**
     * Allows/disallows multiple files
     * @type {?}
     */
    UploadButtonComponent.prototype.multipleFiles;
    /**
     * Defines the text of the upload button.
     * @type {?}
     */
    UploadButtonComponent.prototype.staticTitle;
    /**
     * Custom tooltip text.
     * @type {?}
     */
    UploadButtonComponent.prototype.tooltip;
    /**
     * Emitted when create permission is missing.
     * @type {?}
     */
    UploadButtonComponent.prototype.permissionEvent;
    /** @type {?} */
    UploadButtonComponent.prototype.hasPermission;
    /** @type {?} */
    UploadButtonComponent.prototype.permissionValue;
    /** @type {?} */
    UploadButtonComponent.prototype.uploadService;
    /** @type {?} */
    UploadButtonComponent.prototype.contentService;
    /** @type {?} */
    UploadButtonComponent.prototype.translationService;
    /** @type {?} */
    UploadButtonComponent.prototype.logService;
    /** @type {?} */
    UploadButtonComponent.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,