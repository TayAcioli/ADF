/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild, ElementRef } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';
import { FormGroup, FormControl } from '@angular/forms';
import { tap, skip } from 'rxjs/operators';
import { SharedLinksApiService, NodesApiService, ContentService } from '@alfresco/adf-core';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import moment from 'moment-es6';
export class ShareDialogComponent {
    /**
     * @param {?} sharedLinksApiService
     * @param {?} dialogRef
     * @param {?} dialog
     * @param {?} nodesApiService
     * @param {?} contentService
     * @param {?} data
     */
    constructor(sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, data) {
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.data = data;
        this.subscriptions = [];
        this.minDate = moment().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            'sharedUrl': new FormControl(''),
            'time': new FormControl({ value: '', disabled: false })
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.canUpdate) {
            this.form.controls['time'].disable();
        }
        this.subscriptions.push(this.form.valueChanges
            .pipe(skip(1), tap((updates) => {
            this.updateNode(updates);
        }))
            .subscribe((updates) => this.updateEntryExpiryDate(updates)));
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            /** @type {?} */
            const properties = this.data.node.entry.properties;
            if (properties && !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe);
    }
    /**
     * @return {?}
     */
    removeShare() {
        this.deleteSharedLink(this.sharedId);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSlideShareChange(event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    }
    /**
     * @return {?}
     */
    get canUpdate() {
        return this.contentService.hasPermission(this.data.node.entry, 'update');
    }
    /**
     * @return {?}
     */
    openConfirmationDialog() {
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClose().subscribe(deleteSharedLink => {
            if (deleteSharedLink) {
                this.deleteSharedLink(this.sharedId);
            }
            else {
                this.isFileShared = true;
            }
        });
    }
    /**
     * @param {?} nodeId
     * @return {?}
     */
    createSharedLinks(nodeId) {
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId)
            .subscribe((sharedLink) => {
            if (sharedLink.entry) {
                this.sharedId = sharedLink.entry.id;
                this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;
                this.isDisabled = false;
                this.isFileShared = true;
                this.updateForm();
            }
        }, () => {
            this.isDisabled = false;
            this.isFileShared = false;
        });
    }
    /**
     * @param {?} sharedId
     * @return {?}
     */
    deleteSharedLink(sharedId) {
        this.isDisabled = true;
        this.sharedLinksApiService.deleteSharedLink(sharedId).subscribe(() => {
            this.data.node.entry.properties['qshare:sharedId'] = null;
            this.data.node.entry.properties['qshare:expiryDate'] = null;
            this.dialogRef.close(false);
        }, () => {
            this.isDisabled = false;
            this.isFileShared = false;
        });
    }
    /**
     * @return {?}
     */
    updateForm() {
        const { entry } = this.data.node;
        /** @type {?} */
        const expiryDate = entry.properties['qshare:expiryDate'];
        this.form.setValue({
            'sharedUrl': `${this.baseShareUrl}${this.sharedId}`,
            'time': expiryDate ? expiryDate : null
        });
    }
    /**
     * @param {?} updates
     * @return {?}
     */
    updateNode(updates) {
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': updates.time ? updates.time.utc().format() : null
            }
        });
    }
    /**
     * @param {?} updates
     * @return {?}
     */
    updateEntryExpiryDate(updates) {
        const { properties } = this.data.node.entry;
        properties['qshare:expiryDate'] = updates.time
            ? updates.time.local()
            : null;
    }
}
ShareDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <h1 data-automation-id=\"adf-share-dialog-title\"\n        class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </h1>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</h1>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"full-width\">\n                <input #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                    <mat-icon class=\"input-action\" matSuffix\n                          [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\"\n                          [adf-clipboard]=\"sharedLinkInput\">\n                        link\n                    </mat-icon>\n            </mat-form-field>\n\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</h1>\n            <mat-form-field class=\"full-width\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    matInput\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\">\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button\n            data-automation-id=\"adf-share-dialog-close\"\n            mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { 'class': 'adf-share-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__label{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87;flex:1 1 auto}.adf-share-link-dialog .adf-share-link__title{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87}.adf-share-link-dialog .adf-share-link__info{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;opacity:.87;opacity:.54;font-size:13px}.adf-share-link-dialog .adf-share-link--row{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.adf-share-link-dialog .adf-share-link__input{opacity:.54}.adf-share-link-dialog .input-action{cursor:pointer}.adf-share-link-dialog .full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
            }] }
];
/** @nocollapse */
ShareDialogComponent.ctorParameters = () => [
    { type: SharedLinksApiService },
    { type: MatDialogRef },
    { type: MatDialog },
    { type: NodesApiService },
    { type: ContentService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ShareDialogComponent.propDecorators = {
    sharedLinkInput: [{ type: ViewChild, args: ['sharedLinkInput',] }]
};
if (false) {
    /** @type {?} */
    ShareDialogComponent.prototype.subscriptions;
    /** @type {?} */
    ShareDialogComponent.prototype.minDate;
    /** @type {?} */
    ShareDialogComponent.prototype.sharedId;
    /** @type {?} */
    ShareDialogComponent.prototype.fileName;
    /** @type {?} */
    ShareDialogComponent.prototype.baseShareUrl;
    /** @type {?} */
    ShareDialogComponent.prototype.isFileShared;
    /** @type {?} */
    ShareDialogComponent.prototype.isDisabled;
    /** @type {?} */
    ShareDialogComponent.prototype.form;
    /** @type {?} */
    ShareDialogComponent.prototype.sharedLinkInput;
    /** @type {?} */
    ShareDialogComponent.prototype.sharedLinksApiService;
    /** @type {?} */
    ShareDialogComponent.prototype.dialogRef;
    /** @type {?} */
    ShareDialogComponent.prototype.dialog;
    /** @type {?} */
    ShareDialogComponent.prototype.nodesApiService;
    /** @type {?} */
    ShareDialogComponent.prototype.contentService;
    /** @type {?} */
    ShareDialogComponent.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,