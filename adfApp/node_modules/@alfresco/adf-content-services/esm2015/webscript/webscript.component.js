/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectDataTableAdapter } from '@alfresco/adf-core';
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * <adf-webscript-get [scriptPath]="string"
 *                         [scriptArgs]="Object"
 *                         [contextRoot]="string"
 *                         [servicePath]="string"
 *                         [contentType]="JSON|HTML|DATATABLE"
 *                         (success)="customMethod($event)>
 * </adf-webscript-get>
 *
 * This component, provide a get webscript viewer
 *
 * \@InputParam {string} scriptPath path to Web Script (as defined by Web Script)
 * \@InputParam {Object} scriptArgs arguments to pass to Web Script
 * \@InputParam {string} contextRoot path where application is deployed default value 'alfresco'
 * \@InputParam {string} servicePath path where Web Script service is mapped default value 'service'
 * \@InputParam {string} contentType JSON | HTML | DATATABLE | TEXT
 *
 * \@Output - success - The event is emitted when the data are recived
 *
 */
export class WebscriptComponent {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Toggles whether to show or hide the data.
         */
        this.showData = true;
        /**
         * Path where the application is deployed
         */
        this.contextRoot = 'alfresco';
        /**
         * Path that the webscript service is mapped to.
         */
        this.servicePath = 'service';
        /**
         * Content type to interpret the data received from the webscript.
         * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
         */
        this.contentType = 'TEXT';
        /**
         * Emitted when the operation succeeds. You can get the plain data from
         * the webscript through the **success** event parameter and use it as you
         * need in your application.
         */
        this.success = new EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.showData) {
            this.clean();
        }
        return new Promise((resolve, reject) => {
            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptdata) => {
                this.data = webScriptdata;
                if (this.showData) {
                    if (this.contentType === 'DATATABLE') {
                        this.data = this.showDataAsDataTable(webScriptdata);
                    }
                }
                this.success.emit(this.data);
                resolve();
            }, (error) => {
                this.logService.log('Error' + error);
                reject();
            });
        });
    }
    /**
     * show the data in a ng2-alfresco-datatable
     *
     * \@retutns the data as datatable
     * @param {?} data
     *
     * @return {?}
     */
    showDataAsDataTable(data) {
        /** @type {?} */
        let datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (e) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    }
    /**
     * @return {?}
     */
    clean() {
        this.data = undefined;
    }
    /**
     * @return {?}
     */
    isDataTableContent() {
        return this.contentType === 'DATATABLE';
    }
}
WebscriptComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-webscript-get',
                template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
            }] }
];
/** @nocollapse */
WebscriptComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
WebscriptComponent.propDecorators = {
    scriptPath: [{ type: Input }],
    scriptArgs: [{ type: Input }],
    showData: [{ type: Input }],
    contextRoot: [{ type: Input }],
    servicePath: [{ type: Input }],
    contentType: [{ type: Input }],
    success: [{ type: Output }]
};
if (false) {
    /**
     * (required) Path to the webscript (as defined by webscript).
     * @type {?}
     */
    WebscriptComponent.prototype.scriptPath;
    /**
     * Arguments to pass to the webscript.
     * @type {?}
     */
    WebscriptComponent.prototype.scriptArgs;
    /**
     * Toggles whether to show or hide the data.
     * @type {?}
     */
    WebscriptComponent.prototype.showData;
    /**
     * Path where the application is deployed
     * @type {?}
     */
    WebscriptComponent.prototype.contextRoot;
    /**
     * Path that the webscript service is mapped to.
     * @type {?}
     */
    WebscriptComponent.prototype.servicePath;
    /**
     * Content type to interpret the data received from the webscript.
     * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
     * @type {?}
     */
    WebscriptComponent.prototype.contentType;
    /**
     * Emitted when the operation succeeds. You can get the plain data from
     * the webscript through the **success** event parameter and use it as you
     * need in your application.
     * @type {?}
     */
    WebscriptComponent.prototype.success;
    /** @type {?} */
    WebscriptComponent.prototype.data;
    /** @type {?} */
    WebscriptComponent.prototype.showError;
    /** @type {?} */
    WebscriptComponent.prototype.apiService;
    /** @type {?} */
    WebscriptComponent.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2NyaXB0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbIndlYnNjcmlwdC93ZWJzY3JpcHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQmxGLE1BQU07Ozs7O0lBc0NGLFlBQW9CLFVBQThCLEVBQzlCO1FBREEsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIsZUFBVSxHQUFWLFVBQVU7Ozs7d0JBM0JWLElBQUk7Ozs7MkJBSUYsVUFBVTs7OzsyQkFJVixTQUFTOzs7OzsyQkFNVCxNQUFNOzs7Ozs7dUJBT2xCLElBQUksWUFBWSxFQUFFO29CQUVoQixTQUFTO3lCQUNBLEtBQUs7S0FJekI7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQU87UUFDZixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEI7UUFFRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7Z0JBRXpKLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDO2dCQUUxQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ2YsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFdBQVcsRUFBRTt3QkFDbEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7cUJBQ3ZEO2lCQUNKO2dCQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFN0IsT0FBTyxFQUFFLENBQUM7YUFDYixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQzthQUNaLENBQUMsQ0FBQztTQUNOLENBQUMsQ0FBQztLQUNOOzs7Ozs7Ozs7SUFTRCxtQkFBbUIsQ0FBQyxJQUFTOztRQUN6QixJQUFJLGFBQWEsR0FBUSxJQUFJLENBQUM7UUFDOUIsSUFBSTtZQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsc0JBQXNCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNsRTtZQUVELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNsRTtTQUVKO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQy9EO1FBRUQsT0FBTyxhQUFhLENBQUM7S0FDeEI7Ozs7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7S0FDekI7Ozs7SUFFRCxrQkFBa0I7UUFDZCxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssV0FBVyxDQUFDO0tBQzNDOzs7WUF4R0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLDBzQkFBdUM7YUFDMUM7Ozs7WUExQlEsa0JBQWtCO1lBQUUsVUFBVTs7O3lCQThCbEMsS0FBSzt5QkFJTCxLQUFLO3VCQUlMLEtBQUs7MEJBSUwsS0FBSzswQkFJTCxLQUFLOzBCQU1MLEtBQUs7c0JBT0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE9iamVjdERhdGFUYWJsZUFkYXB0ZXIgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiA8YWRmLXdlYnNjcmlwdC1nZXQgW3NjcmlwdFBhdGhdPVwic3RyaW5nXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIFtzY3JpcHRBcmdzXT1cIk9iamVjdFwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBbY29udGV4dFJvb3RdPVwic3RyaW5nXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIFtzZXJ2aWNlUGF0aF09XCJzdHJpbmdcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgW2NvbnRlbnRUeXBlXT1cIkpTT058SFRNTHxEQVRBVEFCTEVcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgKHN1Y2Nlc3MpPVwiY3VzdG9tTWV0aG9kKCRldmVudCk+XG4gKiA8L2FkZi13ZWJzY3JpcHQtZ2V0PlxuICpcbiAqIFRoaXMgY29tcG9uZW50LCBwcm92aWRlIGEgZ2V0IHdlYnNjcmlwdCB2aWV3ZXJcbiAqXG4gKiBASW5wdXRQYXJhbSB7c3RyaW5nfSBzY3JpcHRQYXRoIHBhdGggdG8gV2ViIFNjcmlwdCAoYXMgZGVmaW5lZCBieSBXZWIgU2NyaXB0KVxuICogQElucHV0UGFyYW0ge09iamVjdH0gc2NyaXB0QXJncyBhcmd1bWVudHMgdG8gcGFzcyB0byBXZWIgU2NyaXB0XG4gKiBASW5wdXRQYXJhbSB7c3RyaW5nfSBjb250ZXh0Um9vdCBwYXRoIHdoZXJlIGFwcGxpY2F0aW9uIGlzIGRlcGxveWVkIGRlZmF1bHQgdmFsdWUgJ2FsZnJlc2NvJ1xuICogQElucHV0UGFyYW0ge3N0cmluZ30gc2VydmljZVBhdGggcGF0aCB3aGVyZSBXZWIgU2NyaXB0IHNlcnZpY2UgaXMgbWFwcGVkIGRlZmF1bHQgdmFsdWUgJ3NlcnZpY2UnXG4gKiBASW5wdXRQYXJhbSB7c3RyaW5nfSBjb250ZW50VHlwZSBKU09OIHwgSFRNTCB8IERBVEFUQUJMRSB8IFRFWFRcbiAqXG4gKiBAT3V0cHV0IC0gc3VjY2VzcyAtIFRoZSBldmVudCBpcyBlbWl0dGVkIHdoZW4gdGhlIGRhdGEgYXJlIHJlY2l2ZWRcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXdlYnNjcmlwdC1nZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnd2Vic2NyaXB0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBXZWJzY3JpcHRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgLyoqIChyZXF1aXJlZCkgUGF0aCB0byB0aGUgd2Vic2NyaXB0IChhcyBkZWZpbmVkIGJ5IHdlYnNjcmlwdCkuICovXG4gICAgQElucHV0KClcbiAgICBzY3JpcHRQYXRoOiBzdHJpbmc7XG5cbiAgICAvKiogQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIHdlYnNjcmlwdC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNjcmlwdEFyZ3M6IGFueTtcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdG8gc2hvdyBvciBoaWRlIHRoZSBkYXRhLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0RhdGE6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFBhdGggd2hlcmUgdGhlIGFwcGxpY2F0aW9uIGlzIGRlcGxveWVkICovXG4gICAgQElucHV0KClcbiAgICBjb250ZXh0Um9vdDogc3RyaW5nID0gJ2FsZnJlc2NvJztcblxuICAgIC8qKiBQYXRoIHRoYXQgdGhlIHdlYnNjcmlwdCBzZXJ2aWNlIGlzIG1hcHBlZCB0by4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNlcnZpY2VQYXRoOiBzdHJpbmcgPSAnc2VydmljZSc7XG5cbiAgICAvKiogQ29udGVudCB0eXBlIHRvIGludGVycHJldCB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIHRoZSB3ZWJzY3JpcHQuXG4gICAgICogQ2FuIGJlIFwiSlNPTlwiICwgXCJIVE1MXCIgLCBcIkRBVEFUQUJMRVwiIG9yIFwiVEVYVFwiXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBjb250ZW50VHlwZTogc3RyaW5nID0gJ1RFWFQnO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgb3BlcmF0aW9uIHN1Y2NlZWRzLiBZb3UgY2FuIGdldCB0aGUgcGxhaW4gZGF0YSBmcm9tXG4gICAgICogdGhlIHdlYnNjcmlwdCB0aHJvdWdoIHRoZSAqKnN1Y2Nlc3MqKiBldmVudCBwYXJhbWV0ZXIgYW5kIHVzZSBpdCBhcyB5b3VcbiAgICAgKiBuZWVkIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGRhdGE6IGFueSA9IHVuZGVmaW5lZDtcbiAgICBzaG93RXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0RhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS53ZWJTY3JpcHQuZXhlY3V0ZVdlYlNjcmlwdCgnR0VUJywgdGhpcy5zY3JpcHRQYXRoLCB0aGlzLnNjcmlwdEFyZ3MsIHRoaXMuY29udGV4dFJvb3QsIHRoaXMuc2VydmljZVBhdGgpLnRoZW4oKHdlYlNjcmlwdGRhdGEpID0+IHtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHdlYlNjcmlwdGRhdGE7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZW50VHlwZSA9PT0gJ0RBVEFUQUJMRScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuc2hvd0RhdGFBc0RhdGFUYWJsZSh3ZWJTY3JpcHRkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHRoaXMuZGF0YSk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKCdFcnJvcicgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2hvdyB0aGUgZGF0YSBpbiBhIG5nMi1hbGZyZXNjby1kYXRhdGFibGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICpcbiAgICAgKiBAcmV0dXRucyB0aGUgZGF0YSBhcyBkYXRhdGFibGVcbiAgICAgKi9cbiAgICBzaG93RGF0YUFzRGF0YVRhYmxlKGRhdGE6IGFueSkge1xuICAgICAgICBsZXQgZGF0YXRhYmxlRGF0YTogYW55ID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgaWYgKCFkYXRhLnNjaGVtYSkge1xuICAgICAgICAgICAgICAgIGRhdGEuc2NoZW1hID0gT2JqZWN0RGF0YVRhYmxlQWRhcHRlci5nZW5lcmF0ZVNjaGVtYShkYXRhLmRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YS5zY2hlbWEgJiYgZGF0YS5zY2hlbWEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5ldyBPYmplY3REYXRhVGFibGVBZGFwdGVyKGRhdGEuZGF0YSwgZGF0YS5zY2hlbWEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignZXJyb3IgZHVyaW5nIHRoZSBjYXN0IGFzIGRhdGF0YWJsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGF0YWJsZURhdGE7XG4gICAgfVxuXG4gICAgY2xlYW4oKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpc0RhdGFUYWJsZUNvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRUeXBlID09PSAnREFUQVRBQkxFJztcbiAgICB9XG59XG4iXX0=