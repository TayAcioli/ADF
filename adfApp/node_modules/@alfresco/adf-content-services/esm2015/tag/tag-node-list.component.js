/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
/**
 *
 * This component, ShowNodeTag a list of the tag on relative a node
 */
export class TagNodeListComponent {
    /**
     * Constructor
     * @param {?} tagService
     */
    constructor(tagService) {
        this.tagService = tagService;
        /**
         * Show delete button
         */
        this.showDelete = true;
        /**
         * Emitted when a tag is selected.
         */
        this.results = new EventEmitter();
        this.tagService.refresh.subscribe(() => {
            this.refreshTag();
        });
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        return this.refreshTag();
    }
    /**
     * @return {?}
     */
    refreshTag() {
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {
                this.tagsEntries = data.list.entries;
                this.results.emit(this.tagsEntries);
            });
        }
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    removeTag(tag) {
        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {
            this.refreshTag();
        });
    }
}
TagNodeListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tag-node-list',
                template: "<mat-chip-list>\n    <mat-chip class=\"adf-tag-chips adf-primary-background-color\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        <button *ngIf=\"showDelete\" class=\"adf-tag-chips-delete\" id=\"tag_chips_delete_{{currentEntry.entry.tag}}\" type=\"button\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <mat-icon class=\"adf-tag-chips-delete-icon adf-primary-contrast-text-color\" matChipRemove>cancel</mat-icon>\n        </button>\n    </mat-chip>\n</mat-chip-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-tag-chips-delete{overflow:visible;cursor:pointer;height:17px;width:20px;float:right;border:0;background:0 0;padding:0;margin:-1px 0 0 10px}.adf-tag-chips-delete-icon{font-size:20px;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:20px;width:20px}"]
            }] }
];
/** @nocollapse */
TagNodeListComponent.ctorParameters = () => [
    { type: TagService }
];
TagNodeListComponent.propDecorators = {
    nodeId: [{ type: Input }],
    showDelete: [{ type: Input }],
    results: [{ type: Output }]
};
if (false) {
    /**
     * The identifier of a node.
     * @type {?}
     */
    TagNodeListComponent.prototype.nodeId;
    /**
     * Show delete button
     * @type {?}
     */
    TagNodeListComponent.prototype.showDelete;
    /** @type {?} */
    TagNodeListComponent.prototype.tagsEntries;
    /**
     * Emitted when a tag is selected.
     * @type {?}
     */
    TagNodeListComponent.prototype.results;
    /** @type {?} */
    TagNodeListComponent.prototype.tagService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLW5vZGUtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJ0YWcvdGFnLW5vZGUtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7O0FBYXBELE1BQU07Ozs7O0lBbUJGLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7Ozs7MEJBWjdCLElBQUk7Ozs7dUJBTVAsSUFBSSxZQUFZLEVBQUU7UUFPeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNuQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckIsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7Ozs7SUFFRCxVQUFVO1FBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM1RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDdkMsQ0FBQyxDQUFDO1NBQ047S0FDSjs7Ozs7SUFFRCxTQUFTLENBQUMsR0FBVztRQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDdkQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCLENBQUMsQ0FBQztLQUNOOzs7WUFoREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLDhrQkFBNkM7Z0JBRTdDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN4Qzs7OztZQVpRLFVBQVU7OztxQkFlZCxLQUFLO3lCQUlMLEtBQUs7c0JBTUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYWdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy90YWcuc2VydmljZSc7XG5cbi8qKlxuICpcbiAqIFRoaXMgY29tcG9uZW50LCBTaG93Tm9kZVRhZyBhIGxpc3Qgb2YgdGhlIHRhZyBvbiByZWxhdGl2ZSBhIG5vZGVcbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi10YWctbm9kZS1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGFnLW5vZGUtbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGFnLW5vZGUtbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgVGFnTm9kZUxpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIC8qKiBUaGUgaWRlbnRpZmllciBvZiBhIG5vZGUuICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIC8qKiBTaG93IGRlbGV0ZSBidXR0b24gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dEZWxldGUgPSB0cnVlO1xuXG4gICAgdGFnc0VudHJpZXM6IGFueTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB0YWcgaXMgc2VsZWN0ZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgcmVzdWx0cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHRhZ1NlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhZ1NlcnZpY2U6IFRhZ1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLnJlZnJlc2guc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFRhZygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaFRhZygpO1xuICAgIH1cblxuICAgIHJlZnJlc2hUYWcoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVJZCkge1xuICAgICAgICAgICAgdGhpcy50YWdTZXJ2aWNlLmdldFRhZ3NCeU5vZGVJZCh0aGlzLm5vZGVJZCkuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzRW50cmllcyA9IGRhdGEubGlzdC5lbnRyaWVzO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0cy5lbWl0KHRoaXMudGFnc0VudHJpZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVUYWcodGFnOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLnJlbW92ZVRhZyh0aGlzLm5vZGVJZCwgdGFnKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVGFnKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==