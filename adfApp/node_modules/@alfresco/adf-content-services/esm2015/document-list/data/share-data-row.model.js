/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectUtils } from '@alfresco/adf-core';
export class ShareDataRow {
    /**
     * @param {?} obj
     * @param {?} documentListService
     * @param {?} permissionsStyle
     * @param {?=} thumbnailService
     */
    constructor(obj, documentListService, permissionsStyle, thumbnailService) {
        this.obj = obj;
        this.documentListService = documentListService;
        this.permissionsStyle = permissionsStyle;
        this.thumbnailService = thumbnailService;
        this.cache = {};
        this.isSelected = false;
        this.cssClass = '';
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);
        if (permissionsStyle) {
            this.cssClass = this.getPermissionClass(obj);
        }
    }
    /**
     * @return {?}
     */
    get node() {
        return this.obj;
    }
    /**
     * @param {?} nodeEntity
     * @return {?}
     */
    getPermissionClass(nodeEntity) {
        /** @type {?} */
        let permissionsClasses = '';
        this.permissionsStyle.forEach((currentPermissionsStyle) => {
            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                if (this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {
                    permissionsClasses += ` ${currentPermissionsStyle.css}`;
                }
            }
        });
        return permissionsClasses;
    }
    /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    applyPermissionStyleToFile(node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFile && node.isFile);
    }
    /**
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    applyPermissionStyleToFolder(node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFolder && node.isFolder);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isFolderAndHasPermissionToUpload(obj) {
        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isFolder(obj) {
        return obj.entry && obj.entry.isFolder;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    cacheValue(key, value) {
        this.cache[key] = value;
        return value;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ObjectUtils.getValue(this.obj.entry, key);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    imageErrorResolver(event) {
        return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    hasValue(key) {
        return this.getValue(key) !== undefined;
    }
}
ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
if (false) {
    /** @type {?} */
    ShareDataRow.ERR_OBJECT_NOT_FOUND;
    /** @type {?} */
    ShareDataRow.prototype.cache;
    /** @type {?} */
    ShareDataRow.prototype.isSelected;
    /** @type {?} */
    ShareDataRow.prototype.isDropTarget;
    /** @type {?} */
    ShareDataRow.prototype.cssClass;
    /** @type {?} */
    ShareDataRow.prototype.obj;
    /** @type {?} */
    ShareDataRow.prototype.documentListService;
    /** @type {?} */
    ShareDataRow.prototype.permissionsStyle;
    /** @type {?} */
    ShareDataRow.prototype.thumbnailService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtZGF0YS1yb3cubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkb2N1bWVudC1saXN0L2RhdGEvc2hhcmUtZGF0YS1yb3cubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFXLFdBQVcsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUs1RSxNQUFNOzs7Ozs7O0lBYUYsWUFBb0IsR0FBc0IsRUFDdEIscUJBQ0Esa0JBQ0E7UUFIQSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUN0Qix3QkFBbUIsR0FBbkIsbUJBQW1CO1FBQ25CLHFCQUFnQixHQUFoQixnQkFBZ0I7UUFDaEIscUJBQWdCLEdBQWhCLGdCQUFnQjtxQkFaSixFQUFFOzBCQUNaLEtBQUs7d0JBRVIsRUFBRTtRQVVqQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN0RDtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRS9ELElBQUksZ0JBQWdCLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEQ7S0FDSjs7OztJQWpCRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7S0FDbkI7Ozs7O0lBaUJELGtCQUFrQixDQUFDLFVBQTZCOztRQUM1QyxJQUFJLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsdUJBQTZDLEVBQUUsRUFBRTtZQUU1RSxJQUFJLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsRUFBRTtnQkFFNUosSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQzlGLGtCQUFrQixJQUFJLElBQUksdUJBQXVCLENBQUMsR0FBRyxFQUFFLENBQUM7aUJBQzNEO2FBQ0o7U0FFSixDQUFDLENBQUM7UUFFSCxPQUFPLGtCQUFrQixDQUFDO0tBQzdCOzs7Ozs7SUFFTywwQkFBMEIsQ0FBQyxJQUFpQixFQUFFLHVCQUE2QztRQUMvRixPQUFPLENBQUMsdUJBQXVCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Ozs7OztJQUduRCw0QkFBNEIsQ0FBQyxJQUFpQixFQUFFLHVCQUE2QztRQUNqRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7O0lBRy9ELGdDQUFnQyxDQUFDLEdBQXNCO1FBQ25ELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDNUY7Ozs7O0lBRUQsUUFBUSxDQUFDLEdBQXNCO1FBQzNCLE9BQU8sR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztLQUMxQzs7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCOzs7OztJQUVELFFBQVEsQ0FBQyxHQUFXO1FBQ2hCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3BEOzs7OztJQUVELGtCQUFrQixDQUFDLEtBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNqRjs7Ozs7SUFFRCxRQUFRLENBQUMsR0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUFDO0tBQzNDOztvQ0E3RXFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERhdGFSb3csIE9iamVjdFV0aWxzLCBUaHVtYm5haWxTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IE1pbmltYWxOb2RlLCBNaW5pbWFsTm9kZUVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uU3R5bGVNb2RlbCB9IGZyb20gJy4vLi4vbW9kZWxzL3Blcm1pc3Npb25zLXN0eWxlLm1vZGVsJztcbmltcG9ydCB7IERvY3VtZW50TGlzdFNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL2RvY3VtZW50LWxpc3Quc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBTaGFyZURhdGFSb3cgaW1wbGVtZW50cyBEYXRhUm93IHtcblxuICAgIHN0YXRpYyBFUlJfT0JKRUNUX05PVF9GT1VORDogc3RyaW5nID0gJ09iamVjdCBzb3VyY2Ugbm90IGZvdW5kJztcblxuICAgIGNhY2hlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGlzRHJvcFRhcmdldDogYm9vbGVhbjtcbiAgICBjc3NDbGFzczogc3RyaW5nID0gJyc7XG5cbiAgICBnZXQgbm9kZSgpOiBNaW5pbWFsTm9kZUVudGl0eSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9iajtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9iajogTWluaW1hbE5vZGVFbnRpdHksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkb2N1bWVudExpc3RTZXJ2aWNlOiBEb2N1bWVudExpc3RTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcGVybWlzc2lvbnNTdHlsZTogUGVybWlzc2lvblN0eWxlTW9kZWxbXSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRodW1ibmFpbFNlcnZpY2U/OiBUaHVtYm5haWxTZXJ2aWNlKSB7XG4gICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoU2hhcmVEYXRhUm93LkVSUl9PQkpFQ1RfTk9UX0ZPVU5EKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNEcm9wVGFyZ2V0ID0gdGhpcy5pc0ZvbGRlckFuZEhhc1Blcm1pc3Npb25Ub1VwbG9hZChvYmopO1xuXG4gICAgICAgIGlmIChwZXJtaXNzaW9uc1N0eWxlKSB7XG4gICAgICAgICAgICB0aGlzLmNzc0NsYXNzID0gdGhpcy5nZXRQZXJtaXNzaW9uQ2xhc3Mob2JqKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFBlcm1pc3Npb25DbGFzcyhub2RlRW50aXR5OiBNaW5pbWFsTm9kZUVudGl0eSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBwZXJtaXNzaW9uc0NsYXNzZXMgPSAnJztcblxuICAgICAgICB0aGlzLnBlcm1pc3Npb25zU3R5bGUuZm9yRWFjaCgoY3VycmVudFBlcm1pc3Npb25zU3R5bGU6IFBlcm1pc3Npb25TdHlsZU1vZGVsKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFwcGx5UGVybWlzc2lvblN0eWxlVG9Gb2xkZXIobm9kZUVudGl0eS5lbnRyeSwgY3VycmVudFBlcm1pc3Npb25zU3R5bGUpIHx8IHRoaXMuYXBwbHlQZXJtaXNzaW9uU3R5bGVUb0ZpbGUobm9kZUVudGl0eS5lbnRyeSwgY3VycmVudFBlcm1pc3Npb25zU3R5bGUpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmhhc1Blcm1pc3Npb24obm9kZUVudGl0eS5lbnRyeSwgY3VycmVudFBlcm1pc3Npb25zU3R5bGUucGVybWlzc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbnNDbGFzc2VzICs9IGAgJHtjdXJyZW50UGVybWlzc2lvbnNTdHlsZS5jc3N9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHBlcm1pc3Npb25zQ2xhc3NlcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5UGVybWlzc2lvblN0eWxlVG9GaWxlKG5vZGU6IE1pbmltYWxOb2RlLCBjdXJyZW50UGVybWlzc2lvbnNTdHlsZTogUGVybWlzc2lvblN0eWxlTW9kZWwpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChjdXJyZW50UGVybWlzc2lvbnNTdHlsZS5pc0ZpbGUgJiYgbm9kZS5pc0ZpbGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlQZXJtaXNzaW9uU3R5bGVUb0ZvbGRlcihub2RlOiBNaW5pbWFsTm9kZSwgY3VycmVudFBlcm1pc3Npb25zU3R5bGU6IFBlcm1pc3Npb25TdHlsZU1vZGVsKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAoY3VycmVudFBlcm1pc3Npb25zU3R5bGUuaXNGb2xkZXIgJiYgbm9kZS5pc0ZvbGRlcik7XG4gICAgfVxuXG4gICAgaXNGb2xkZXJBbmRIYXNQZXJtaXNzaW9uVG9VcGxvYWQob2JqOiBNaW5pbWFsTm9kZUVudGl0eSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0ZvbGRlcihvYmopICYmIHRoaXMuZG9jdW1lbnRMaXN0U2VydmljZS5oYXNQZXJtaXNzaW9uKG9iai5lbnRyeSwgJ2NyZWF0ZScpO1xuICAgIH1cblxuICAgIGlzRm9sZGVyKG9iajogTWluaW1hbE5vZGVFbnRpdHkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIG9iai5lbnRyeSAmJiBvYmouZW50cnkuaXNGb2xkZXI7XG4gICAgfVxuXG4gICAgY2FjaGVWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdFV0aWxzLmdldFZhbHVlKHRoaXMub2JqLmVudHJ5LCBrZXkpO1xuICAgIH1cblxuICAgIGltYWdlRXJyb3JSZXNvbHZlcihldmVudDogRXZlbnQpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYm5haWxTZXJ2aWNlLmdldE1pbWVUeXBlSWNvbih0aGlzLm9iai5lbnRyeS5jb250ZW50Lm1pbWVUeXBlKTtcbiAgICB9XG5cbiAgICBoYXNWYWx1ZShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShrZXkpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl19