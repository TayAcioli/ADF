/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataSorting } from '@alfresco/adf-core';
import { ShareDataRow } from './share-data-row.model';
export class ShareDataTableAdapter {
    /**
     * @param {?} documentListService
     * @param {?} thumbnailService
     * @param {?=} schema
     * @param {?=} sorting
     * @param {?=} sortingMode
     */
    constructor(documentListService, thumbnailService, schema = [], sorting, sortingMode = 'client') {
        this.documentListService = documentListService;
        this.thumbnailService = thumbnailService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortingMode(value) {
        /** @type {?} */
        let newValue = (value || 'client').toLowerCase();
        if (newValue !== 'client' && newValue !== 'server') {
            newValue = 'client';
        }
        this._sortingMode = newValue;
    }
    /**
     * @return {?}
     */
    get sortingMode() {
        return this._sortingMode;
    }
    /**
     * @return {?}
     */
    getRows() {
        return this.rows;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    setRows(rows) {
        this.rows = rows || [];
        this.sort();
    }
    /**
     * @return {?}
     */
    getColumns() {
        return this.columns;
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    setColumns(columns) {
        this.columns = columns || [];
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    getValue(row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        /** @type {?} */
        let dataRow = /** @type {?} */ (row);
        /** @type {?} */
        let value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                /** @type {?} */
                let resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            /** @type {?} */
            const node = (/** @type {?} */ (row)).node;
            if (node.entry.isFolder) {
                if (this.isSmartFolder(node)) {
                    return this.documentListService.getMimeTypeIcon('smartFolder');
                }
                else {
                    return this.documentListService.getMimeTypeIcon('folder');
                }
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.documentListService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                /** @type {?} */
                const mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.documentListService.getMimeTypeIcon(mimeType);
                }
            }
            return this.documentListService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                /** @type {?} */
                let resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    }
    /**
     * @return {?}
     */
    getSorting() {
        return this.sorting;
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    setSorting(sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    }
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    sort(key, direction) {
        /** @type {?} */
        let sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    setFilter(filter) {
        this.filter = filter;
    }
    /**
     * @param {?} resolver
     * @return {?}
     */
    setImageResolver(resolver) {
        this.imageResolver = resolver;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isSmartFolder(node) {
        /** @type {?} */
        let nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getNodeAspectNames(node) {
        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];
    }
    /**
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    sortRows(rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        /** @type {?} */
        const options = {};
        if (sorting && sorting.key && rows && rows.length > 0) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort((a, b) => {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                /** @type {?} */
                let left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                let right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            });
        }
    }
    /**
     * @param {?} page
     * @param {?=} merge
     * @return {?}
     */
    loadPage(page, merge = false) {
        /** @type {?} */
        let rows = [];
        if (page && page.list) {
            /** @type {?} */
            let data = page.list.entries;
            if (data && data.length > 0) {
                rows = data.map(item => new ShareDataRow(item, this.documentListService, this.permissionsStyle, this.thumbnailService));
                if (this.filter) {
                    rows = rows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    // Sort by first sortable or just first column
                    if (this.columns && this.columns.length > 0) {
                        /** @type {?} */
                        let sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(rows, sorting);
                        }
                        else {
                            /** @type {?} */
                            let sortable = this.columns.filter(c => c.sortable);
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge) {
            /** @type {?} */
            let listPrunedDuplicate = rows.filter((elemntToFilter) => {
                /** @type {?} */
                let isPresent = this.rows.find((currenRow) => {
                    return currenRow.obj.entry.id === elemntToFilter.obj.entry.id;
                });
                return !isPresent;
            });
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = rows;
        }
    }
}
if (false) {
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_ROW_NOT_FOUND;
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_COL_NOT_FOUND;
    /** @type {?} */
    ShareDataTableAdapter.prototype._sortingMode;
    /** @type {?} */
    ShareDataTableAdapter.prototype.sorting;
    /** @type {?} */
    ShareDataTableAdapter.prototype.rows;
    /** @type {?} */
    ShareDataTableAdapter.prototype.columns;
    /** @type {?} */
    ShareDataTableAdapter.prototype.filter;
    /** @type {?} */
    ShareDataTableAdapter.prototype.imageResolver;
    /** @type {?} */
    ShareDataTableAdapter.prototype.thumbnails;
    /** @type {?} */
    ShareDataTableAdapter.prototype.permissionsStyle;
    /** @type {?} */
    ShareDataTableAdapter.prototype.selectedRow;
    /** @type {?} */
    ShareDataTableAdapter.prototype.documentListService;
    /** @type {?} */
    ShareDataTableAdapter.prototype.thumbnailService;
}

//# sourceMappingURL=data:application/json;base64,