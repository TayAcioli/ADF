{"version":3,"sources":["ng://@alfresco/adf-content-services/dialogs/download-zip.dialog.ts","ng://@alfresco/adf-content-services/directives/node-download.directive.ts","ng://@alfresco/adf-content-services/material.module.ts","null","ng://@alfresco/adf-content-services/document-list/services/document-list.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.component.ts","ng://@alfresco/adf-content-services/dialogs/node-lock.dialog.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-dialog.service.ts","ng://@alfresco/adf-content-services/directives/node-lock.directive.ts","ng://@alfresco/adf-content-services/directives/content-directive.module.ts","ng://@alfresco/adf-content-services/social/services/rating.service.ts","ng://@alfresco/adf-content-services/social/rating.component.ts","ng://@alfresco/adf-content-services/social/like.component.ts","ng://@alfresco/adf-content-services/social/social.module.ts","ng://@alfresco/adf-content-services/tag/services/tag.service.ts","ng://@alfresco/adf-content-services/tag/tag-actions.component.ts","ng://@alfresco/adf-content-services/tag/tag-list.component.ts","ng://@alfresco/adf-content-services/tag/tag-node-list.component.ts","ng://@alfresco/adf-content-services/tag/tag.module.ts","ng://@alfresco/adf-content-services/webscript/webscript.component.ts","ng://@alfresco/adf-content-services/webscript/webscript.module.ts","ng://@alfresco/adf-content-services/document-list/data/share-data-row.model.ts","ng://@alfresco/adf-content-services/document-list/data/share-datatable-adapter.ts","ng://@alfresco/adf-content-services/document-list/models/preset.model.ts","ng://@alfresco/adf-content-services/document-list/models/content-action.model.ts","ng://@alfresco/adf-content-services/document-list/components/node.event.ts","ng://@alfresco/adf-content-services/document-list/services/custom-resources.service.ts","ng://@alfresco/adf-content-services/document-list/components/document-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/permissions.model.ts","ng://@alfresco/adf-content-services/document-list/services/node-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/document-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/folder-actions.service.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action.component.ts","ng://@alfresco/adf-content-services/document-list/components/empty-folder/empty-folder-content.directive.ts","ng://@alfresco/adf-content-services/document-list/components/no-permission/no-permission-content.directive.ts","ng://@alfresco/adf-content-services/document-list/models/document-library.model.ts","ng://@alfresco/adf-content-services/document-list/models/permissions-style.model.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-dialog.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list-row.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-files.event.ts","ng://@alfresco/adf-content-services/upload/components/base-upload/upload-base.ts","ng://@alfresco/adf-content-services/upload/components/upload-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-version-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-drag-area.component.ts","ng://@alfresco/adf-content-services/upload/directives/file-draggable.directive.ts","ng://@alfresco/adf-content-services/upload/upload.module.ts","ng://@alfresco/adf-content-services/document-list/document-list.module.ts","ng://@alfresco/adf-content-services/search/search-query-builder.service.ts","ng://@alfresco/adf-content-services/search/components/search.component.ts","ng://@alfresco/adf-content-services/search/components/empty-search-result.component.ts","ng://@alfresco/adf-content-services/search/components/search-control.component.ts","ng://@alfresco/adf-content-services/search/components/search-trigger.directive.ts","ng://@alfresco/adf-content-services/search/components/search-filter/models/search-filter-list.model.ts","ng://@alfresco/adf-content-services/search/components/search-filter/models/response-facet-query-list.model.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.component.ts","ng://@alfresco/adf-content-services/search/components/search-text/search-text.component.ts","ng://@alfresco/adf-content-services/search/components/search-radio/search-radio.component.ts","ng://@alfresco/adf-content-services/search/components/search-slider/search-slider.component.ts","ng://@alfresco/adf-content-services/search/forms/live-error-state-matcher.ts","ng://@alfresco/adf-content-services/search/components/search-number-range/search-number-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-check-list/search-check-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-date-range/search-date-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.service.ts","ng://@alfresco/adf-content-services/search/components/search-chip-list/search-chip-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-sorting-picker/search-sorting-picker.component.ts","ng://@alfresco/adf-content-services/search/components/search-widget-container/search-widget-container.component.ts","ng://@alfresco/adf-content-services/search/search.module.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.component.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.module.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/dropdown-breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.module.ts","ng://@alfresco/adf-content-services/dialogs/confirm.dialog.ts","ng://@alfresco/adf-content-services/version-manager/version-list.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.component.ts","ng://@alfresco/adf-content-services/version-manager/version-upload.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.module.ts","ng://@alfresco/adf-content-services/content-node-selector/name-location-cell/name-location-cell.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector-panel.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.module.ts","ng://@alfresco/adf-content-services/dialogs/folder-name.validators.ts","ng://@alfresco/adf-content-services/dialogs/folder.dialog.ts","ng://@alfresco/adf-content-services/dialogs/dialog.module.ts","ng://@alfresco/adf-content-services/folder-directive/folder-create.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-edit.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-directive.module.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata-card/content-metadata-card.component.ts","ng://@alfresco/adf-content-services/content-metadata/services/basic-properties.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-groups-translator.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/property-group-reader.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/aspect-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/indifferent-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/layout-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/content-metadata-config.factory.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-descriptors.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/content-metadata.service.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata/content-metadata.component.ts","ng://@alfresco/adf-content-services/content-metadata/content-metadata.module.ts","ng://@alfresco/adf-content-services/permission-manager/models/permission.model.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/permission-list.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/no-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/inherited-button.directive.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-dialog.component.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission-dialog.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/search-config-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-panel.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/permission-manager.module.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.dialog.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.directive.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.module.ts","ng://@alfresco/adf-content-services/content.module.ts"],"names":["DownloadZipDialogComponent","apiService","dialogRef","data","logService","this","prototype","ngOnInit","nodeIds","length","cancelled","log","downloadZip","cancelDownload","close","_this","promise","getInstance","core","downloadsApi","createDownload","on","progress","error","entry","id","url_1","content","getContentUrl","nodesApi","getNode","then","downloadNode","fileName","name","waitAndDownload","downloadId","url","getDownload","downloadEntry","status","download","setTimeout","link","document","createElement","style","display","href","body","appendChild","click","removeChild","Component","args","selector","template","host","class","encapsulation","ViewEncapsulation","None","AlfrescoApiService","MatDialogRef","Inject","MAT_DIALOG_DATA","LogService","NodeDownloadDirective","dialog","onClick","downloadNodes","nodes","selection","node","isFile","downloadFile","isFolder","nodeId","contentApi","map","open","width","disableClose","Directive","MatDialog","Input","HostListener","modules","MatButtonModule","MatChipsModule","MatDialogModule","MatIconModule","MatCardModule","MatInputModule","MatListModule","MatProgressSpinnerModule","MatProgressBarModule","MatRippleModule","MatMenuModule","MatOptionModule","MatExpansionModule","MatSelectModule","MatCheckboxModule","MatDatepickerModule","MatSlideToggleModule","MatRadioModule","MatSliderModule","NgModule","imports","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","call","apply","__generator","thisArg","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__values","o","m","__read","r","ar","__spread","concat","DocumentListService","authService","contentService","thumbnailService","getNodesPromise","folder","opts","includeFields","rootNodeId","ROOT_ID","rootFolderId","params","includeSource","include","tslib_1.__spread","filter","element","index","array","indexOf","relativePath","maxItems","skipCount","getNodeChildren","deleteNode","from","copyNode","targetParentId","pipe","catchError","err","handleError","moveNode","createFolder","parentId","getFolder","getFolderNode","getNodeInfo","getDocumentThumbnailUrl","getMimeTypeIcon","mimeType","getDefaultMimeTypeIcon","hasPermission","permission","throwError","Injectable","AuthenticationService","ContentService","ThumbnailService","ContentNodeSelectorComponent","buttonActionName","actionName","toUpperCase","select","complete","onSelect","nodeList","chosenNode","NodeLockDialogComponent","formBuilder","alfrescoApi","nodeName","form","group","isLocked","allowOwner","properties","isTimeLock","time","moment","duration","diff","asSeconds","timeToExpire","lockTimeInSeconds","type","lifetime","toggleLock","lockNode","nodeBodyLock","unlockNode","submit","catch","onError","FormBuilder","Optional","ContentNodeDialogService","documentListService","siteService","translation","EventEmitter","openFileBrowseDialogByFolderId","folderNodeId","switchMap","openUploadFileDialog","openLockNodeDialog","contentEntry","observable","Subject","PermissionsEnum","LOCK","emit","openFileBrowseDialogBySite","getSites","response","list","entries","guid","openFolderBrowseDialogBySite","openFolderBrowseDialogByFolderId","openUploadFolderDialog","openCopyMoveDialog","action","subscribe","bind","title","getTitleTranslation","currentFolderId","imageResolver","rowFilter","isSelectionValid","isCopyMoveSelectionValid","openContentNodeDialog","errors","Error","JSON","stringify","statusCode","instant","hasPermissionOnNodeFolder","isNodeFile","currentPanelClass","chosenWidth","panelClass","row","col","currentNodeId","isNodeFolder","hasEntityCreatePermission","isSite","nodeType","closeAll","SitesService","TranslationService","Output","NodeLockDirective","renderer","contentNodeDialogService","event","preventDefault","ngAfterViewInit","setProperty","nativeElement","ElementRef","Renderer2","CommonModule","MaterialModule","declarations","RatingService","getRating","ratingType","ratingsApi","postRating","vote","ratingBody","myRating","rate","deleteRating","removeRating","console","RatingComponent","ratingService","ngOnChanges","ratingObserver","aggregate","average","calculateStars","stars","fill","changeVote","updateVote","LikeComponent","clean","likesCounter","numberOfRatings","ratedAt","isLike","likeClick","TagService","getTagsByNodeId","tagsApi","getNodeTags","getAllTheTags","getTags","addTag","tagName","tagBody","TagBody","tag","promiseAdd","refresh","removeTag","promiseRemove","TagActionsComponent","tagService","translateService","subscriptions","refreshTag","ngOnDestroy","forEach","subscription","unsubscribe","tagsEntries","disableAddTag","result","searchTag","newTagName","get","errorMsg","successAdd","searchTagName","find","currentTag","cleanErrorMsg","TagListComponent","defaultPagination","size","hasMoreItems","pagination","tags","isLoading","loadMoreTags","isSizeMinimum","count","loadLessTags","slice","TagNodeListComponent","results","FormsModule","ReactiveFormsModule","CoreModule","forChild","WebscriptComponent","undefined","changes","showData","Promise","resolve","reject","webScript","executeWebScript","scriptPath","scriptArgs","contextRoot","servicePath","webScriptdata","contentType","showDataAsDataTable","success","schema","ObjectDataTableAdapter","generateSchema","isDataTableContent","ShareDataRow","obj","permissionsStyle","ERR_OBJECT_NOT_FOUND","isDropTarget","isFolderAndHasPermissionToUpload","cssClass","getPermissionClass","defineProperty","nodeEntity","permissionsClasses","currentPermissionsStyle","applyPermissionStyleToFolder","applyPermissionStyleToFile","css","cacheValue","key","cache","getValue","ObjectUtils","imageErrorResolver","hasValue","ShareDataTableAdapter","sorting","sortingMode","rows","columns","_sortingMode","newValue","toLowerCase","getRows","setRows","sort","getColumns","setColumns","ERR_ROW_NOT_FOUND","ERR_COL_NOT_FOUND","dataRow","resolved","isSmartFolder","thumbnails","getSorting","setSorting","sortRows","direction","DataSorting","setFilter","setImageResolver","resolver","nodeAspects","getNodeAspectNames","aspectNames","options","includes","numeric","a","left","Date","valueOf","toString","right","localeCompare","loadPage","page","merge","item","sortable","c","listPrunedDuplicate","elemntToFilter","currenRow","presetsDefaultModel","-trashcan-","srTitle","format","-sites-","-mysites-","-favorites-","-recent-","-sharedlinks-","default","ContentActionModel","icon","handler","execute","target","disableWithNoPermission","disabled","visible","Document","Folder","All","DocumentActionModel","_super","json","tslib_1.__extends","FolderActionModel","NodeEntityEvent","entity","BaseEvent","NodeEntryEvent","CustomResourcesService","getRecentFiles","personId","Observable","observer","peopleApi","getPerson","person","username","query","language","filterQueries","field","ascending","paging","searchApi","search","searchResult","loadFavorites","includeFieldsRequest","getIncludesFields","where","favoritesApi","getFavorites","_a","file","cm:title","cm:description","description","loadMemberSites","getSiteMembership","site","allowableOperations","CREATE_PERMISSION","loadSites","sitesApi","loadTrashcan","getDeletedNodes","loadSharedLinks","sharedLinksApi","findSharedLinks","isCustomSource","folderId","isCustomSources","isSupportedSource","isSupportedSources","loadFolderByNodeId","getCorrespondingNodeIds","targetGuid","of","hasCorrespondingNodeIds","Finite","Infinite","DocumentListComponent","ngZone","elementRef","appConfig","preferences","customResourcesService","DisplayMode","List","DOUBLE_CLICK_NAVIGATION","getContextActions","actions","getNodeActions","currentAction","model","subject","contextActionHandler","getDefaultPageSizes","columnList","getDefaultSorting","defaultSorting","getLayoutPreset","layoutPresets","ObjectDataColumn","paginationSize","_pagination","totalItems","BehaviorSubject","isEmptyTemplateDefined","dataTable","emptyFolderTemplate","isNoPermissionTemplateDefined","noPermissionTemplate","isMobile","test","navigator","userAgent","isEmpty","rowMenuCache","loadLayoutPresets","val","contextActionCallback","enforceSingleClickNavigationForMobile","ngAfterContentInit","setTableSchema","hasCustomLayout","setupDefaultColumns","resetSelection","firstChange","currentValue","resetNewFolderPagination","loadFolder","previousValue","onDataReady","loadFolderNodesByFolderNodeId","reload","run","executeContentAction","target_1","refreshAction","actionsByTarget","isActionDisabled","isActionVisible","onShowContextMenu","contextMenuActions","performNavigation","canNavigateFolder","updateFolderData","performCustomSourceNavigation","folderChange","updateCustomSourceData","folderNode","handlerSub","loading","onPageLoaded","nodePaging","noPermission","preset","onPreviewFile","preview","onNodeClick","domEvent","CustomEvent","detail","sender","bubbles","dispatchEvent","nodeClick","defaultPrevented","navigate","navigationMode","SINGLE_CLICK_NAVIGATION","onNodeDblClick","nodeDblClick","onNodeSelect","onNodeUnselect","onShowRowContextMenu","onShowRowActionsMenu","contentActions","onExecuteRowAction","externalSettings","ready","updatePagination","navigateTo","message","parse","NgZone","AppConfigService","UserPreferencesService","ContentChild","DataColumnListComponent","ViewChild","ContentColumnListComponent","documentList","registerColumn","column","ContentColumnComponent","register","TemplateRef","PermissionModel","NodeActionsService","contentDialogService","copyContent","doFileOperation","copyFolder","moveContent","moveFolder","selections","DocumentActionsService","nodeActionsService","setupActionHandlers","getHandler","lkey","handlers","setHandler","canExecuteAction","actionObservable","prepareHandlers","fileOperationMessage","handlerObservable","permissionEvent","FolderActionsService","ContentActionListComponent","registerAction","unregisterAction","idx","splice","ContentActionComponent","documentActions","folderActions","ContentActionTarget","folderActionModel","generateAction","documentActionModel","unregister","getSystemHandler","providers","EmptyFolderContentDirective","noContentTemplate","NoPermissionContentDirective","NodePaging","NodePagingList","NodeMinimalEntry","Pagination","NodeMinimal","UserInfo","ContentInfo","PathInfoEntity","PathElementEntity","PermissionStyleModel","FileUploadingDialogComponent","uploadService","changeDetecor","listSubscription","queueChanged","fileList","filesUploadingList","isDialogActive","counterSubscription","fileUploadComplete","fileUploadDeleted","totalCompleted","totalComplete","detectChanges","errorSubscription","fileUploadError","totalErrors","totalError","fileUploadSubscription","fileUpload","fileDeleted","objId","FileUploadStatus","Cancelled","toggleConfirmation","isConfirmation","isDialogMinimized","cancelAllUploads","uploadList","cancelAllFiles","toggleMinimized","clearQueue","UploadService","ChangeDetectorRef","FileUploadingListRowComponent","onCancel","cancel","onRemove","remove","FileUploadingListComponent","cancelFile","cancelUpload","removeFile","notifyError","getUploadingFiles","deletedFiles","files","Complete","forkJoin","isUploadCompleted","isUploadCancelled","Boolean","some","Starting","Progress","Pending","every","Aborted","Deleted","permanent","_i","messageError","total","NodesApiService","UploadFilesEvent","callback","isDefaultPrevented","pauseUpload","resumeUpload","addToQueue","uploadFilesInTheQueue","UploadBase","translationService","uploadFiles","filteredFiles","createFileModel","webkitRelativePath","replace","uploadQueue","uploadFilesInfo","fileInfo","relativeFolder","isFileAcceptable","isFileSizeAcceptable","beginUpload","acceptedFilesType","split","ext","extension","path","FileModel","comment","majorVersion","newVersion","versioning","isFileSizeAllowed","isMaxFileSizeDefined","isFileSizeCorrect","maxFilesSize","acceptableSize","UploadButtonComponent","permissionValue","checkPermission","isButtonDisabled","onFilesAdded","$event","FileUtils","toFileArray","currentTarget","onDirectoryAdded","res","nodeHasPermission","CREATE","viewProviders","provide","EXTENDIBLE_COMPONENT","useExisting","forwardRef","UploadVersionButtonComponent","fileModel","UPDATE","UploadDragAreaComponent","notificationService","onFilesDropped","onFilesEntityDropped","onFolderEntityDropped","isDirectory","flattern","filesInfo","showUndoNotificationBar","latestFilesAdded","messageTranslate","actionTranslate","openSnackMessageAction","onAction","isDroppable","onUploadFiles","stopPropagation","isTargetNodeFolder","destinationFolderName_1","NotificationService","FileDraggableDirective","el","runOutsideAngular","addEventListener","onDragEnter","onDragOver","onDragLeave","onDropFiles","removeEventListener","enabled","items","dataTransfer","webkitGetAsEntry","getAsFile","folderEntityDropped","filesDropped","classList","cssClassName","add","FlexLayoutModule","UploadModule","SearchQueryBuilderService","alfrescoApiService","resetToDefaults","_userQuery","trim","config","categories","category","userFacetBuckets","userFacetQueries","defaults","addUserFacetQuery","existing","facetQuery","removeUserFacetQuery","addUserFacetBucket","bucket","buckets","facetBucket","getUserFacetBuckets","removeUserFacetBucket","addFilterQuery","filterQuery","removeFilterQuery","getFacetQuery","hasFacetQueries","facetQueries","queries","getFacetField","facetFields","fields","update","buildQuery","updated","__awaiter","_arguments","P","generator","fulfilled","rejected","executed","getFinalQuery","getPrimarySorting","getSortingOptions","def","tslib_1.__assign","facet","customQuery","queryFragments","userQuery","join","combined","keys","subQuery","facets","mincount","limit","offset","prefix","SearchComponent","searchService","_elementRef","keyPressedStream","asObservable","debounceTime","searchedWord","loadSearchResults","dataLoaded","onSearchDataLoaded","onSearchDataError","className","_classList","_isOpen","showPanel","setVisibility","queryBody","hasDifferentQueryBody","searchTerm","resetResults","cleanResults","previousQueryBody","currentQueryBody","searchByQueryBody","maxResults","skipResults","resultLoaded","isOpen","hidePanel","preserveWhitespaces","exportAs","SearchService","SearchControlComponent","toggleSearch","expandable","subscriptAnimationState","searchAutocomplete","activeElement","searchInput","blur","applySearchFocus","animationDoneEvent","toState","focus","setupFocusEventHandlers","isNoSearchTemplatePresent","emptySearchTemplate","focusSubject","isLoggedIn","isEcmLoggedIn","searchSubmit","toggleSearchBar","inputChange","searchChange","getAutoComplete","autocomplete","isSearchBarActive","liveSearchEnabled","elementClicked","optionClicked","onFocus","onBlur","activateToolbar","selectFirstResult","listResultElement","_getHostElement","onRowArrowDown","nextElement","getNextElementSibling","onRowArrowUp","previousElement","getPreviousElementSibling","FocusEvent","nextElementSibling","previousElementSibling","animations","trigger","state","transform","margin-left","transition","animate","ViewChildren","MatListItem","EmptySearchResultComponent","SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SearchTriggerDirective","multi","changeDetectorRef","onDestroy$","escapeEventStream","closingActionsSubscription","_panelOpen","searchPanel","openPanel","subscribeToClosingActions","closePanel","outsideClickStream","fromEvent","clickTarget","writeValue","setTriggerValue","registerOnChange","fn","onChange","registerOnTouched","onTouched","handleKeydown","keyCode","ESCAPE","panelOpen","ENTER","handleInput","inputValue","isPanelOptionClicked","isPanelOption","isNoResultOption","panel","contains","firstStable","onStable","optionChanges","takeUntil","panelClosingActions","setValueAndClose","toDisplay","displayWith","textContent","role","[attr.autocomplete]","aria-autocomplete","[attr.aria-expanded]","(blur)","(input)","(keydown)","DOCUMENT","SearchFilterList","pageSize","filteredItems","currentPageSize","_filterText","applyFilter","_filter","showMoreItems","canShowMoreItems","showLessItems","canShowLessItems","clear","filterText","pointer","visibleItems","ResponseFacetQueryList","pattern","startsWith","SearchFilterComponent","queryBuilder","DEFAULT_PAGE_SIZE","facetQueriesLabel","facetQueriesPageSize","facetQueriesExpanded","expanded","facetFieldsExpanded","takeWhile","isAlive","onDataLoaded","onToggleFacetQuery","checked","selectFacetQuery","unselectFacetQuery","updateSelectedFields","updateSelectedBuckets","responseFacetFields","selectedBuckets","this_1","_b","tslib_1.__values","_c","responseFacetQueries","selectedFacetQueries","canResetSelectedQueries","onToggleBucket","selectFacetBucket","unselectFacetBucket","resetSelectedQueries","canResetSelectedBuckets","resetSelectedBuckets","context","parseFacetFields","parseFacetQueries","responseField","facetsFields","responseBucket","respBucket","configFacetFields","selectedBucket","bucketList","responseQueries","getFacetQueryMap","bkpResponseFacetQueries_1","queryResult","bkpQuery","SearchTextComponent","settings","match","RegExp","exec","reset","updateQuery","onChangedHandler","SearchRadioComponent","setValue","getSelectedValue","selected","opt","changeHandler","SearchSliderComponent","min","max","thumbLabel","LiveErrorStateMatcher","isErrorState","control","isSubmitted","submitted","invalid","dirty","touched","pristine","SearchNumberRangeComponent","validators","Validators","compose","required","FormControl","to","FormGroup","formValidator","formGroup","parseInt","mismatch","isValid","Map","set","formatString","str","expr","SearchCheckListComponent","operator","option","flush","DEFAULT_FORMAT_DATE","MOMENT_DATE_FORMATS","SearchDateRangeComponent","dateAdapter","userPreferencesService","getFromValidationMessage","hasError","hasParseError","getToValidationMessage","datePickerDateFormat","overrideDisplyaFormat","UserPreferenceValues","Locale","locale","setLocale","maxDate","today","startOf","start","end","endOf","formControl","srcElement","formatDate","setErrors","invalidOnChange","getError","text","forcePlaceholder","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","ɵ0","radio","slider","number-range","check-list","date-range","SearchSortingPickerComponent","primary","onChanged","applySorting","findOptionByKey","SearchWidgetContainerComponent","searchFilterService","componentFactoryResolver","componentType","widgets","factory","resolveComponentFactory","componentRef","createComponent","setupWidget","ref","instance","destroy","SearchFilterService","ComponentFactoryResolver","read","ViewContainerRef","ALFRESCO_SEARCH_DIRECTIVES","SearchChipListComponent","entryComponents","Members","Containers","DropdownSitesComponent","sitesService","siteList","setDefaultSiteList","selectedSite","change","extendedOptions","relations","Relations","filteredResultsByMember","hideMyFiles","unshift","sites","loggedUserName","getEcmCurrentLoggedUserName","isCurrentUserMember","visibility","members","member","BreadcrumbComponent","root","route","parseRoute","recalculateNodes","lastNodes","previousNodes","reverse","dropdown","hasPreviousNodes","elements","rootPos","getElementPosition","rootId","findIndex","onRoutePathClick","DropdownBreadcrumbComponent","currentNode","ConfirmDialogComponent","yesLabel","noLabel","VersionListComponent","versionsApi","loadVersionHistory","canUpdate","versions","canDelete","restore","versionId","revertVersion","onVersionRestored","listVersionHistory","downloadVersion","allowDownload","versionDownloadUrl","getVersionContentUrl","downloadContent","deleteVersion","minWidth","afterClosed","onVersionDeleted","deleted","restored","attachment","VersionManagerComponent","nodeUpdated","versionListComponent","uploadSuccess","uploadState","onUploadSuccess","onUploadError","uploadError","onUploadCancel","toggleNewVersion","height","opacity","VersionUploadComponent","canUpload","isMajorVersion","semanticVersion","NameLocationCellComponent","fullPath","changeDetection","ChangeDetectionStrategy","OnPush","ContentNodeSelectorService","extraNodeIds","extraParentFiltering","extraId","defaultSearchNode","scope","locations","defaultValidation","ContentNodeSelectorPanelComponent","contentNodeSelectorService","PaginationStrategy","valueChanges","debounceSearch","searchValue","_chosenNode","valuesArray","folderIdToShow","breadcrumbTransform","siteChanged","chosenSite","siteId","updateResults","showingSearchResults","clearSearch","startNewSearch","querySearch","infiniteScroll","loadingSearchResults","showSearchResults","highlight","highlighter","onFolderChange","onFolderLoaded","attemptNodeSelection","showBreadcrumbs","getNextPageOfSearch","resetChosenNode","onNodeDoubleClick","documentLibrary","HighlightDirective","SitesDropdownModule","BreadcrumbModule","DocumentListModule","I18N_ERRORS_PATH","forbidSpecialCharacters","forbidEndingDot","forbidOnlySpaces","FolderDialogComponent","editTitle","createTitle","parentNodeId","edit","updateNode","editing","valid","errorMessage","MatMomentDatetimeModule","MatDatetimepickerModule","FolderCreateDirective","openDialog","DIALOG_WIDTH","dialogConfig","dialogInstance","componentInstance","folderCreate","FolderEditDirective","folderEdit","ContentMetadataCardComponent","_displayDefaultProperties","onDisplayDefaultPropertiesChange","toggleEdit","editable","toggleExpanded","BasicPropertiesService","fileSizePipe","getProperties","sizeInBytes","mimeTypeName","author","CardViewTextItemModel","createdByUser","displayName","CardViewDateItemModel","createdAt","pipes","modifiedByUser","modifiedAt","multiline","FileSizePipe","D_MLTEXT","D_DATETIME","D_FLOAT","D_DOUBLE","D_BOOLEAN","PropertyGroupTranslatorService","translateToCardViewGroups","propertyGroups","propertyValues","propertyGroup","translatedPropertyGroup","translateArray","property","translate","propertyValue","checkECMTypeValidity","dataType","cardViewItemProperty","propertyDefinition","defaultValue","CardViewIntItemModel","CardViewFloatItemModel","CardViewDatetimeItemModel","CardViewBoolItemModel","ecmPropertyType","RECOGNISED_ECM_TYPES","emptyGroup","getGroup","groupName","getProperty","propertyName","groupDefinition","convertObjectToArray","object","AspectOrientedConfigService","isGroupAllowed","reorganiseByConfig","aspects","reduce","groupAccumulator","aspectName","newGroup","getOrganisedPropertyGroup","organisedPropertyGroup","aspectProperties","props","IndifferentConfigService","LayoutOrientedConfigService","getMatchingGroups","layoutBlock","flattenItems","explodedItem","accumulator","flattenedProperties","isArray","aspect","ContentMetadataConfigFactory","appConfigService","presetName","presetConfig","presets","DEFAULT_PRESET_NAME","INDIFFERENT_PRESET","createConfig","isLayoutOrientedPreset","isAspectOrientedPreset","freeze","isObject","x","PropertyDescriptorsService","load","groupNames","groupFetchStreams","defer","classesApi","getClass","convertToObject","propertyGroupsArray","ContentMetadataService","basicPropertiesService","contentMetadataConfigFactory","propertyGroupTranslatorService","propertyDescriptorsService","getBasicProperties","getGroupedProperties","groupedProperties","config_1","groups","ContentMetadataComponent","contentMetadataService","cardViewUpdateService","nodesApiService","disposableNodeUpdate","itemUpdated$","saveNode","updatedNode","loadProperties","basicProperties$","groupedProperties$","nodeBody","changed","CardViewUpdateService","PermissionDisplayModel","authorityId","accessStatus","isInherited","NodePermissionService","searchApiService","nodeService","getNodeRoles","retrieveSiteQueryBody","buildRetrieveSiteQueryBody","siteNodeList","siteName","getGroupMembersBySiteName","permissions","settable","updatePermissionRole","updatedPermissionRole","permissionBody","locallySet","updateNodePermissions","permissionList","nodeRoles","updateLocallySetPermissions","nodeRole","transformNodeToPermissionElement","duplicatedPermissions","getDuplicatedPermissions","duplicatePermissionMessage","nodeLocallySet","permissionListAdded","duplicatePermissions","duplicate","localPermission","isEqualPermission","oldPermission","newPermission","removePermission","permissionToRemove","getGroupMemeberByGroupName","displayResult","formattedRoleName","groupsApi","getGroupMembers","nodePath","PermissionListComponent","nodePermissionService","fetchNodePermissions","actualNode","getPermissionList","settableList","settableRoles","allPermissions","inherited","permissionInherited","saveNewRole","permissionRow","buildUpdatedPermission","newRole","permissionRole","InheritPermissionDirective","onInheritPermissionClicked","UPDATEPERMISSIONS","isInheritanceEnabled","(click)","AddPermissionDialogComponent","currentSelection","onAddClicked","confirm","NodePermissionDialogService","openAddPermissionDialog","confirm_1","updateNodePermissionByDialog","SearchPermissionConfigurationService","generateQueryBody","AddPermissionPanelComponent","cm:authorityName","isAlreadySelected","selectedItems","SearchConfigurationService","AddPermissionComponent","nodeApiService","isAddEnabled","applySelection","SearchModule","NoPermissionTemplateComponent","ShareDialogComponent","sharedLinksApiService","sharedUrl","controls","disable","skip","tap","updates","updateEntryExpiryDate","baseShareUrl","createSharedLinks","sharedId","isFileShared","updateForm","removeShare","deleteSharedLink","onSlideShareChange","openConfirmationDialog","closeOnNavigation","beforeClose","isDisabled","sharedLink","expiryDate","qshare:expiryDate","utc","local","SharedLinksApiService","NodeSharedDirective","zone","shareNode","isShared","ContentNodeShareModule","forRoot","ngModule","SocialModule","TagModule","WebScriptModule","DialogModule","ContentNodeSelectorModule","ContentMetadataModule","FolderDirectiveModule","ContentDirectiveModule","PermissionManagerModule","VersionManagerModule","source","ContentModule","TRANSLATION_PROVIDER","ContentModuleLazy","ɵ0$2"],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { DownloadEntry, MinimalNodeEntity } from 'alfresco-js-api';\nimport { LogService, AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-download-zip-dialog',\n    templateUrl: './download-zip.dialog.html',\n    styleUrls: ['./download-zip.dialog.scss'],\n    host: { 'class': 'adf-download-zip-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class DownloadZipDialogComponent implements OnInit {\n\n    // flag for async threads\n    private cancelled = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private dialogRef: MatDialogRef<DownloadZipDialogComponent>,\n                @Inject(MAT_DIALOG_DATA) private data: any,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {\n            if (!this.cancelled) {\n                this.downloadZip(this.data.nodeIds);\n            } else {\n                this.logService.log('Cancelled');\n            }\n        }\n    }\n\n    cancelDownload() {\n        this.cancelled = true;\n        this.dialogRef.close(false);\n    }\n\n    downloadZip(nodeIds: string[]) {\n        if (nodeIds && nodeIds.length > 0) {\n\n            const promise: any = this.apiService.getInstance().core.downloadsApi.createDownload({ nodeIds });\n\n            promise.on('progress', progress => this.logService.log('Progress', progress));\n            promise.on('error', error => this.logService.error('Error', error));\n            promise.on('abort', data => this.logService.log('Abort', data));\n\n            promise.on('success', (data: DownloadEntry) => {\n                if (data && data.entry && data.entry.id) {\n                    const url = this.apiService.getInstance().content.getContentUrl(data.entry.id, true);\n\n                    this.apiService.getInstance().core.nodesApi.getNode(data.entry.id).then((downloadNode: MinimalNodeEntity) => {\n                        this.logService.log(downloadNode);\n                        const fileName = downloadNode.entry.name;\n                        this.waitAndDownload(data.entry.id, url, fileName);\n                    });\n                }\n            });\n        }\n    }\n\n    waitAndDownload(downloadId: string, url: string, fileName: string) {\n        if (this.cancelled) {\n            return;\n        }\n\n        this.apiService.getInstance().core.downloadsApi.getDownload(downloadId).then((downloadEntry: DownloadEntry) => {\n            if (downloadEntry.entry) {\n                if (downloadEntry.entry.status === 'DONE') {\n                    this.download(url, fileName);\n                } else {\n                    setTimeout(() => {\n                        this.waitAndDownload(downloadId, url, fileName);\n                    }, 1000);\n                }\n            }\n        });\n    }\n\n    download(url: string, fileName: string) {\n        if (url && fileName) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.download = fileName;\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n        this.dialogRef.close(true);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\nimport { DownloadZipDialogComponent } from '../dialogs/download-zip.dialog';\n\n@Directive({\n    selector: '[adfNodeDownload]'\n})\nexport class NodeDownloadDirective {\n\n    /** Nodes to download. */\n    // tslint:disable-next-line:no-input-rename\n    @Input('adfNodeDownload')\n    nodes: MinimalNodeEntity[];\n\n    @HostListener('click')\n    onClick() {\n        this.downloadNodes(this.nodes);\n    }\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private dialog: MatDialog) {\n    }\n\n    /**\n     * Downloads multiple selected nodes.\n     * Packs result into a .ZIP archive if there is more than one node selected.\n     * @param selection Multiple selected nodes to download\n     */\n    downloadNodes(selection: Array<MinimalNodeEntity>) {\n        if (!selection || selection.length === 0) {\n            return;\n        }\n\n        if (selection.length === 1) {\n            this.downloadNode(selection[0]);\n        } else {\n            this.downloadZip(selection);\n        }\n    }\n\n    /**\n     * Downloads a single node.\n     * Packs result into a .ZIP archive is the node is a Folder.\n     * @param node Node to download\n     */\n    downloadNode(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            const entry = node.entry;\n\n            if (entry.isFile) {\n                this.downloadFile(node);\n            }\n\n            if (entry.isFolder) {\n                this.downloadZip([node]);\n            }\n\n            // Check if there's nodeId for Shared Files\n            if (!entry.isFile && !entry.isFolder && (<any> entry).nodeId) {\n                this.downloadFile(node);\n            }\n        }\n    }\n\n    private downloadFile(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            const contentApi = this.apiService.getInstance().content;\n            // nodeId for Shared node\n            const id = (<any> node.entry).nodeId || node.entry.id;\n\n            const url = contentApi.getContentUrl(id, true);\n            const fileName = node.entry.name;\n\n            this.download(url, fileName);\n        }\n    }\n\n    private downloadZip(selection: Array<MinimalNodeEntity>) {\n        if (selection && selection.length > 0) {\n            // nodeId for Shared node\n            const nodeIds = selection.map((node: any) => (node.entry.nodeId || node.entry.id));\n\n            this.dialog.open(DownloadZipDialogComponent, {\n                width: '600px',\n                disableClose: true,\n                data: {\n                    nodeIds\n                }\n            });\n        }\n    }\n\n    private download(url: string, fileName: string) {\n        if (url && fileName) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.download = fileName;\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatExpansionModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatSlideToggleModule,\n    MatRadioModule,\n    MatSliderModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatButtonModule,\n        MatChipsModule,\n        MatDialogModule,\n        MatIconModule,\n        MatCardModule,\n        MatInputModule,\n        MatListModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatMenuModule,\n        MatOptionModule,\n        MatExpansionModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatSlideToggleModule,\n        MatRadioModule,\n        MatSliderModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService, AuthenticationService, ContentService, LogService,\n    PermissionsEnum, ThumbnailService\n} from '@alfresco/adf-core';\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity,  NodeEntry, NodePaging } from 'alfresco-js-api';\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class DocumentListService {\n\n    static ROOT_ID = '-root-';\n\n    constructor(authService: AuthenticationService,\n                private contentService: ContentService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    private getNodesPromise(folder: string, opts?: any, includeFields: string[] = []): Promise<NodePaging> {\n\n        let rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let params: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n        }\n\n        return this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params);\n    }\n\n    /**\n     * Deletes a node.\n     * @param nodeId ID of the node to delete\n     * @returns Empty response when the operation is complete\n     */\n    deleteNode(nodeId: string): Observable<any> {\n        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n\n    /**\n     * Copy a node to destination node\n     *\n     * @param nodeId The id of the node to be copied\n     * @param targetParentId The id of the folder where the node will be copied\n     * @returns NodeEntry for the copied node\n     */\n    copyNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId })).pipe(\n            catchError(err => this.handleError(err))\n        );\n    }\n\n    /**\n     * Moves a node to destination node.\n     *\n     * @param nodeId The id of the node to be moved\n     * @param targetParentId The id of the folder where the node will be moved\n     * @returns NodeEntry for the moved node\n     */\n    moveNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId })).pipe(\n            catchError(err => this.handleError(err))\n        );\n    }\n\n    /**\n     * Creates a new folder in the path.\n     * @param name Folder name\n     * @param parentId Parent folder ID\n     * @returns Details of the created folder node\n     */\n    createFolder(name: string, parentId: string): Observable<MinimalNodeEntity> {\n        return from(this.apiService.getInstance().nodes.createFolder(name, '/', parentId))\n            .pipe(\n                catchError(err => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets the folder node with the specified relative name path below the root node.\n     * @param folder Path to folder.\n     * @param opts Options.\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolder(folder: string, opts?: any, includeFields: string[] = []): Observable<NodePaging> {\n        return from(this.getNodesPromise(folder, opts, includeFields))\n            .pipe(\n                catchError(err => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets a node via its node ID.\n     * @param nodeId ID of the target node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return this.contentService.getNode(nodeId, opts);\n    }\n\n    /**\n     * Gets a folder node via its node ID.\n     * @deprecated 2.3.0\n     * @param nodeId ID of the folder node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolderNode(nodeId: string, includeFields: string[] = []): Observable<MinimalNodeEntryEntity> {\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return from(this.apiService.getInstance().nodes.getNodeInfo(nodeId, opts));\n    }\n    /**\n     * Get thumbnail URL for the given document node.\n     * @param node Node to get URL for.\n     * @returns Thumbnail URL string\n     */\n    getDocumentThumbnailUrl(node: MinimalNodeEntity): string {\n        return this.thumbnailService.getDocumentThumbnailUrl(node);\n    }\n\n    /**\n     * Gets the icon that represents a MIME type.\n     * @param mimeType MIME type to get the icon for\n     * @returns Path to the icon file\n     */\n    getMimeTypeIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    /**\n     * Gets a default icon for MIME types with no specific icon.\n     * @returns Path to the icon file\n     */\n    getDefaultMimeTypeIcon(): string {\n        return this.thumbnailService.getDefaultMimeTypeIcon();\n    }\n\n    /**\n     * Checks if a node has the specified permission.\n     * @deprecated 2.3.0 - use the equivalent in the content service\n     * @param node Target node\n     * @param permission Permission level to query\n     * @returns True if the node has the permission, false otherwise\n     */\n    hasPermission(node: any, permission: PermissionsEnum | string): boolean {\n        return this.contentService.hasPermission(node, permission);\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { MinimalNodeEntryEntity, SitePaging } from 'alfresco-js-api';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\n\n@Component({\n    selector: 'adf-content-node-selector',\n    templateUrl: './content-node-selector.component.html',\n    styleUrls: ['./content-node-selector.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentNodeSelectorComponent {\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    title: string = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    currentFolderId: string = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    rowFilter: RowFilter = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /**\n     * @deprecated in 2.1.0\n     */\n    @Input()\n    pageSize: number;\n\n    buttonActionName: string;\n    chosenNode: MinimalNodeEntryEntity[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: ContentNodeSelectorComponentData) {\n        this.buttonActionName = data.actionName ? `NODE_SELECTOR.${data.actionName.toUpperCase()}` : 'NODE_SELECTOR.CHOOSE';\n    }\n\n    close() {\n        this.data.select.complete();\n    }\n\n    onSelect(nodeList: MinimalNodeEntryEntity[]) {\n        this.chosenNode = nodeList;\n    }\n\n    onClick(): void {\n        this.data.select.next(this.chosenNode);\n        this.data.select.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment-es6';\n\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { MinimalNodeEntryEntity, NodeEntry } from 'alfresco-js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-node-lock',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './node-lock.dialog.html'\n})\nexport class NodeLockDialogComponent implements OnInit {\n\n    form: FormGroup;\n    node: MinimalNodeEntryEntity = null;\n    nodeName: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialogRef<NodeLockDialogComponent>,\n        private alfrescoApi: AlfrescoApiService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {}\n\n    ngOnInit() {\n        const { node } = this.data;\n        this.nodeName = node.name;\n\n        this.form = this.formBuilder.group({\n            isLocked: node.isLocked || false,\n            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',\n            isTimeLock: !!node.properties['cm:expiryDate'],\n            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()\n        });\n    }\n\n    private get lockTimeInSeconds(): number {\n        if (this.form.value.isTimeLock) {\n            let duration = moment.duration(moment(this.form.value.time).diff(moment()));\n            return duration.asSeconds();\n        }\n\n        return 0;\n    }\n\n    private get nodeBodyLock(): object {\n        return {\n            'timeToExpire': this.lockTimeInSeconds,\n            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',\n            'lifetime': 'PERSISTENT'\n        };\n    }\n\n    private toggleLock(): Promise<NodeEntry> {\n        const { alfrescoApi: { nodesApi }, data: { node } } = this;\n\n        if (this.form.value.isLocked) {\n            return nodesApi.lockNode(node.id, this.nodeBodyLock);\n        }\n\n        return nodesApi.unlockNode(node.id);\n    }\n\n    submit(): void {\n        this.toggleLock()\n            .then(node => {\n                this.data.node.isLocked = this.form.value.isLocked;\n                this.dialog.close(node.entry);\n            })\n            .catch(error => this.data.onError(error));\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ContentService } from '@alfresco/adf-core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { ShareDataRow } from '../document-list/data/share-data-row.model';\nimport { MinimalNodeEntryEntity, SitePaging } from 'alfresco-js-api';\nimport { DataColumn, SitesService, TranslationService, PermissionsEnum } from '@alfresco/adf-core';\nimport { DocumentListService } from '../document-list/services/document-list.service';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class ContentNodeDialogService {\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog,\n                private contentService: ContentService,\n                private documentListService: DocumentListService,\n                private siteService: SitesService,\n                private translation: TranslationService) {\n    }\n\n    /**\n     * Opens a file browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<MinimalNodeEntryEntity[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node: MinimalNodeEntryEntity) => {\n            return this.openUploadFileDialog('Choose', node);\n        }));\n    }\n\n    /**\n     * Opens a lock node dialog.\n     * @param contentEntry Node to lock\n     * @returns Error/status message (if any)\n     */\n    public openLockNodeDialog(contentEntry: MinimalNodeEntryEntity): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasPermission(contentEntry, PermissionsEnum.LOCK)) {\n            this.dialog.open(NodeLockDialogComponent, {\n                data: {\n                    node: contentEntry,\n                    onError: (error) => {\n                        this.error.emit(error);\n                        observable.error(error);\n                    }\n                },\n                width: '400px'\n            });\n        } else {\n            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');\n        }\n\n        return observable;\n    }\n\n    /**\n     * Opens a file browser at a chosen site location.\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogBySite(): Observable<MinimalNodeEntryEntity[]> {\n        return this.siteService.getSites().pipe(switchMap((response: SitePaging) => {\n            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        }));\n    }\n\n    /**\n     * Opens a folder browser at a chosen site location.\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogBySite(): Observable<MinimalNodeEntryEntity[]> {\n        return this.siteService.getSites().pipe(switchMap((response: SitePaging) => {\n            return this.openFolderBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        }));\n    }\n\n    /**\n     * Opens a folder browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<MinimalNodeEntryEntity[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node: MinimalNodeEntryEntity) => {\n            return this.openUploadFolderDialog('Choose', node);\n        }));\n    }\n\n    /**\n     * Opens a dialog to copy or move an item to a new location.\n     * @param action Name of the action (eg, \"Copy\" or \"Move\") to show in the title\n     * @param contentEntry Item to be copied or moved\n     * @param permission Permission for the operation\n     * @returns Information about files that were copied/moved\n     */\n    openCopyMoveDialog(action: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Observable<MinimalNodeEntryEntity[]> {\n        if (this.contentService.hasPermission(contentEntry, permission)) {\n\n            const select = new Subject<MinimalNodeEntryEntity[]>();\n            select.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const title = this.getTitleTranslation(action, contentEntry.name);\n\n            const data: ContentNodeSelectorComponentData = {\n                title: title,\n                actionName: action,\n                currentFolderId: contentEntry.parentId,\n                imageResolver: this.imageResolver.bind(this),\n                rowFilter: this.rowFilter.bind(this, contentEntry.id),\n                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),\n                select: select\n            };\n\n            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n\n            return select;\n        } else {\n            let errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            return throwError(errors);\n        }\n    }\n\n    /**\n     * Gets the translation of the dialog title.\n     * @param action Name of the action to display in the dialog title\n     * @param name Name of the item on which the action is being performed\n     * @returns Translated version of the title\n     */\n    getTitleTranslation(action: string, name: string): string {\n        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });\n    }\n\n    /**\n     * Opens a dialog to choose folders to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry  Item to upload\n     * @returns Information about the chosed folder(s)\n     */\n    openUploadFolderDialog(action: string, contentEntry: MinimalNodeEntryEntity): Observable<MinimalNodeEntryEntity[]> {\n        const select = new Subject<MinimalNodeEntryEntity[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.hasPermissionOnNodeFolder.bind(this),\n            rowFilter: this.rowFilter.bind(this, contentEntry.id),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    /**\n     * Opens a dialog to choose a file to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry Item to upload\n     * @returns Information about the chosen file(s)\n     */\n    openUploadFileDialog(action: string, contentEntry: MinimalNodeEntryEntity): Observable<MinimalNodeEntryEntity[]> {\n        const select = new Subject<MinimalNodeEntryEntity[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.isNodeFile.bind(this),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    private imageResolver(row: ShareDataRow, col: DataColumn): string | null {\n        const entry: MinimalNodeEntryEntity = row.node.entry;\n        if (!this.contentService.hasPermission(entry, 'create')) {\n            return this.documentListService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\n\n    private rowFilter(currentNodeId, row: ShareDataRow): boolean {\n        const node: MinimalNodeEntryEntity = row.node.entry;\n\n        if (node.id === currentNodeId || node.isFile) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private isNodeFile(entry: MinimalNodeEntryEntity): boolean {\n        return entry.isFile;\n    }\n\n    private hasPermissionOnNodeFolder(entry: MinimalNodeEntryEntity): boolean {\n        return this.isNodeFolder(entry) && this.contentService.hasPermission(entry, 'create');\n    }\n\n    private isNodeFolder(entry: MinimalNodeEntryEntity): boolean {\n        return entry.isFolder;\n    }\n\n    private isCopyMoveSelectionValid(entry: MinimalNodeEntryEntity): boolean {\n        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);\n    }\n\n    private hasEntityCreatePermission(entry: MinimalNodeEntryEntity): boolean {\n        return this.contentService.hasPermission(entry, 'create');\n    }\n\n    private isSite(entry) {\n        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { PermissionsEnum, ContentService } from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '../content-node-selector/content-node-dialog.service';\n\n@Directive({\n    selector: '[adf-node-lock]'\n})\nexport class NodeLockDirective implements AfterViewInit {\n\n    /** Node to lock/unlock. */\n    @Input('adf-node-lock')\n    node: MinimalNodeEntryEntity;\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.contentNodeDialogService.openLockNodeDialog(this.node);\n    }\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private contentService: ContentService,\n        private contentNodeDialogService: ContentNodeDialogService\n    ) {}\n\n    ngAfterViewInit() {\n        const hasPermission = this.contentService.hasPermission(this.node, PermissionsEnum.LOCK);\n        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasPermission);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { NodeDownloadDirective } from './node-download.directive';\nimport { NodeLockDirective } from './node-lock.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        NodeDownloadDirective,\n        NodeLockDirective\n    ],\n    exports: [\n        NodeDownloadDirective,\n        NodeLockDirective\n    ]\n})\nexport class ContentDirectiveModule {\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { RatingBody } from 'alfresco-js-api';\nimport { from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class RatingService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets the current user's rating for a node.\n     * @param nodeId Node to get the rating from\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @returns The rating value\n     */\n    getRating(nodeId: string, ratingType: any): any {\n        return from(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Adds the current user's rating for a node.\n     * @param nodeId Target node for the rating\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @param vote Rating value (boolean for \"likes\", numeric 0..5 for \"fiveStar\")\n     * @returns Details about the rating, including the new value\n     */\n    postRating(nodeId: string, ratingType: any, vote: any): any {\n        let ratingBody: RatingBody = {\n            'id': ratingType,\n            'myRating': vote\n        };\n        return from(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Removes the current user's rating for a node.\n     * @param nodeId Target node\n     * @param ratingType Type of rating to remove (can be \"likes\" or \"fiveStar\")\n     * @returns Null response indicating that the operation is complete\n     */\n    deleteRating(nodeId: string, ratingType: any): any {\n        return from(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    private handleError(error: Response): any {\n        console.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\n\n@Component({\n    selector: 'adf-rating',\n    styleUrls: ['./rating.component.scss'],\n    templateUrl: './rating.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class RatingComponent implements OnChanges {\n\n    /** Identifier of the node to apply the rating to. */\n    @Input()\n    nodeId: string;\n\n    average: number = 0;\n\n    ratingType: string = 'fiveStar';\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    stars: Array<any> = [];\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        let ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);\n\n        ratingObserver.subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    this.average = data.entry.aggregate.average;\n                    this.calculateStars();\n                }\n            }\n        );\n\n        return ratingObserver;\n    }\n\n    calculateStars() {\n        this.stars = [];\n\n        for (let i = 0; i < 5; i++) {\n            if (i < this.average) {\n                this.stars.push({fill: true});\n            } else {\n                this.stars.push({fill: false});\n            }\n        }\n\n        this.changeVote.emit(this.average);\n    }\n\n    updateVote(vote: number) {\n        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    if (this.average !== data.entry.aggregate.average) {\n                        this.average = data.entry.aggregate.average;\n                        this.calculateStars();\n                    }\n                }\n            }\n        );\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\n\n@Component({\n    selector: 'adf-like',\n    styleUrls: ['./like.component.scss'],\n    templateUrl: './like.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LikeComponent implements OnChanges {\n    /** Identifier of a node to apply likes to. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    likesCounter: number = 0;\n    ratingType: string = 'likes';\n    isLike: boolean = false;\n\n    constructor(private ratingService: RatingService) {}\n\n    ngOnChanges() {\n        this.clean();\n\n        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    this.likesCounter = data.entry.aggregate.numberOfRatings;\n                    if (data.entry.ratedAt) {\n                        this.isLike = true;\n                    }\n                }\n            }\n        );\n    }\n\n    likeClick() {\n        if (this.isLike) {\n            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n                () => {\n                    this.likesCounter -= 1;\n                    this.isLike = false;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        } else {\n            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(\n                (data) => {\n                    this.likesCounter = data.entry.aggregate.numberOfRatings;\n                    this.isLike = true;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        }\n    }\n\n    clean() {\n        this.isLike = false;\n        this.likesCounter = 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { LikeComponent } from './like.component';\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    exports: [\n        RatingComponent,\n        LikeComponent\n    ],\n    declarations: [\n        RatingComponent,\n        LikeComponent\n    ]\n})\nexport class SocialModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { TagPaging } from 'alfresco-js-api';\n\n@Injectable()\nexport class TagService {\n\n    /** Emitted when tag information is updated. */\n    @Output()\n    refresh = new EventEmitter();\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets a list of tags added to a node.\n     * @param nodeId ID of the target node\n     * @returns TagPaging object (defined in JSAPI) containing the tags\n     */\n    getTagsByNodeId(nodeId: string): any {\n        return from(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId)).pipe(\n            catchError(err => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a list of all the tags already defined in the repository.\n     * @param opts Options supported by JSAPI\n     * @returns TagPaging object (defined in JSAPI) containing the tags\n     */\n    getAllTheTags(opts?: any): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getTags(opts))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n    /**\n     * Adds a tag to a node.\n     * @param nodeId ID of the target node\n     * @param tagName Name of the tag to add\n     * @returns TagEntry object (defined in JSAPI) with details of the new tag\n     */\n    addTag(nodeId: string, tagName: string): any {\n        const alfrescoApi: any = this.apiService.getInstance();\n        const tagBody = new alfrescoApi.core.TagBody();\n        tagBody.tag = tagName;\n\n        let promiseAdd = from(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));\n\n        promiseAdd.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return promiseAdd;\n    }\n\n    /**\n     * Removes a tag from a node.\n     * @param nodeId ID of the target node\n     * @param tag Name of the tag to remove\n     * @returns Null object when the operation completes\n     */\n    removeTag(nodeId: string, tag: string): any {\n        const promiseRemove = from(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));\n\n        promiseRemove.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return promiseRemove;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation, OnDestroy, OnInit } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { Subscription } from 'rxjs';\n\n/**\n *\n * This component, provide a list of the tags relative a node with actions button to add or remove new tag\n */\n\n@Component({\n    selector: 'adf-tag-node-actions-list',\n    templateUrl: './tag-actions.component.html',\n    styleUrls: ['./tag-actions.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagActionsComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a tag is added successfully. */\n    @Output()\n    successAdd: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an action is chosen. */\n    @Output()\n    result = new EventEmitter();\n\n    newTagName: string;\n    tagsEntries: any;\n    errorMsg: string;\n    disableAddTag: boolean = true;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(private tagService: TagService, private translateService: TranslationService) {}\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.tagService.refresh.subscribe(() => {\n                this.refreshTag();\n            })\n        );\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {\n                this.tagsEntries = data.list.entries;\n                this.disableAddTag = false;\n                this.result.emit(this.tagsEntries);\n            }, () => {\n                this.tagsEntries = null;\n                this.disableAddTag = true;\n                this.result.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    addTag() {\n        if (this.searchTag(this.newTagName)) {\n            this.translateService.get('TAG.MESSAGES.EXIST').subscribe((error) => {\n                this.errorMsg = error;\n            });\n            this.error.emit(this.errorMsg);\n        } else {\n            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {\n                this.newTagName = '';\n                this.successAdd.emit(this.nodeId);\n            });\n        }\n    }\n\n    searchTag(searchTagName: string) {\n        if (this.tagsEntries) {\n            return this.tagsEntries.find((currentTag) => {\n                return (searchTagName === currentTag.entry.tag);\n            });\n        }\n    }\n\n    cleanErrorMsg() {\n        this.errorMsg = '';\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { PaginationModel } from '@alfresco/adf-core';\n\n/**\n * This component provide a list of all the tag inside the ECM\n */\n@Component({\n    selector: 'adf-tag-list',\n    templateUrl: './tag-list.component.html',\n    styleUrls: ['./tag-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagListComponent implements OnInit {\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    result = new EventEmitter();\n\n    /**\n     * Array of tags that are displayed\n     */\n    tagsEntries: any = [];\n\n    /**\n     * Number of items per iteration\n     */\n    size: number = 10;\n\n    defaultPagination: PaginationModel;\n    pagination: PaginationModel;\n\n    isLoading = false;\n    isSizeMinimum = true;\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n\n        this.defaultPagination = {\n            skipCount: 0,\n            maxItems: this.size,\n            hasMoreItems: false\n        };\n\n        this.pagination = this.defaultPagination;\n\n        this.tagService.refresh.subscribe(() => {\n            this.tagsEntries = [];\n            this.refreshTag(this.defaultPagination);\n        });\n    }\n\n    ngOnInit() {\n        return this.refreshTag(this.defaultPagination);\n    }\n\n    refreshTag(opts?: any) {\n        this.tagService.getAllTheTags(opts).subscribe((tags: any) => {\n            this.tagsEntries = this.tagsEntries.concat(tags.list.entries);\n            this.pagination = tags.list.pagination;\n            this.result.emit(this.tagsEntries);\n            this.isLoading = false;\n        });\n    }\n\n    loadMoreTags() {\n        if (this.pagination.hasMoreItems) {\n            this.isLoading = true;\n            this.isSizeMinimum = false;\n\n            this.refreshTag({\n                skipCount: this.pagination.skipCount + this.pagination.count,\n                maxItems: this.size\n            });\n        }\n    }\n\n    loadLessTags() {\n        this.isSizeMinimum = false;\n        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);\n        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;\n        this.pagination.hasMoreItems = true;\n\n        if (this.tagsEntries.length <= this.size) {\n            this.isSizeMinimum = true;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n\n/**\n *\n * This component, ShowNodeTag a list of the tag on relative a node\n */\n\n@Component({\n    selector: 'adf-tag-node-list',\n    templateUrl: './tag-node-list.component.html',\n    styleUrls: ['./tag-node-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagNodeListComponent implements OnChanges {\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Show delete button */\n    @Input()\n    showDelete = true;\n\n    tagsEntries: any;\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    results = new EventEmitter();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {\n                this.tagsEntries = data.list.entries;\n                this.results.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {\n            this.refreshTag();\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { TagActionsComponent } from './tag-actions.component';\nimport { TagListComponent } from './tag-list.component';\nimport { TagNodeListComponent } from './tag-node-list.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    declarations: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ]\n})\nexport class TagModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\n/**\n * <adf-webscript-get [scriptPath]=\"string\"\n *                         [scriptArgs]=\"Object\"\n *                         [contextRoot]=\"string\"\n *                         [servicePath]=\"string\"\n *                         [contentType]=\"JSON|HTML|DATATABLE\"\n *                         (success)=\"customMethod($event)>\n * </adf-webscript-get>\n *\n * This component, provide a get webscript viewer\n *\n * @InputParam {string} scriptPath path to Web Script (as defined by Web Script)\n * @InputParam {Object} scriptArgs arguments to pass to Web Script\n * @InputParam {string} contextRoot path where application is deployed default value 'alfresco'\n * @InputParam {string} servicePath path where Web Script service is mapped default value 'service'\n * @InputParam {string} contentType JSON | HTML | DATATABLE | TEXT\n *\n * @Output - success - The event is emitted when the data are recived\n *\n */\n@Component({\n    selector: 'adf-webscript-get',\n    templateUrl: 'webscript.component.html'\n})\nexport class WebscriptComponent implements OnChanges {\n\n    /** (required) Path to the webscript (as defined by webscript). */\n    @Input()\n    scriptPath: string;\n\n    /** Arguments to pass to the webscript. */\n    @Input()\n    scriptArgs: any;\n\n    /** Toggles whether to show or hide the data. */\n    @Input()\n    showData: boolean = true;\n\n    /** Path where the application is deployed */\n    @Input()\n    contextRoot: string = 'alfresco';\n\n    /** Path that the webscript service is mapped to. */\n    @Input()\n    servicePath: string = 'service';\n\n    /** Content type to interpret the data received from the webscript.\n     * Can be \"JSON\" , \"HTML\" , \"DATATABLE\" or \"TEXT\"\n     */\n    @Input()\n    contentType: string = 'TEXT';\n\n    /** Emitted when the operation succeeds. You can get the plain data from\n     * the webscript through the **success** event parameter and use it as you\n     * need in your application.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    data: any = undefined;\n    showError: boolean = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes) {\n        if (this.showData) {\n            this.clean();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptdata) => {\n\n                this.data = webScriptdata;\n\n                if (this.showData) {\n                    if (this.contentType === 'DATATABLE') {\n                        this.data = this.showDataAsDataTable(webScriptdata);\n                    }\n                }\n\n                this.success.emit(this.data);\n\n                resolve();\n            }, (error) => {\n                this.logService.log('Error' + error);\n                reject();\n            });\n        });\n    }\n\n    /**\n     * show the data in a ng2-alfresco-datatable\n     *\n     * @param data\n     *\n     * @retutns the data as datatable\n     */\n    showDataAsDataTable(data: any) {\n        let datatableData: any = null;\n        try {\n\n            if (!data.schema) {\n                data.schema = ObjectDataTableAdapter.generateSchema(data.data);\n            }\n\n            if (data.schema && data.schema.length > 0) {\n                this.data = new ObjectDataTableAdapter(data.data, data.schema);\n            }\n\n        } catch (e) {\n            this.logService.error('error during the cast as datatable');\n        }\n\n        return datatableData;\n    }\n\n    clean() {\n        this.data = undefined;\n    }\n\n    isDataTableContent() {\n        return this.contentType === 'DATATABLE';\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MaterialModule } from '../material.module';\nimport { WebscriptComponent } from './webscript.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        WebscriptComponent\n    ],\n    declarations: [\n        WebscriptComponent\n    ]\n})\nexport class WebScriptModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRow, ObjectUtils, ThumbnailService } from '@alfresco/adf-core';\nimport { MinimalNode, MinimalNodeEntity } from 'alfresco-js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\n\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n\n    get node(): MinimalNodeEntity {\n        return this.obj;\n    }\n\n    constructor(private obj: MinimalNodeEntity,\n                private documentListService: DocumentListService,\n                private permissionsStyle: PermissionStyleModel[],\n                private thumbnailService?: ThumbnailService) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n\n    getPermissionClass(nodeEntity: MinimalNodeEntity): string {\n        let permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                    permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n\n    private applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n\n    private applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n\n    isFolderAndHasPermissionToUpload(obj: MinimalNodeEntity): boolean {\n        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');\n    }\n\n    isFolder(obj: MinimalNodeEntity): boolean {\n        return obj.entry && obj.entry.isFolder;\n    }\n\n    cacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n\n    getValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n\n    imageErrorResolver(event: Event): any {\n        return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);\n    }\n\n    hasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataColumn, DataRow, DataSorting, DataTableAdapter, ThumbnailService } from '@alfresco/adf-core';\nimport { NodePaging } from 'alfresco-js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { ShareDataRow } from './share-data-row.model';\n\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\n\n    private _sortingMode: string;\n    private sorting: DataSorting;\n    private rows: DataRow[];\n    private columns: DataColumn[];\n\n    private filter: any;\n    private imageResolver: any;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n\n    set sortingMode(value: string) {\n        let newValue = (value || 'client').toLowerCase();\n        if (newValue !== 'client' && newValue !== 'server') {\n            newValue = 'client';\n        }\n        this._sortingMode = newValue;\n    }\n\n    get sortingMode(): string {\n        return this._sortingMode;\n    }\n\n    constructor(private documentListService: DocumentListService,\n                private thumbnailService: ThumbnailService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting,\n                sortingMode: string = 'client') {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n        this.sortingMode = sortingMode;\n    }\n\n    getRows(): Array<DataRow> {\n        return this.rows;\n    }\n\n    // TODO: disable this api\n    setRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n\n    getColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n\n    setColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n\n    getValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        let dataRow: ShareDataRow = <ShareDataRow> row;\n        let value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.key === '$thumbnail') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            const node = (<ShareDataRow> row).node;\n\n            if (node.entry.isFolder) {\n                if (this.isSmartFolder(node)) {\n                    return this.documentListService.getMimeTypeIcon('smartFolder');\n                } else {\n                    return this.documentListService.getMimeTypeIcon('folder');\n                }\n            }\n\n            if (node.entry.isFile) {\n                if (this.thumbnails) {\n                    return this.documentListService.getDocumentThumbnailUrl(node);\n                }\n            }\n\n            if (node.entry.content) {\n                const mimeType = node.entry.content.mimeType;\n                if (mimeType) {\n                    return this.documentListService.getMimeTypeIcon(mimeType);\n                }\n            }\n\n            return this.documentListService.getDefaultMimeTypeIcon();\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n\n    getSorting(): DataSorting {\n        return this.sorting;\n    }\n\n    setSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n\n        this.sortRows(this.rows, this.sorting);\n    }\n\n    sort(key?: string, direction?: string): void {\n        let sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n\n    setFilter(filter: any) {\n        this.filter = filter;\n    }\n\n    setImageResolver(resolver: any) {\n        this.imageResolver = resolver;\n    }\n\n    isSmartFolder(node: any) {\n        let nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||\n            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);\n    }\n\n    private getNodeAspectNames(node: any): any[] {\n        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];\n    }\n\n    private sortRows(rows: DataRow[], sorting: DataSorting) {\n        if (this.sortingMode === 'server') {\n            return;\n        }\n\n        const options: Intl.CollatorOptions = {};\n\n        if (sorting && sorting.key && rows && rows.length > 0) {\n\n            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {\n                options.numeric = true;\n            }\n\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right, undefined, options)\n                    : right.localeCompare(left, undefined, options);\n            });\n        }\n    }\n\n    public loadPage(page: NodePaging, merge: boolean = false) {\n        let rows = [];\n\n        if (page && page.list) {\n            let data = page.list.entries;\n            if (data && data.length > 0) {\n                rows = data.map(item => new ShareDataRow(item, this.documentListService, this.permissionsStyle, this.thumbnailService));\n\n                if (this.filter) {\n                    rows = rows.filter(this.filter);\n                }\n\n                if (this.sortingMode !== 'server') {\n                    // Sort by first sortable or just first column\n                    if (this.columns && this.columns.length > 0) {\n                        let sorting = this.getSorting();\n                        if (sorting) {\n                            this.sortRows(rows, sorting);\n                        } else {\n                            let sortable = this.columns.filter(c => c.sortable);\n                            if (sortable.length > 0) {\n                                this.sort(sortable[0].key, 'asc');\n                            } else {\n                                this.sort(this.columns[0].key, 'asc');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            let listPrunedDuplicate = rows.filter((elemntToFilter) => {\n                let isPresent = this.rows.find((currenRow: any) => {\n                    return currenRow.obj.entry.id === elemntToFilter.obj.entry.id;\n                });\n\n                return !isPresent;\n            });\n\n            this.rows = this.rows.concat(listPrunedDuplicate);\n        } else {\n            this.rows = rows;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-mysites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean | Function = false;\n    visible: boolean | Function = true;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n\n            if (obj.hasOwnProperty('disabled')) {\n                this.disabled = obj.disabled;\n            }\n\n            if (obj.hasOwnProperty('visible')) {\n                this.visible = obj.visible;\n            }\n        }\n    }\n}\n\nexport enum ContentActionTarget {\n    Document = 'document',\n    Folder = 'folder',\n    All = 'all'\n}\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\n\nexport class DocumentActionModel extends ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\n\nexport class FolderActionModel extends  ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseEvent } from '@alfresco/adf-core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nexport class NodeEntityEvent extends BaseEvent<MinimalNodeEntity> {\n\n    value: MinimalNodeEntity;\n\n    defaultPrevented: boolean;\n\n    constructor(entity: MinimalNodeEntity) {\n        super();\n        this.value = entity;\n    }\n}\n\nexport class NodeEntryEvent extends BaseEvent<MinimalNodeEntryEntity> {\n\n    value: MinimalNodeEntryEntity;\n\n    defaultPrevented: boolean;\n\n    constructor(entity: MinimalNodeEntryEntity) {\n        super();\n        this.value = entity;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService,\n    LogService,\n    PaginationModel\n} from '@alfresco/adf-core';\n\nimport {\n    NodePaging,\n    PersonEntry,\n    SitePaging,\n    DeletedNodesPaging,\n    SearchRequest\n} from 'alfresco-js-api';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable()\nexport class CustomResourcesService {\n\n    private CREATE_PERMISSION = 'create';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets files recently accessed by a user.\n     * @param personId ID of the user\n     * @param pagination Specifies how to paginate the results\n     * @returns List of nodes for the recently used files\n     */\n    getRecentFiles(personId: string, pagination: PaginationModel): Observable<NodePaging> {\n        return new Observable(observer => {\n            this.apiService.peopleApi.getPerson(personId)\n                .then((person: PersonEntry) => {\n                        const username = person.entry.id;\n                        const query: SearchRequest = {\n                            query: {\n                                query: '*',\n                                language: 'afts'\n                            },\n                            filterQueries: [\n                                { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                                { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                                { query: `TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"` }\n                            ],\n                            include: ['path', 'properties', 'allowableOperations'],\n                            sort: [{\n                                type: 'FIELD',\n                                field: 'cm:modified',\n                                ascending: false\n                            }],\n                            paging: {\n                                maxItems: pagination.maxItems,\n                                skipCount: pagination.skipCount\n                            }\n                        };\n                        return this.apiService.searchApi.search(query)\n                            .then((searchResult) => {\n                                    observer.next(searchResult);\n                                    observer.complete();\n                                },\n                                (err) => {\n                                    observer.error(err);\n                                    observer.complete();\n                                });\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError(err => this.handleError(err)));\n    }\n\n    /**\n     * Gets favorite files for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of favorite files\n     */\n    loadFavorites(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: includeFieldsRequest\n        };\n\n        return new Observable(observer => {\n            this.apiService.favoritesApi.getFavorites('-me-', options)\n                .then((result: NodePaging) => {\n                        let page: NodePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { target } }: any) => ({\n                                        entry: target.file || target.folder\n                                    }))\n                                    .map(({ entry }: any) => {\n                                        entry.properties = {\n                                            'cm:title': entry.title,\n                                            'cm:description': entry.description\n                                        };\n                                        return { entry };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError(err => this.handleError(err)));\n    }\n\n    /**\n     * Gets sites that the current user is a member of.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadMemberSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable(observer => {\n            this.apiService.peopleApi.getSiteMembership('-me-', options)\n                .then((result: SitePaging) => {\n                        let page: NodePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { site } }: any) => {\n                                        site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];\n                                        site.name = site.name || site.title;\n                                        return {\n                                            entry: site\n                                        };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError(err => this.handleError(err)));\n    }\n\n    /**\n     * Gets all sites in the respository.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties', 'aspectNames'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable(observer => {\n            this.apiService.sitesApi.getSites(options)\n                .then((page: NodePaging) => {\n                        page.list.entries.map(\n                            ({ entry }: any) => {\n                                entry.name = entry.name || entry.title;\n                                return { entry };\n                            }\n                        );\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError(err => this.handleError(err)));\n    }\n\n    /**\n     * Gets all items currently in the trash.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of deleted items\n     */\n    loadTrashcan(pagination: PaginationModel, includeFields: string[] = []): Observable<DeletedNodesPaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.nodesApi.getDeletedNodes(options))\n            .pipe(catchError(err => this.handleError(err)));\n\n    }\n\n    /**\n     * Gets shared links for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of shared links\n     */\n    loadSharedLinks(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.sharedLinksApi.findSharedLinks(options))\n            .pipe(catchError(err => this.handleError(err)));\n    }\n\n    /**\n     * Is the folder ID one of the well-known aliases?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is a well-known name, false otherwise\n     */\n    isCustomSource(folderId: string): boolean {\n        let isCustomSources = false;\n        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isCustomSources = true;\n        }\n\n        return isCustomSources;\n    }\n\n    /**\n     * Is the folder ID a \"-my\", \"-root-\", or \"-shared-\" alias?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is one of the suppored sources, false otherwise\n     */\n    isSupportedSource(folderId: string): boolean {\n        let isSupportedSources = false;\n        const sources = ['-my-', '-root-', '-shared-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isSupportedSources = true;\n        }\n\n        return isSupportedSources;\n    }\n\n    /**\n     * Gets a folder's contents.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of items contained in the folder\n     */\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[]): Observable<NodePaging> {\n        if (nodeId === '-trashcan-') {\n            return this.loadTrashcan(pagination, includeFields);\n        } else if (nodeId === '-sharedlinks-') {\n            return this.loadSharedLinks(pagination, includeFields);\n        } else if (nodeId === '-sites-') {\n            return this.loadSites(pagination);\n        } else if (nodeId === '-mysites-') {\n            return this.loadMemberSites(pagination);\n        } else if (nodeId === '-favorites-') {\n            return this.loadFavorites(pagination, includeFields);\n        } else if (nodeId === '-recent-') {\n            return this.getRecentFiles('-me-', pagination);\n        }\n    }\n\n    // TODO: remove it from here\n\n    /**\n     * Gets the contents of one of the well-known aliases in the form of node ID strings.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @returns List of node IDs\n     */\n    getCorrespondingNodeIds(nodeId: string, pagination: PaginationModel = {}): Observable<string[]> {\n        if (this.isCustomSource(nodeId)) {\n\n            return this.loadFolderByNodeId(nodeId, pagination, [])\n                .pipe(map(result => result.list.entries.map((node: any) => {\n                    if (nodeId === '-sharedlinks-') {\n                        return node.entry.nodeId;\n\n                    } else if (nodeId === '-sites-' || nodeId === '-mysites-') {\n                        return node.entry.guid;\n\n                    } else if (nodeId === '-favorites-') {\n                        return node.entry.targetGuid;\n                    }\n\n                    return node.entry.id;\n                })));\n\n        } else if (nodeId) {\n            // cases when nodeId is '-my-', '-root-' or '-shared-'\n            return from(this.apiService.nodesApi.getNode(nodeId)\n                .then(node => [node.entry.id]));\n        }\n\n        return of([]);\n    }\n\n    /**\n     * Does the well-known alias have a corresponding node ID?\n     * @param nodeId Node to check\n     * @returns True if the alias has a corresponding node ID, false otherwise\n     */\n    hasCorrespondingNodeIds(nodeId: string): boolean {\n        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);\n    }\n\n    private getIncludesFields(includeFields: string[]): string[] {\n        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n    }\n\n    private handleError(error: Response) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnDestroy, OnInit, Output, SimpleChanges, TemplateRef, ViewChild, ViewEncapsulation\n} from '@angular/core';\n\nimport {\n    ContentService, DataCellEvent, DataColumn, DataRowActionEvent, DataSorting, DataTableComponent,\n    DisplayMode, ObjectDataColumn, PaginatedComponent, AppConfigService, DataColumnListComponent,\n    UserPreferencesService, PaginationModel, ThumbnailService\n} from '@alfresco/adf-core';\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';\nimport { Subject, BehaviorSubject, Subscription, of } from 'rxjs';\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { CustomResourcesService } from './../services/custom-resources.service';\nimport { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';\n\nexport enum PaginationStrategy {\n    Finite,\n    Infinite\n}\n\n@Component({\n    selector: 'adf-document-list',\n    styleUrls: ['./document-list.component.scss'],\n    templateUrl: './document-list.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n    static DEFAULT_PAGE_SIZE: number = 20;\n\n    @ContentChild(DataColumnListComponent)\n    columnList: DataColumnListComponent;\n\n    /** Include additional information about the node in the server request.for example: association, isLink, isLocked and others. */\n    @Input()\n    includeFields: string[];\n\n    /** Change the display mode of the table. Can be \"list\" or \"gallery\". */\n    @Input()\n    display: string = DisplayMode.List;\n\n    /** Define a set of CSS styles styles to apply depending on the permission\n     * of the user on that node. See the Permission Style model\n     * page for further details and examples.\n     */\n    @Input()\n    permissionsStyle: PermissionStyleModel[] = [];\n\n    /** The default route for all the location-based columns (if declared). */\n    @Input()\n    locationFormat: string = '/';\n\n    /** Toggles navigation to folder content or file preview */\n    @Input()\n    navigate: boolean = true;\n\n    /** Toggles the header */\n    @Input()\n    showHeader: boolean = true;\n\n    /** User interaction for folder navigation or file preview.\n     * Valid values are \"click\" and \"dblclick\". Default value: \"dblclick\"\n     */\n    @Input()\n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    /** Show document thumbnails rather than icons */\n    @Input()\n    thumbnails: boolean = false;\n\n    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // null|single|multiple\n\n    /** Toggles multiselect mode */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles content actions for each row */\n    @Input()\n    contentActions: boolean = false;\n\n    /** Position of the content actions dropdown menu. Can be set to \"left\" or \"right\". */\n    @Input()\n    contentActionsPosition: string = 'right'; // left|right\n\n    /** Toggles context menus for each row */\n    @Input()\n    contextMenuActions: boolean = false;\n\n    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */\n    @Input()\n    emptyFolderImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    /** Toggle file drop support for rows (see Upload Directive for further details */\n    @Input()\n    allowDropFiles: boolean = false;\n\n    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`\n     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to\n     * override the default sorting detected by the component based on columns.\n     */\n    @Input()\n    sorting = ['name', 'asc'];\n\n    /** Defines sorting mode. Can be either `client` or `server`. */\n    @Input()\n    sortingMode = 'client';\n\n    /** The inline style to apply to every row. See\n     * the Angular NgStyle\n     * docs for more details and usage examples.\n     */\n    @Input()\n    rowStyle: string;\n\n    /** The CSS class to apply to every row */\n    @Input()\n    rowStyleClass: string;\n\n    /** Toggles the loading state and animated spinners for the component. Used in\n     * combination with `navigate=false` to perform custom navigation and loading\n     * state indication.\n     */\n    @Input()\n    loading: boolean = false;\n\n    /** Custom row filter */\n    @Input()\n    rowFilter: any | null = null;\n\n    /** Custom image resolver */\n    @Input()\n    imageResolver: any | null = null;\n\n    /** The ID of the folder node to display or a reserved string alias for special sources */\n    @Input()\n    currentFolderId: string = null;\n\n    /**\n     * Currently displayed folder node\n     * @deprecated 2.3.0 - use currentFolderId or node\n     */\n    @Input()\n    folderNode: MinimalNodeEntryEntity = null;\n\n    /** The Document list will show all the nodes contained in the NodePaging entity */\n    @Input()\n    node: NodePaging = null;\n\n    /** Default value is stored into user preference settings use it only if you are not using the pagination */\n    @Input()\n    maxItems: number;\n\n    /**\n     * Number of elements to skip over for pagination purposes\n     * @deprecated 2.3.0 - define it in pagination\n     */\n    @Input()\n    skipCount: number = 0;\n\n    /**\n     * Set document list to work in infinite scrolling mode\n     * @deprecated 2.3.0\n     */\n    @Input()\n    enableInfiniteScrolling: boolean = false;\n\n    /** Emitted when the user clicks a list node */\n    @Output()\n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the user double-clicks a list node */\n    @Output()\n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the current display folder changes */\n    @Output()\n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    /** Emitted when the user acts upon files with either single or double click\n     * (depends on `navigation-mode`). Useful for integration with the\n     * Viewer component.\n     */\n    @Output()\n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the Document List has loaded all items and is ready for use */\n    @Output()\n    ready: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when the API fails to get the Document List data */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('dataTable')\n    dataTable: DataTableComponent;\n\n    actions: ContentActionModel[] = [];\n    emptyFolderTemplate: TemplateRef<any>;\n    noPermissionTemplate: TemplateRef<any>;\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n    noPermission: boolean = false;\n    selection = new Array<MinimalNodeEntity>();\n\n    private _pagination: BehaviorSubject<PaginationModel>;\n    private layoutPresets = {};\n    private subscriptions: Subscription[] = [];\n    private rowMenuCache: { [key: string]: ContentActionModel[] } = {};\n\n    constructor(private documentListService: DocumentListService,\n                private ngZone: NgZone,\n                private elementRef: ElementRef,\n                private appConfig: AppConfigService,\n                private preferences: UserPreferencesService,\n                private customResourcesService: CustomResourcesService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    getContextActions(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            let actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map((currentAction: ContentActionModel) => {\n                    return {\n                        model: currentAction,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n\n    /** @deprecated 2.3.0 define it in pagination */\n    get supportedPageSizes(): number[] {\n        return this.preferences.getDefaultPageSizes();\n    }\n\n    get hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n\n    private getDefaultSorting(): DataSorting {\n        let defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n\n    private getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map(col => new ObjectDataColumn(col));\n    }\n\n    get pagination(): BehaviorSubject<PaginationModel> {\n        let maxItems = this.preferences.paginationSize;\n\n        if (!this._pagination) {\n            if (this.maxItems) {\n                maxItems = this.maxItems;\n            }\n\n            let defaultPagination = <PaginationModel> {\n                maxItems: maxItems,\n                skipCount: 0,\n                totalItems: 0,\n                hasMoreItems: false\n            };\n\n            this._pagination = new BehaviorSubject<PaginationModel>(defaultPagination);\n        }\n\n        return this._pagination;\n    }\n\n    isEmptyTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.emptyFolderTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNoPermissionTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.noPermissionTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    isEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n\n    ngOnInit() {\n        this.rowMenuCache = {};\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, null, this.getDefaultSorting(), this.sortingMode);\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this.rowFilter) {\n            this.data.setFilter(this.rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.subscriptions.push(\n            this.contextActionHandler.subscribe(val => this.contextActionCallback(val))\n        );\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n\n    ngAfterContentInit() {\n        if (this.columnList) {\n            this.subscriptions.push(\n                this.columnList.columns.changes.subscribe(() => {\n                    this.setTableSchema();\n                })\n            );\n        }\n        this.setTableSchema();\n    }\n\n    private setTableSchema() {\n        let schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map(c => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, schema, this.getDefaultSorting(), this.sortingMode);\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        let columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this.currentFolderId);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.resetSelection();\n        if (this.data) {\n            this.data.thumbnails = this.thumbnails;\n\n        }\n        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {\n            this.data.sortingMode = changes.sortingMode.currentValue;\n        }\n\n        if (changes.sorting && !changes.sorting.firstChange && this.data) {\n            const newValue = changes.sorting.currentValue;\n            if (newValue && newValue.length > 0) {\n                const [key, direction] = newValue;\n                this.data.setSorting(new DataSorting(key, direction));\n            }\n        }\n\n        if (changes.folderNode && changes.folderNode.currentValue) {\n            this.currentFolderId = changes.folderNode.currentValue.id;\n            this.resetNewFolderPagination();\n            this.loadFolder();\n        } else if (changes.currentFolderId &&\n            changes.currentFolderId.currentValue &&\n            changes.currentFolderId.currentValue !== changes.currentFolderId.previousValue) {\n            this.resetNewFolderPagination();\n            this.loadFolder();\n        } else if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                this.data.loadPage(changes.node.currentValue);\n                this.onDataReady(changes.node.currentValue);\n            } else if (changes.rowFilter && changes.rowFilter.currentValue !== changes.rowFilter.previousValue) {\n                this.data.setFilter(changes.rowFilter.currentValue);\n                if (this.currentFolderId) {\n                    this.loadFolderNodesByFolderNodeId(this.currentFolderId, this.pagination.getValue()).catch(err => this.error.emit(err));\n                }\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n\n    reload() {\n        this.ngZone.run(() => {\n            this.resetSelection();\n            if (this.node) {\n                this.data.loadPage(this.node);\n                this.onDataReady(this.node);\n            } else {\n                this.loadFolder();\n            }\n        });\n    }\n\n    contextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n\n    getNodeActions(node: MinimalNodeEntity | any): ContentActionModel[] {\n        if (node && node.entry) {\n            let target = null;\n\n            if (node.entry.isFile) {\n                target = 'document';\n            } else if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                const actions = this.rowMenuCache[node.entry.id];\n                if (actions) {\n                    actions.forEach(action => {\n                        this.refreshAction(action, node);\n                    });\n                    return actions;\n                }\n\n                let actionsByTarget = this.actions\n                    .filter(entry => {\n                        const isVisible = (typeof entry.visible === 'function')\n                            ? entry.visible(node)\n                            : entry.visible;\n\n                        return isVisible && entry.target.toLowerCase() === target;\n                    })\n                    .map(action => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.refreshAction(action, node);\n                });\n\n                this.rowMenuCache[node.entry.id] = actionsByTarget;\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n\n    private refreshAction(action: ContentActionModel, node: MinimalNodeEntity) {\n        action.disabled = this.isActionDisabled(action, node);\n        action.visible = this.isActionVisible(action, node);\n    }\n\n    private isActionVisible(action: ContentActionModel, node: MinimalNodeEntity): boolean {\n        if (typeof action.visible === 'function') {\n            return action.visible(node);\n        }\n\n        return action.visible;\n    }\n\n    private isActionDisabled(action: ContentActionModel, node: MinimalNodeEntity): boolean {\n        if (typeof action.disabled === 'function') {\n            return action.disabled(node);\n        }\n\n        if (action.permission && action.disableWithNoPermission && !this.contentService.hasPermission(node.entry, action.permission)) {\n            return true;\n        }\n\n        return action.disabled;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n\n    performNavigation(node: MinimalNodeEntity): boolean {\n        if (this.canNavigateFolder(node)) {\n            this.updateFolderData(node);\n            return true;\n        }\n        return false;\n    }\n\n    performCustomSourceNavigation(node: MinimalNodeEntity): boolean {\n        if (this.customResourcesService.isCustomSource(this.currentFolderId)) {\n            this.updateFolderData(node);\n            return true;\n        }\n        return false;\n    }\n\n    updateFolderData(node: MinimalNodeEntity): void {\n        this.resetNewFolderPagination();\n        this.currentFolderId = node.entry.id;\n        this.reload();\n        this.folderChange.emit(new NodeEntryEvent(node.entry));\n    }\n\n    updateCustomSourceData(nodeId: string): void {\n        this.folderNode = null;\n        this.currentFolderId = nodeId;\n    }\n\n    /**\n     * Invoked when executing content action for a document or folder.\n     * @param node Node to be the context of the execution.\n     * @param action Action to be executed against the context.\n     */\n    executeContentAction(node: MinimalNodeEntity, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = of(true);\n            }\n\n            if (typeof action.execute === 'function' && handlerSub) {\n                handlerSub.subscribe(() => {\n                    action.execute(node);\n                });\n            }\n        }\n    }\n\n    loadFolder() {\n        if (!this.pagination.getValue().merge) {\n            this.loading = true;\n        }\n\n        if (!this.hasCustomLayout) {\n            this.setupDefaultColumns(this.currentFolderId);\n        }\n\n        if (this.folderNode) {\n            return this.loadFolderNodesByFolderNodeId(this.folderNode.id, this.pagination.getValue())\n                .catch(err => this.handleError(err));\n        } else {\n            this.loadFolderByNodeId(this.currentFolderId);\n        }\n    }\n\n    loadFolderByNodeId(nodeId: string) {\n        if (this.customResourcesService.isCustomSource(nodeId)) {\n            this.updateCustomSourceData(nodeId);\n            this.customResourcesService.loadFolderByNodeId(nodeId, this.pagination.getValue(), this.includeFields)\n                .subscribe((page: NodePaging) => {\n                    this.onPageLoaded(page);\n                }, err => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.documentListService\n                .getFolderNode(nodeId, this.includeFields)\n                .subscribe((node: MinimalNodeEntryEntity) => {\n                    this.folderNode = node;\n                    return this.loadFolderNodesByFolderNodeId(node.id, this.pagination.getValue())\n                        .catch(err => this.handleError(err));\n                }, err => {\n                    this.handleError(err);\n                });\n        }\n    }\n\n    loadFolderNodesByFolderNodeId(id: string, pagination: PaginationModel): Promise<any> {\n        return new Promise((resolve, reject) => {\n\n            this.documentListService\n                .getFolder(null, {\n                    maxItems: pagination.maxItems,\n                    skipCount: pagination.skipCount,\n                    rootFolderId: id\n                }, this.includeFields)\n                .subscribe(\n                    nodePaging => {\n                        this.data.loadPage(<NodePaging> nodePaging, this.pagination.getValue().merge);\n                        this.loading = false;\n                        this.onDataReady(nodePaging);\n                        resolve(true);\n                    }, err => {\n                        this.handleError(err);\n                    });\n        });\n    }\n\n    resetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n        this.noPermission = false;\n    }\n\n    onPageLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.data.loadPage(nodePaging, this.pagination.getValue().merge);\n            this.loading = false;\n            this.onDataReady(nodePaging);\n        }\n    }\n\n    /**\n     * Creates a set of predefined columns.\n     */\n    setupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n\n    onPreviewFile(node: MinimalNodeEntity) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n\n    onNodeClick(node: MinimalNodeEntity) {\n        const domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(node);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n\n    onNodeDblClick(node: MinimalNodeEntity) {\n        const domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(node);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n\n    onNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n\n    onExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            let action = (<ContentActionModel> args.action);\n            this.executeContentAction(node, action);\n        }\n    }\n\n    private enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n\n    canNavigateFolder(node: MinimalNodeEntity): boolean {\n        let canNavigateFolder: boolean = false;\n\n        if (this.customResourcesService.isCustomSource(this.currentFolderId)) {\n            canNavigateFolder = false;\n        } else if (node && node.entry && node.entry.isFolder) {\n            canNavigateFolder = true;\n        }\n\n        return canNavigateFolder;\n    }\n\n    private loadLayoutPresets(): void {\n        const externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n    }\n\n    private onDataReady(nodePaging: NodePaging) {\n        this.ready.emit(nodePaging);\n\n        this.pagination.next(nodePaging.list.pagination);\n    }\n\n    updatePagination(pagination: PaginationModel) {\n        this.pagination.next(pagination);\n        this.reload();\n    }\n\n    navigateTo(nodeId: string) {\n        this.currentFolderId = nodeId;\n        this.resetNewFolderPagination();\n        this.loadFolder();\n        this.folderChange.emit(new NodeEntryEvent({ id: nodeId }));\n    }\n\n    private resetNewFolderPagination() {\n        this.folderNode = null;\n        this.pagination.value.skipCount = 0;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    private handleError(err: any) {\n        if (err.message) {\n            if (JSON.parse(err.message).error.statusCode === 403) {\n                this.loading = false;\n                this.noPermission = true;\n            }\n        }\n        this.error.emit(err);\n\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { Component } from '@angular/core';\n\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-columns',\n    template: ''\n})\nexport class ContentColumnListComponent {\n\n    constructor(private documentList: DocumentListComponent, private logService: LogService ) {\n        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n\n    /**\n     * Registers column model within the parent document list component.\n     * @param column Column definition model to register.\n     */\n    registerColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            let columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector no-input-rename  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\n\n@Component({\n    selector: 'content-column',\n    template: ''\n})\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    @Input()\n    key: string;\n\n    @Input()\n    type: string = 'text';\n\n    @Input()\n    format: string;\n\n    @Input()\n    sortable: boolean = false;\n\n    @Input()\n    title: string = '';\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    /**\n     * Title to be used for screen readers.\n     */\n    @Input('sr-title')\n    srTitle: string;\n\n    @Input('class')\n    cssClass: string;\n\n    constructor(private list: ContentColumnListComponent, private logService: LogService) {\n        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n\n    ngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Output, EventEmitter } from '@angular/core';\nimport { MinimalNodeEntryEntity, MinimalNodeEntity } from 'alfresco-js-api';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material';\n\nimport { DocumentListService } from './document-list.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\nimport { NodeDownloadDirective } from '../../directives/node-download.directive';\n\n@Injectable()\nexport class NodeActionsService {\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private contentDialogService: ContentNodeDialogService,\n                public dialogRef: MatDialog,\n                public content: ContentService,\n                private documentListService?: DocumentListService,\n                private apiService?: AlfrescoApiService,\n                private dialog?: MatDialog) {}\n\n    downloadNode(node: MinimalNodeEntity) {\n        new NodeDownloadDirective(this.apiService, this.dialog)\n            .downloadNode(node);\n    }\n\n    /**\n     * Copy content node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Copy folder node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * Move content node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Move folder node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * General method for performing the given operation (copy|move)\n     *\n     * @param action the action to perform (copy|move)\n     * @param type type of the content (content|folder)\n     * @param contentEntry the contentEntry which has to have the action performed on\n     * @param permission permission which is needed to apply the action\n     */\n    private doFileOperation(action: string, type: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        this.contentDialogService\n            .openCopyMoveDialog(action, contentEntry, permission)\n            .subscribe((selections: MinimalNodeEntryEntity[]) => {\n                const selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                    observable.next.bind(observable, `OPERATION.SUCCESS.${type.toUpperCase()}.${action.toUpperCase()}`),\n                    observable.error.bind(observable)\n                    );\n            },\n            (error) => {\n                observable.error(error);\n                return observable;\n            });\n        return observable;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable()\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private contentNodeDialogService: ContentNodeDialogService,\n                private translation: TranslationService,\n                private documentListService?: DocumentListService,\n                private contentService?: ContentService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler for an action.\n     * @param key Identifier of the action\n     * @returns The handler for the action\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler for an action.\n     * @param key Identifier of the action\n     * @param handler Handler for the action\n     * @returns False if the key was an empty/null string, true otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if actions can be executed for an item.\n     * @param obj Item to receive an action\n     * @returns True if the action can be executed on this item, false otherwise\n     */\n    canExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFile === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n        this.handlers['lock'] = this.lockNode.bind(this);\n    }\n\n    private lockNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        return this.contentNodeDialogService.openLockNodeDialog(node.entry);\n    }\n\n    private downloadNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: MinimalNodeEntity, target?: any, permission?: string): Observable<any> {\n        let handlerObservable;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasPermission(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({\n                    type: 'content',\n                    action: 'delete',\n                    permission: permission\n                }));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\n\n@Injectable()\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService: DocumentListService,\n                private contentService: ContentService,\n                private translation: TranslationService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler function for an action.\n     * @param key Identifier for the action\n     * @returns The handler function\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler function for an action.\n     * @param key Identifier for the action\n     * @param handler The new handler function\n     * @returns True if the key was a valid action identifier, false otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if an action is available for a particular item.\n     * @param obj Item to check\n     * @returns True if the action is available, false otherwise\n     */\n    canExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFolder === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n    }\n\n    private downloadNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: MinimalNodeEntity, target?: any, permission?: string): Observable<any> {\n        let handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasPermission(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n\n                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-actions',\n    template: ''\n})\nexport class ContentActionListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    /**\n     * Registers action handler within the parent document list component.\n     * @param action Action model to register.\n     */\n    registerAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\n\n    unregisterAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            const idx = this.documentList.actions.indexOf(action);\n            if (idx >= 0) {\n                this.documentList.actions.splice(idx, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n})\nexport class ContentActionComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** The title of the action as shown in the menu. */\n    @Input()\n    title: string = 'Action';\n\n    /** The name of the icon to display next to the menu command (can be left blank). */\n    @Input()\n    icon: string;\n\n    /** Visibility state (see examples). */\n    @Input()\n    visible: boolean | Function = true;\n\n    /** System actions. Can be \"delete\", \"download\", \"copy\" or \"move\". */\n    @Input()\n    handler: string;\n\n    /** Type of item that the action applies to. Can be \"document\" or \"folder\" */\n    @Input()\n    target: string = ContentActionTarget.All;\n\n    /** The permission type. */\n    @Input()\n    permission: string;\n\n    /** Should this action be disabled in the menu if the user doesn't have permission for it? */\n    @Input()\n    disableWithNoPermission: boolean;\n\n    /** Is the menu item disabled? */\n    @Input()\n    disabled: boolean | Function = false;\n\n    /** Emitted when the user selects the action from the menu. */\n    @Output()\n    execute = new EventEmitter();\n\n    /** Emitted when a permission error occurs */\n    @Output()\n    permissionEvent = new EventEmitter();\n\n    /** Emitted when an error occurs during the action.\n     * Applies to copy and move actions.\n     */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the action succeeds with the success string message.\n     * Applies to copy, move and delete actions.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    documentActionModel: ContentActionModel;\n    folderActionModel: ContentActionModel;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(\n        private list: ContentActionListComponent,\n        private documentActions: DocumentActionsService,\n        private folderActions: FolderActionsService) {\n    }\n\n    ngOnInit() {\n        if (this.target === ContentActionTarget.All) {\n            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);\n            this.documentActionModel = this.generateAction(ContentActionTarget.Document);\n        } else {\n            this.documentActionModel = this.generateAction(this.target);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.visible && !changes.visible.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.visible = changes.visible.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.visible = changes.visible.currentValue;\n            }\n        }\n\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.disabled = changes.disabled.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.disabled = changes.disabled.currentValue;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n\n        if (this.documentActionModel) {\n            this.unregister(this.documentActionModel);\n            this.documentActionModel = null;\n        }\n\n        if (this.folderActionModel) {\n            this.unregister(this.folderActionModel);\n            this.folderActionModel = null;\n        }\n    }\n\n    register(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.registerAction(model);\n        }\n        return false;\n    }\n\n    unregister(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.unregisterAction(model);\n        }\n        return false;\n    }\n\n    private generateAction(target: string): ContentActionModel {\n        const model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: target,\n            disabled: this.disabled,\n            visible: this.visible\n        });\n        if (this.handler) {\n            model.handler = this.getSystemHandler(target, this.handler);\n        }\n\n        if (this.execute) {\n            model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register(model);\n        return model;\n    }\n\n    getSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            target = target.toLowerCase();\n\n            if (target === ContentActionTarget.Document) {\n                if (this.documentActions) {\n                    this.subscriptions.push(\n                        this.documentActions.permissionEvent.subscribe(permission => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.documentActions.error.subscribe(errors => {\n                            this.error.emit(errors);\n                        }),\n                        this.documentActions.success.subscribe(message => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (target === ContentActionTarget.Folder) {\n                if (this.folderActions) {\n                    this.subscriptions.push(\n                        this.folderActions.permissionEvent.subscribe(permission => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.folderActions.error.subscribe(errors => {\n                            this.error.emit(errors);\n                        }),\n                        this.folderActions.success.subscribe(message => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Directive({\n    selector: 'empty-folder-content'\n})\nexport class EmptyFolderContentDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.documentList.emptyFolderTemplate = this.template;\n        this.documentList.dataTable.noContentTemplate = this.template;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Directive({\n    selector: 'no-permission-content'\n})\nexport class NoPermissionContentDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.documentList.noPermissionTemplate = this.template;\n        this.documentList.dataTable.noPermissionTemplate = this.template;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nexport class NodeMinimalEntry implements MinimalNodeEntity {\n    entry: NodeMinimal;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nexport class NodeMinimal implements MinimalNodeEntryEntity {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n    aspectNames: string[];\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionsEnum } from '@alfresco/adf-core';\n\nexport class PermissionStyleModel {\n    css: string;\n    permission: PermissionsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n\n    constructor(css: string, permission: PermissionsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    FileModel, FileUploadCompleteEvent, FileUploadDeleteEvent,\n    FileUploadErrorEvent, FileUploadStatus, UploadService\n} from '@alfresco/adf-core';\nimport { ChangeDetectorRef, Component, Input, Output, EventEmitter, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subscription, merge } from 'rxjs';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\n\n// @deprecated file-uploading-dialog TODO remove in 3.0.0\n@Component({\n    selector: 'adf-file-uploading-dialog, file-uploading-dialog',\n    templateUrl: './file-uploading-dialog.component.html',\n    styleUrls: ['./file-uploading-dialog.component.scss']\n})\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    @ViewChild('uploadList')\n    uploadList: FileUploadingListComponent;\n\n    /** Dialog position. Can be 'left' or 'right'. */\n    @Input()\n    position: string = 'right';\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\n\n    private listSubscription: Subscription;\n    private counterSubscription: Subscription;\n    private fileUploadSubscription: Subscription;\n    private errorSubscription: Subscription;\n\n    constructor(private uploadService: UploadService,\n                private changeDetecor: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        this.listSubscription = this.uploadService\n            .queueChanged.subscribe((fileList: FileModel[]) => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n            });\n\n        this.counterSubscription = merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .subscribe((event: (FileUploadDeleteEvent | FileUploadCompleteEvent)) => {\n                this.totalCompleted = event.totalComplete;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .subscribe((event: FileUploadErrorEvent) => {\n                this.totalErrors = event.totalError;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService\n            .fileUpload.subscribe(() => {\n                this.changeDetecor.detectChanges();\n            });\n\n        this.uploadService.fileDeleted.subscribe((objId) => {\n            if (this.filesUploadingList) {\n                let file = this.filesUploadingList.find((item) => {\n                    return item.data.entry.id === objId;\n                });\n                if (file) {\n                    file.status = FileUploadStatus.Cancelled;\n                    this.changeDetecor.detectChanges();\n                }\n            }\n        });\n    }\n\n    /**\n     * Toggle confirmation message.\n     */\n    toggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n\n    /**\n     * Cancel uploads and hide confiramtion\n     */\n    cancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n\n    /**\n     * Toggle dialog minimized state.\n     */\n    toggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetecor.detectChanges();\n    }\n\n    /**\n     * Dismiss dialog\n     */\n    close(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetecor.detectChanges();\n    }\n\n    ngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'adf-file-uploading-list-row',\n    templateUrl: './file-uploading-list-row.component.html',\n    styleUrls: [ './file-uploading-list-row.component.scss' ]\n})\nexport class FileUploadingListRowComponent {\n    @Input()\n    file: FileModel;\n\n    @Output()\n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    @Output()\n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n\n    onCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n\n    onRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';\nimport { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-file-uploading-list',\n    templateUrl: './file-uploading-list.component.html',\n    styleUrls: ['./file-uploading-list.component.scss']\n})\nexport class FileUploadingListComponent {\n\n    FileUploadStatus = FileUploadStatus;\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    @Input()\n    files: FileModel[] = [];\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        private uploadService: UploadService,\n        private nodesApi: NodesApiService,\n        private translateService: TranslationService) {\n    }\n\n    /**\n     * Cancel file upload\n     *\n     * @param file File model to cancel upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    cancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n\n    removeFile(file: FileModel): void {\n        this.deleteNode(file)\n            .subscribe(() => {\n                if ( file.status === FileUploadStatus.Error) {\n                    this.notifyError(file);\n                }\n\n                this.uploadService.cancelUpload(file);\n            });\n    }\n\n    /**\n     * Call the appropriate method for each file, depending on state\n     */\n    cancelAllFiles(): void {\n        this.getUploadingFiles()\n            .forEach((file) => this.uploadService.cancelUpload(file));\n\n        const deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        forkJoin(...deletedFiles)\n            .subscribe((files: FileModel[]) => {\n                const errors = files\n                    .filter((file) => file.status === FileUploadStatus.Error);\n\n                if (errors.length) {\n                    this.notifyError(...errors);\n                }\n\n                this.uploadService.cancelUpload(...files);\n            });\n    }\n\n    /**\n     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending\n     */\n    isUploadCompleted(): boolean {\n         return !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files\n                .some(({status}) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n                );\n    }\n\n    /**\n     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states\n     */\n    isUploadCancelled(): boolean {\n        return !!this.files.length &&\n            this.files\n                .every(({status}) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n                );\n    }\n\n    private deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi\n            .deleteNode(id, { permanent: true })\n            .pipe(\n                map(() => {\n                    file.status = FileUploadStatus.Deleted;\n                    return file;\n                }),\n                catchError(() => {\n                    file.status = FileUploadStatus.Error;\n                    return of(file);\n                })\n            );\n    }\n\n    private notifyError(...files: FileModel[]) {\n        let messageError: string = null;\n\n        if (files.length === 1) {\n            messageError = this.translateService\n                .instant(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                    { fileName: files[0].name}\n                );\n        } else {\n            messageError = this.translateService\n                .instant(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                    { total: files.length }\n                );\n        }\n\n        this.error.emit(messageError);\n    }\n\n    private getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, UploadService } from '@alfresco/adf-core';\nimport { EventEmitter } from '@angular/core';\n\nexport class UploadFilesEvent {\n    private isDefaultPrevented: boolean = false;\n\n    get defaultPrevented() {\n        return this.isDefaultPrevented;\n    }\n\n    preventDefault() {\n        this.isDefaultPrevented = true;\n    }\n\n    constructor(\n        public files: Array<FileModel>,\n        private uploadService: UploadService,\n        private callback: EventEmitter<any>\n    ) {}\n\n    pauseUpload() {\n        this.preventDefault();\n    }\n\n    resumeUpload() {\n        if (this.files && this.files.length > 0) {\n            this.uploadService.addToQueue(...this.files);\n            this.uploadService.uploadFilesInTheQueue(this.callback);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileInfo } from '@alfresco/adf-core';\nimport { EventEmitter, Input, Output, OnInit, OnDestroy, NgZone } from '@angular/core';\nimport { UploadService, TranslationService } from '@alfresco/adf-core';\nimport { Subscription } from 'rxjs';\nimport { UploadFilesEvent } from '../upload-files.event';\n\nexport abstract class UploadBase implements OnInit, OnDestroy {\n\n    /** Sets a limit on the maximum size (in bytes) of a file to be uploaded.\n     * Has no effect if undefined.\n     */\n    @Input()\n    maxFilesSize: number;\n\n    /** The ID of the root. Use the nodeId for\n     * Content Services or the taskId/processId for Process Services.\n     */\n    @Input()\n    rootFolderId: string = '-root-';\n\n    /** Toggles component disabled state (if there is no node permission checking). */\n    @Input()\n    disabled: boolean = false;\n\n    /** Filter for accepted file types. */\n    @Input()\n    acceptedFilesType: string = '*';\n\n    /** Toggles versioning. */\n    @Input()\n    versioning: boolean = false;\n\n    /** majorVersion boolean field to true to indicate a major version should be created. */\n    @Input()\n    majorVersion: boolean = false;\n\n    /** When you overwrite existing content, you can use the comment field to add a version comment that appears in the version history */\n    @Input()\n    comment: string;\n\n    /** Custom node type for uploaded file */\n    @Input()\n    nodeType: string = 'cm:content';\n\n    /** Emitted when the file is uploaded successfully. */\n    @Output()\n    success = new EventEmitter();\n\n    /**\n     * Emitted when a folder is created.\n     * @deprecated 2.4.0 No longer used by the framework\n     */\n    @Output()\n    createFolder = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the upload begins. */\n    @Output()\n    beginUpload = new EventEmitter<UploadFilesEvent>();\n\n    protected subscriptions: Subscription[] = [];\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                protected ngZone: NgZone) {\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.uploadService.fileUploadError.subscribe((error) => {\n                this.error.emit(error);\n            })\n        );\n\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    /**\n     * Upload a list of file in the specified path\n     * @param files\n     * @param path\n     */\n    uploadFiles(files: File[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((file: File) => {\n                return this.createFileModel(file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''));\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    uploadFilesInfo(files: FileInfo[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((fileInfo: FileInfo) => {\n                return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    private uploadQueue(files: FileModel[]) {\n        let filteredFiles = files\n            .filter(this.isFileAcceptable.bind(this))\n            .filter(this.isFileSizeAcceptable.bind(this));\n\n        this.ngZone.run(() => {\n            const event = new UploadFilesEvent(\n                [...filteredFiles],\n                this.uploadService,\n                this.success\n            );\n            this.beginUpload.emit(event);\n\n            if (!event.defaultPrevented) {\n                if (filteredFiles.length > 0) {\n                    this.uploadService.addToQueue(...filteredFiles);\n                    this.uploadService.uploadFilesInTheQueue(this.success);\n                }\n            }\n        });\n    }\n\n    /**\n     * Checks if the given file is allowed by the extension filters\n     *\n     * @param file FileModel\n     */\n    protected isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map(ext => ext.replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates FileModel from File\n     *\n     * @param file\n     */\n    protected createFileModel(file: File, parentId: string, path: string, id?: string): FileModel {\n        return new FileModel(file, {\n            comment: this.comment,\n            majorVersion: this.majorVersion,\n            newVersion: this.versioning,\n            parentId: parentId,\n            path: path,\n            nodeType: this.nodeType\n        }, id);\n    }\n\n    protected isFileSizeAllowed(file: FileModel) {\n        let isFileSizeAllowed = true;\n        if (this.isMaxFileSizeDefined()) {\n            isFileSizeAllowed = this.isFileSizeCorrect(file);\n        }\n\n        return isFileSizeAllowed;\n    }\n\n    protected isMaxFileSizeDefined() {\n        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;\n    }\n\n    protected isFileSizeCorrect(file: FileModel) {\n        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;\n    }\n\n    /**\n     * Checks if the given file is an acceptable size\n     *\n     * @param file FileModel\n     */\n    private isFileSizeAcceptable(file: FileModel): boolean {\n        let acceptableSize = true;\n\n        if (!this.isFileSizeAllowed(file)) {\n            acceptableSize = false;\n\n            const message = this.translationService.instant(\n                'FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE',\n                { fileName: file.name }\n            );\n\n            this.error.emit(message);\n        }\n\n        return acceptableSize;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentService, EXTENDIBLE_COMPONENT, FileUtils,\n    LogService, NodePermissionSubject, TranslationService, UploadService, PermissionsEnum\n} from '@alfresco/adf-core';\nimport {\n    Component, EventEmitter, forwardRef, Input,\n    OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation, NgZone\n} from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { Subject } from 'rxjs';\nimport { PermissionModel } from '../../document-list/models/permissions.model';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadButtonComponent extends UploadBase implements OnInit, OnChanges, NodePermissionSubject {\n\n    /** Allows/disallows upload folders (only for Chrome). */\n    @Input()\n    uploadFolders: boolean = false;\n\n    /** Allows/disallows multiple files */\n    @Input()\n    multipleFiles: boolean = false;\n\n    /** Defines the text of the upload button. */\n    @Input()\n    staticTitle: string;\n\n    /** Custom tooltip text. */\n    @Input()\n    tooltip: string = null;\n\n    /** Emitted when create permission is missing. */\n    @Output()\n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\n\n    private hasPermission: boolean = false;\n\n    protected permissionValue: Subject<boolean> = new Subject<boolean>();\n\n    constructor(protected uploadService: UploadService,\n                private contentService: ContentService,\n                protected translationService: TranslationService,\n                protected logService: LogService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    ngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasPermission = permission;\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n\n    isButtonDisabled(): boolean {\n        return this.disabled ? true : undefined;\n    }\n\n    onFilesAdded($event: any): void {\n        let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasPermission) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    onDirectoryAdded($event: any): void {\n        if (this.hasPermission) {\n            let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    checkPermission() {\n        if (this.rootFolderId) {\n            let opts: any = {\n                includeSource: true,\n                include: ['allowableOperations']\n            };\n\n            this.contentService.getNode(this.rootFolderId, opts).subscribe(\n                res => this.permissionValue.next(this.nodeHasPermission(res.entry, PermissionsEnum.CREATE)),\n                error => this.error.emit(error)\n            );\n        }\n    }\n\n    nodeHasPermission(node: MinimalNodeEntryEntity, permission: PermissionsEnum | string): boolean {\n        return this.contentService.hasPermission(node, permission);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionsEnum  } from '@alfresco/adf-core';\nimport { Component, forwardRef, Input, OnChanges, ViewEncapsulation, OnInit } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { UploadButtonComponent } from './upload-button.component';\nimport { FileModel, EXTENDIBLE_COMPONENT } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-upload-version-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadVersionButtonComponent extends UploadButtonComponent implements OnChanges, OnInit {\n\n    /** (**Required**) The node to be versioned. */\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    protected createFileModel(file: File): FileModel {\n        const fileModel = super.createFileModel(file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''), this.node.id);\n\n        if (!this.isFileAcceptable(fileModel)) {\n            const message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');\n            this.error.emit(message);\n        }\n\n        return fileModel;\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.checkPermission();\n    }\n\n    checkPermission() {\n        this.permissionValue.next(this.nodeHasPermission(this.node, PermissionsEnum.UPDATE));\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EXTENDIBLE_COMPONENT, FileInfo, FileModel, FileUtils, NodePermissionSubject,\n    NotificationService, TranslationService, UploadService, ContentService, PermissionsEnum\n} from '@alfresco/adf-core';\nimport { Component, forwardRef, Input, ViewEncapsulation, NgZone } from '@angular/core';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-drag-area',\n    templateUrl: './upload-drag-area.component.html',\n    styleUrls: ['./upload-drag-area.component.css'],\n    host: { 'class': 'adf-upload-drag-area' },\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadDragAreaComponent extends UploadBase implements NodePermissionSubject {\n\n    /**\n     * ID of parent folder node\n     * @deprecated 2.4.0 - use rootFolderId ID of parent folder node\n     */\n    @Input()\n    set parentId(nodeId: string) {\n        this.rootFolderId = nodeId;\n    }\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                private notificationService: NotificationService,\n                private contentService: ContentService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    /**\n     * Method called when files are dropped in the drag area.\n     *\n     * @param files - files dropped in the drag area.\n     */\n    onFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            this.uploadFiles(files);\n        }\n    }\n\n    /**\n     * Called when the file are dropped in the drag area.\n     * @deprecated in 2.4.0: use `onFilesDropped` instead\n     * @param item - FileEntity\n     */\n    onFilesEntityDropped(item: any): void {\n        if (!this.disabled) {\n            item.file((file: File) => {\n                // const fileModel = this.createFileModel(file, this.rootFolderId, item.fullPath.replace(item.name, ''));\n\n                this.uploadFiles([file]);\n            });\n        }\n    }\n\n    /**\n     * Called when a folder are dropped in the drag area\n     *\n     * @param folder - name of the dropped folder\n     */\n    onFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flattern(folder).then(filesInfo => {\n                this.uploadFilesInfo(filesInfo);\n            });\n        }\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    showUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    /** Returns true or false considering the component options and node permissions */\n    isDroppable(): boolean {\n        return !this.disabled;\n    }\n\n    /**\n     * Handles 'upload-files' events raised by child components.\n     *\n     * @param event DOM event\n     */\n    onUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        let isAllowed: boolean = this.contentService.hasPermission(event.detail.data.obj.entry, PermissionsEnum.CREATE);\n        if (isAllowed) {\n            let fileInfo: FileInfo[] = event.detail.files;\n            if (this.isTargetNodeFolder(event)) {\n                const destinationFolderName = event.detail.data.obj.entry.name;\n                fileInfo.map((file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder);\n            }\n            if (fileInfo && fileInfo.length > 0) {\n                this.uploadFilesInfo(fileInfo);\n            }\n        }\n    }\n\n    private isTargetNodeFolder(event: CustomEvent): boolean {\n        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { FileUtils } from '@alfresco/adf-core';\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\n\n@Directive({\n    selector: '[file-draggable]'\n})\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    /** Enables/disables drag-and-drop functionality. */\n    @Input('file-draggable')\n    enabled: boolean = true;\n\n    /** Emitted when one or more files are dragged and dropped onto the draggable element. */\n    @Output()\n    filesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /**\n     * Emitted when one or more files are dragged and dropped onto the draggable element.\n     * @deprecated in 2.4.0: use `filesDropped` instead\n     */\n    @Output()\n    filesEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when a directory is dragged and dropped onto the draggable element. */\n    @Output()\n    folderEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    private cssClassName: string = 'file-draggable__input-focus';\n    private element: HTMLElement;\n\n    constructor(el: ElementRef, private ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n\n    ngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n\n    /**\n     * Method called when files is dropped in the drag and drop area.\n     * @param event DOM event.\n     */\n    onDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            // Chrome, Edge, Firefox, Opera (Files + Folders)\n            const items = event.dataTransfer.items;\n            if (items) {\n                const files: File[] = [];\n\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i].webkitGetAsEntry) {\n                        const item = items[i].webkitGetAsEntry();\n\n                        if (item) {\n                            if (item.isFile) {\n                                const file = items[i].getAsFile();\n\n                                if (file) {\n                                    files.push(file);\n                                }\n                            } else if (item.isDirectory) {\n                                this.folderEntityDropped.emit(item);\n                            }\n                        }\n                    }\n                }\n                if (files.length > 0) {\n                    this.filesDropped.emit(files);\n                }\n            } else {\n                // IE, Safari, Chrome, Edge, Firefox, Opera (Files only)\n                const files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.filesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag in.\n     *\n     * @param event - DOM event.\n     */\n    onDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag out.\n     *\n     * @param event - DOM event.\n     */\n    onDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file is over the drag area.\n     *\n     * @param event\n     */\n    onDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Prevent default and stop propagation of the DOM event.\n     *\n     * @param $event - DOM event.\n     */\n    preventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MaterialModule } from '../material.module';\nimport { FileUploadingDialogComponent } from './components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './components/file-uploading-list.component';\nimport { UploadButtonComponent } from './components/upload-button.component';\nimport { UploadVersionButtonComponent } from './components/upload-version-button.component';\nimport { UploadDragAreaComponent } from './components/upload-drag-area.component';\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FileDraggableDirective } from './directives/file-draggable.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent\n    ],\n    exports: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent\n    ]\n})\nexport class UploadModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { UploadModule } from '../upload/upload.module';\n\nimport { ContentActionListComponent } from './components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './components/content-column/content-column.component';\nimport { DocumentListComponent } from './components/document-list.component';\n\nimport { EmptyFolderContentDirective } from './components/empty-folder/empty-folder-content.directive';\nimport { NoPermissionContentDirective } from './components/no-permission/no-permission-content.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        UploadModule\n    ],\n    declarations: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent,\n        EmptyFolderContentDirective,\n        NoPermissionContentDirective\n    ],\n    exports: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent,\n        EmptyFolderContentDirective,\n        NoPermissionContentDirective\n    ]\n})\nexport class DocumentListModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { QueryBody, RequestFacetFields, RequestFacetField, RequestSortDefinitionInner } from 'alfresco-js-api';\nimport { SearchCategory } from './search-category.interface';\nimport { FilterQuery } from './filter-query.interface';\nimport { SearchRange } from './search-range.interface';\nimport { SearchConfiguration } from './search-configuration.interface';\nimport { FacetQuery } from './facet-query.interface';\nimport { SearchSortingDefinition } from './search-sorting-definition.interface';\nimport { FacetField } from './facet-field.interface';\nimport { FacetFieldBucket } from './facet-field-bucket.interface';\n\n@Injectable()\nexport class SearchQueryBuilderService {\n\n    private _userQuery = '';\n\n    updated: Subject<QueryBody> = new Subject();\n    executed: Subject<any> = new Subject();\n\n    categories: Array<SearchCategory> = [];\n    queryFragments: { [id: string]: string } = {};\n    filterQueries: FilterQuery[] = [];\n    paging: { maxItems?: number; skipCount?: number } = null;\n    sorting: Array<SearchSortingDefinition> = [];\n\n    protected userFacetQueries: FacetQuery[] = [];\n    protected userFacetBuckets: { [key: string]: Array<FacetFieldBucket> } = {};\n\n    get userQuery(): string {\n        return this._userQuery;\n    }\n\n    set userQuery(value: string) {\n        value = (value || '').trim();\n        this._userQuery = value ? `(${value})` : '';\n    }\n\n    config: SearchConfiguration;\n\n    // TODO: to be supported in future iterations\n    ranges: { [id: string]: SearchRange } = {};\n\n    constructor(private appConfig: AppConfigService, private alfrescoApiService: AlfrescoApiService) {\n        this.resetToDefaults();\n    }\n\n    resetToDefaults() {\n        const template = this.appConfig.get<SearchConfiguration>('search');\n        if (template) {\n            this.config = JSON.parse(JSON.stringify(template));\n            this.categories = (this.config.categories || []).filter(category => category.enabled);\n            this.filterQueries = this.config.filterQueries || [];\n            this.userFacetBuckets = {};\n            this.userFacetQueries = [];\n            if (this.config.sorting) {\n                this.sorting = this.config.sorting.defaults || [];\n            }\n        }\n    }\n\n    addUserFacetQuery(query: FacetQuery) {\n        if (query) {\n            const existing = this.userFacetQueries.find(facetQuery => facetQuery.label === query.label);\n            if (existing) {\n                existing.query = query.query;\n            } else {\n                this.userFacetQueries.push({ ...query });\n            }\n        }\n    }\n\n    removeUserFacetQuery(query: FacetQuery) {\n        if (query) {\n            this.userFacetQueries = this.userFacetQueries\n                .filter(facetQuery => facetQuery.label !== query.label);\n        }\n    }\n\n    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            const existing = buckets.find(facetBucket => facetBucket.label === bucket.label);\n            if (!existing) {\n                buckets.push(bucket);\n            }\n            this.userFacetBuckets[field.field] = buckets;\n        }\n    }\n\n    getUserFacetBuckets(field: string) {\n        return this.userFacetBuckets[field] || [];\n    }\n\n    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            this.userFacetBuckets[field.field] = buckets\n                .filter(facetBucket => facetBucket.label !== bucket.label);\n        }\n    }\n\n    addFilterQuery(query: string): void {\n        if (query) {\n            const existing = this.filterQueries.find(filterQuery => filterQuery.query === query);\n            if (!existing) {\n                this.filterQueries.push({ query: query });\n            }\n        }\n    }\n\n    removeFilterQuery(query: string): void {\n        if (query) {\n            this.filterQueries = this.filterQueries\n                .filter(filterQuery => filterQuery.query !== query);\n        }\n    }\n\n    getFacetQuery(label: string): FacetQuery {\n        if (label && this.hasFacetQueries) {\n            const result = this.config.facetQueries.queries.find(query => query.label === label);\n            if (result) {\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    getFacetField(label: string): FacetField {\n        if (label) {\n            const fields = this.config.facetFields.fields || [];\n            const result = fields.find(field => field.label === label);\n            if (result) {\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    update(): void {\n        const query = this.buildQuery();\n        this.updated.next(query);\n    }\n\n    async execute() {\n        const query = this.buildQuery();\n        if (query) {\n            const data = await this.alfrescoApiService.searchApi.search(query);\n            this.executed.next(data);\n        }\n    }\n\n    buildQuery(): QueryBody {\n        let query = this.getFinalQuery();\n\n        const include = this.config.include || [];\n        if (include.length === 0) {\n            include.push('path', 'allowableOperations');\n        }\n\n        if (query) {\n            const result: QueryBody = {\n                query: {\n                    query: query,\n                    language: 'afts'\n                },\n                include: include,\n                paging: this.paging,\n                fields: this.config.fields,\n                filterQueries: this.filterQueries,\n                facetQueries: this.facetQueries,\n                facetFields: this.facetFields,\n                sort: this.sort\n            };\n\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns primary sorting definition.\n     */\n    getPrimarySorting(): SearchSortingDefinition {\n        if (this.sorting && this.sorting.length > 0) {\n            return this.sorting[0];\n        }\n        return null;\n    }\n\n    /**\n     * Returns all pre-configured sorting options that users can choose from.\n     */\n    getSortingOptions(): SearchSortingDefinition[] {\n        if (this.config && this.config.sorting) {\n            return this.config.sorting.options || [];\n        }\n        return [];\n    }\n\n    /**\n     * Check if FacetQueries has been defined\n     */\n    get hasFacetQueries(): boolean {\n        if (this.config\n            && this.config.facetQueries\n            && this.config.facetQueries.queries\n            && this.config.facetQueries.queries.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    protected get sort(): RequestSortDefinitionInner[] {\n        return this.sorting.map(def => {\n            return {\n                type: def.type,\n                field: def.field,\n                ascending: def.ascending\n            };\n        });\n    }\n\n    protected get facetQueries(): FacetQuery[] {\n        if (this.hasFacetQueries) {\n            return this.config.facetQueries.queries.map(query => {\n                return <FacetQuery> { ...query };\n            });\n        }\n\n        return null;\n    }\n\n    protected getFinalQuery(): string {\n        let query = '';\n\n        this.categories.forEach(facet => {\n            const customQuery = this.queryFragments[facet.id];\n            if (customQuery) {\n                if (query.length > 0) {\n                    query += ' AND ';\n                }\n                query += `(${customQuery})`;\n            }\n        });\n\n        let result = [this.userQuery, query]\n            .filter(entry => entry)\n            .join(' AND ');\n\n        if (this.userFacetQueries && this.userFacetQueries.length > 0) {\n            const combined = this.userFacetQueries\n                .map(userQuery => userQuery.query)\n                .join(' OR ');\n            result += ` AND (${combined})`;\n        }\n\n        if (this.userFacetBuckets) {\n            Object.keys(this.userFacetBuckets).forEach(key => {\n                const subQuery = (this.userFacetBuckets[key] || [])\n                    .map(bucket => bucket.filterQuery)\n                    .join(' OR ');\n                if (subQuery) {\n                    if (result.length > 0) {\n                        result += ' AND ';\n                    }\n                    result += `(${subQuery})`;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    protected get facetFields(): RequestFacetFields {\n        const facetFields = this.config.facetFields && this.config.facetFields.fields;\n\n        if (facetFields && facetFields.length > 0) {\n            return {\n                facets: facetFields.map(facet => <RequestFacetField> {\n                    field: facet.field,\n                    mincount: facet.mincount,\n                    label: facet.label,\n                    limit: facet.limit,\n                    offset: facet.offset,\n                    prefix: facet.prefix\n                })\n            };\n        }\n\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NodePaging, QueryBody } from 'alfresco-js-api';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search',\n    templateUrl: './search.component.html',\n    styleUrls: ['./search.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    exportAs: 'searchAutocomplete',\n    host: {\n        'class': 'adf-search'\n    }\n})\nexport class SearchComponent implements AfterContentInit, OnChanges {\n\n    @ViewChild('panel')\n    panel: ElementRef;\n\n    @ContentChild(TemplateRef)\n    template: TemplateRef<any>;\n\n    /** Function that maps an option's value to its display value in the trigger. */\n    @Input()\n    displayWith: ((value: any) => string) | null = null;\n\n    /** Maximum number of results to show in the search. */\n    @Input()\n    maxResults: number = 20;\n\n    /** Number of results to skip from the results pagination. */\n    @Input()\n    skipResults: number = 0;\n\n    /** @deprecated in 2.1.0 */\n    @Input()\n    queryBody: QueryBody;\n\n    /** Search term to use when executing the search. Updating this value will\n     * run a new search and update the results.\n     */\n    @Input()\n    searchTerm: string = '';\n\n    /** CSS class for display. */\n    @Input('class')\n    set classList(classList: string) {\n        if (classList && classList.length) {\n            classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Emitted when search results have fully loaded. */\n    @Output()\n    resultLoaded: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    showPanel: boolean = false;\n    results: NodePaging;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    _isOpen: boolean = false;\n\n    keyPressedStream: Subject<string> = new Subject();\n\n    _classList: { [key: string]: boolean } = {};\n\n    constructor(private searchService: SearchService,\n                private _elementRef: ElementRef) {\n        this.keyPressedStream.asObservable()\n            .pipe(\n                debounceTime(200)\n            )\n            .subscribe((searchedWord: string) => {\n                this.loadSearchResults(searchedWord);\n            });\n\n        searchService.dataLoaded.subscribe(\n            data => this.onSearchDataLoaded(data),\n            error => this.onSearchDataError(error)\n        );\n    }\n\n    ngAfterContentInit() {\n        this.setVisibility();\n    }\n\n    ngOnChanges(changes) {\n        if (changes.queryBody &&\n            this.hasDifferentQueryBody(changes.queryBody.previousValue, changes.queryBody.currentValue)) {\n            this.loadSearchResults();\n        }\n        if (changes.searchTerm && changes.searchTerm.currentValue) {\n            this.loadSearchResults(changes.searchTerm.currentValue);\n        }\n    }\n\n    resetResults() {\n        this.cleanResults();\n        this.setVisibility();\n    }\n\n    reload() {\n        this.loadSearchResults(this.searchTerm);\n    }\n\n    private hasDifferentQueryBody(previousQueryBody: QueryBody, currentQueryBody: QueryBody) {\n        return JSON.stringify(previousQueryBody) !== JSON.stringify(currentQueryBody);\n    }\n\n    private cleanResults() {\n        if (this.results) {\n            this.results = {};\n        }\n    }\n\n    private loadSearchResults(searchTerm?: string) {\n        this.resetResults();\n        if (searchTerm) {\n            if (this.queryBody) {\n                this.searchService.searchByQueryBody(this.queryBody).subscribe(\n                    result => this.onSearchDataLoaded(result),\n                    err => this.onSearchDataError(err)\n                );\n            } else {\n                this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(\n                    result => this.onSearchDataLoaded(result),\n                    err => this.onSearchDataError(err)\n                );\n            }\n        } else {\n            this.cleanResults();\n        }\n    }\n\n    onSearchDataLoaded(data: NodePaging) {\n        if (data) {\n            this.results = data;\n            this.resultLoaded.emit(this.results);\n            this.isOpen = true;\n            this.setVisibility();\n        }\n    }\n\n    onSearchDataError(error) {\n        if (error && error.status !== 400) {\n            this.results = null;\n            this.error.emit(error);\n        }\n    }\n\n    hidePanel() {\n        if (this.isOpen) {\n            this._classList['adf-search-show'] = false;\n            this._classList['adf-search-hide'] = true;\n            this.isOpen = false;\n        }\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.results && !!this.results.list;\n        this._classList['adf-search-show'] = this.showPanel;\n        this._classList['adf-search-hide'] = !this.showPanel;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-empty-search-result',\n    templateUrl: './empty-search-result.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class EmptySearchResultComponent {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationService, ThumbnailService } from '@alfresco/adf-core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output,\n         QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef, TemplateRef, ContentChild } from '@angular/core';\nimport { MinimalNodeEntity, QueryBody } from 'alfresco-js-api';\nimport { Observable, Subject } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { MatListItem } from '@angular/material';\nimport { EmptySearchResultComponent } from './empty-search-result.component';\nimport { debounceTime, filter } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search-control',\n    templateUrl: './search-control.component.html',\n    styleUrls: ['./search-control.component.scss'],\n    animations: [\n        trigger('transitionMessages', [\n            state('active', style({ transform: 'translateX(0%)', 'margin-left': '13px' })),\n            state('inactive', style({ transform: 'translateX(81%)'})),\n            state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),\n            transition('inactive => active',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n            transition('active => inactive',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-control' }\n})\nexport class SearchControlComponent implements OnInit, OnDestroy {\n\n    /** Toggles whether to use an expanding search control. If false\n     * then a regular input is used.\n     */\n    @Input()\n    expandable: boolean = true;\n\n    /** Toggles highlighting of the search term in the results. */\n    @Input()\n    highlight: boolean = false;\n\n    /** Type of the input field to render, e.g. \"search\" or \"text\" (default). */\n    @Input()\n    inputType: string = 'text';\n\n    /** Toggles auto-completion of the search input field. */\n    @Input()\n    autocomplete: boolean = false;\n\n    /** Toggles \"find-as-you-type\" suggestions for possible matches. */\n    @Input()\n    liveSearchEnabled: boolean = true;\n\n    /** Maximum number of results to show in the live search. */\n    @Input()\n    liveSearchMaxResults: number = 5;\n\n    /** @deprecated in 2.1.0 */\n    @Input()\n    customQueryBody: QueryBody;\n\n    /** Emitted when the search is submitted pressing ENTER button.\n     * The search term is provided as value of the event.\n     */\n    @Output()\n    submit: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when the search term is changed. The search term is provided\n     * in the 'value' property of the returned object.  If the term is less\n     * than three characters in length then the term is truncated to an empty\n     * string.\n     */\n    @Output()\n    searchChange: EventEmitter<string> = new EventEmitter();\n\n    /** Emitted when a file item from the list of \"find-as-you-type\" results is selected. */\n    @Output()\n    optionClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('search')\n    searchAutocomplete: SearchComponent;\n\n    @ViewChild('searchInput')\n    searchInput: ElementRef;\n\n    @ViewChildren(MatListItem)\n    private listResultElement: QueryList<MatListItem>;\n\n    @ContentChild(EmptySearchResultComponent)\n    emptySearchTemplate: EmptySearchResultComponent;\n\n    searchTerm: string = '';\n    subscriptAnimationState: string;\n    noSearchResultTemplate: TemplateRef <any> = null;\n\n    private toggleSearch = new Subject<any>();\n    private focusSubject = new Subject<FocusEvent>();\n\n    constructor(public authService: AuthenticationService,\n                private thumbnailService: ThumbnailService) {\n\n        this.toggleSearch.asObservable().pipe(debounceTime(200)).subscribe(() => {\n            if (this.expandable) {\n                this.subscriptAnimationState = this.subscriptAnimationState === 'inactive' ? 'active' : 'inactive';\n\n                if (this.subscriptAnimationState === 'inactive') {\n                    this.searchTerm = '';\n                    this.searchAutocomplete.resetResults();\n                    if ( document.activeElement.id === this.searchInput.nativeElement.id) {\n                        this.searchInput.nativeElement.blur();\n                    }\n                }\n            }\n        });\n    }\n\n    applySearchFocus(animationDoneEvent) {\n        if (animationDoneEvent.toState === 'active') {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n\n    ngOnInit() {\n        this.subscriptAnimationState = this.expandable ? 'inactive' : 'no-animation';\n        this.setupFocusEventHandlers();\n    }\n\n    isNoSearchTemplatePresent(): boolean {\n        return this.emptySearchTemplate ? true : false;\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusSubject) {\n            this.focusSubject.unsubscribe();\n            this.focusSubject = null;\n        }\n\n        if (this.toggleSearch) {\n            this.toggleSearch.unsubscribe();\n            this.toggleSearch = null;\n        }\n    }\n\n    isLoggedIn(): boolean {\n        return this.authService.isEcmLoggedIn();\n    }\n\n    searchSubmit(event: any) {\n        this.submit.emit(event);\n        this.toggleSearchBar();\n    }\n\n    inputChange(event: any) {\n        this.searchChange.emit(event);\n    }\n\n    getAutoComplete(): string {\n        return this.autocomplete ? 'on' : 'off';\n    }\n\n    getMimeTypeIcon(node: MinimalNodeEntity): string {\n        let mimeType;\n\n        if (node.entry.content && node.entry.content.mimeType) {\n            mimeType = node.entry.content.mimeType;\n        }\n        if (node.entry.isFolder) {\n            mimeType = 'folder';\n        }\n\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    isSearchBarActive() {\n        return this.subscriptAnimationState === 'active' && this.liveSearchEnabled;\n    }\n\n    toggleSearchBar() {\n        if (this.toggleSearch) {\n            this.toggleSearch.next();\n        }\n    }\n\n    elementClicked(item: any) {\n        if (item.entry) {\n            this.optionClicked.next(item);\n            this.toggleSearchBar();\n        }\n    }\n\n    onFocus($event): void {\n        this.focusSubject.next($event);\n    }\n\n    onBlur($event): void {\n        this.focusSubject.next($event);\n    }\n\n    activateToolbar() {\n        if (!this.isSearchBarActive()) {\n            this.toggleSearchBar();\n        }\n    }\n\n    selectFirstResult() {\n        if ( this.listResultElement && this.listResultElement.length > 0) {\n            let firstElement: MatListItem = <MatListItem> this.listResultElement.first;\n            firstElement._getHostElement().focus();\n        }\n    }\n\n    onRowArrowDown($event: KeyboardEvent): void {\n        let nextElement: any = this.getNextElementSibling(<Element> $event.target);\n        if (nextElement) {\n            nextElement.focus();\n        }\n    }\n\n    onRowArrowUp($event: KeyboardEvent): void {\n        let previousElement: any = this.getPreviousElementSibling(<Element> $event.target);\n        if (previousElement) {\n            previousElement.focus();\n        } else {\n            this.searchInput.nativeElement.focus();\n            this.focusSubject.next(new FocusEvent('focus'));\n        }\n    }\n\n    private setupFocusEventHandlers() {\n        const focusEvents: Observable<FocusEvent> = this.focusSubject\n            .asObservable()\n            .pipe(\n                debounceTime(50),\n                filter(($event: any) => {\n                    return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');\n                })\n            );\n\n        focusEvents.subscribe(() => {\n            this.toggleSearchBar();\n        });\n    }\n\n    private getNextElementSibling(node: Element): Element {\n        return node.nextElementSibling;\n    }\n\n    private getPreviousElementSibling(node: Element): Element {\n        return node.previousElementSibling;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable: no-input-rename no-use-before-declare no-input-rename  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject, Subscription, merge, of, fromEvent } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\n\nexport const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SearchTriggerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,\n    host: {\n        'role': 'combobox',\n        '[attr.autocomplete]': 'autocomplete',\n        'aria-autocomplete': 'list',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n    private onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n    @Input('searchAutocomplete')\n    searchPanel: SearchComponent;\n\n    @Input()\n    autocomplete: string = 'off';\n\n    private _panelOpen: boolean = false;\n    private closingActionsSubscription: Subscription;\n    private escapeEventStream = new Subject<void>();\n\n    onChange: (value: any) => void = () => { };\n\n    onTouched = () => { };\n\n    constructor(private element: ElementRef,\n                private ngZone: NgZone,\n                private changeDetectorRef: ChangeDetectorRef,\n                @Optional() @Inject(DOCUMENT) private document: any) { }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n\n        if (this.escapeEventStream) {\n            this.escapeEventStream.unsubscribe();\n            this.escapeEventStream = null;\n        }\n        if ( this.closingActionsSubscription ) {\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen && this.searchPanel.showPanel;\n    }\n\n    openPanel(): void {\n        this.searchPanel.isOpen = this._panelOpen = true;\n        this.closingActionsSubscription = this.subscribeToClosingActions();\n    }\n\n    closePanel(): void {\n        if (this._panelOpen) {\n            this.closingActionsSubscription.unsubscribe();\n            this._panelOpen = false;\n            this.searchPanel.resetResults();\n            this.searchPanel.hidePanel();\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    get panelClosingActions(): Observable<any> {\n        return merge(\n            this.escapeEventStream,\n            this.outsideClickStream\n        );\n    }\n\n    private get outsideClickStream(): Observable<any> {\n        if (!this.document) {\n            return of(null);\n        }\n\n        return merge(\n            fromEvent(this.document, 'click'),\n            fromEvent(this.document, 'touchend')\n        ).pipe(\n            filter((event: MouseEvent | TouchEvent) => {\n                const clickTarget = event.target as HTMLElement;\n                return this._panelOpen && clickTarget !== this.element.nativeElement;\n            })\n        );\n    }\n\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === ESCAPE && this.panelOpen) {\n            this.escapeEventStream.next();\n            event.stopPropagation();\n        } else if (keyCode === ENTER) {\n            this.escapeEventStream.next();\n            event.preventDefault();\n        }\n\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        if (document.activeElement === event.target) {\n            let inputValue: string = (event.target as HTMLInputElement).value;\n            this.onChange(inputValue);\n            if (inputValue) {\n                this.searchPanel.keyPressedStream.next(inputValue);\n                this.openPanel();\n            } else {\n                this.searchPanel.resetResults();\n                this.closePanel();\n            }\n        }\n    }\n\n    private isPanelOptionClicked(event: MouseEvent) {\n        let isPanelOption: boolean = false;\n        if ( event ) {\n            let clickTarget = event.target as HTMLElement;\n            isPanelOption = !this.isNoResultOption(event) &&\n                            !!this.searchPanel.panel &&\n                            !!this.searchPanel.panel.nativeElement.contains(clickTarget);\n        }\n        return isPanelOption;\n    }\n\n    private isNoResultOption(event: MouseEvent) {\n        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;\n    }\n\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.ngZone.onStable.asObservable();\n        const optionChanges = this.searchPanel.keyPressedStream.asObservable();\n\n        return merge(firstStable, optionChanges)\n            .pipe(\n                takeUntil(this.onDestroy$),\n                switchMap(() => {\n                    this.searchPanel.setVisibility();\n                    return this.panelClosingActions;\n                })\n            )\n            .subscribe(event => this.setValueAndClose(event));\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?\n            this.searchPanel.displayWith(value) : value;\n        const inputValue = toDisplay != null ? toDisplay : '';\n        this.element.nativeElement.value = inputValue;\n    }\n\n    private setValueAndClose(event: any | null): void {\n        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {\n            this.setTriggerValue(event.target.textContent.trim());\n            this.onChange(event.target.textContent.trim());\n            this.element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport class SearchFilterList<T> implements Iterable<T> {\n\n    private filteredItems: T[] = [];\n    private _filterText: string = '';\n\n    items: T[] = [];\n    pageSize: number = DEFAULT_PAGE_SIZE;\n    currentPageSize: number = DEFAULT_PAGE_SIZE;\n\n    get filterText(): string {\n        return this._filterText;\n    }\n\n    set filterText(value: string) {\n        this._filterText = value;\n        this.applyFilter();\n    }\n\n    private _filter: (item: T) => boolean = () => true;\n\n    get filter(): (item: T) => boolean {\n        return this._filter;\n    }\n\n    set filter(value: (item: T) => boolean ) {\n        this._filter = value;\n        this.applyFilter();\n    }\n\n    private applyFilter() {\n        if (this.filter) {\n            this.filteredItems = this.items.filter(this.filter);\n        } else {\n            this.filteredItems = this.items;\n        }\n        this.currentPageSize = this.pageSize;\n    }\n\n    /** Returns visible portion of the items.  */\n    get visibleItems(): T[] {\n        return this.filteredItems.slice(0, this.currentPageSize);\n    }\n\n    /** Returns entire collection length including items not displayed on the page. */\n    get length(): number {\n        return this.items.length;\n    }\n\n    /** Detects whether more items can be displayed. */\n    get canShowMoreItems(): boolean {\n        return this.filteredItems.length > this.currentPageSize;\n    }\n\n    /** Detects whether less items can be displayed. */\n    get canShowLessItems(): boolean {\n        return this.currentPageSize > this.pageSize;\n    }\n\n    /** Detects whether content fits single page. */\n    get fitsPage(): boolean {\n        return this.pageSize >= this.filteredItems.length;\n    }\n\n    constructor(items: T[] = [], pageSize?: number) {\n        this.items = items;\n        this.filteredItems = items;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;\n    }\n\n    /** Display more items. */\n    showMoreItems() {\n        if (this.canShowMoreItems) {\n            this.currentPageSize += this.pageSize;\n        }\n    }\n\n    /** Display less items. */\n    showLessItems() {\n        if (this.canShowLessItems) {\n            this.currentPageSize -= this.pageSize;\n        }\n    }\n\n    /** Reset entire collection and page settings. */\n    clear() {\n        this.currentPageSize = this.pageSize;\n        this.items = [];\n        this.filteredItems = [];\n        this.filterText = '';\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        let pointer = 0;\n        let items = this.visibleItems;\n\n        return {\n            next(): IteratorResult<T> {\n                if (pointer < items.length) {\n                    return {\n                        done: false,\n                        value: items[pointer++]\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: null\n                    };\n                }\n            }\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FacetQuery } from '../../../facet-query.interface';\nimport { SearchFilterList } from './search-filter-list.model';\n\nexport class ResponseFacetQueryList extends SearchFilterList<FacetQuery> {\n    constructor(items: FacetQuery[] = [], pageSize: number = 5) {\n        super(\n            items\n                .filter(item => {\n                    return item.count > 0;\n                }),\n            pageSize\n        );\n\n        this.filter = (query: FacetQuery) => {\n            if (this.filterText && query.label) {\n                const pattern = (this.filterText || '').toLowerCase();\n                const label = query.label.toLowerCase();\n                return label.startsWith(pattern);\n            }\n            return true;\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, OnDestroy } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchService, TranslationService } from '@alfresco/adf-core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { FacetFieldBucket } from '../../facet-field-bucket.interface';\nimport { ResponseFacetQueryList } from './models/response-facet-query-list.model';\nimport { FacetQuery } from '../../facet-query.interface';\nimport { FacetField } from '../../facet-field.interface';\nimport { SearchFilterList } from './models/search-filter-list.model';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search-filter',\n    templateUrl: './search-filter.component.html',\n    styleUrls: ['./search-filter.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-filter' }\n})\nexport class SearchFilterComponent implements OnInit, OnDestroy {\n\n    private DEFAULT_PAGE_SIZE = 5;\n\n    isAlive = true;\n    responseFacetQueries: ResponseFacetQueryList = null;\n    responseFacetFields: FacetField[] = null;\n\n    private facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;\n    facetQueriesLabel: string = 'Facet Queries';\n    facetQueriesExpanded = false;\n    facetFieldsExpanded = false;\n    canResetSelectedQueries = false;\n\n    selectedFacetQueries: Array<FacetQuery> = [];\n    selectedBuckets: Array<{ field: FacetField, bucket: FacetFieldBucket }> = [];\n\n    constructor(public queryBuilder: SearchQueryBuilderService,\n                private searchService: SearchService,\n                private translationService: TranslationService) {\n        if (queryBuilder.config && queryBuilder.config.facetQueries) {\n            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';\n            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;\n            this.facetQueriesExpanded = queryBuilder.config.facetQueries.expanded;\n        }\n        if (queryBuilder.config && queryBuilder.config.facetFields) {\n            this.facetFieldsExpanded = queryBuilder.config.facetFields.expanded;\n        }\n\n        this.queryBuilder.updated.pipe(\n            takeWhile(() => this.isAlive)\n        ).subscribe(() => {\n            this.queryBuilder.execute();\n        });\n    }\n\n    ngOnInit() {\n        if (this.queryBuilder) {\n            this.queryBuilder.executed.pipe(\n                takeWhile(() => this.isAlive)\n            ).subscribe((data) => {\n                this.onDataLoaded(data);\n                this.searchService.dataLoaded.next(data);\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.isAlive = false;\n    }\n\n    onToggleFacetQuery(event: MatCheckboxChange, facetQuery: FacetQuery) {\n        if (event && facetQuery) {\n            if (event.checked) {\n                this.selectFacetQuery(facetQuery);\n            } else {\n                this.unselectFacetQuery(facetQuery);\n            }\n        }\n    }\n\n    selectFacetQuery(query: FacetQuery) {\n        if (query) {\n            query.checked = true;\n            this.queryBuilder.addUserFacetQuery(query);\n            this.updateSelectedFields();\n            this.queryBuilder.update();\n        }\n    }\n\n    unselectFacetQuery(query: FacetQuery) {\n        if (query) {\n            query.checked = false;\n            this.queryBuilder.removeUserFacetQuery(query);\n            this.updateSelectedFields();\n            this.queryBuilder.update();\n        }\n    }\n\n    private updateSelectedBuckets() {\n        if (this.responseFacetFields) {\n            this.selectedBuckets = [];\n            for (let field of this.responseFacetFields) {\n                if (field.buckets) {\n                    this.selectedBuckets.push(\n                        ...this.queryBuilder.getUserFacetBuckets(field.field)\n                            .filter(bucket => bucket.checked)\n                            .map(bucket => {\n                                return { field, bucket };\n                            })\n                    );\n                }\n            }\n        } else {\n            this.selectedBuckets = [];\n        }\n    }\n\n    private updateSelectedFields() {\n        if (this.responseFacetQueries) {\n            this.selectedFacetQueries = this.responseFacetQueries.items.filter(item => item.checked);\n            this.canResetSelectedQueries = this.selectedFacetQueries.length > 0;\n        } else {\n            this.selectedFacetQueries = [];\n            this.canResetSelectedQueries = false;\n        }\n    }\n\n    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket) {\n        if (event && bucket) {\n            if (event.checked) {\n                this.selectFacetBucket(field, bucket);\n            } else {\n                this.unselectFacetBucket(field, bucket);\n            }\n        }\n    }\n\n    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = true;\n            this.queryBuilder.addUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = false;\n            this.queryBuilder.removeUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    resetSelectedQueries() {\n        if (this.canResetSelectedQueries) {\n            for (let query of this.responseFacetQueries.items) {\n                query.checked = false;\n                this.queryBuilder.removeUserFacetQuery(query);\n            }\n            this.selectedFacetQueries = [];\n            this.canResetSelectedQueries = false;\n            this.queryBuilder.update();\n        }\n    }\n\n    canResetSelectedBuckets(field: FacetField): boolean {\n        if (field && field.buckets) {\n            return field.buckets.items.some(bucket => bucket.checked);\n        }\n        return false;\n    }\n\n    resetSelectedBuckets(field: FacetField) {\n        if (field && field.buckets) {\n            for (let bucket of field.buckets.items) {\n                bucket.checked = false;\n                this.queryBuilder.removeUserFacetBucket(field, bucket);\n            }\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    onDataLoaded(data: any) {\n        const context = data.list.context;\n\n        if (context) {\n            this.parseFacetFields(context);\n            this.parseFacetQueries(context);\n        } else {\n            this.responseFacetQueries = null;\n            this.responseFacetFields = null;\n        }\n    }\n\n    private parseFacetFields(context: any) {\n        if (!this.responseFacetFields) {\n            const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];\n\n            this.responseFacetFields = configFacetFields.map(field => {\n                const responseField = (context.facetsFields || []).find(response => response.label === field.label);\n                const buckets: FacetFieldBucket[] = ((responseField && responseField.buckets) || []).map(bucket => {\n                    const selectedBucket = this.selectedBuckets.find(facetBucket =>\n                        facetBucket.bucket.label === bucket.label && facetBucket.field.field === field.field);\n\n                    return <FacetFieldBucket> {\n                        ...bucket,\n                        checked: !!selectedBucket,\n                        display: this.translationService.instant(bucket.display),\n                        label: this.translationService.instant(bucket.label)\n                    };\n                });\n                const bucketList = new SearchFilterList<FacetFieldBucket>(buckets, field.pageSize);\n                bucketList.filter = (bucket: FacetFieldBucket): boolean => {\n                    if (bucket && bucketList.filterText) {\n                        const pattern = (bucketList.filterText || '').toLowerCase();\n                        const label = (bucket.display || bucket.label || '').toLowerCase();\n                        return label.startsWith(pattern);\n                    }\n                    return true;\n                };\n                return {\n                    ...field,\n                    label: this.translationService.instant(field.label),\n                    pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                    currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                    buckets: bucketList\n                };\n            });\n\n        } else {\n\n            this.responseFacetFields = this.responseFacetFields\n                .map(field => {\n\n                    let responseField = (context.facetsFields || []).find(response => response.label === field.label);\n\n                    (field && field.buckets && field.buckets.items || [])\n                        .map(bucket => {\n                            const responseBucket = ((responseField && responseField.buckets) || []).find(respBucket => respBucket.label === bucket.label);\n\n                            bucket.count = responseBucket ? responseBucket.count : 0;\n                            return bucket;\n                        });\n\n                    return field;\n                });\n        }\n    }\n\n    private parseFacetQueries(context: any) {\n        const responseQueries = this.getFacetQueryMap(context);\n        if (this.queryBuilder.config.facetQueries) {\n            const bkpResponseFacetQueries =  Object.assign({}, this.responseFacetQueries);\n            const facetQueries = (this.queryBuilder.config.facetQueries.queries || [])\n                .map(query => {\n\n                    const queryResult = responseQueries[query.label];\n                    const bkpQuery = (bkpResponseFacetQueries.items || []).find(item => item.label === query.label);\n\n                    if (bkpQuery) {\n                        bkpQuery.count = queryResult.count;\n                        return bkpQuery;\n                    }\n                    return <FacetQuery> {\n                        ...query,\n                        label: this.translationService.instant(query.label),\n                        count: queryResult.count\n                    };\n                });\n\n            if (facetQueries.length > 0) {\n                if (this.responseFacetQueries) {\n                    this.responseFacetQueries.items = facetQueries;\n\n                } else {\n                    this.responseFacetQueries = new ResponseFacetQueryList(facetQueries, this.facetQueriesPageSize);\n                }\n\n            } else {\n                this.responseFacetQueries = null;\n            }\n        }\n    }\n\n    private getFacetQueryMap(context: any): { [key: string]: any } {\n        const result = {};\n\n        (context.facetQueries || []).forEach(query => {\n            result[query.label] = query;\n        });\n\n        return result;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-text',\n    templateUrl: './search-text.component.html',\n    styleUrls: ['./search-text.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-text' }\n})\nexport class SearchTextComponent implements SearchWidget, OnInit {\n\n    /** The content of the text box. */\n    @Input()\n    value = '';\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        if (this.context && this.settings && this.settings.pattern) {\n            const pattern = new RegExp(this.settings.pattern, 'g');\n            const match = pattern.exec(this.context.queryFragments[this.id] || '');\n\n            if (match && match.length > 1) {\n                this.value = match[1];\n            }\n        }\n    }\n\n    reset() {\n        this.value = '';\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event) {\n        this.value = event.target.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: string) {\n        if (this.context && this.settings && this.settings.field) {\n            this.context.queryFragments[this.id] = value ? `${this.settings.field}:'${value}'` : '';\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatRadioChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchRadioOption {\n    name: string;\n    value: string;\n}\n\n@Component({\n    selector: 'adf-search-radio',\n    templateUrl: './search-radio.component.html',\n    styleUrls: ['./search-radio.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-radio' }\n})\nexport class SearchRadioComponent implements SearchWidget, OnInit {\n\n    /** The value of the selected radio button. */\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    options: SearchFilterList<SearchRadioOption>;\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchRadioOption>();\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList<SearchRadioOption>(\n                    this.settings.options, this.pageSize\n                );\n            }\n        }\n\n        this.setValue(\n            this.getSelectedValue()\n        );\n    }\n\n    private getSelectedValue(): string {\n        const options: any[] = this.settings['options'] || [];\n        if (options && options.length > 0) {\n            let selected = options.find(opt => opt.default);\n            if (!selected) {\n                selected = options[0];\n            }\n            return selected.value;\n        }\n        return null;\n    }\n\n    private setValue(newValue: string) {\n        this.value = newValue;\n        this.context.queryFragments[this.id] = newValue;\n        this.context.update();\n    }\n\n    changeHandler(event: MatRadioChange) {\n        this.setValue(event.value);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { MatSliderChange } from '@angular/material';\n\n@Component({\n    selector: 'adf-search-slider',\n    templateUrl: './search-slider.component.html',\n    styleUrls: ['./search-slider.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-slider' }\n})\nexport class SearchSliderComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    step: number;\n    min: number;\n    max: number;\n    thumbLabel = false;\n\n    /** The numeric value represented by the slider. */\n    @Input()\n    value: number | null;\n\n    ngOnInit() {\n        if (this.settings) {\n            if (this.settings.hasOwnProperty('min')) {\n                this.min = this.settings['min'];\n            }\n\n            if (this.settings.hasOwnProperty('max')) {\n                this.max = this.settings['max'];\n            }\n\n            if (this.settings.hasOwnProperty('step')) {\n                this.step = this.settings['step'];\n            }\n\n            this.thumbLabel = this.settings['thumbLabel'] ? true : false;\n        }\n    }\n\n    reset() {\n        this.value = this.min || 0;\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event: MatSliderChange) {\n        this.value = event.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: number | null) {\n        if (this.id && this.context && this.settings && this.settings.field) {\n            if (value === null) {\n                this.context.queryFragments[this.id] = '';\n            } else {\n                this.context.queryFragments[this.id] = `${this.settings.field}:[0 TO ${value}]`;\n            }\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorStateMatcher } from '@angular/material';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\n\nexport class LiveErrorStateMatcher implements ErrorStateMatcher {\n\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\n\n@Component({\n    selector: 'adf-search-number-range',\n    templateUrl: './search-number-range.component.html',\n    styleUrls: ['./search-number-range.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-number-range' }\n})\nexport class SearchNumberRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n\n    field: string;\n    format = '[{FROM} TO {TO}]';\n\n    validators: Validators;\n\n    ngOnInit(): void {\n\n        if (this.settings) {\n            this.field = this.settings.field;\n            this.format = this.settings.format || '[{FROM} TO {TO}]';\n        }\n\n        this.validators = Validators.compose([\n            Validators.required,\n            Validators.pattern(/^-?(0|[1-9]\\d*)?$/),\n            Validators.min(0)\n        ]);\n\n        this.from = new FormControl('', this.validators);\n        this.to = new FormControl('', this.validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        }, this.formValidator);\n    }\n\n    formValidator(formGroup: FormGroup) {\n        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : {'mismatch': true};\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.field) {\n            const map = new Map<string, string>();\n            map.set('FROM', model.from);\n            map.set('TO', model.to);\n\n            const value = this.formatString(this.format, map);\n\n            this.context.queryFragments[this.id] = `${this.field}:${value}`;\n            this.context.update();\n        }\n    }\n\n    private formatString(str: string, map: Map<string, string>): string {\n        let result = str;\n\n        map.forEach((value, key) => {\n            const expr = new RegExp('{' + key + '}', 'gm');\n            result = result.replace(expr, value);\n        });\n\n        return result;\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchListOption {\n    name: string;\n    value: string;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'adf-search-check-list',\n    templateUrl: './search-check-list.component.html',\n    styleUrls: ['./search-check-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-check-list' }\n})\nexport class SearchCheckListComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    options: SearchFilterList<SearchListOption>;\n    operator: string = 'OR';\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchListOption>();\n    }\n\n    ngOnInit(): void {\n        if (this.settings) {\n            this.operator = this.settings.operator || 'OR';\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList(this.settings.options, this.pageSize);\n            }\n        }\n    }\n\n    reset() {\n        this.options.items.forEach(opt => {\n            opt.checked = false;\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    changeHandler(event: MatCheckboxChange, option: any) {\n        option.checked = event.checked;\n        this.flush();\n    }\n\n    flush() {\n        const checkedValues = this.options.items\n            .filter(option => option.checked)\n            .map(option => option.value);\n\n        const query = checkedValues.join(` ${this.operator} `);\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = query;\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\nimport { Moment } from 'moment';\nimport { UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\n\ndeclare let moment: any;\n\nconst DEFAULT_FORMAT_DATE: string = 'DD/MM/YYYY';\n\n@Component({\n    selector: 'adf-search-date-range',\n    templateUrl: './search-date-range.component.html',\n    styleUrls: ['./search-date-range.component.scss'],\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n        {provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-date-range' }\n})\nexport class SearchDateRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    maxDate: any;\n    datePickerDateFormat = DEFAULT_FORMAT_DATE;\n\n    constructor(private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService) {\n    }\n\n    getFromValidationMessage(): string {\n        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    getToValidationMessage(): string {\n        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :\n            this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.datePickerDateFormat = this.settings.dateFormat || DEFAULT_FORMAT_DATE;\n        }\n        const theCustomDateAdapter = <MomentDateAdapter> <any> this.dateAdapter;\n        theCustomDateAdapter.overrideDisplyaFormat = this.datePickerDateFormat;\n\n        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {\n            this.setLocale(locale);\n        });\n\n        const validators = Validators.compose([\n            Validators.required\n        ]);\n\n        this.from = new FormControl('', validators);\n        this.to = new FormControl('', validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        });\n\n        this.maxDate = this.dateAdapter.today().startOf('day');\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.settings && this.settings.field) {\n            const start = moment(model.from).startOf('day').format();\n            const end = moment(model.to).endOf('day').format();\n\n            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;\n            this.context.update();\n        }\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    onChangedHandler(event: any, formControl: FormControl) {\n        const inputValue = event.srcElement.value;\n\n        const formatDate = this.dateAdapter.parse(inputValue, this.datePickerDateFormat);\n        if (formatDate && formatDate.isValid()) {\n            formControl.setValue(formatDate);\n        } else if (formatDate) {\n            formControl.setErrors({\n                'invalidOnChange': true\n            });\n        } else {\n            formControl.setErrors({\n                'required': true\n            });\n        }\n    }\n\n    setLocale(locale) {\n        this.dateAdapter.setLocale(locale);\n        moment.locale(locale);\n    }\n\n    hasParseError(formControl) {\n        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;\n    }\n\n    forcePlaceholder(event: any) {\n        event.srcElement.click();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { SearchTextComponent } from '../search-text/search-text.component';\nimport { SearchRadioComponent } from '../search-radio/search-radio.component';\nimport { SearchSliderComponent } from '../search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from '../search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from '../search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from '../search-date-range/search-date-range.component';\n\n@Injectable()\nexport class SearchFilterService {\n\n    /**\n     * Contains string-to-type mappings for registered widgets.\n     */\n    widgets: { [id: string]: Type<{}> } = {\n        'text': SearchTextComponent,\n        'radio': SearchRadioComponent,\n        'slider': SearchSliderComponent,\n        'number-range': SearchNumberRangeComponent,\n        'check-list': SearchCheckListComponent,\n        'date-range': SearchDateRangeComponent\n    };\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { SearchFilterComponent } from '../../components/search-filter/search-filter.component';\n\n@Component({\n    selector: 'adf-search-chip-list',\n    templateUrl: './search-chip-list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-chip-list' }\n})\nexport class SearchChipListComponent {\n\n    /** Search filter to supply the data for the chips. */\n    @Input()\n    searchFilter: SearchFilterComponent;\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchSortingDefinition } from '../../search-sorting-definition.interface';\n\n@Component({\n    selector: 'adf-search-sorting-picker',\n    templateUrl: './search-sorting-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-sorting-picker' }\n})\nexport class SearchSortingPickerComponent implements OnInit {\n\n    options: SearchSortingDefinition[] = [];\n    value: string;\n    ascending: boolean;\n\n    constructor(private queryBuilder: SearchQueryBuilderService) {}\n\n    ngOnInit() {\n        this.options = this.queryBuilder.getSortingOptions();\n\n        const primary = this.queryBuilder.getPrimarySorting();\n        if (primary) {\n            this.value = primary.key;\n            this.ascending = primary.ascending;\n        }\n    }\n\n    onChanged(sorting: { key: string, ascending: boolean }) {\n        this.value = sorting.key;\n        this.ascending = sorting.ascending;\n        this.applySorting();\n    }\n\n    private findOptionByKey(key: string): SearchSortingDefinition {\n        if (key) {\n            return this.options.find(opt => opt.key === key);\n        }\n        return null;\n    }\n\n    private applySorting() {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            this.queryBuilder.sorting = [{\n                ...option,\n                ascending: this.ascending\n            }];\n            this.queryBuilder.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewChild, ViewContainerRef, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterService } from '../search-filter/search-filter.service';\n\n@Component({\n    selector: 'adf-search-widget-container',\n    template: '<div #content></div>'\n})\nexport class SearchWidgetContainerComponent implements OnInit, OnDestroy {\n\n    @ViewChild('content', { read: ViewContainerRef })\n    content: ViewContainerRef;\n\n    @Input()\n    id: string;\n\n    @Input()\n    selector: string;\n\n    @Input()\n    settings: any;\n\n    @Input()\n    config: any;\n\n    private componentRef: ComponentRef<any>;\n\n    constructor(\n        private searchFilterService: SearchFilterService,\n        private queryBuilder: SearchQueryBuilderService,\n        private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    ngOnInit() {\n        const componentType = this.searchFilterService.widgets[this.selector];\n        if (componentType) {\n            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n            if (factory) {\n                this.content.clear();\n                this.componentRef = this.content.createComponent(factory, 0);\n                this.setupWidget(this.componentRef);\n            }\n        }\n    }\n\n    private setupWidget(ref: ComponentRef<any>) {\n        if (ref && ref.instance) {\n            ref.instance.id = this.id;\n            ref.instance.settings = { ...this.settings };\n            ref.instance.context = this.queryBuilder;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { SearchTriggerDirective } from './components/search-trigger.directive';\n\nimport { SearchControlComponent } from './components/search-control.component';\nimport { SearchComponent } from './components/search.component';\nimport { EmptySearchResultComponent } from './components/empty-search-result.component';\nimport { SearchWidgetContainerComponent } from './components/search-widget-container/search-widget-container.component';\nimport { SearchFilterComponent } from './components/search-filter/search-filter.component';\nimport { SearchChipListComponent } from './components/search-chip-list/search-chip-list.component';\nimport { SearchTextComponent } from './components/search-text/search-text.component';\nimport { SearchRadioComponent } from './components/search-radio/search-radio.component';\nimport { SearchSliderComponent } from './components/search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from './components/search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from './components/search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from './components/search-date-range/search-date-range.component';\nimport { SearchSortingPickerComponent } from './components/search-sorting-picker/search-sorting-picker.component';\n\nexport const ALFRESCO_SEARCH_DIRECTIVES: any[] = [\n    SearchComponent,\n    SearchControlComponent,\n    SearchTriggerDirective,\n    EmptySearchResultComponent,\n    SearchFilterComponent,\n    SearchChipListComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    exports: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    entryComponents: [\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent\n    ]\n})\nexport class SearchModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { SitesService, LogService } from '@alfresco/adf-core';\nimport { SitePaging, SiteEntry } from 'alfresco-js-api';\n\nexport enum Relations {\n    Members = 'members',\n    Containers = 'containers'\n}\n\n@Component({\n    selector: 'adf-sites-dropdown',\n    styleUrls: ['./sites-dropdown.component.scss'],\n    templateUrl: './sites-dropdown.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-sites-dropdown' }\n})\nexport class DropdownSitesComponent implements OnInit {\n\n    /** Hide the \"My Files\" option. */\n    @Input()\n    hideMyFiles: boolean = false;\n\n    /** A custom list of sites to be displayed by the dropdown. If no value\n     * is given, the sites of the current user are displayed by default. A\n     * list of objects only with properties 'title' and 'guid' is enough to\n     * be able to display the dropdown.\n     */\n    @Input()\n    siteList: SitePaging = null;\n\n    /** Id of the selected site */\n    @Input()\n    value: string = null;\n\n    /** Text or a translation key to act as a placeholder. Default value is the\n     * key \"DROPDOWN.PLACEHOLDER_LABEL\".\n     */\n    @Input()\n    placeholder: string = 'DROPDOWN.PLACEHOLDER_LABEL';\n\n    /** Filter for the results of the sites query. Possible values are\n     * \"members\" and \"containers\". When \"members\" is used, the site list\n     * will be restricted to the sites that the user is a member of.\n     */\n    @Input()\n    relations: string;\n\n    /** Emitted when the user selects a site. When the default option is selected,\n     * an empty model is emitted.\n     */\n    @Output()\n    change: EventEmitter<SiteEntry> = new EventEmitter();\n\n    selected: SiteEntry = null;\n\n    public MY_FILES_VALUE = '-my-';\n\n    constructor(private sitesService: SitesService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (!this.siteList) {\n            this.setDefaultSiteList();\n        }\n    }\n\n    selectedSite(event: any) {\n        this.change.emit(event.value);\n    }\n\n    private setDefaultSiteList() {\n        let extendedOptions = null;\n        if (this.relations) {\n            extendedOptions = { relations: [this.relations] };\n        }\n        this.sitesService.getSites(extendedOptions).subscribe((result) => {\n\n            this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(result) : result;\n\n            if (!this.hideMyFiles) {\n                let myItem = { entry: { id: '-my-', guid: '-my-', title: 'DROPDOWN.MY_FILES_OPTION' } };\n\n                this.siteList.list.entries.unshift(myItem);\n\n                if (!this.value) {\n                    this.value = '-my-';\n                }\n            }\n\n            this.selected = this.siteList.list.entries.find(site => site.entry.id === this.value);\n        },\n        (error) => {\n            this.logService.error(error);\n        });\n    }\n\n    private filteredResultsByMember(sites: SitePaging): SitePaging {\n        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();\n        sites.list.entries = sites.list.entries.filter( (site) => this.isCurrentUserMember(site, loggedUserName));\n        return sites;\n    }\n\n    private isCurrentUserMember(site, loggedUserName): boolean {\n        return site.entry.visibility === 'PUBLIC' ||\n            !!site.relations.members.list.entries.find((member) => {\n                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();\n            });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DropdownSitesComponent } from './sites-dropdown.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        DropdownSitesComponent\n    ],\n    declarations: [\n        DropdownSitesComponent\n    ]\n})\nexport class SitesDropdownModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { MinimalNodeEntryEntity, PathElementEntity } from 'alfresco-js-api';\nimport { DocumentListComponent } from '../document-list';\n\n@Component({\n    selector: 'adf-breadcrumb',\n    templateUrl: './breadcrumb.component.html',\n    styleUrls: ['./breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n})\nexport class BreadcrumbComponent implements OnInit, OnChanges {\n\n    /** Active node, builds UI based on folderNode.path.elements collection. */\n    @Input()\n    folderNode: MinimalNodeEntryEntity = null;\n\n    /** (optional) Name of the root element of the breadcrumb. You can use\n     * this property to rename \"Company Home\" to \"Personal Files\" for\n     * example. You can use an i18n resource key for the property value.\n     */\n    @Input()\n    root: string = null;\n\n    /** (optional) The id of the root element. You can use this property\n     * to set a custom element the breadcrumb should start with.\n     */\n    @Input()\n    rootId: string = null;\n\n    /** (optional) Document List component to operate with. The list will\n     * update when the breadcrumb is clicked.\n     */\n    @Input()\n    target: DocumentListComponent;\n\n    /** Transformation to be performed on the chosen/folder node before building\n     * the breadcrumb UI. Can be useful when custom formatting is needed for the\n     * breadcrumb. You can change the path elements from the node that are used to\n     * build the breadcrumb using this function.\n     */\n    @Input()\n    transform: (node) => any;\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    /** Maximum number of nodes to display before wrapping them with a dropdown element.  */\n    @Input()\n    maxItems: number;\n\n    previousNodes: PathElementEntity[];\n    lastNodes: PathElementEntity[];\n\n    route: PathElementEntity[] = [];\n\n    get hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    /** Emitted when the user clicks on a breadcrumb. */\n    @Output()\n    navigate = new EventEmitter<PathElementEntity>();\n\n    ngOnInit() {\n        this.transform = this.transform ? this.transform : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.folderNode) {\n            let node: MinimalNodeEntryEntity = null;\n            node = this.transform ? this.transform(changes.folderNode.currentValue) : changes.folderNode.currentValue;\n            this.route = this.parseRoute(node);\n        }\n\n        if (changes.transform) {\n            let node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n            this.route = this.parseRoute(node);\n        }\n        this.recalculateNodes();\n    }\n\n    protected recalculateNodes(): void {\n        if (this.maxItems && this.route.length > this.maxItems) {\n            this.lastNodes = this.route.slice(this.route.length - this.maxItems);\n            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);\n            this.previousNodes.reverse();\n        } else {\n            this.lastNodes = this.route;\n            this.previousNodes = null;\n        }\n    }\n\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    hasPreviousNodes(): boolean {\n        return this.previousNodes ? true : false;\n    }\n\n    parseRoute(node: MinimalNodeEntryEntity): PathElementEntity[] {\n        if (node && node.path) {\n            const route = <PathElementEntity[]> (node.path.elements || []).slice();\n\n            route.push(<PathElementEntity> {\n                id: node.id,\n                name: node.name\n            });\n\n            const rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n\n    private getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let result: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            result = route.findIndex(el => el.id === nodeId);\n        }\n\n        return result;\n    }\n\n    onRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.navigateTo(route.id);\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { PathElementEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@Component({\n    selector: 'adf-dropdown-breadcrumb',\n    templateUrl: './dropdown-breadcrumb.component.html',\n    styleUrls: ['./dropdown-breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n})\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.folderNode) {\n            let node: MinimalNodeEntryEntity = null;\n            node = this.transform ? this.transform(changes.folderNode.currentValue) : changes.folderNode.currentValue;\n            this.route = this.parseRoute(node);\n        }\n\n        if (changes.transform) {\n            let node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n            this.route = this.parseRoute(node);\n        }\n        this.recalculateNodes();\n    }\n\n    /**\n     * Calculate the current and previous nodes from the route array\n     */\n    protected recalculateNodes(): void {\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n\n    /**\n     * Opens the node picker menu\n     */\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    /**\n     * Return if route has more than one element (means: we are not in the root directory)\n     */\n    hasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './dropdown-breadcrumb.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ],\n    declarations: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ]\n})\nexport class BreadcrumbModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n    selector: 'adf-confirm-dialog',\n    template: `\n        <h1 mat-dialog-title>{{ title | translate }}</h1>\n        <mat-dialog-content>\n            <p>{{ message | translate }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <span class=\"spacer\"></span>\n            <button id=\"adf-confirm-accept\" mat-button color=\"primary\" [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n            <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" cdkFocusInitial>{{ noLabel | translate }}</button>\n        </mat-dialog-actions>\n    `,\n    styles: [`\n        .spacer { flex: 1 1 auto; }\n\n        .adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper {\n            text-transform: uppercase;\n        }\n    `],\n    host: { 'class': 'adf-confirm-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ConfirmDialogComponent {\n\n    title: string;\n    message: string;\n    yesLabel: string;\n    noLabel: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) data) {\n        data = data || {};\n        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';\n        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';\n        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';\n        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\nimport { VersionsApi, MinimalNodeEntryEntity, VersionEntry } from 'alfresco-js-api';\nimport { MatDialog } from '@angular/material';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\n\n@Component({\n    selector: 'adf-version-list',\n    templateUrl: './version-list.component.html',\n    styleUrls: ['./version-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-list'\n    }\n})\nexport class VersionListComponent implements OnChanges {\n\n    private versionsApi: VersionsApi;\n    versions: VersionEntry[] = [];\n    isLoading = true;\n\n    /** @deprecated in 2.3.0 */\n    @Input()\n    id: string;\n\n    /** The target node. */\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    /** Toggles showing/hiding of comments */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Toggles showing/hiding of version actions */\n    @Input()\n    showActions = true;\n\n    /** Emitted when a version is restored */\n    @Output()\n    restored: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    /** Emitted when a version is deleted */\n    @Output()\n    deleted: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    constructor(private alfrescoApi: AlfrescoApiService,\n                private contentService: ContentService,\n                private dialog: MatDialog) {\n        this.versionsApi = this.alfrescoApi.versionsApi;\n    }\n\n    ngOnChanges() {\n        this.loadVersionHistory();\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasPermission(this.node, 'update') && this.versions.length > 1;\n    }\n\n    canDelete(): boolean {\n        return this.contentService.hasPermission(this.node, 'delete') && this.versions.length > 1;\n    }\n\n    restore(versionId) {\n        if (this.canUpdate()) {\n            this.versionsApi\n                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })\n                .then(() => this.onVersionRestored(this.node));\n        }\n    }\n\n    loadVersionHistory() {\n        this.isLoading = true;\n        this.versionsApi.listVersionHistory(this.node.id).then((data) => {\n            this.versions = data.list.entries;\n            this.isLoading = false;\n        });\n    }\n\n    downloadVersion(versionId: string) {\n        if (this.allowDownload) {\n            const versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);\n            this.downloadContent(versionDownloadUrl);\n        }\n    }\n\n    deleteVersion(versionId: string) {\n        if (this.canUpdate()) {\n            const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n                data: {\n                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',\n                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',\n                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',\n                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'\n                },\n                minWidth: '250px'\n            });\n\n            dialogRef.afterClosed().subscribe(result => {\n                if (result === true) {\n                    this.alfrescoApi.versionsApi\n                        .deleteVersion(this.node.id, versionId)\n                        .then(() => this.onVersionDeleted(this.node));\n                }\n            });\n        }\n    }\n\n    onVersionDeleted(node: any) {\n        this.loadVersionHistory();\n        this.deleted.emit(node);\n    }\n\n    onVersionRestored(node: any) {\n        this.loadVersionHistory();\n        this.restored.emit(node);\n    }\n\n    private getVersionContentUrl(nodeId: string, versionId: string, attachment?: boolean) {\n        const nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);\n        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');\n    }\n\n    downloadContent(url: string) {\n        if (url) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { VersionListComponent } from './version-list.component';\nimport { AppConfigService, ContentService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\n\n@Component({\n    selector: 'adf-version-manager',\n    templateUrl: './version-manager.component.html',\n    styleUrls: ['./version-manager.component.scss'],\n    animations: [\n        trigger('uploadToggle', [\n            state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),\n            state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),\n            transition('open => close', [\n                style({ visibility: 'hidden' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ]),\n            transition('close => open', [\n                style({ visibility: 'visible' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class VersionManagerComponent {\n\n    /** Target node to manage version history. */\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    /** Toggles showing/hiding of comments. */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Emitted when a file is uploaded successfully. */\n    @Output()\n    uploadSuccess: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    /** Emitted when an error occurs during upload. */\n    @Output()\n    uploadError: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    @ViewChild('versionList')\n    versionListComponent: VersionListComponent;\n\n    uploadState: string = 'close';\n\n    constructor(config: AppConfigService,\n                private contentService: ContentService,\n                private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    refresh(node: MinimalNodeEntryEntity) {\n        this.alfrescoApiService.nodeUpdated.next(node);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(node);\n        this.uploadState = 'close';\n    }\n\n    onUploadSuccess(event: any) {\n        this.alfrescoApiService.nodeUpdated.next(event.value.entry);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(event.value.entry);\n        this.uploadState = 'close';\n    }\n\n    onUploadError(event: any) {\n        this.uploadError.emit(event);\n    }\n\n    onUploadCancel() {\n        this.uploadState = 'close';\n    }\n\n    toggleNewVersion() {\n        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasPermission(this.node, 'update');\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-version-upload',\n    templateUrl: './version-upload.component.html',\n    styleUrls: ['./version-upload.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-version-upload' }\n})\nexport class VersionUploadComponent {\n\n    semanticVersion: string = 'minor';\n    comment: string;\n    uploadVersion: boolean = false;\n\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error = new EventEmitter();\n\n    @Output()\n    cancel = new EventEmitter();\n\n    constructor(private contentService: ContentService) {\n    }\n\n    canUpload(): boolean {\n        return this.contentService.hasPermission(this.node, 'update');\n    }\n\n    isMajorVersion(): boolean {\n        return this.semanticVersion === 'minor' ? false : true;\n    }\n\n    cancelUpload() {\n        this.cancel.emit();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { VersionUploadComponent } from './version-upload.component';\nimport { VersionManagerComponent } from './version-manager.component';\nimport { VersionListComponent } from './version-list.component';\nimport { UploadModule } from '../upload/upload.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        UploadModule,\n        FormsModule\n    ],\n    exports: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent,\n        FormsModule\n    ],\n    declarations: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ]\n})\nexport class VersionManagerModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Input, ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DataRow } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-name-location-cell',\n    template: `\n        <div class=\"adf-name-location-cell-name\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location\" [title]=\"path\">{{ path }}</div>\n    `,\n    styleUrls: ['./name-location-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'adf-name-location-cell' }\n})\nexport class NameLocationCellComponent implements OnInit {\n\n    name: string = '';\n    path: string = '';\n\n    @Input()\n    row: DataRow;\n\n    ngOnInit() {\n        if (this.row) {\n            this.name = this.row.getValue('name');\n\n            const fullPath = this.row.getValue('path');\n            if (fullPath) {\n                this.path = fullPath.name || '';\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from 'alfresco-js-api';\nimport { Observable } from 'rxjs';\n\n/**\n * Internal service used by ContentNodeSelector component.\n */\n@Injectable()\nexport class ContentNodeSelectorService {\n\n    constructor(private searchService: SearchService) {\n    }\n\n    /**\n     * Performs a search for content node selection\n     *\n     * @param searchTerm    The term to search for\n     * @param rootNodeId    The root is to start the search from\n     * @param skipCount     From where to start the loading\n     * @param maxItems      How many items to load\n     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when\n     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)\n     * and search is not supported for that alias, but can be performed on its corresponding nodes.\n     */\n    public search(searchTerm: string, rootNodeId: string = null, skipCount: number = 0, maxItems: number = 25, extraNodeIds?: string[]): Observable<NodePaging> {\n\n        let extraParentFiltering = '';\n\n        if (extraNodeIds && extraNodeIds.length) {\n            extraNodeIds\n                .filter(id => id !== rootNodeId)\n                .forEach(extraId => {\n                    extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;\n                });\n        }\n\n        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];\n\n        let defaultSearchNode: any = {\n            query: {\n                query: `${searchTerm}* OR name:${searchTerm}*`\n            },\n            include: ['path', 'allowableOperations'],\n            paging: {\n                maxItems: maxItems,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder'\" },\n                { query: 'NOT cm:creator:System' },\n                ...parentFiltering\n            ],\n            scope: {\n                locations: ['nodes']\n            }\n        };\n\n        return this.searchService.searchByQueryBody(defaultSearchNode);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n    AlfrescoApiService, HighlightDirective, UserPreferencesService,\n    PaginatedComponent, PaginationModel\n} from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { MinimalNodeEntryEntity, NodePaging, Pagination, SiteEntry, SitePaging } from 'alfresco-js-api';\nimport { DocumentListComponent, PaginationStrategy } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { debounceTime } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { CustomResourcesService } from '../document-list/services/custom-resources.service';\n\nexport type ValidationFunction = (entry: MinimalNodeEntryEntity) => boolean;\n\nconst defaultValidation = () => true;\n\n@Component({\n    selector: 'adf-content-node-selector-panel',\n    styleUrls: ['./content-node-selector-panel.component.scss'],\n    templateUrl: './content-node-selector-panel.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-node-selector-panel' }\n})\nexport class ContentNodeSelectorPanelComponent implements OnInit, PaginatedComponent {\n\n    /** Node ID of the folder currently listed. */\n    @Input()\n    currentFolderId: string = null;\n\n    /** Hide the \"My Files\" option added to the site list by default.\n     * See the [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /** Custom site for site dropdown same as siteList. See the\n     * [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    /** Custom row filter function. See the\n     * [Document List component](document-list.component.md#custom-row-filter)\n     * for more information.\n     */\n    @Input()\n    rowFilter: RowFilter = null;\n\n    /** Custom image resolver function. See the\n     * [Document List component](document-list.component.md#custom-row-filter)\n     * for more information.\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /** Number of items shown per page in the list. */\n    @Input()\n    pageSize: number;\n\n    /** Function used to decide if the selected node has permission to be selected.\n     * Default value is a function that always returns true.\n     */\n    @Input()\n    isSelectionValid: ValidationFunction = defaultValidation;\n\n    /** Transformation to be performed on the chosen/folder node before building the\n     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.\n     * You can change the path elements from the node that are used to build the\n     * breadcrumb using this function.\n     */\n    @Input()\n    breadcrumbTransform: (node) => any;\n\n    /** Emitted when the user has chosen an item. */\n    @Output()\n    select: EventEmitter<MinimalNodeEntryEntity[]> = new EventEmitter<MinimalNodeEntryEntity[]>();\n\n    @ViewChild('documentList')\n    documentList: DocumentListComponent;\n\n    @ViewChild(HighlightDirective)\n    highlighter: HighlightDirective;\n\n    nodes: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    _chosenNode: MinimalNodeEntryEntity = null;\n    folderIdToShow: string | null = null;\n    paginationStrategy: PaginationStrategy = PaginationStrategy.Infinite;\n    pagination: BehaviorSubject<PaginationModel>;\n\n    skipCount: number = 0;\n    infiniteScroll: boolean = false;\n    debounceSearch: number = 200;\n    searchInput: FormControl = new FormControl();\n\n    constructor(private contentNodeSelectorService: ContentNodeSelectorService,\n                private apiService: AlfrescoApiService,\n                private customResourcesService: CustomResourcesService,\n                private preferences: UserPreferencesService) {\n        this.searchInput.valueChanges\n            .pipe(\n                debounceTime(this.debounceSearch)\n            )\n            .subscribe((searchValue) => {\n                this.search(searchValue);\n            });\n        this.pageSize = this.preferences.paginationSize;\n\n        let defaultPagination = <PaginationModel> {\n            maxItems: this.pageSize,\n            skipCount: 0,\n            totalItems: 0,\n            hasMoreItems: false\n        };\n        this.pagination = new BehaviorSubject<PaginationModel>(defaultPagination);\n    }\n\n    set chosenNode(value: MinimalNodeEntryEntity) {\n        this._chosenNode = value;\n        let valuesArray = null;\n        if (value) {\n            valuesArray = [value];\n        }\n        this.select.next(valuesArray);\n    }\n\n    get chosenNode() {\n        return this._chosenNode;\n    }\n\n    ngOnInit() {\n        this.folderIdToShow = this.currentFolderId;\n\n        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;\n        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;\n    }\n\n    /**\n     * Updates the site attribute and starts a new search\n     *\n     * @param chosenSite SiteEntry to search within\n     */\n    siteChanged(chosenSite: SiteEntry): void {\n        this.siteId = chosenSite.entry.guid;\n        this.updateResults();\n    }\n\n    /**\n     * Updates the searchTerm attribute and starts a new search\n     *\n     * @param searchTerm string value to search against\n     */\n    search(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n\n    /**\n     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n     */\n    get breadcrumbFolderNode(): MinimalNodeEntryEntity | null {\n        let folderNode: MinimalNodeEntryEntity;\n\n        if (this.showingSearchResults && this.chosenNode) {\n            folderNode = this.chosenNode;\n        } else {\n            folderNode = this.documentList.folderNode;\n        }\n\n        return folderNode;\n    }\n\n    /**\n     * Clear the search input and reset to last folder node in which search was performed\n     */\n    clear(): void {\n        this.clearSearch();\n        this.folderIdToShow = this.siteId || this.currentFolderId;\n    }\n\n    /**\n     * Clear the search input and search related data\n     */\n    clearSearch() {\n        this.searchTerm = '';\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n    }\n\n    /**\n     * Update the result list depending on the criterias\n     */\n    private updateResults(): void {\n        if (this.searchTerm.length === 0) {\n            this.clear();\n        } else {\n            this.startNewSearch();\n        }\n    }\n\n    /**\n     * Load the first page of a new search result\n     */\n    private startNewSearch(): void {\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    updatePagination(pagination: Pagination): void {\n        this.infiniteScroll = true;\n        this.skipCount = pagination.skipCount;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Perform the call to searchService with the proper parameters\n     */\n    private querySearch(): void {\n        this.loadingSearchResults = true;\n\n        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {\n            this.customResourcesService.getCorrespondingNodeIds(this.siteId)\n                .subscribe(nodeIds => {\n                        this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize, nodeIds)\n                            .subscribe(this.showSearchResults.bind(this));\n                    },\n                    () => {\n                        this.showSearchResults({ list: { entries: [] } });\n                    });\n        } else {\n            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize)\n                .subscribe(this.showSearchResults.bind(this));\n        }\n    }\n\n    /**\n     * Show the results of the search\n     *\n     * @param results Search results\n     */\n    private showSearchResults(nodePaging: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        // Documentlist hack, since data displaying for preloaded nodes is a little bit messy there\n        if (!this.nodes) {\n            this.nodes = nodePaging;\n        } else {\n            this.documentList.data.loadPage(nodePaging, true);\n        }\n\n        this.pagination.next(nodePaging.list.pagination);\n        this.highlight();\n    }\n\n    /**\n     * Hightlight the actual searchterm in the next frame\n     */\n    highlight(): void {\n        setTimeout(() => {\n            this.highlighter.highlight(this.searchTerm);\n        }, 0);\n    }\n\n    /**\n     * Sets showingSearchResults state to be able to differentiate between search results or folder results\n     */\n    onFolderChange(): void {\n        this.showingSearchResults = false;\n        this.infiniteScroll = false;\n        this.clearSearch();\n    }\n\n    /**\n     * Attempts to set the currently loaded node\n     */\n    onFolderLoaded(nodePaging: NodePaging): void {\n        if (!this.showingSearchResults) {\n            this.attemptNodeSelection(this.documentList.folderNode);\n        }\n    }\n\n    /**\n     * Returns whether breadcrumb has to be shown or not\n     */\n    showBreadcrumbs() {\n        return !this.showingSearchResults || this.chosenNode;\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    getNextPageOfSearch(event: Pagination): void {\n        this.infiniteScroll = true;\n        this.skipCount = event.skipCount;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Selects node as chosen if it has the right permission, clears the selection otherwise\n     *\n     * @param entry\n     */\n    private attemptNodeSelection(entry: MinimalNodeEntryEntity): void {\n        if (this.isSelectionValid(entry)) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n\n    /**\n     * Clears the chosen node\n     */\n    resetChosenNode(): void {\n        this.chosenNode = null;\n    }\n\n    /**\n     * Invoked when user selects a node\n     *\n     * @param event CustomEvent for node-select\n     */\n    onNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n\n    onNodeDoubleClick(e: CustomEvent) {\n        const node: any = e.detail.node.entry;\n\n        if (node && node.guid) {\n            const options = {\n                maxItems: this.pageSize,\n                skipCount: this.skipCount,\n                include: ['path', 'properties', 'allowableOperations']\n            };\n\n            this.apiService.nodesApi.getNode(node.guid, options)\n                .then(documentLibrary => {\n                    this.documentList.performCustomSourceNavigation(documentLibrary);\n                });\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { ContentNodeSelectorPanelComponent } from './content-node-selector-panel.component';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { SitesDropdownModule } from '../site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from '../breadcrumb/breadcrumb.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { DocumentListModule } from '../document-list/document-list.module';\nimport { NameLocationCellComponent } from './name-location-cell/name-location-cell.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        DocumentListModule\n    ],\n    exports: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ],\n    entryComponents: [\n        ContentNodeSelectorPanelComponent,\n        ContentNodeSelectorComponent\n    ],\n    declarations: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ]\n})\nexport class ContentNodeSelectorModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\n\nconst I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';\n\nexport function forbidSpecialCharacters({ value }: FormControl) {\n    const specialCharacters: RegExp = /([\\*\\\"\\<\\>\\\\\\/\\?\\:\\|])/;\n    const isValid: boolean = !specialCharacters.test(value);\n\n    return (isValid) ? null : {\n        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`\n    };\n}\n\nexport function forbidEndingDot({ value }: FormControl) {\n    const isValid: boolean = ((value || '').trim().split('').pop() !== '.');\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ENDING_DOT`\n    };\n}\n\nexport function forbidOnlySpaces({ value }: FormControl) {\n    const isValid: boolean = !!((value || '')).trim();\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`\n    };\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from 'rxjs';\n\nimport { Component, Inject, OnInit, Optional, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { NodesApiService, TranslationService } from '@alfresco/adf-core';\n\nimport { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';\n\n@Component({\n    selector: 'adf-folder-dialog',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './folder.dialog.html'\n})\nexport class FolderDialogComponent implements OnInit {\n\n    form: FormGroup;\n\n    folder: MinimalNodeEntryEntity = null;\n\n    /** Emitted when the edit/create folder give error for example a folder with same name already exist\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the edit/create folder is successfully created/mmodified\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';\n    createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';\n    nodeType = 'cm:folder';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dialog: MatDialogRef<FolderDialogComponent>,\n        private nodesApi: NodesApiService,\n        private translation: TranslationService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n        if (data) {\n            this.editTitle = data.editTitle || this.editTitle;\n            this.createTitle = data.createTitle || this.createTitle;\n            this.nodeType = data.nodeType || this.nodeType;\n        }\n    }\n\n    get editing(): boolean {\n        return !!this.data.folder;\n    }\n\n    ngOnInit() {\n        const { folder } = this.data;\n        let name = '';\n        let description = '';\n\n        if (folder) {\n            const { properties } = folder;\n\n            name = folder.name || '';\n            description = properties ? properties['cm:description'] : '';\n        }\n\n        const validators = {\n            name: [\n                Validators.required,\n                forbidSpecialCharacters,\n                forbidEndingDot,\n                forbidOnlySpaces\n            ]\n        };\n\n        this.form = this.formBuilder.group({\n            name: [ name, validators.name ],\n            description: [ description ]\n        });\n    }\n\n    get name(): string {\n        let { name } = this.form.value;\n\n        return (name || '').trim();\n    }\n\n    get description(): string {\n        let { description } = this.form.value;\n\n        return (description || '').trim();\n    }\n\n    private get properties(): any {\n        const { name: title, description } = this;\n\n        return {\n            'cm:title': title,\n            'cm:description': description\n        };\n    }\n\n    private create(): Observable<MinimalNodeEntryEntity> {\n        const { name, properties, nodeType, nodesApi, data: { parentNodeId} } = this;\n        return nodesApi.createFolder(parentNodeId, { name, properties, nodeType });\n    }\n\n    private edit(): Observable<MinimalNodeEntryEntity> {\n        const { name, properties, nodesApi, data: { folder: { id: nodeId }} } = this;\n        return nodesApi.updateNode(nodeId, { name, properties });\n    }\n\n    submit() {\n        const { form, dialog, editing } = this;\n\n        if (!form.valid) { return; }\n\n        (editing ? this.edit() : this.create())\n            .subscribe(\n                (folder: MinimalNodeEntryEntity) => {\n                    this.success.emit(folder);\n                    dialog.close(folder);\n                },\n                (error) => this.handleError(error)\n            );\n    }\n\n    handleError(error: any): any {\n        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';\n\n        try {\n            const { error: { statusCode } } = JSON.parse(error.message);\n\n            if (statusCode === 409) {\n                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';\n            }\n        } catch (err) { /* Do nothing, keep the original message */ }\n\n        this.error.emit(this.translation.instant(errorMessage));\n\n        return error;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { DownloadZipDialogComponent } from './download-zip.dialog';\nimport { FolderDialogComponent } from './folder.dialog';\nimport { NodeLockDialogComponent } from './node-lock.dialog';\nimport { ConfirmDialogComponent } from './confirm.dialog';\nimport { MatDatetimepickerModule } from '@mat-datetimepicker/core';\nimport { MatMomentDatetimeModule } from '@mat-datetimepicker/moment';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        FormsModule,\n        ReactiveFormsModule,\n        MatMomentDatetimeModule,\n        MatDatetimepickerModule\n    ],\n    declarations: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent\n    ],\n    exports: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent\n    ],\n    entryComponents: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent\n    ]\n})\nexport class DialogModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\nconst DEFAULT_FOLDER_PARENT_ID = '-my-';\n\n@Directive({\n    selector: '[adf-create-folder]'\n})\nexport class FolderCreateDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Parent folder where the new folder will be located after creation. */\n    @Input('adf-create-folder')\n    parentNodeId: string = DEFAULT_FOLDER_PARENT_ID;\n\n    /** Title of folder creation dialog. */\n    @Input()\n    title: string = null;\n\n    /** Type of node to create. */\n    @Input()\n    nodeType = 'cm:folder';\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the folder is created successfully. */\n    @Output()\n    success: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.openDialog();\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderCreateDirective;\n        const { parentNodeId, title: createTitle, nodeType } = this;\n\n        return {\n            data: { parentNodeId, createTitle, nodeType },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: MinimalNodeEntryEntity) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: MinimalNodeEntryEntity) => {\n            if (node) {\n                content.folderCreate.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\n\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Directive({\n    selector: '[adf-edit-folder]'\n})\nexport class FolderEditDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Folder node to edit. */\n    @Input('adf-edit-folder')\n    folder: MinimalNodeEntryEntity;\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Title of folder edit dialog. */\n    @Input()\n    title: string = null;\n\n    /** Emitted when the folder has been edited successfully. */\n    @Output()\n    success: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        if (this.folder) {\n            this.openDialog();\n        }\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public elementRef: ElementRef,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderEditDirective;\n        const { folder } = this;\n\n        return {\n            data: {\n                folder,\n                editTitle: this.title\n            },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: MinimalNodeEntryEntity) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: MinimalNodeEntryEntity) => {\n            if (node) {\n                content.folderEdit.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { FolderCreateDirective } from './folder-create.directive';\nimport { FolderEditDirective } from './folder-edit.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ],\n    exports: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ]\n})\nexport class FolderDirectiveModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { ContentService, PermissionsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-content-metadata-card',\n    templateUrl: './content-metadata-card.component.html',\n    styleUrls: ['./content-metadata-card.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-metadata-card' }\n})\nexport class ContentMetadataCardComponent {\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    /** (optional) This flag displays/hides empty metadata\n     * fields.\n     */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** (required) Name of the metadata preset, which defines aspects\n     * and their properties.\n     */\n    @Input()\n    preset: string;\n\n    /** (optional) This flag sets the metadata in read only mode\n     * preventing changes.\n     */\n    @Input()\n    readOnly = false;\n\n    /** (optional) This flag allows the component to display more\n     * than one accordion at a time.\n     */\n    @Input()\n    multi = false;\n\n    private _displayDefaultProperties: boolean = true;\n\n    /** (optional) This flag displays/hides the metadata\n     * properties.\n     */\n    @Input()\n    set displayDefaultProperties(value: boolean) {\n        this._displayDefaultProperties = value;\n        this.onDisplayDefaultPropertiesChange();\n    }\n\n    get displayDefaultProperties(): boolean {\n        return this._displayDefaultProperties;\n    }\n\n    editable: boolean = false;\n\n    expanded: boolean;\n\n    constructor(private contentService: ContentService) {\n    }\n\n    onDisplayDefaultPropertiesChange(): void {\n        this.expanded = !this._displayDefaultProperties;\n    }\n\n    toggleEdit(): void {\n        this.editable = !this.editable;\n    }\n\n    toggleExpanded(): void {\n        this.expanded = !this.expanded;\n    }\n\n    hasPermission() {\n        return this.contentService.hasPermission(this.node, PermissionsEnum.UPDATE);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';\n\n@Injectable()\nexport class BasicPropertiesService {\n\n    constructor(private fileSizePipe: FileSizePipe) {\n    }\n\n    getProperties(node: MinimalNodeEntryEntity) {\n\n        const sizeInBytes = node.content ? node.content.sizeInBytes : '',\n            mimeTypeName = node.content ? node.content.mimeTypeName : '',\n            author = node.properties ? node.properties['cm:author'] : '',\n            description = node.properties ? node.properties['cm:description'] : '',\n            title = node.properties ? node.properties['cm:title'] : '';\n\n        return [\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.NAME',\n                value: node.name,\n                key: 'name',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.TITLE',\n                value: title,\n                key: 'properties.cm:title',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.CREATOR',\n                value: node.createdByUser.displayName,\n                key: 'createdByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.CREATED_DATE',\n                value: node.createdAt,\n                key: 'createdAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.SIZE',\n                value: sizeInBytes,\n                key: 'content.sizeInBytes',\n                pipes: [{ pipe: this.fileSizePipe }],\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIER',\n                value: node.modifiedByUser.displayName,\n                key: 'modifiedByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',\n                value: node.modifiedAt,\n                key: 'modifiedAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MIMETYPE',\n                value: mimeTypeName,\n                key: 'content.mimeTypeName',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.AUTHOR',\n                value: author,\n                key: 'properties.cm:author',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.DESCRIPTION',\n                value: description,\n                key: 'properties.cm:description',\n                multiline: true,\n                editable: true\n            })\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    CardViewItemProperties,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewIntItemModel,\n    CardViewFloatItemModel,\n    LogService\n} from '@alfresco/adf-core';\nimport { Property, CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\n\nconst D_TEXT = 'd:text';\nconst D_MLTEXT = 'd:mltext';\nconst D_DATE = 'd:date';\nconst D_DATETIME = 'd:datetime';\nconst D_INT = 'd:int';\nconst D_LONG = 'd:long';\nconst D_FLOAT = 'd:float';\nconst D_DOUBLE = 'd:double';\nconst D_BOOLEAN = 'd:boolean';\n\n@Injectable()\nexport class PropertyGroupTranslatorService {\n\n    static readonly RECOGNISED_ECM_TYPES = [ D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG , D_FLOAT, D_DOUBLE, D_BOOLEAN ];\n\n    constructor(private logService: LogService) {}\n\n    public translateToCardViewGroups(propertyGroups: OrganisedPropertyGroup[], propertyValues): CardViewGroup[] {\n        return propertyGroups.map(propertyGroup => {\n            const translatedPropertyGroup: any = Object.assign({}, propertyGroup);\n            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues);\n            return translatedPropertyGroup;\n        });\n    }\n\n    private translateArray(properties: Property[], propertyValues: any): CardViewItem[] {\n        return properties.map(property => {\n            return this.translate(property, propertyValues[property.name]);\n        });\n    }\n\n    private translate(property: Property, propertyValue: any): CardViewItem {\n        this.checkECMTypeValidity(property.dataType);\n\n        const prefix = 'properties.';\n\n        let propertyDefinition: CardViewItemProperties = {\n            label: property.title,\n            value: propertyValue,\n            key: `${prefix}${property.name}`,\n            default: property.defaultValue,\n            editable: true\n        };\n        let cardViewItemProperty;\n\n        switch (property.dataType) {\n\n            case D_MLTEXT:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: true\n                }));\n                break;\n\n            case D_INT:\n            case D_LONG:\n                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);\n                break;\n\n            case D_FLOAT:\n            case D_DOUBLE:\n                cardViewItemProperty = new CardViewFloatItemModel(propertyDefinition);\n                break;\n\n            case D_DATE:\n                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);\n                break;\n\n            case D_DATETIME:\n                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);\n                break;\n\n            case D_BOOLEAN:\n                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);\n                break;\n\n            case D_TEXT:\n            default:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: false\n                }));\n        }\n\n        return cardViewItemProperty;\n    }\n\n    private checkECMTypeValidity(ecmPropertyType) {\n        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {\n            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PropertyGroup, Property, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\n\nconst emptyGroup = {\n    properties: {}\n};\n\nfunction convertObjectToArray(object: any): Property[] {\n    return Object.keys(object).map(key => object[key]);\n}\n\nexport function getGroup(propertyGroups: PropertyGroupContainer, groupName: string): PropertyGroup | undefined {\n    return propertyGroups[groupName];\n}\n\nexport function getProperty(propertyGroups: PropertyGroupContainer, groupName: string, propertyName: string): Property | Property[] | undefined {\n    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;\n    let propertyDefinitions;\n\n    if (propertyName === '*') {\n        propertyDefinitions = convertObjectToArray(groupDefinition.properties);\n    } else {\n        propertyDefinitions = groupDefinition.properties[propertyName];\n    }\n\n    return propertyDefinitions;\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\nimport { getGroup, getProperty } from './property-group-reader';\n\nexport class AspectOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        const groupNames = Object.keys(this.config);\n        return groupNames.indexOf(groupName) !== -1;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const aspects = this.config,\n            aspectNames = Object.keys(aspects);\n\n        return aspectNames\n            .reduce((groupAccumulator, aspectName) => {\n                const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);\n                return groupAccumulator.concat(newGroup);\n            }, [])\n            .filter(organisedPropertyGroup => organisedPropertyGroup.properties.length > 0);\n    }\n\n    private getOrganisedPropertyGroup(propertyGroups, aspectName) {\n        const group = getGroup(propertyGroups, aspectName);\n        let newGroup = [];\n\n        if (group) {\n            const aspectProperties = this.config[aspectName];\n            let properties;\n\n            if (aspectProperties === '*') {\n                properties = getProperty(propertyGroups, aspectName, aspectProperties);\n            } else {\n                properties = (<string[]> aspectProperties)\n                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))\n                    .filter(props => props !== undefined);\n            }\n\n            newGroup = [ { title: group.title, properties } ];\n        }\n\n        return newGroup;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\n\nexport class IndifferentConfigService implements ContentMetadataConfig {\n\n    constructor(config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return true;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map(propertyName => properties[propertyName])\n                });\n            });\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentMetadataConfig,\n    LayoutOrientedConfigItem,\n    OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\nimport { getProperty } from './property-group-reader';\n\nexport class LayoutOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return this.getMatchingGroups(groupName).length > 0;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const layoutBlocks = this.config;\n\n        return layoutBlocks.map((layoutBlock) => {\n            const flattenedItems = this.flattenItems(layoutBlock.items),\n                properties = flattenedItems.reduce((props, explodedItem) => {\n                    const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];\n                    return props.concat(property);\n                }, []);\n\n            return {\n                title: layoutBlock.title,\n                properties\n            };\n        });\n    }\n\n    private flattenItems(items) {\n        return items.reduce((accumulator, item) => {\n            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];\n            const flattenedProperties = properties.map(propertyName => {\n                return {\n                    groupName: item.aspect || item.type,\n                    propertyName\n                };\n            });\n\n            return accumulator.concat(flattenedProperties);\n        }, []);\n    }\n\n    private getMatchingGroups(groupName: string): LayoutOrientedConfigItem[] {\n        return this.config\n            .map(layoutBlock => layoutBlock.items)\n            .reduce((accumulator, items) => accumulator.concat(items), [])\n            .filter((item) => item.aspect === groupName || item.type === groupName);\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, LogService } from '@alfresco/adf-core';\nimport { AspectOrientedConfigService } from './aspect-oriented-config.service';\nimport { IndifferentConfigService } from './indifferent-config.service';\nimport { LayoutOrientedConfigService } from './layout-oriented-config.service';\nimport {\n    PresetConfig,\n    ContentMetadataConfig,\n    AspectOrientedConfig,\n    InDifferentConfig,\n    LayoutOrientedConfig\n} from '../../interfaces/content-metadata.interfaces';\n\n@Injectable()\nexport class ContentMetadataConfigFactory {\n\n    static readonly INDIFFERENT_PRESET = '*';\n    static readonly DEFAULT_PRESET_NAME = 'default';\n\n    constructor(private appConfigService: AppConfigService, private logService: LogService) {}\n\n    public get(presetName: string = 'default'): ContentMetadataConfig {\n        let presetConfig;\n        try {\n            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];\n        } catch {\n            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {\n                this.logService.error(`No content-metadata preset for: ${presetName}`);\n            }\n            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;\n        }\n\n        return this.createConfig(presetConfig);\n    }\n\n    private createConfig(presetConfig: PresetConfig): ContentMetadataConfig {\n        let config: ContentMetadataConfig;\n\n        if (this.isLayoutOrientedPreset(presetConfig)) {\n            config = new LayoutOrientedConfigService(<LayoutOrientedConfig> presetConfig);\n        } else if (this.isAspectOrientedPreset(presetConfig)) {\n            config = new AspectOrientedConfigService(<AspectOrientedConfig> presetConfig);\n        } else {\n            config = new IndifferentConfigService(<InDifferentConfig> presetConfig);\n        }\n\n        Object.freeze(config);\n        return config;\n    }\n\n    private isAspectOrientedPreset(presetConfig: PresetConfig): boolean {\n        return this.isObject(presetConfig);\n    }\n\n    private isLayoutOrientedPreset(presetConfig: PresetConfig): boolean {\n        return Array.isArray(presetConfig);\n    }\n\n    private isObject(x) {\n        return x != null && typeof x === 'object';\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Observable, defer, forkJoin } from 'rxjs';\nimport { PropertyGroup, PropertyGroupContainer } from '../interfaces/content-metadata.interfaces';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PropertyDescriptorsService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {}\n\n    load(groupNames: string[]): Observable<PropertyGroupContainer> {\n        const groupFetchStreams = groupNames\n            .map(groupName => groupName.replace(':', '_'))\n            .map(groupName => defer( () => this.alfrescoApiService.classesApi.getClass(groupName)) );\n\n        return forkJoin(groupFetchStreams).pipe(\n            map(this.convertToObject)\n        );\n    }\n\n    private convertToObject(propertyGroupsArray: PropertyGroup[]): PropertyGroupContainer {\n        return propertyGroupsArray.reduce((propertyGroups, propertyGroup) => {\n            return Object.assign({}, propertyGroups, {\n                [propertyGroup.name]: propertyGroup\n            });\n        }, {});\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { BasicPropertiesService } from './basic-properties.service';\nimport { Observable, of } from 'rxjs';\nimport { PropertyGroupTranslatorService } from './property-groups-translator.service';\nimport { CardViewItem } from '@alfresco/adf-core';\nimport { CardViewGroup } from '../interfaces/content-metadata.interfaces';\nimport { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';\nimport { PropertyDescriptorsService } from './property-descriptors.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ContentMetadataService {\n\n    constructor(private basicPropertiesService: BasicPropertiesService,\n                private contentMetadataConfigFactory: ContentMetadataConfigFactory,\n                private propertyGroupTranslatorService: PropertyGroupTranslatorService,\n                private propertyDescriptorsService: PropertyDescriptorsService) {\n    }\n\n    getBasicProperties(node: MinimalNodeEntryEntity): Observable<CardViewItem[]> {\n        return of(this.basicPropertiesService.getProperties(node));\n    }\n\n    getGroupedProperties(node: MinimalNodeEntryEntity, presetName: string = 'default'): Observable<CardViewGroup[]> {\n        let groupedProperties = of([]);\n\n        if (node.aspectNames) {\n            const config = this.contentMetadataConfigFactory.get(presetName),\n                groupNames = node.aspectNames\n                    .concat(node.nodeType)\n                    .filter(groupName => config.isGroupAllowed(groupName));\n\n            if (groupNames.length > 0) {\n                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(\n                    map(groups => config.reorganiseByConfig(groups)),\n                    map(groups => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties))\n                );\n            }\n        }\n\n        return groupedProperties;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { Observable, Subscription } from 'rxjs';\nimport { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { ContentMetadataService } from '../../services/content-metadata.service';\nimport { CardViewGroup } from '../../interfaces/content-metadata.interfaces';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-content-metadata',\n    templateUrl: './content-metadata.component.html',\n    styleUrls: ['./content-metadata.component.scss'],\n    host: { 'class': 'adf-content-metadata' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: MinimalNodeEntryEntity;\n\n    /** Toggles whether the edit button should be shown */\n    @Input()\n    editable: boolean = false;\n\n    /** Toggles whether to display empty values in the card view */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** Toggles between expanded (ie, full information) and collapsed\n     * (ie, reduced information) in the display\n     */\n    @Input()\n    expanded: boolean = false;\n\n    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */\n    @Input()\n    multi = false;\n\n    /** Name of the metadata preset, which defines aspects and their properties */\n    @Input()\n    preset: string;\n\n    /** Toggles whether the metadata properties should be shown */\n    @Input()\n    displayDefaultProperties: boolean = true;\n\n    basicProperties$: Observable<CardViewItem[]>;\n    groupedProperties$: Observable<CardViewGroup[]>;\n    disposableNodeUpdate: Subscription;\n\n    constructor(\n        private contentMetadataService: ContentMetadataService,\n        private cardViewUpdateService: CardViewUpdateService,\n        private nodesApiService: NodesApiService,\n        private logService: LogService,\n        private alfrescoApiService: AlfrescoApiService\n    ) {}\n\n    ngOnInit() {\n        this.disposableNodeUpdate =  this.cardViewUpdateService.itemUpdated$\n            .pipe(\n                switchMap(this.saveNode.bind(this))\n            )\n            .subscribe(\n                updatedNode => {\n                    Object.assign(this.node, updatedNode);\n                    this.alfrescoApiService.nodeUpdated.next(this.node);\n                },\n                error => this.logService.error(error)\n            );\n\n        this.loadProperties(this.node);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.node && !changes.node.firstChange) {\n            this.loadProperties(changes.node.currentValue);\n        }\n    }\n\n    private loadProperties(node: MinimalNodeEntryEntity) {\n        if (node) {\n            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);\n            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);\n        }\n    }\n\n    private saveNode({ changed: nodeBody }): Observable<MinimalNodeEntryEntity> {\n        return this.nodesApiService.updateNode(this.node.id, nodeBody);\n    }\n\n    ngOnDestroy() {\n        this.disposableNodeUpdate.unsubscribe();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ContentMetadataComponent } from './components/content-metadata/content-metadata.component';\nimport { ContentMetadataCardComponent } from './components/content-metadata-card/content-metadata-card.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ],\n    declarations: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ]\n})\nexport class ContentMetadataModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionElement } from 'alfresco-js-api';\n\nexport class PermissionDisplayModel implements PermissionElement {\n\n    authorityId?: string;\n    name?: string;\n    accessStatus?: PermissionElement.AccessStatusEnum;\n    isInherited: boolean = false;\n    icon: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.authorityId = obj.authorityId;\n            this.name = obj.name;\n            this.accessStatus = obj.accessStatus;\n            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;\n            this.icon = obj.icon ? obj.icon : 'vpn_key';\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, of, from, throwError } from 'rxjs';\nimport { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';\nimport { QueryBody, MinimalNodeEntryEntity, MinimalNodeEntity, PathElement, GroupMemberEntry, GroupsPaging, GroupMemberPaging, PermissionElement } from 'alfresco-js-api';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable()\nexport class NodePermissionService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private searchApiService: SearchService,\n                private nodeService: NodesApiService,\n                private translation: TranslationService) {\n    }\n\n    /**\n     * Gets a list of roles for the current node.\n     * @param node The target node\n     * @returns Array of strings representing the roles\n     */\n    getNodeRoles(node: MinimalNodeEntryEntity): Observable<string[]> {\n        const retrieveSiteQueryBody: QueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);\n        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)\n            .pipe(\n                switchMap((siteNodeList: any) => {\n                    if ( siteNodeList.list.entries.length > 0 ) {\n                        let siteName = siteNodeList.list.entries[0].entry.name;\n                        return this.getGroupMembersBySiteName(siteName);\n                    } else {\n                        return of(node.permissions.settable);\n                    }\n                })\n            );\n    }\n\n    /**\n     * Updates the permission role for a node.\n     * @param node Target node\n     * @param updatedPermissionRole Permission role to update or add\n     * @returns Node with updated permission\n     */\n    updatePermissionRole(node: MinimalNodeEntryEntity, updatedPermissionRole: PermissionElement): Observable<MinimalNodeEntryEntity> {\n        let permissionBody = { permissions: { locallySet: []} };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);\n        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);\n        if (index !== -1) {\n            permissionBody.permissions.locallySet[index] = updatedPermissionRole;\n        } else {\n            permissionBody.permissions.locallySet.push(updatedPermissionRole);\n        }\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    /**\n     * Update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param permissionList New permission settings\n     * @returns Node with updated permissions\n     */\n    updateNodePermissions(nodeId: string, permissionList: MinimalNodeEntity[]): Observable<MinimalNodeEntryEntity> {\n       return this.nodeService.getNode(nodeId).pipe(\n           switchMap(node => {\n                return this.getNodeRoles(node).pipe(\n                    switchMap((nodeRoles) => of({node, nodeRoles}) )\n                );\n            }),\n            switchMap(({node, nodeRoles}) => this.updateLocallySetPermissions(node, permissionList, nodeRoles))\n        );\n    }\n\n    /**\n     * Updates the locally set permissions for a node.\n     * @param node ID of the target node\n     * @param nodes Permission settings\n     * @param nodeRole Permission role\n     * @returns Node with updated permissions\n     */\n    updateLocallySetPermissions(node: MinimalNodeEntryEntity, nodes: MinimalNodeEntity[], nodeRole: string[]): Observable<MinimalNodeEntryEntity> {\n        let permissionBody = { permissions: { locallySet: []} };\n        const permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);\n        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);\n        if (duplicatedPermissions.length > 0) {\n            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');\n            const duplicatePermissionMessage: string = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION',  {list});\n            return throwError(duplicatePermissionMessage);\n        }\n        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    private getDuplicatedPermissions(nodeLocallySet: PermissionElement[], permissionListAdded: PermissionElement[]): PermissionElement[] {\n        let duplicatePermissions: PermissionElement[] = [];\n        if (nodeLocallySet) {\n            permissionListAdded.forEach((permission: PermissionElement) => {\n                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));\n                if (duplicate) {\n                    duplicatePermissions.push(duplicate);\n                }\n            });\n        }\n        return duplicatePermissions;\n    }\n\n    private isEqualPermission(oldPermission: PermissionElement, newPermission: PermissionElement): boolean {\n        return oldPermission.accessStatus === newPermission.accessStatus &&\n               oldPermission.authorityId === newPermission.authorityId &&\n               oldPermission.name === newPermission.name;\n    }\n\n    private transformNodeToPermissionElement(nodes: MinimalNodeEntity[], nodeRole: any): PermissionElement[] {\n        return nodes.map((node) => {\n            let newPermissionElement: PermissionElement = <PermissionElement> {\n                'authorityId': node.entry.properties['cm:authorityName'] ?\n                    node.entry.properties['cm:authorityName'] :\n                    node.entry.properties['cm:userName'],\n                'name': nodeRole,\n                'accessStatus': 'ALLOWED'\n            };\n            return newPermissionElement;\n        });\n    }\n\n    /**\n     * Removes a permission setting from a node.\n     * @param node ID of the target node\n     * @param permissionToRemove Permission setting to remove\n     * @returns Node with modified permissions\n     */\n    removePermission(node: MinimalNodeEntryEntity, permissionToRemove: PermissionElement): Observable<MinimalNodeEntryEntity> {\n        let permissionBody = { permissions: { locallySet: [] } };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);\n        if (index !== -1) {\n            node.permissions.locallySet.splice(index, 1);\n            permissionBody.permissions.locallySet = node.permissions.locallySet;\n            return this.nodeService.updateNode(node.id, permissionBody);\n        }\n    }\n\n    private getGroupMembersBySiteName(siteName: string): Observable<string[]> {\n        const groupName = 'GROUP_site_' + siteName;\n        return this.getGroupMemeberByGroupName(groupName)\n            .pipe(\n                map((res: GroupsPaging) => {\n                    let displayResult: string[] = [];\n                    res.list.entries.forEach((member: GroupMemberEntry) => {\n                        displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));\n                    });\n                    return displayResult;\n                })\n            );\n    }\n\n    /**\n     * Gets all members related to a group name.\n     * @param groupName Name of group to look for members\n     * @param opts Extra options supported by JSAPI\n     * @returns List of members\n     */\n    getGroupMemeberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging> {\n        return from<GroupMemberPaging>(this.apiService.groupsApi.getGroupMembers(groupName, opts));\n    }\n\n    private formattedRoleName(displayName, siteName): string {\n        return displayName.replace(siteName + '_', '');\n    }\n\n    private buildRetrieveSiteQueryBody(nodePath: PathElement[]): QueryBody {\n        const pathNames = nodePath.map((node: PathElement) => 'name: \"' + node.name + '\"');\n        const buildedPathNames = pathNames.join(' OR ');\n        return {\n            'query': {\n                'query': buildedPathNames\n            },\n            'paging': {\n                'maxItems': 100,\n                'skipCount': 0\n            },\n            'include': ['aspectNames', 'properties'],\n            'filterQueries': [\n                {\n                    'query':\n                        \"TYPE:'st:site'\"\n                }\n            ]\n        };\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { MinimalNodeEntryEntity, PermissionElement } from 'alfresco-js-api';\nimport { PermissionDisplayModel } from '../../models/permission.model';\nimport { NodePermissionService } from '../../services/node-permission.service';\n\n@Component({\n    selector: 'adf-permission-list',\n    templateUrl: './permission-list.component.html',\n    styleUrls: ['./permission-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PermissionListComponent implements OnInit {\n\n    /** ID of the node whose permissions you want to show. */\n    @Input()\n    nodeId: string = '';\n\n    /** Emitted when the permission is updated. */\n    @Output()\n    update: EventEmitter<PermissionElement> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    permissionList: PermissionDisplayModel[];\n    settableRoles: any[];\n    actualNode: MinimalNodeEntryEntity;\n\n    constructor(private nodeService: NodesApiService,\n                private nodePermissionService: NodePermissionService) {\n\n    }\n\n    ngOnInit() {\n        this.fetchNodePermissions();\n    }\n\n    reload() {\n        this.fetchNodePermissions();\n    }\n\n    private fetchNodePermissions() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: MinimalNodeEntryEntity) => {\n            this.actualNode = node;\n            this.permissionList = this.getPermissionList(node);\n            this.nodePermissionService.getNodeRoles(node).subscribe((settableList: string[]) => {\n                this.settableRoles =  settableList;\n            });\n        });\n    }\n\n    private getPermissionList(node: MinimalNodeEntryEntity): PermissionDisplayModel[] {\n        let allPermissions: PermissionDisplayModel[] = [];\n        if (node.permissions.locallySet) {\n            node.permissions.locallySet.map((element) => {\n                let permission = new PermissionDisplayModel(element);\n                allPermissions.push(permission);\n            });\n        }\n        if (node.permissions.inherited) {\n            node.permissions.inherited.map((element) => {\n                let permissionInherited = new PermissionDisplayModel(element);\n                permissionInherited.isInherited = true;\n                allPermissions.push(permissionInherited);\n            });\n        }\n        return allPermissions;\n    }\n\n    saveNewRole(event: any, permissionRow: PermissionDisplayModel) {\n        let updatedPermissionRole: PermissionElement = this.buildUpdatedPermission(event.value, permissionRow);\n        this.nodePermissionService.updatePermissionRole(this.actualNode, updatedPermissionRole)\n            .subscribe((node: MinimalNodeEntryEntity) => {\n                this.update.emit(updatedPermissionRole);\n            });\n    }\n\n    private buildUpdatedPermission(newRole: string, permissionRow: PermissionDisplayModel): PermissionElement {\n        let permissionRole: PermissionElement = {};\n        permissionRole.accessStatus = permissionRow.accessStatus;\n        permissionRole.name = newRole;\n        permissionRole.authorityId = permissionRow.authorityId;\n        return permissionRole;\n    }\n\n    removePermission(permissionRow: PermissionDisplayModel) {\n        this.nodePermissionService.removePermission(this.actualNode, permissionRow).subscribe((node) => {\n            this.update.emit(node);\n        }, (error) => this.error.emit(error));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'adf-no-permission-template',\n    template: '<ng-content></ng-content>'\n})\nexport class NoPermissionTemplateComponent {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\nimport { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { NodesApiService, ContentService, PermissionsEnum } from '@alfresco/adf-core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\n@Directive({\n    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',\n    host: {\n        'role': 'button',\n        '(click)': 'onInheritPermissionClicked()'\n    }\n})\nexport class InheritPermissionDirective {\n\n    /** ID of the node to add/remove inherited permissions. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated. */\n    @Output()\n    updated: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter<MinimalNodeEntryEntity>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private nodeService: NodesApiService,\n                private contentService: ContentService) {\n    }\n\n    onInheritPermissionClicked() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: MinimalNodeEntryEntity) => {\n            if (this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {\n                const nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };\n                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((nodeUpdated: MinimalNodeEntryEntity) => {\n                    this.updated.emit(nodeUpdated);\n                }, (error) => this.error.emit(error));\n            } else {\n                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');\n            }\n        });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { AddPermissionDialogData } from './add-permission-dialog-data.interface';\nimport { AddPermissionComponent } from '../add-permission/add-permission.component';\n\n@Component({\n    selector: 'adf-add-permission-dialog',\n    templateUrl: './add-permission-dialog.component.html',\n    styleUrls: ['./add-permission-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionDialogComponent {\n\n    @ViewChild('addPermission')\n    addPermissionComponent: AddPermissionComponent;\n\n    currentSelection: MinimalNodeEntity[] = [];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: AddPermissionDialogData) {\n    }\n\n    onSelect(items: MinimalNodeEntity[]) {\n        this.currentSelection = items;\n    }\n\n    onAddClicked() {\n        this.data.confirm.next(this.currentSelection);\n        this.data.confirm.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';\nimport { AddPermissionDialogData } from '../components/add-permission/add-permission-dialog-data.interface';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity, Node } from 'alfresco-js-api';\nimport { NodePermissionService } from './node-permission.service';\nimport { ContentService, PermissionsEnum } from '@alfresco/adf-core';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class NodePermissionDialogService {\n\n    constructor(private dialog: MatDialog,\n                private nodePermissionService: NodePermissionService,\n                private contentService: ContentService) {\n    }\n\n    /**\n     * Opens a dialog to add permissions to a node.\n     * @param node ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    openAddPermissionDialog(node: Node, title?: string): Observable<MinimalNodeEntity[]> {\n        if (this.contentService.hasPermission(node, PermissionsEnum.UPDATEPERMISSIONS)) {\n            const confirm = new Subject<MinimalNodeEntity[]>();\n\n            confirm.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const data: AddPermissionDialogData = {\n                nodeId: node.id,\n                title: title,\n                confirm: confirm\n            };\n\n            this.openDialog(data, 'adf-add-permission-dialog', '630px');\n            return confirm;\n        } else {\n            let errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';\n            return throwError(errors);\n        }\n    }\n\n    private openDialog(data: any, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    /**\n     * Closes the currently-open dialog.\n     */\n    close() {\n        this.dialog.closeAll();\n    }\n\n    /**\n     * Opens a dialog to update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    updateNodePermissionByDialog(nodeId?: string, title?: string): Observable<MinimalNodeEntryEntity> {\n        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })\n            .pipe(\n                switchMap(node => {\n                    return this.openAddPermissionDialog(node.entry, title)\n                        .pipe(\n                            switchMap(selection => {\n                                return this.nodePermissionService.updateNodePermissions(nodeId, selection);\n                            })\n                        );\n                })\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryBody } from 'alfresco-js-api';\nimport { SearchConfigurationInterface } from '@alfresco/adf-core';\n\nexport class SearchPermissionConfigurationService implements SearchConfigurationInterface {\n\n    constructor() {\n    }\n\n    public generateQueryBody(searchTerm: string, maxResults: number, skipCount: number): QueryBody {\n        const defaultQueryBody: QueryBody = {\n            query: {\n                query: searchTerm ? `authorityName:*${searchTerm}* OR userName:*${searchTerm}*` : searchTerm\n            },\n            include: ['properties', 'aspectNames'],\n            paging: {\n                maxItems: maxResults,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                /*tslint:disable-next-line */\n                { query: \"TYPE:'cm:authority'\" }]\n        };\n\n        return defaultQueryBody;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { SearchPermissionConfigurationService } from './search-config-permission.service';\nimport { SearchService, SearchConfigurationService } from '@alfresco/adf-core';\nimport { SearchComponent } from '../../../search/components/search.component';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\n\n@Component({\n    selector: 'adf-add-permission-panel',\n    templateUrl: './add-permission-panel.component.html',\n    styleUrls: ['./add-permission-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },\n        SearchService\n    ]\n})\nexport class AddPermissionPanelComponent {\n\n    @ViewChild('search')\n    search: SearchComponent;\n\n    /** Emitted when a permission list item is selected. */\n    @Output()\n    select: EventEmitter<any> = new EventEmitter();\n\n    searchInput: FormControl = new FormControl();\n    searchedWord = '';\n    debounceSearch: number = 200;\n\n    selectedItems: MinimalNodeEntity[] = [];\n\n    EVERYONE: MinimalNodeEntity = { entry: { properties: {'cm:authorityName': 'GROUP_EVERYONE'}}};\n\n    constructor() {\n        this.searchInput.valueChanges\n        .pipe(\n            debounceTime(this.debounceSearch)\n        )\n        .subscribe((searchValue) => {\n            this.searchedWord = searchValue;\n            if (!searchValue) {\n                this.search.resetResults();\n            }\n        });\n    }\n\n    elementClicked(item: MinimalNodeEntity) {\n        if (this.isAlreadySelected(item)) {\n            this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\n        } else {\n            this.selectedItems.push(item);\n        }\n        this.select.emit(this.selectedItems);\n    }\n\n    private isAlreadySelected(item: MinimalNodeEntity): boolean {\n        return this.selectedItems.indexOf(item) >= 0;\n    }\n\n    clearSearch() {\n        this.searchedWord = '';\n        this.selectedItems.splice(0, this.selectedItems.length);\n        this.search.resetResults();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { NodePermissionService } from '../../services/node-permission.service';\nimport { NodesApiService, ContentService, PermissionsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-add-permission',\n    templateUrl: './add-permission.component.html',\n    styleUrls: ['./add-permission.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionComponent {\n\n    /** ID of the target node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated successfully. */\n    @Output()\n    success: EventEmitter<MinimalNodeEntryEntity> = new EventEmitter();\n\n    /** Emitted when an error occurs during the update. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    selectedItems: MinimalNodeEntity[] = [];\n    currentNode: MinimalNodeEntryEntity;\n    currentNodeRoles: string[];\n\n    constructor(private nodePermissionService: NodePermissionService,\n                private nodeApiService: NodesApiService,\n                private contentService: ContentService) {\n        this.nodeApiService.getNode(this.nodeId).subscribe((node) => this.currentNode = node);\n    }\n\n    onSelect(selection: MinimalNodeEntity[]) {\n        this.selectedItems = selection;\n    }\n\n    isAddEnabled(): boolean {\n        return this.contentService.hasPermission(this.currentNode, PermissionsEnum.UPDATEPERMISSIONS) &&\n                this.selectedItems.length !== 0;\n    }\n\n    applySelection() {\n        if (this.contentService.hasPermission(this.currentNode, PermissionsEnum.UPDATEPERMISSIONS)) {\n            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)\n                .subscribe(\n                    (node) => {\n                        this.success.emit(node);\n                    },\n                    (error) => {\n                        this.error.emit(error);\n                    });\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { PermissionListComponent } from './components/permission-list/permission-list.component';\nimport { AddPermissionComponent } from './components/add-permission/add-permission.component';\nimport { AddPermissionDialogComponent } from './components/add-permission/add-permission-dialog.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { InheritPermissionDirective } from './components/inherited-button.directive';\nimport { NoPermissionTemplateComponent } from './components/permission-list/no-permission.component';\nimport { AddPermissionPanelComponent } from './components/add-permission/add-permission-panel.component';\nimport { SearchModule } from '../search/search.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        SearchModule\n    ],\n    declarations: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    entryComponents: [\n        AddPermissionPanelComponent,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    exports: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ]\n})\nexport class PermissionManagerModule {}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    Inject,\n    OnInit,\n    ViewEncapsulation,\n    ViewChild,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef,  MatDialog } from '@angular/material';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subscription, Observable } from 'rxjs';\nimport { tap, skip } from 'rxjs/operators';\nimport {\n    SharedLinksApiService,\n    NodesApiService,\n    ContentService\n} from '@alfresco/adf-core';\nimport { SharedLinkEntry, MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\nimport moment from 'moment-es6';\n\n@Component({\n    selector: 'adf-share-dialog',\n    templateUrl: './content-node-share.dialog.html',\n    styleUrls: ['./content-node-share.dialog.scss'],\n    host: { 'class': 'adf-share-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShareDialogComponent implements OnInit, OnDestroy {\n    private subscriptions: Subscription[] = [];\n\n    minDate = moment().add(1, 'd');\n    sharedId: string;\n    fileName: string;\n    baseShareUrl: string;\n    isFileShared: boolean = false;\n    isDisabled: boolean = false;\n    form: FormGroup = new FormGroup({\n        'sharedUrl': new FormControl(''),\n        'time': new FormControl({value: '', disabled: false})\n    });\n\n    @ViewChild('sharedLinkInput') sharedLinkInput: ElementRef;\n\n    constructor(\n        private sharedLinksApiService: SharedLinksApiService,\n        private dialogRef: MatDialogRef<ShareDialogComponent>,\n        private dialog: MatDialog,\n        private nodesApiService: NodesApiService,\n        private contentService: ContentService,\n        @Inject(MAT_DIALOG_DATA) public data: any) {\n    }\n\n    ngOnInit() {\n\n        if (!this.canUpdate) {\n            this.form.controls['time'].disable();\n        }\n\n        this.subscriptions.push(\n            this.form.valueChanges\n                .pipe(\n                    skip(1),\n                    tap((updates) => {\n                        this.updateNode(updates);\n                    })\n                )\n                .subscribe((updates) => this.updateEntryExpiryDate(updates))\n        );\n\n        if (this.data.node && this.data.node.entry) {\n            this.fileName = this.data.node.entry.name;\n            this.baseShareUrl = this.data.baseShareUrl;\n            const properties = this.data.node.entry.properties;\n\n            if (properties && !properties['qshare:sharedId']) {\n\n                this.createSharedLinks(this.data.node.entry.id);\n            } else {\n                this.sharedId = properties['qshare:sharedId'];\n                this.isFileShared = true;\n\n                this.updateForm();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe);\n    }\n\n    removeShare() {\n        this.deleteSharedLink(this.sharedId);\n    }\n\n    onSlideShareChange(event: any) {\n        if (event.checked) {\n            this.createSharedLinks(this.data.node.entry.id);\n        } else {\n            this.openConfirmationDialog();\n        }\n    }\n\n    get canUpdate() {\n        return this.contentService.hasPermission(this.data.node.entry, 'update');\n    }\n\n    private openConfirmationDialog() {\n        this.isFileShared = false;\n\n        this.dialog\n            .open(ConfirmDialogComponent, {\n                data: {\n                    title: 'SHARE.CONFIRMATION.DIALOG-TITLE',\n                    message: 'SHARE.CONFIRMATION.MESSAGE',\n                    yesLabel: 'SHARE.CONFIRMATION.REMOVE',\n                    noLabel: 'SHARE.CONFIRMATION.CANCEL'\n                },\n                minWidth: '250px',\n                closeOnNavigation: true\n            })\n            .beforeClose().subscribe(deleteSharedLink => {\n                if (deleteSharedLink) {\n                    this.deleteSharedLink(this.sharedId);\n                } else {\n                    this.isFileShared = true;\n                }\n            });\n    }\n\n    private createSharedLinks(nodeId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService.createSharedLinks(nodeId)\n            .subscribe((sharedLink: SharedLinkEntry) => {\n\n                if (sharedLink.entry) {\n                    this.sharedId = sharedLink.entry.id;\n                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;\n                    this.isDisabled = false;\n                    this.isFileShared = true;\n\n                    this.updateForm();\n                }\n            },\n            () => {\n                this.isDisabled = false;\n                this.isFileShared = false;\n            });\n    }\n\n    private deleteSharedLink(sharedId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService.deleteSharedLink(sharedId).subscribe(() => {\n                this.data.node.entry.properties['qshare:sharedId'] = null;\n                this.data.node.entry.properties['qshare:expiryDate'] = null;\n                this.dialogRef.close(false);\n            },\n            () => {\n                this.isDisabled = false;\n                this.isFileShared = false;\n            });\n    }\n\n    private updateForm() {\n        const { entry } = this.data.node;\n        const expiryDate = entry.properties['qshare:expiryDate'];\n\n        this.form.setValue({\n            'sharedUrl': `${this.baseShareUrl}${this.sharedId}`,\n            'time': expiryDate ? expiryDate : null\n        });\n    }\n\n    private updateNode(updates): Observable<MinimalNodeEntryEntity> {\n        return this.nodesApiService.updateNode(\n            this.data.node.entry.id,\n            {\n                properties: {\n                    'qshare:expiryDate': updates.time ? updates.time.utc().format() : null\n                }\n            }\n        );\n    }\n\n    private updateEntryExpiryDate(updates) {\n        const { properties } = this.data.node.entry;\n\n        properties['qshare:expiryDate'] = updates.time\n            ? updates.time.local()\n            : null;\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener, OnChanges, NgZone } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\n\nimport { ShareDialogComponent } from './content-node-share.dialog';\n\n@Directive({\n    selector: '[adf-share]',\n    exportAs: 'adfShare'\n})\nexport class NodeSharedDirective implements OnChanges {\n\n    isFile: boolean = false;\n    isShared: boolean = false;\n\n    /** Node to share. */\n    // tslint:disable-next-line:no-input-rename\n    @Input('adf-share')\n    node: MinimalNodeEntity;\n\n    @Input()\n    baseShareUrl: string;\n\n    @HostListener('click')\n    onClick() {\n        if (this.node) {\n            this.shareNode(this.node);\n        }\n    }\n\n    constructor(private dialog: MatDialog, private zone: NgZone) {}\n\n    shareNode(node: MinimalNodeEntity) {\n        if (node && node.entry && node.entry.isFile) {\n            this.dialog.open(ShareDialogComponent, {\n                width: '600px',\n                panelClass: 'adf-share-link-dialog',\n                data: {\n                    node: node,\n                    baseShareUrl: this.baseShareUrl\n                }\n            });\n        }\n    }\n\n    ngOnChanges() {\n        this.zone.onStable.subscribe(() => {\n            if (this.node) {\n                this.isFile = this.node.entry.isFile;\n                this.isShared = this.node.entry.properties['qshare:sharedId'];\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { ShareDialogComponent } from './content-node-share.dialog';\nimport { NodeSharedDirective } from './content-node-share.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    exports: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    entryComponents: [\n        ShareDialogComponent\n    ]\n})\nexport class ContentNodeShareModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { SocialModule } from './social/social.module';\nimport { TagModule } from './tag/tag.module';\nimport { WebScriptModule } from './webscript/webscript.module';\nimport { DocumentListModule } from './document-list/document-list.module';\nimport { UploadModule } from './upload/upload.module';\nimport { SearchModule } from './search/search.module';\nimport { SitesDropdownModule } from './site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { VersionManagerModule } from './version-manager/version-manager.module';\nimport { ContentNodeSelectorModule } from './content-node-selector/content-node-selector.module';\nimport { ContentNodeShareModule } from './content-node-share/content-node-share.module';\nimport { ContentDirectiveModule } from './directives/content-directive.module';\nimport { DialogModule } from './dialogs/dialog.module';\nimport { FolderDirectiveModule } from './folder-directive/folder-directive.module';\nimport { ContentMetadataModule } from './content-metadata/content-metadata.module';\nimport { PermissionManagerModule } from './permission-manager/permission-manager.module';\nimport { RatingService } from './social/services/rating.service';\nimport { ContentMetadataService } from './content-metadata/services/content-metadata.service';\nimport { PropertyDescriptorsService } from './content-metadata/services/property-descriptors.service';\nimport { ContentMetadataConfigFactory } from './content-metadata/services/config/content-metadata-config.factory';\nimport { BasicPropertiesService } from './content-metadata/services/basic-properties.service';\nimport { PropertyGroupTranslatorService } from './content-metadata/services/property-groups-translator.service';\nimport { SearchQueryBuilderService } from './search/search-query-builder.service';\nimport { SearchFilterService } from './search/components/search-filter/search-filter.service';\nimport { ContentNodeSelectorService } from './content-node-selector/content-node-selector.service';\nimport { ContentNodeDialogService } from './content-node-selector/content-node-dialog.service';\nimport { DocumentListService } from './document-list/services/document-list.service';\nimport { FolderActionsService } from './document-list/services/folder-actions.service';\nimport { DocumentActionsService } from './document-list/services/document-actions.service';\nimport { NodeActionsService } from './document-list/services/node-actions.service';\nimport { CustomResourcesService } from './document-list/services/custom-resources.service';\nimport { NodePermissionDialogService } from './permission-manager/services/node-permission-dialog.service';\nimport { NodePermissionService } from './permission-manager/services/node-permission.service';\nimport { TagService } from './tag/services/tag.service';\n\nexport function providers() {\n    return [\n        RatingService,\n        ContentMetadataService,\n        PropertyDescriptorsService,\n        ContentMetadataConfigFactory,\n        BasicPropertiesService,\n        PropertyGroupTranslatorService,\n        SearchQueryBuilderService,\n        SearchFilterService,\n        ContentNodeSelectorService,\n        ContentNodeDialogService,\n        DocumentListService,\n        FolderActionsService,\n        DocumentActionsService,\n        NodeActionsService,\n        CustomResourcesService,\n        NodePermissionDialogService,\n        NodePermissionService,\n        TagService\n    ];\n}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule\n    ]\n})\nexport class ContentModuleLazy {}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule\n    ],\n    providers: [\n        ...providers(),\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-content-services',\n                source: 'assets/adf-content-services'\n            }\n        }\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule\n    ]\n})\nexport class ContentModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentModule,\n            providers: [\n                ...providers(),\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-content-services',\n                        source: 'assets/adf-content-services'\n                    }\n                }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentModuleLazy\n        };\n    }\n}\n"]}