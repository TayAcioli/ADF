/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ObjectUtils } from '../utils/object-utils';
import { Subject } from 'rxjs';
import { map, distinctUntilChanged } from 'rxjs/operators';
/** @enum {string} */
const AppConfigValues = {
    APP_CONFIG_LANGUAGES_KEY: 'languages',
    PROVIDERS: 'providers',
    OAUTHCONFIG: 'oauth2',
    ECMHOST: 'ecmHost',
    BASESHAREURL: 'baseShareUrl',
    BPMHOST: 'bpmHost',
    AUTHTYPE: 'authType',
    CONTEXTROOTECM: 'contextRootEcm',
    CONTEXTROOTBPM: 'contextRootBpm',
    ALFRESCO_REPOSITORY_NAME: 'alfrescoRepositoryName',
    LOG_LEVEL: 'logLevel',
    LOGIN_ROUTE: 'loginRoute',
    DISABLECSRF: 'disableCSRF',
};
export { AppConfigValues };
export class AppConfigService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.config = {
            application: {
                name: 'Alfresco ADF Application'
            },
            ecmHost: 'http://{hostname}{:port}/ecm',
            bpmHost: 'http://{hostname}{:port}/bpm',
            logLevel: 'silent',
            alfrescoRepositoryName: 'alfresco-1'
        };
        this.onLoadSubject = new Subject();
        this.onLoad = this.onLoadSubject.asObservable();
    }
    /**
     * Requests notification of a property value when it is loaded.
     * @param {?} property The desired property value
     * @return {?} Property value, when loaded
     */
    select(property) {
        return this.onLoadSubject
            .pipe(map((config) => config[property]), distinctUntilChanged());
    }
    /**
     * Gets the value of a named property.
     * @template T
     * @param {?} key Name of the property
     * @param {?=} defaultValue Value to return if the key is not found
     * @return {?} Value of the property
     */
    get(key, defaultValue) {
        /** @type {?} */
        let result = ObjectUtils.getValue(this.config, key);
        if (typeof result === 'string') {
            /** @type {?} */
            const keywords = new Map();
            keywords.set('hostname', this.getLocationHostname());
            keywords.set(':port', this.getLocationPort(':'));
            keywords.set('port', this.getLocationPort());
            keywords.set('protocol', this.getLocationProtocol());
            result = this.formatString(result, keywords);
        }
        if (result === undefined) {
            return defaultValue;
        }
        return /** @type {?} */ (result);
    }
    /**
     * Gets the location.protocol value.
     * @return {?} The location.protocol string
     */
    getLocationProtocol() {
        return location.protocol;
    }
    /**
     * Gets the location.hostname property.
     * @return {?} Value of the property
     */
    getLocationHostname() {
        return location.hostname;
    }
    /**
     * Gets the location.port property.
     * @param {?=} prefix Text added before port value
     * @return {?} Port with prefix
     */
    getLocationPort(prefix = '') {
        return location.port ? prefix + location.port : '';
    }
    /**
     * Loads the config file.
     * @return {?} Notification when loading is complete
     */
    load() {
        return new Promise(resolve => {
            /** @type {?} */
            const configUrl = `app.config.json?v=${Date.now()}`;
            this.http.get(configUrl).subscribe((data) => {
                this.config = Object.assign({}, this.config, data || {});
                this.onLoadSubject.next(this.config);
                resolve(this.config);
            }, () => {
                resolve(this.config);
            });
        });
    }
    /**
     * @param {?} str
     * @param {?} keywords
     * @return {?}
     */
    formatString(str, keywords) {
        /** @type {?} */
        let result = str;
        keywords.forEach((value, key) => {
            /** @type {?} */
            const expr = new RegExp('{' + key + '}', 'gm');
            result = result.replace(expr, value);
        });
        return result;
    }
}
AppConfigService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AppConfigService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    AppConfigService.prototype.config;
    /** @type {?} */
    AppConfigService.prototype.onLoadSubject;
    /** @type {?} */
    AppConfigService.prototype.onLoad;
    /** @type {?} */
    AppConfigService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,