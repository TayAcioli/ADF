/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OverlayContainer } from '@angular/cdk/overlay';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Component, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material';
import { ContextMenuService } from './context-menu.service';
/**
 * \@deprecated: context-menu-holder is deprecated, use adf-context-menu-holder instead.
 */
export class ContextMenuHolderComponent {
    /**
     * @param {?} viewport
     * @param {?} overlayContainer
     * @param {?} contextMenuService
     * @param {?} renderer
     */
    constructor(viewport, overlayContainer, contextMenuService, renderer) {
        this.viewport = viewport;
        this.overlayContainer = overlayContainer;
        this.contextMenuService = contextMenuService;
        this.renderer = renderer;
        this.links = [];
        this.mouseLocation = { left: 0, top: 0 };
        this.menuElement = null;
        this.subscriptions = [];
        this.showIcons = false;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onShowContextMenu(event) {
        if (event) {
            event.preventDefault();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        if (this.mdMenuElement) {
            this.updatePosition();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.contextMenuService.show.subscribe(e => this.showMenu(e.event, e.obj)), this.menuTrigger.onMenuOpen.subscribe(() => {
            /** @type {?} */
            const container = this.overlayContainer.getContainerElement();
            if (container) {
                this.contextMenuListenerFn = this.renderer.listen(container, 'contextmenu', (e) => {
                    e.preventDefault();
                });
            }
            this.menuElement = this.getContextMenuElement();
        }), this.menuTrigger.onMenuClose.subscribe(() => {
            this.menuElement = null;
            if (this.contextMenuListenerFn) {
                this.contextMenuListenerFn();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.contextMenuListenerFn) {
            this.contextMenuListenerFn();
        }
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = [];
        this.menuElement = null;
    }
    /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    onMenuItemClick(event, menuItem) {
        if (menuItem && menuItem.model && menuItem.model.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        menuItem.subject.next(menuItem);
    }
    /**
     * @param {?} e
     * @param {?} links
     * @return {?}
     */
    showMenu(e, links) {
        this.links = links;
        if (e) {
            this.mouseLocation = {
                left: e.clientX,
                top: e.clientY
            };
        }
        this.menuTrigger.openMenu();
        if (this.mdMenuElement) {
            this.updatePosition();
        }
    }
    /**
     * @return {?}
     */
    get mdMenuElement() {
        return this.menuElement;
    }
    /**
     * @return {?}
     */
    locationCss() {
        return {
            left: this.mouseLocation.left + 'px',
            top: this.mouseLocation.top + 'px'
        };
    }
    /**
     * @return {?}
     */
    updatePosition() {
        setTimeout(() => {
            if (this.mdMenuElement.parentElement) {
                if (this.mdMenuElement.clientWidth + this.mouseLocation.left > this.viewport.getViewportRect().width) {
                    this.menuTrigger.menu.xPosition = 'before';
                    this.mdMenuElement.parentElement.style.left = this.mouseLocation.left - this.mdMenuElement.clientWidth + 'px';
                }
                else {
                    this.menuTrigger.menu.xPosition = 'after';
                    this.mdMenuElement.parentElement.style.left = this.locationCss().left;
                }
                if (this.mdMenuElement.clientHeight + this.mouseLocation.top > this.viewport.getViewportRect().height) {
                    this.menuTrigger.menu.yPosition = 'above';
                    this.mdMenuElement.parentElement.style.top = this.mouseLocation.top - this.mdMenuElement.clientHeight + 'px';
                }
                else {
                    this.menuTrigger.menu.yPosition = 'below';
                    this.mdMenuElement.parentElement.style.top = this.locationCss().top;
                }
            }
        }, 0);
    }
    /**
     * @return {?}
     */
    getContextMenuElement() {
        return this.overlayContainer.getContainerElement().querySelector('.context-menu');
    }
}
ContextMenuHolderComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-context-menu-holder, context-menu-holder',
                template: `
        <button mat-button [matMenuTriggerFor]="contextMenu"></button>
        <mat-menu #contextMenu="matMenu" class="context-menu">
            <ng-container *ngFor="let link of links">
                <button *ngIf="link.model?.visible"
                        [attr.data-automation-id]="'context-'+((link.title || link.model?.title) | translate)"
                        mat-menu-item
                        [disabled]="link.model?.disabled"
                        (click)="onMenuItemClick($event, link)">
                    <mat-icon *ngIf="showIcons && link.model?.icon">{{ link.model.icon }}</mat-icon>
                    {{ (link.title || link.model?.title) | translate }}
                </button>
            </ng-container>
        </mat-menu>
    `
            }] }
];
/** @nocollapse */
ContextMenuHolderComponent.ctorParameters = () => [
    { type: ViewportRuler },
    { type: OverlayContainer },
    { type: ContextMenuService },
    { type: Renderer2 }
];
ContextMenuHolderComponent.propDecorators = {
    showIcons: [{ type: Input }],
    menuTrigger: [{ type: ViewChild, args: [MatMenuTrigger,] }],
    onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ContextMenuHolderComponent.prototype.links;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.mouseLocation;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.menuElement;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.subscriptions;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.contextMenuListenerFn;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.showIcons;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.menuTrigger;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.viewport;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.overlayContainer;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.contextMenuService;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,