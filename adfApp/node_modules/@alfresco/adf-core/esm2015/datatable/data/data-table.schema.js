/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Input } from '@angular/core';
import { DataColumnListComponent } from '../../data-column/data-column-list.component';
import { ObjectDataColumn } from './object-datacolumn.model';
/**
 * @abstract
 */
export class DataTableSchema {
    /**
     * @param {?} appConfigService
     * @param {?} presetKey
     * @param {?} presetsModel
     */
    constructor(appConfigService, presetKey, presetsModel) {
        this.appConfigService = appConfigService;
        this.presetKey = presetKey;
        this.presetsModel = presetsModel;
        this.layoutPresets = {};
    }
    /**
     * @return {?}
     */
    createDatatableSchema() {
        this.loadLayoutPresets();
        if (!this.columns || this.columns.length === 0) {
            this.columns = this.mergeJsonAndHtmlSchema();
        }
    }
    /**
     * @return {?}
     */
    loadLayoutPresets() {
        /** @type {?} */
        const externalSettings = this.appConfigService.get(this.presetKey, null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, this.presetsModel, externalSettings);
        }
        else {
            this.layoutPresets = this.presetsModel;
        }
    }
    /**
     * @return {?}
     */
    mergeJsonAndHtmlSchema() {
        /** @type {?} */
        let customSchemaColumns = [];
        customSchemaColumns = this.getSchemaFromConfig(this.presetColumn).concat(this.getSchemaFromHtml(this.columnList));
        if (customSchemaColumns.length === 0) {
            customSchemaColumns = this.getDefaultLayoutPreset();
        }
        return customSchemaColumns;
    }
    /**
     * @param {?} columnList
     * @return {?}
     */
    getSchemaFromHtml(columnList) {
        /** @type {?} */
        let schema = [];
        if (columnList && columnList.columns && columnList.columns.length > 0) {
            schema = columnList.columns.map(c => /** @type {?} */ (c));
        }
        return schema;
    }
    /**
     * @param {?} presetColoumn
     * @return {?}
     */
    getSchemaFromConfig(presetColoumn) {
        return presetColoumn ? (this.layoutPresets[presetColoumn]).map(col => new ObjectDataColumn(col)) : [];
    }
    /**
     * @return {?}
     */
    getDefaultLayoutPreset() {
        return (this.layoutPresets['default']).map(col => new ObjectDataColumn(col));
    }
}
DataTableSchema.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    presetColumn: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DataTableSchema.prototype.columnList;
    /**
     * Custom preset column schema in JSON format.
     * @type {?}
     */
    DataTableSchema.prototype.presetColumn;
    /** @type {?} */
    DataTableSchema.prototype.columns;
    /** @type {?} */
    DataTableSchema.prototype.layoutPresets;
    /** @type {?} */
    DataTableSchema.prototype.appConfigService;
    /** @type {?} */
    DataTableSchema.prototype.presetKey;
    /** @type {?} */
    DataTableSchema.prototype.presetsModel;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS5zY2hlbWEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJkYXRhdGFibGUvZGF0YS9kYXRhLXRhYmxlLnNjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUV2RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQUU3RCxNQUFNOzs7Ozs7SUFZRixZQUFvQixnQkFBa0MsRUFDaEMsU0FBaUIsRUFDakIsWUFBaUI7UUFGbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNoQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ2pCLGlCQUFZLEdBQVosWUFBWSxDQUFLOzZCQUpmLEVBQUU7S0FJa0I7Ozs7SUFFckMscUJBQXFCO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ2hEOzs7OztJQUdFLGlCQUFpQjs7UUFDcEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekUsSUFBSSxnQkFBZ0IsRUFBRTtZQUNsQixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztTQUMvRTthQUFNO1lBQ0gsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQzFDOzs7OztJQUdFLHNCQUFzQjs7UUFDekIsSUFBSSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDN0IsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2xILElBQUksbUJBQW1CLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztTQUN2RDtRQUNELE9BQU8sbUJBQW1CLENBQUM7Ozs7OztJQUd4QixpQkFBaUIsQ0FBQyxVQUFtQzs7UUFDeEQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25FLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxtQkFBYyxDQUFDLENBQUEsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxNQUFNLENBQUM7Ozs7OztJQUdaLG1CQUFtQixDQUFDLGFBQXFCO1FBQzNDLE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7Ozs7SUFHbEcsc0JBQXNCO1FBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7O3lCQXBEaEYsWUFBWSxTQUFDLHVCQUF1QjsyQkFHcEMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbnRlbnRDaGlsZCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhQ29sdW1uTGlzdENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGEtY29sdW1uL2RhdGEtY29sdW1uLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFDb2x1bW4gfSBmcm9tICcuL2RhdGEtY29sdW1uLm1vZGVsJztcbmltcG9ydCB7IE9iamVjdERhdGFDb2x1bW4gfSBmcm9tICcuL29iamVjdC1kYXRhY29sdW1uLm1vZGVsJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERhdGFUYWJsZVNjaGVtYSB7XG5cbiAgICBAQ29udGVudENoaWxkKERhdGFDb2x1bW5MaXN0Q29tcG9uZW50KSBjb2x1bW5MaXN0OiBEYXRhQ29sdW1uTGlzdENvbXBvbmVudDtcblxuICAgIC8qKiBDdXN0b20gcHJlc2V0IGNvbHVtbiBzY2hlbWEgaW4gSlNPTiBmb3JtYXQuICovXG4gICAgQElucHV0KClcbiAgICBwcmVzZXRDb2x1bW46IHN0cmluZztcblxuICAgIGNvbHVtbnM6IGFueTtcblxuICAgIHByaXZhdGUgbGF5b3V0UHJlc2V0cyA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBwcmVzZXRLZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgcHJlc2V0c01vZGVsOiBhbnkpIHsgfVxuXG4gICAgcHVibGljIGNyZWF0ZURhdGF0YWJsZVNjaGVtYSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sb2FkTGF5b3V0UHJlc2V0cygpO1xuICAgICAgICBpZiAoIXRoaXMuY29sdW1ucyB8fCB0aGlzLmNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLm1lcmdlSnNvbkFuZEh0bWxTY2hlbWEoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkTGF5b3V0UHJlc2V0cygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZXh0ZXJuYWxTZXR0aW5ncyA9IHRoaXMuYXBwQ29uZmlnU2VydmljZS5nZXQodGhpcy5wcmVzZXRLZXksIG51bGwpO1xuICAgICAgICBpZiAoZXh0ZXJuYWxTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRQcmVzZXRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcmVzZXRzTW9kZWwsIGV4dGVybmFsU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRQcmVzZXRzID0gdGhpcy5wcmVzZXRzTW9kZWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbWVyZ2VKc29uQW5kSHRtbFNjaGVtYSgpOiBhbnkge1xuICAgICAgICBsZXQgY3VzdG9tU2NoZW1hQ29sdW1ucyA9IFtdO1xuICAgICAgICBjdXN0b21TY2hlbWFDb2x1bW5zID0gdGhpcy5nZXRTY2hlbWFGcm9tQ29uZmlnKHRoaXMucHJlc2V0Q29sdW1uKS5jb25jYXQodGhpcy5nZXRTY2hlbWFGcm9tSHRtbCh0aGlzLmNvbHVtbkxpc3QpKTtcbiAgICAgICAgaWYgKGN1c3RvbVNjaGVtYUNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjdXN0b21TY2hlbWFDb2x1bW5zID0gdGhpcy5nZXREZWZhdWx0TGF5b3V0UHJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1c3RvbVNjaGVtYUNvbHVtbnM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNjaGVtYUZyb21IdG1sKGNvbHVtbkxpc3Q6IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50KTogYW55IHtcbiAgICAgICAgbGV0IHNjaGVtYSA9IFtdO1xuICAgICAgICBpZiAoY29sdW1uTGlzdCAmJiBjb2x1bW5MaXN0LmNvbHVtbnMgJiYgY29sdW1uTGlzdC5jb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNjaGVtYSA9IGNvbHVtbkxpc3QuY29sdW1ucy5tYXAoYyA9PiA8RGF0YUNvbHVtbj4gYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG5cbiAgIHB1YmxpYyBnZXRTY2hlbWFGcm9tQ29uZmlnKHByZXNldENvbG91bW46IHN0cmluZyk6IERhdGFDb2x1bW5bXSB7XG4gICAgICAgIHJldHVybiBwcmVzZXRDb2xvdW1uID8gKHRoaXMubGF5b3V0UHJlc2V0c1twcmVzZXRDb2xvdW1uXSkubWFwKGNvbCA9PiBuZXcgT2JqZWN0RGF0YUNvbHVtbihjb2wpKSA6IFtdO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RGVmYXVsdExheW91dFByZXNldCgpOiBEYXRhQ29sdW1uW10ge1xuICAgICAgICByZXR1cm4gKHRoaXMubGF5b3V0UHJlc2V0c1snZGVmYXVsdCddKS5tYXAoY29sID0+IG5ldyBPYmplY3REYXRhQ29sdW1uKGNvbCkpO1xuICAgIH1cbn1cbiJdfQ==