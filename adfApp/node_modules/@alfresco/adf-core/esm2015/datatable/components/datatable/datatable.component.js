/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ContentChild, ElementRef, EventEmitter, Input, IterableDiffers, Output, ViewEncapsulation } from '@angular/core';
import { Observable } from 'rxjs';
import { DataColumnListComponent } from '../../../data-column/data-column-list.component';
import { DataRowEvent } from '../../data/data-row-event.model';
import { DataSorting } from '../../data/data-sorting.model';
import { ObjectDataRow } from '../../data/object-datarow.model';
import { ObjectDataTableAdapter } from '../../data/object-datatable-adapter';
import { DataCellEvent } from './data-cell.event';
import { DataRowActionEvent } from './data-row-action.event';
import { share, buffer, map, filter, debounceTime } from 'rxjs/operators';
/** @enum {string} */
const DisplayMode = {
    List: 'list',
    Gallery: 'gallery',
};
export { DisplayMode };
export class DataTableComponent {
    /**
     * @param {?} elementRef
     * @param {?} differs
     */
    constructor(elementRef, differs) {
        this.elementRef = elementRef;
        /**
         * Selects the display mode of the table. Can be "list" or "gallery".
         */
        this.display = DisplayMode.List;
        /**
         * The rows that the datatable will show.
         */
        this.rows = [];
        /**
         * Define the sort order of the datatable. Possible values are :
         * [`created`, `desc`], [`created`, `asc`], [`due`, `desc`], [`due`, `asc`]
         */
        this.sorting = [];
        /**
         * The columns that the datatable will show.
         */
        this.columns = [];
        /**
         * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
         */
        this.selectionMode = 'single';
        /**
         * Toggles multiple row selection, which renders checkboxes at the beginning of each row.
         */
        this.multiselect = false;
        /**
         * Toggles the data actions column.
         */
        this.actions = false;
        /**
         * Position of the actions dropdown menu. Can be "left" or "right".
         */
        this.actionsPosition = 'right';
        /**
         * Toggles custom context menu for the component.
         */
        this.contextMenu = false;
        /**
         * Toggles file drop support for rows (see
         * [Upload directive](upload.directive.md) for further details).
         */
        this.allowDropFiles = false;
        /**
         * The CSS class to apply to every row.
         */
        this.rowStyleClass = '';
        /**
         * Toggles the header.
         */
        this.showHeader = true;
        /**
         * Emitted when the user clicks a row.
         */
        this.rowClick = new EventEmitter();
        /**
         * Emitted when the user double-clicks a row.
         */
        this.rowDblClick = new EventEmitter();
        /**
         * Emitted before the context menu is displayed for a row.
         */
        this.showRowContextMenu = new EventEmitter();
        /**
         * Emitted before the actions menu is displayed for a row.
         */
        this.showRowActionsMenu = new EventEmitter();
        /**
         * Emitted when the user executes a row action.
         */
        this.executeRowAction = new EventEmitter();
        /**
         * Flag that indicates if the datatable is in loading state and needs to show the
         * loading template (see the docs to learn how to configure a loading template).
         */
        this.loading = false;
        /**
         * Flag that indicates if the datatable should show the "no permission" template.
         */
        this.noPermission = false;
        /**
         * Should the items for the row actions menu be cached for reuse after they are loaded
         * the first time?
         */
        this.rowMenuCacheEnabled = true;
        this.isSelectAllChecked = false;
        this.selection = new Array();
        /**
         * This array of fake rows fix the flex layout for the gallery view
         */
        this.fakeRows = [];
        this.rowMenuCache = {};
        this.subscriptions = [];
        if (differs) {
            this.differ = differs.find([]).create(null);
        }
        this.click$ = new Observable(observer => this.clickObserver = observer)
            .pipe(share());
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.columnList) {
            this.subscriptions.push(this.columnList.columns.changes.subscribe(() => {
                this.setTableSchema();
            }));
        }
        this.datatableLayoutFix();
        this.setTableSchema();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.initAndSubscribeClickStream();
        if (this.isPropertyChanged(changes['data'])) {
            if (this.isTableEmpty()) {
                this.initTable();
            }
            else {
                this.data = changes['data'].currentValue;
                this.resetSelection();
            }
            return;
        }
        if (this.isPropertyChanged(changes['rows'])) {
            if (this.isTableEmpty()) {
                this.initTable();
            }
            else {
                this.setTableRows(changes['rows'].currentValue);
            }
            return;
        }
        if (changes["selectionMode"] && !changes["selectionMode"].isFirstChange()) {
            this.resetSelection();
            this.emitRowSelectionEvent('row-unselect', null);
        }
        if (this.isPropertyChanged(changes['sorting'])) {
            this.setTableSorting(changes['sorting'].currentValue);
        }
        if (this.isPropertyChanged(changes['display'])) {
            this.datatableLayoutFix();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        let changes = this.differ.diff(this.rows);
        if (changes) {
            this.setTableRows(this.rows);
        }
    }
    /**
     * @param {?} property
     * @return {?}
     */
    isPropertyChanged(property) {
        return property && property.currentValue ? true : false;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    convertToRowsData(rows) {
        return rows.map(row => new ObjectDataRow(row, row.isSelected));
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    convertToDataSorting(sorting) {
        if (sorting && sorting.length > 0) {
            return new DataSorting(sorting[0], sorting[1]);
        }
    }
    /**
     * @return {?}
     */
    initAndSubscribeClickStream() {
        this.unsubscribeClickStream();
        /** @type {?} */
        let singleClickStream = this.click$
            .pipe(buffer(this.click$.pipe(debounceTime(250))), map(list => list), filter(x => x.length === 1));
        this.singleClickStreamSub = singleClickStream.subscribe((obj) => {
            /** @type {?} */
            let event = obj[0];
            this.handleRowSelection(event.value, /** @type {?} */ (event.event));
            this.rowClick.emit(event);
            if (!event.defaultPrevented) {
                this.elementRef.nativeElement.dispatchEvent(new CustomEvent('row-click', {
                    detail: event,
                    bubbles: true
                }));
            }
        });
        /** @type {?} */
        let multiClickStream = this.click$
            .pipe(buffer(this.click$.pipe(debounceTime(250))), map(list => list), filter(x => x.length >= 2));
        this.multiClickStreamSub = multiClickStream.subscribe((obj) => {
            /** @type {?} */
            let event = obj[0];
            this.rowDblClick.emit(event);
            if (!event.defaultPrevented) {
                this.elementRef.nativeElement.dispatchEvent(new CustomEvent('row-dblclick', {
                    detail: event,
                    bubbles: true
                }));
            }
        });
    }
    /**
     * @return {?}
     */
    unsubscribeClickStream() {
        if (this.singleClickStreamSub) {
            this.singleClickStreamSub.unsubscribe();
            this.singleClickStreamSub = null;
        }
        if (this.multiClickStreamSub) {
            this.multiClickStreamSub.unsubscribe();
            this.multiClickStreamSub = null;
        }
    }
    /**
     * @return {?}
     */
    initTable() {
        this.data = new ObjectDataTableAdapter(this.rows, this.columns);
        this.setTableSorting(this.sorting);
        this.resetSelection();
        this.rowMenuCache = {};
    }
    /**
     * @return {?}
     */
    isTableEmpty() {
        return this.data === undefined || this.data === null;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    setTableRows(rows) {
        if (this.data) {
            this.resetSelection();
            this.data.setRows(this.convertToRowsData(rows));
        }
    }
    /**
     * @return {?}
     */
    setTableSchema() {
        /** @type {?} */
        let schema = [];
        if (!this.columns || this.columns.length === 0) {
            schema = this.getSchemaFromHtml();
        }
        else {
            schema = this.columns.concat(this.getSchemaFromHtml());
        }
        this.columns = schema;
        if (this.data && this.columns && this.columns.length > 0) {
            this.data.setColumns(this.columns);
        }
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    setTableSorting(sorting) {
        if (this.data) {
            this.data.setSorting(this.convertToDataSorting(sorting));
        }
    }
    /**
     * @return {?}
     */
    getSchemaFromHtml() {
        /** @type {?} */
        let schema = [];
        if (this.columnList && this.columnList.columns && this.columnList.columns.length > 0) {
            schema = this.columnList.columns.map(c => /** @type {?} */ (c));
        }
        return schema;
    }
    /**
     * @param {?} row
     * @param {?} e
     * @return {?}
     */
    onRowClick(row, e) {
        if (e) {
            e.preventDefault();
        }
        if (row) {
            /** @type {?} */
            const dataRowEvent = new DataRowEvent(row, e, this);
            this.clickObserver.next(dataRowEvent);
        }
    }
    /**
     * @param {?} row
     * @param {?} e
     * @return {?}
     */
    onEnterKeyPressed(row, e) {
        if (row) {
            this.handleRowSelection(row, e);
        }
    }
    /**
     * @param {?} row
     * @param {?} e
     * @return {?}
     */
    handleRowSelection(row, e) {
        if (this.data) {
            if (this.isSingleSelectionMode()) {
                this.resetSelection();
                this.selectRow(row, true);
                this.emitRowSelectionEvent('row-select', row);
            }
            if (this.isMultiSelectionMode()) {
                /** @type {?} */
                const modifier = e && (e.metaKey || e.ctrlKey);
                /** @type {?} */
                let newValue;
                if (this.selection.length === 1) {
                    newValue = !row.isSelected;
                }
                else {
                    newValue = modifier ? !row.isSelected : true;
                }
                /** @type {?} */
                const domEventName = newValue ? 'row-select' : 'row-unselect';
                if (!modifier) {
                    this.resetSelection();
                }
                this.selectRow(row, newValue);
                this.emitRowSelectionEvent(domEventName, row);
            }
        }
    }
    /**
     * @return {?}
     */
    resetSelection() {
        if (this.data) {
            /** @type {?} */
            const rows = this.data.getRows();
            if (rows && rows.length > 0) {
                rows.forEach(r => r.isSelected = false);
            }
            this.selection = [];
        }
        this.isSelectAllChecked = false;
    }
    /**
     * @param {?} row
     * @param {?=} e
     * @return {?}
     */
    onRowDblClick(row, e) {
        if (e) {
            e.preventDefault();
        }
        /** @type {?} */
        let dataRowEvent = new DataRowEvent(row, e, this);
        this.clickObserver.next(dataRowEvent);
    }
    /**
     * @param {?} row
     * @param {?} e
     * @return {?}
     */
    onRowKeyUp(row, e) {
        /** @type {?} */
        const event = new CustomEvent('row-keyup', {
            detail: {
                row: row,
                keyboardEvent: e,
                sender: this
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(event);
        if (event.defaultPrevented) {
            e.preventDefault();
        }
        else {
            if (e.key === 'Enter') {
                this.onKeyboardNavigate(row, e);
            }
        }
    }
    /**
     * @param {?} row
     * @param {?} e
     * @return {?}
     */
    onKeyboardNavigate(row, e) {
        if (e) {
            e.preventDefault();
        }
        /** @type {?} */
        const event = new DataRowEvent(row, e, this);
        this.rowDblClick.emit(event);
        this.elementRef.nativeElement.dispatchEvent(new CustomEvent('row-dblclick', {
            detail: event,
            bubbles: true
        }));
    }
    /**
     * @param {?} column
     * @return {?}
     */
    onColumnHeaderClick(column) {
        if (column && column.sortable) {
            /** @type {?} */
            let current = this.data.getSorting();
            /** @type {?} */
            let newDirection = 'asc';
            if (current && column.key === current.key) {
                newDirection = current.direction === 'asc' ? 'desc' : 'asc';
            }
            this.data.setSorting(new DataSorting(column.key, newDirection));
            this.emitSortingChangedEvent(column.key, newDirection);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSelectAllClick(e) {
        this.isSelectAllChecked = e.checked;
        if (this.multiselect) {
            /** @type {?} */
            let rows = this.data.getRows();
            if (rows && rows.length > 0) {
                for (let i = 0; i < rows.length; i++) {
                    this.selectRow(rows[i], e.checked);
                }
            }
            /** @type {?} */
            const domEventName = e.checked ? 'row-select' : 'row-unselect';
            /** @type {?} */
            const row = this.selection.length > 0 ? this.selection[0] : null;
            this.emitRowSelectionEvent(domEventName, row);
        }
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    onCheckboxChange(row, event) {
        /** @type {?} */
        const newValue = event.checked;
        this.selectRow(row, newValue);
        /** @type {?} */
        const domEventName = newValue ? 'row-select' : 'row-unselect';
        this.emitRowSelectionEvent(domEventName, row);
    }
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    onImageLoadingError(event, row) {
        if (event) {
            /** @type {?} */
            let element = /** @type {?} */ (event.target);
            if (this.fallbackThumbnail) {
                element.src = this.fallbackThumbnail;
            }
            else {
                element.src = row.imageErrorResolver(event);
            }
        }
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    isIconValue(row, col) {
        if (row && col) {
            /** @type {?} */
            let value = row.getValue(col.key);
            return value && value.startsWith('material-icons://');
        }
        return false;
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    asIconValue(row, col) {
        if (this.isIconValue(row, col)) {
            /** @type {?} */
            let value = row.getValue(col.key) || '';
            return value.replace('material-icons://', '');
        }
        return null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    iconAltTextKey(value) {
        return value ? 'ICONS.' + value.substring(value.lastIndexOf('/') + 1).replace(/\.[a-z]+/, '') : '';
    }
    /**
     * @param {?} col
     * @param {?} direction
     * @return {?}
     */
    isColumnSorted(col, direction) {
        if (col && direction) {
            /** @type {?} */
            let sorting = this.data.getSorting();
            return sorting && sorting.key === col.key && sorting.direction === direction;
        }
        return false;
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    getContextMenuActions(row, col) {
        /** @type {?} */
        let event = new DataCellEvent(row, col, []);
        this.showRowContextMenu.emit(event);
        return event.value.actions;
    }
    /**
     * @param {?} row
     * @param {?=} col
     * @return {?}
     */
    getRowActions(row, col) {
        /** @type {?} */
        const id = row.getValue('id');
        if (!this.rowMenuCache[id]) {
            /** @type {?} */
            let event = new DataCellEvent(row, col, []);
            this.showRowActionsMenu.emit(event);
            if (!this.rowMenuCacheEnabled) {
                return event.value.actions;
            }
            this.rowMenuCache[id] = event.value.actions;
        }
        return this.rowMenuCache[id];
    }
    /**
     * @param {?} row
     * @param {?} action
     * @return {?}
     */
    onExecuteRowAction(row, action) {
        if (action.disabled || action.disabled) {
            event.stopPropagation();
        }
        else {
            this.executeRowAction.emit(new DataRowActionEvent(row, action));
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    rowAllowsDrop(row) {
        return row.isDropTarget === true;
    }
    /**
     * @return {?}
     */
    hasSelectionMode() {
        return this.isSingleSelectionMode() || this.isMultiSelectionMode();
    }
    /**
     * @return {?}
     */
    isSingleSelectionMode() {
        return this.selectionMode && this.selectionMode.toLowerCase() === 'single';
    }
    /**
     * @return {?}
     */
    isMultiSelectionMode() {
        return this.selectionMode && this.selectionMode.toLowerCase() === 'multiple';
    }
    /**
     * @param {?} row
     * @return {?}
     */
    getRowStyle(row) {
        row.cssClass = row.cssClass ? row.cssClass : '';
        this.rowStyleClass = this.rowStyleClass ? this.rowStyleClass : '';
        return `${row.cssClass} ${this.rowStyleClass}`;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    getFilename(row) {
        return row.getValue('name');
    }
    /**
     * @return {?}
     */
    getSortingKey() {
        if (this.data.getSorting()) {
            return this.data.getSorting().key;
        }
    }
    /**
     * @param {?} row
     * @param {?} value
     * @return {?}
     */
    selectRow(row, value) {
        if (row) {
            row.isSelected = value;
            /** @type {?} */
            const idx = this.selection.indexOf(row);
            if (value) {
                if (idx < 0) {
                    this.selection.push(row);
                }
            }
            else {
                if (idx > -1) {
                    this.selection.splice(idx, 1);
                }
            }
        }
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    getCellTooltip(row, col) {
        if (row && col && col.formatTooltip) {
            /** @type {?} */
            const result = col.formatTooltip(row, col);
            if (result) {
                return result;
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    getSortableColumns() {
        return this.data.getColumns().filter(column => {
            return column.sortable === true;
        });
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.data.getRows().length === 0;
    }
    /**
     * @return {?}
     */
    isHeaderVisible() {
        return this.showHeader && !this.loading && !this.isEmpty();
    }
    /**
     * @param {?} name
     * @param {?} row
     * @return {?}
     */
    emitRowSelectionEvent(name, row) {
        /** @type {?} */
        const domEvent = new CustomEvent(name, {
            detail: {
                row: row,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    /**
     * @param {?} key
     * @param {?} direction
     * @return {?}
     */
    emitSortingChangedEvent(key, direction) {
        /** @type {?} */
        const domEvent = new CustomEvent('sorting-changed', {
            detail: {
                key,
                direction
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribeClickStream();
        this.subscriptions.forEach(s => s.unsubscribe());
        this.subscriptions = [];
        if (this.dataRowsChanged) {
            this.dataRowsChanged.unsubscribe();
            this.dataRowsChanged = null;
        }
    }
    /**
     * @return {?}
     */
    datatableLayoutFix() {
        /** @type {?} */
        const maxGalleryRows = 25;
        if (this.display === 'gallery') {
            for (let i = 0; i < maxGalleryRows; i++) {
                this.fakeRows.push('');
            }
        }
        else {
            this.fakeRows = [];
        }
    }
}
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-datatable',
                template: "<div\n    *ngIf=\"data\" class=\"full-width\"\n    [class.adf-data-table-card]=\"display === 'gallery'\"\n    [class.adf-data-table]=\"display === 'list'\"\n    [class.adf-data-table--empty]=\"isEmpty()\">\n    <div *ngIf=\"isHeaderVisible()\" class=\"adf-datatable-header\">\n        <div class=\"adf-datatable-row\" *ngIf=\"display === 'list'\">\n            <!-- Actions (left) -->\n            <div *ngIf=\"actions && actionsPosition === 'left'\" class=\"actions-column adf-datatable-table-cell-header\">\n                <span class=\"sr-only\">Actions</span>\n            </div>\n            <!-- Columns -->\n            <div *ngIf=\"multiselect\" class=\"adf-datatable-table-cell-header\">\n                <mat-checkbox [checked]=\"isSelectAllChecked\" (change)=\"onSelectAllClick($event)\"></mat-checkbox>\n            </div>\n            <div class=\"adf-data-table-cell--{{col.type || 'text'}} {{col.cssClass}} adf-datatable-table-cell-header\"\n                 *ngFor=\"let col of data.getColumns()\"\n                 [class.sortable]=\"col.sortable\"\n                 [attr.data-automation-id]=\"'auto_id_' + col.key\"\n                 [class.adf-data-table__header--sorted-asc]=\"isColumnSorted(col, 'asc')\"\n                 [class.adf-data-table__header--sorted-desc]=\"isColumnSorted(col, 'desc')\"\n                 (click)=\"onColumnHeaderClick(col)\"\n                 (keyup.enter)=\"onColumnHeaderClick(col)\"\n                 role=\"button\"\n                 tabindex=\"0\"\n                 title=\"{{ col.title | translate }}\">\n                <span *ngIf=\"col.srTitle\" class=\"sr-only\">{{ col.srTitle | translate }}</span>\n                <span *ngIf=\"col.title\">{{ col.title | translate}}</span>\n            </div>\n            <!-- Actions (right) -->\n            <div *ngIf=\"actions && actionsPosition === 'right'\" class=\"actions-column adf-datatable-table-cell-header\">\n                <span class=\"sr-only\">Actions</span>\n            </div>\n        </div>\n        <mat-form-field *ngIf=\"display === 'gallery'\">\n            <mat-select [value]=\"getSortingKey()\" [attr.data-automation-id]=\"'grid-view-sorting'\">\n                <mat-option *ngFor=\"let col of getSortableColumns()\"\n                            [value]=\"col.key\"\n                            [attr.data-automation-id]=\"'grid-view-sorting-'+col.title\"\n                            (click)=\"onColumnHeaderClick(col)\"\n                            (keyup.enter)=\"onColumnHeaderClick(col)\">\n                    {{ col.title | translate}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n\n    <div class=\"adf-datatable-body\">\n        <ng-container *ngIf=\"!loading && !noPermission\">\n            <div *ngFor=\"let row of data.getRows(); let idx = index\"\n                 class=\"adf-datatable-row\"\n                 role=\"button\"\n                 [class.is-selected]=\"row.isSelected\"\n                 [adf-upload]=\"allowDropFiles && rowAllowsDrop(row)\" [adf-upload-data]=\"row\"\n                 [ngStyle]=\"rowStyle\"\n                 [ngClass]=\"getRowStyle(row)\"\n                 (keyup)=\"onRowKeyUp(row, $event)\">\n                <!-- Actions (left) -->\n                <div *ngIf=\"actions && actionsPosition === 'left'\" class=\"adf-datatable-table-cell\">\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\"\n                            [title]=\"'ADF-DATATABLE.CONTENT-ACTIONS.TOOLTIP' | translate\"\n                            [attr.id]=\"'action_menu_left_' + idx\"\n                            [attr.data-automation-id]=\"'action_menu_' + idx\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let action of getRowActions(row)\"\n                                [attr.data-automation-id]=\"action.title\"\n                                [disabled]=\"action.disabled\"\n                                (click)=\"onExecuteRowAction(row, action)\">\n                            <mat-icon *ngIf=\"action.icon\">{{ action.icon }}</mat-icon>\n                            <span>{{ action.title | translate }}</span>\n                        </button>\n                    </mat-menu>\n                </div>\n\n                <div *ngIf=\"multiselect\" class=\"adf-datatable-table-cell adf-datatable-table-checkbox\">\n                    <mat-checkbox\n                        [checked]=\"row.isSelected\"\n                        (change)=\"onCheckboxChange(row, $event)\">\n                    </mat-checkbox>\n                </div>\n                <div *ngFor=\"let col of data.getColumns()\"\n                     class=\"adf-data-table-cell adf-datatable-table-cell adf-data-table-cell--{{col.type || 'text'}} {{col.cssClass}}\"\n                     [attr.title]=\"col.title | translate\"\n                     [attr.filename]=\"getFilename(row)\"\n                     tabindex=\"0\"\n                     (click)=\"onRowClick(row, $event)\"\n                     (keydown.enter)=\"onEnterKeyPressed(row, $event)\"\n                     [context-menu]=\"getContextMenuActions(row, col)\"\n                     [context-menu-enabled]=\"contextMenu\">\n                    <div *ngIf=\"!col.template\" class=\"cell-container\">\n                        <ng-container [ngSwitch]=\"col.type\">\n                            <div *ngSwitchCase=\"'image'\" class=\"cell-value\">\n                                <mat-icon *ngIf=\"isIconValue(row, col); else no_iconvalue\">{{ asIconValue(row, col) }}\n                                </mat-icon>\n                                <ng-template #no_iconvalue>\n                                    <mat-icon class=\"adf-datatable-selected\"\n                                              *ngIf=\"row.isSelected; else no_selected_row\" svgIcon=\"selected\">\n                                    </mat-icon>\n                                    <ng-template #no_selected_row>\n                                        <img\n                                            alt=\"{{ iconAltTextKey(data.getValue(row, col)) | translate }}\"\n                                            src=\"{{ data.getValue(row, col) }}\"\n                                            (error)=\"onImageLoadingError($event, row)\">\n                                    </ng-template>\n                                </ng-template>\n                            </div>\n                            <div *ngSwitchCase=\"'icon'\" class=\"cell-value\">\n                                <span class=\"sr-only\">{{ iconAltTextKey(data.getValue(row, col)) | translate }}</span>\n                                <mat-icon>{{ data.getValue(row, col) }}</mat-icon>\n                            </div>\n                            <div *ngSwitchCase=\"'date'\" class=\"cell-value\"\n                                 [attr.data-automation-id]=\"'date_' + (data.getValue(row, col) | date: 'medium') \">\n                                <adf-date-cell\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-date-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'location'\" class=\"cell-value\"\n                                 [attr.data-automation-id]=\"'location' + data.getValue(row, col)\">\n                                <adf-location-cell\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-location-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'fileSize'\" class=\"cell-value\"\n                                 [attr.data-automation-id]=\"'fileSize_' + data.getValue(row, col)\">\n                                <adf-filesize-cell\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-filesize-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'text'\" class=\"cell-value\"\n                                 [attr.data-automation-id]=\"'text_' + data.getValue(row, col)\">\n                                <adf-datatable-cell\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-datatable-cell>\n                            </div>\n                            <span *ngSwitchDefault class=\"cell-value\">\n                    <!-- empty cell for unknown column type -->\n                    </span>\n                        </ng-container>\n                    </div>\n                    <div *ngIf=\"col.template\" class=\"cell-container\">\n                        <ng-container\n                            [ngTemplateOutlet]=\"col.template\"\n                            [ngTemplateOutletContext]=\"{ $implicit: { data: data, row: row, col: col }, value: data.getValue(row, col) }\">\n                        </ng-container>\n                    </div>\n                </div>\n\n                <!-- Actions (right) -->\n                <div *ngIf=\"actions && actionsPosition === 'right'\"\n                     class=\"adf-datatable-table-cell alfresco-datatable__actions-cell\">\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\"\n                            [title]=\"'ADF-DATATABLE.CONTENT-ACTIONS.TOOLTIP' | translate\"\n                            [attr.id]=\"'action_menu_right_' + idx\"\n                            [attr.data-automation-id]=\"'action_menu_' + idx\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let action of getRowActions(row)\"\n                                [attr.data-automation-id]=\"action.title\"\n                                [disabled]=\"action.disabled\"\n                                (click)=\"onExecuteRowAction(row, action)\">\n                            <mat-icon *ngIf=\"action.icon\">{{ action.icon }}</mat-icon>\n                            <span>{{ action.title | translate }}</span>\n                        </button>\n                    </mat-menu>\n                </div>\n\n            </div>\n            <div *ngIf=\"isEmpty()\"\n                 [class.adf-datatable-row]=\"display === 'list'\"\n                 [class.adf-data-table-card-empty]=\"display === 'gallery'\">\n                <div class=\"adf-no-content-container adf-datatable-table-cell\">\n                    <ng-template *ngIf=\"noContentTemplate\"\n                                 ngFor [ngForOf]=\"[data]\"\n                                 [ngForTemplate]=\"noContentTemplate\">\n                    </ng-template>\n                    <ng-content select=\"adf-empty-list\"></ng-content>\n                </div>\n            </div>\n            <div *ngFor=\"let row of fakeRows\"\n                 class=\"adf-datatable-row adf-datatable-row-empty-card\">\n            </div>\n        </ng-container>\n        <div *ngIf=\"!loading && noPermission\"\n             [class.adf-datatable-row]=\"display === 'list'\"\n             [class.adf-data-table-card-permissions]=\"display === 'gallery'\"\n             class=\"adf-no-permission__row\">\n            <div class=\"adf-no-permission__cell adf-no-content-container adf-datatable-table-cell\">\n                <ng-template *ngIf=\"noPermissionTemplate\"\n                             ngFor [ngForOf]=\"[data]\"\n                             [ngForTemplate]=\"noPermissionTemplate\">\n                </ng-template>\n            </div>\n        </div>\n        <div *ngIf=\"loading\"\n             [class.adf-datatable-row]=\"display === 'list'\"\n             [class.adf-data-table-card-loading]=\"display === 'gallery'\">\n            <div class=\"adf-datatable-table-cell\">\n                <ng-template *ngIf=\"loadingTemplate\"\n                             ngFor [ngForOf]=\"[data]\"\n                             [ngForTemplate]=\"loadingTemplate\">\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
DataTableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers }
];
DataTableComponent.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    data: [{ type: Input }],
    display: [{ type: Input }],
    rows: [{ type: Input }],
    sorting: [{ type: Input }],
    columns: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    actions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    fallbackThumbnail: [{ type: Input }],
    contextMenu: [{ type: Input }],
    allowDropFiles: [{ type: Input }],
    rowStyle: [{ type: Input }],
    rowStyleClass: [{ type: Input }],
    showHeader: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowDblClick: [{ type: Output }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    loading: [{ type: Input }],
    noPermission: [{ type: Input }],
    rowMenuCacheEnabled: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DataTableComponent.prototype.columnList;
    /**
     * Data source for the table
     * @type {?}
     */
    DataTableComponent.prototype.data;
    /**
     * Selects the display mode of the table. Can be "list" or "gallery".
     * @type {?}
     */
    DataTableComponent.prototype.display;
    /**
     * The rows that the datatable will show.
     * @type {?}
     */
    DataTableComponent.prototype.rows;
    /**
     * Define the sort order of the datatable. Possible values are :
     * [`created`, `desc`], [`created`, `asc`], [`due`, `desc`], [`due`, `asc`]
     * @type {?}
     */
    DataTableComponent.prototype.sorting;
    /**
     * The columns that the datatable will show.
     * @type {?}
     */
    DataTableComponent.prototype.columns;
    /**
     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
     * @type {?}
     */
    DataTableComponent.prototype.selectionMode;
    /**
     * Toggles multiple row selection, which renders checkboxes at the beginning of each row.
     * @type {?}
     */
    DataTableComponent.prototype.multiselect;
    /**
     * Toggles the data actions column.
     * @type {?}
     */
    DataTableComponent.prototype.actions;
    /**
     * Position of the actions dropdown menu. Can be "left" or "right".
     * @type {?}
     */
    DataTableComponent.prototype.actionsPosition;
    /**
     * Fallback image for rows where the thumbnail is missing.
     * @type {?}
     */
    DataTableComponent.prototype.fallbackThumbnail;
    /**
     * Toggles custom context menu for the component.
     * @type {?}
     */
    DataTableComponent.prototype.contextMenu;
    /**
     * Toggles file drop support for rows (see
     * [Upload directive](upload.directive.md) for further details).
     * @type {?}
     */
    DataTableComponent.prototype.allowDropFiles;
    /**
     * The inline style to apply to every row. See
     * [NgStyle](https://angular.io/docs/ts/latest/api/common/index/NgStyle-directive.html)
     * docs for more details and usage examples.
     * @type {?}
     */
    DataTableComponent.prototype.rowStyle;
    /**
     * The CSS class to apply to every row.
     * @type {?}
     */
    DataTableComponent.prototype.rowStyleClass;
    /**
     * Toggles the header.
     * @type {?}
     */
    DataTableComponent.prototype.showHeader;
    /**
     * Emitted when the user clicks a row.
     * @type {?}
     */
    DataTableComponent.prototype.rowClick;
    /**
     * Emitted when the user double-clicks a row.
     * @type {?}
     */
    DataTableComponent.prototype.rowDblClick;
    /**
     * Emitted before the context menu is displayed for a row.
     * @type {?}
     */
    DataTableComponent.prototype.showRowContextMenu;
    /**
     * Emitted before the actions menu is displayed for a row.
     * @type {?}
     */
    DataTableComponent.prototype.showRowActionsMenu;
    /**
     * Emitted when the user executes a row action.
     * @type {?}
     */
    DataTableComponent.prototype.executeRowAction;
    /**
     * Flag that indicates if the datatable is in loading state and needs to show the
     * loading template (see the docs to learn how to configure a loading template).
     * @type {?}
     */
    DataTableComponent.prototype.loading;
    /**
     * Flag that indicates if the datatable should show the "no permission" template.
     * @type {?}
     */
    DataTableComponent.prototype.noPermission;
    /**
     * Should the items for the row actions menu be cached for reuse after they are loaded
     * the first time?
     * @type {?}
     */
    DataTableComponent.prototype.rowMenuCacheEnabled;
    /** @type {?} */
    DataTableComponent.prototype.noContentTemplate;
    /** @type {?} */
    DataTableComponent.prototype.noPermissionTemplate;
    /** @type {?} */
    DataTableComponent.prototype.loadingTemplate;
    /** @type {?} */
    DataTableComponent.prototype.isSelectAllChecked;
    /** @type {?} */
    DataTableComponent.prototype.selection;
    /**
     * This array of fake rows fix the flex layout for the gallery view
     * @type {?}
     */
    DataTableComponent.prototype.fakeRows;
    /** @type {?} */
    DataTableComponent.prototype.clickObserver;
    /** @type {?} */
    DataTableComponent.prototype.click$;
    /** @type {?} */
    DataTableComponent.prototype.differ;
    /** @type {?} */
    DataTableComponent.prototype.rowMenuCache;
    /** @type {?} */
    DataTableComponent.prototype.subscriptions;
    /** @type {?} */
    DataTableComponent.prototype.singleClickStreamSub;
    /** @type {?} */
    DataTableComponent.prototype.multiClickStreamSub;
    /** @type {?} */
    DataTableComponent.prototype.dataRowsChanged;
    /** @type {?} */
    DataTableComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,