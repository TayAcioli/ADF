/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * @record
 */
export function UpdateNotification() { }
/** @type {?} */
UpdateNotification.prototype.target;
/** @type {?} */
UpdateNotification.prototype.changed;
/**
 * @record
 */
export function ClickNotification() { }
/** @type {?} */
ClickNotification.prototype.target;
/**
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
export function transformKeyToObject(key, value) {
    /** @type {?} */
    const objectLevels = key.split('.').reverse();
    return objectLevels.reduce((previousValue, currentValue) => {
        return { [currentValue]: previousValue };
    }, value);
}
export class CardViewUpdateService {
    constructor() {
        this.itemUpdatedSource = new Subject();
        this.itemClickedSource = new Subject();
        this.itemUpdated$ = /** @type {?} */ (this.itemUpdatedSource.asObservable());
        this.itemClicked$ = /** @type {?} */ (this.itemClickedSource.asObservable());
    }
    /**
     * @param {?} property
     * @param {?} newValue
     * @return {?}
     */
    update(property, newValue) {
        this.itemUpdatedSource.next({
            target: property,
            changed: transformKeyToObject(property.key, newValue)
        });
    }
    /**
     * @param {?} property
     * @return {?}
     */
    clicked(property) {
        this.itemClickedSource.next({
            target: property
        });
    }
}
CardViewUpdateService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    CardViewUpdateService.prototype.itemUpdatedSource;
    /** @type {?} */
    CardViewUpdateService.prototype.itemClickedSource;
    /** @type {?} */
    CardViewUpdateService.prototype.itemUpdated$;
    /** @type {?} */
    CardViewUpdateService.prototype.itemClicked$;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L3NlcnZpY2VzL2NhcmQtdmlldy11cGRhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWTNDLE1BQU0sK0JBQStCLEdBQVcsRUFBRSxLQUFLOztJQUNuRCxNQUFNLFlBQVksR0FBYSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXhELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBSyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsRUFBRTtRQUMzRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxhQUFhLEVBQUMsQ0FBQztLQUMzQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2I7QUFHRCxNQUFNOztpQ0FHMEIsSUFBSSxPQUFPLEVBQXNCO2lDQUNqQyxJQUFJLE9BQU8sRUFBcUI7OENBR0wsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRTs4Q0FDdEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRTs7Ozs7OztJQUUzRixNQUFNLENBQUMsUUFBK0IsRUFBRSxRQUFhO1FBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFDeEIsTUFBTSxFQUFFLFFBQVE7WUFDaEIsT0FBTyxFQUFFLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDO1NBQ3hELENBQUMsQ0FBQztLQUNOOzs7OztJQUVELE9BQU8sQ0FBQyxRQUErQjtRQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1lBQ3hCLE1BQU0sRUFBRSxRQUFRO1NBQ25CLENBQUMsQ0FBQztLQUNOOzs7WUF0QkosVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZU5vdGlmaWNhdGlvbiB7XG4gICAgdGFyZ2V0OiBhbnk7XG4gICAgY2hhbmdlZDogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrTm90aWZpY2F0aW9uIHtcbiAgICB0YXJnZXQ6IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUtleVRvT2JqZWN0KGtleTogc3RyaW5nLCB2YWx1ZSk6IE9iamVjdCB7XG4gICAgY29uc3Qgb2JqZWN0TGV2ZWxzOiBzdHJpbmdbXSA9IGtleS5zcGxpdCgnLicpLnJldmVyc2UoKTtcblxuICAgIHJldHVybiBvYmplY3RMZXZlbHMucmVkdWNlPHt9PigocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB7IFtjdXJyZW50VmFsdWVdOiBwcmV2aW91c1ZhbHVlfTtcbiAgICB9LCB2YWx1ZSk7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXJkVmlld1VwZGF0ZVNlcnZpY2Uge1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBzb3VyY2VzXG4gICAgcHJpdmF0ZSBpdGVtVXBkYXRlZFNvdXJjZSA9IG5ldyBTdWJqZWN0PFVwZGF0ZU5vdGlmaWNhdGlvbj4oKTtcbiAgICBwcml2YXRlIGl0ZW1DbGlja2VkU291cmNlID0gbmV3IFN1YmplY3Q8Q2xpY2tOb3RpZmljYXRpb24+KCk7XG5cbiAgICAvLyBPYnNlcnZhYmxlIHN0cmVhbXNcbiAgICBwdWJsaWMgaXRlbVVwZGF0ZWQkID0gPE9ic2VydmFibGU8VXBkYXRlTm90aWZpY2F0aW9uPj4gdGhpcy5pdGVtVXBkYXRlZFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgICBwdWJsaWMgaXRlbUNsaWNrZWQkID0gPE9ic2VydmFibGU8Q2xpY2tOb3RpZmljYXRpb24+PiB0aGlzLml0ZW1DbGlja2VkU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgdXBkYXRlKHByb3BlcnR5OiBDYXJkVmlld0Jhc2VJdGVtTW9kZWwsIG5ld1ZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5pdGVtVXBkYXRlZFNvdXJjZS5uZXh0KHtcbiAgICAgICAgICAgIHRhcmdldDogcHJvcGVydHksXG4gICAgICAgICAgICBjaGFuZ2VkOiB0cmFuc2Zvcm1LZXlUb09iamVjdChwcm9wZXJ0eS5rZXksIG5ld1ZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjbGlja2VkKHByb3BlcnR5OiBDYXJkVmlld0Jhc2VJdGVtTW9kZWwpIHtcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2tlZFNvdXJjZS5uZXh0KHtcbiAgICAgICAgICAgIHRhcmdldDogcHJvcGVydHlcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19