/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material';
import { TranslationService } from './translation.service';
export class NotificationService {
    /**
     * @param {?} snackBar
     * @param {?} translationService
     */
    constructor(snackBar, translationService) {
        this.snackBar = snackBar;
        this.translationService = translationService;
    }
    /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    openSnackMessage(message, config = NotificationService.DEFAULT_DURATION_MESSAGE) {
        /** @type {?} */
        const translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, null, config);
    }
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    openSnackMessageAction(message, action, config = NotificationService.DEFAULT_DURATION_MESSAGE) {
        /** @type {?} */
        const translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, action, config);
    }
}
NotificationService.DEFAULT_DURATION_MESSAGE = 5000;
NotificationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotificationService.ctorParameters = () => [
    { type: MatSnackBar },
    { type: TranslationService }
];
if (false) {
    /** @type {?} */
    NotificationService.DEFAULT_DURATION_MESSAGE;
    /** @type {?} */
    NotificationService.prototype.snackBar;
    /** @type {?} */
    NotificationService.prototype.translationService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQXFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbkYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHM0QsTUFBTTs7Ozs7SUFJRixZQUFvQixRQUFxQixFQUNyQjtRQURBLGFBQVEsR0FBUixRQUFRLENBQWE7UUFDckIsdUJBQWtCLEdBQWxCLGtCQUFrQjtLQUNyQzs7Ozs7OztJQVFELGdCQUFnQixDQUFDLE9BQWUsRUFBRSxTQUFxQyxtQkFBbUIsQ0FBQyx3QkFBd0I7O1FBRS9HLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLEdBQUc7Z0JBQ0wsUUFBUSxFQUFFLE1BQU07YUFDbkIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDOUQ7Ozs7Ozs7O0lBU0Qsc0JBQXNCLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxTQUFxQyxtQkFBbUIsQ0FBQyx3QkFBd0I7O1FBRXJJLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLEdBQUc7Z0JBQ0wsUUFBUSxFQUFFLE1BQU07YUFDbkIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDaEU7OytDQTNDeUMsSUFBSTs7WUFIakQsVUFBVTs7OztZQUhGLFdBQVc7WUFDWCxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTbmFja0JhciwgTWF0U25hY2tCYXJSZWYsIE1hdFNuYWNrQmFyQ29uZmlnIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2Uge1xuXG4gICAgc3RhdGljIERFRkFVTFRfRFVSQVRJT05fTUVTU0FHRTogbnVtYmVyID0gNTAwMDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc25hY2tCYXI6IE1hdFNuYWNrQmFyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIFNuYWNrQmFyIG5vdGlmaWNhdGlvbiB0byBzaG93IGEgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSAob3IgcmVzb3VyY2Uga2V5KSB0byBzaG93LlxuICAgICAqIEBwYXJhbSBjb25maWcgVGltZSBiZWZvcmUgbm90aWZpY2F0aW9uIGRpc2FwcGVhcnMgYWZ0ZXIgYmVpbmcgc2hvd24gb3IgTWF0U25hY2tCYXJDb25maWcgb2JqZWN0XG4gICAgICogQHJldHVybnMgSW5mb3JtYXRpb24vY29udHJvbCBvYmplY3QgZm9yIHRoZSBTbmFja0JhclxuICAgICAqL1xuICAgIG9wZW5TbmFja01lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCBjb25maWc6IG51bWJlciB8IE1hdFNuYWNrQmFyQ29uZmlnID0gTm90aWZpY2F0aW9uU2VydmljZS5ERUZBVUxUX0RVUkFUSU9OX01FU1NBR0UpOiBNYXRTbmFja0JhclJlZjxhbnk+IHtcblxuICAgICAgICBjb25zdCB0cmFuc2xhdGVkTWVzc2FnZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQobWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGNvbmZpZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLm9wZW4odHJhbnNsYXRlZE1lc3NhZ2UsIG51bGwsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBTbmFja0JhciBub3RpZmljYXRpb24gd2l0aCBhIG1lc3NhZ2UgYW5kIGEgcmVzcG9uc2UgYnV0dG9uLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIChvciByZXNvdXJjZSBrZXkpIHRvIHNob3cuXG4gICAgICogQHBhcmFtIGFjdGlvbiBDYXB0aW9uIGZvciB0aGUgcmVzcG9uc2UgYnV0dG9uXG4gICAgICogQHBhcmFtIGNvbmZpZyBUaW1lIGJlZm9yZSBub3RpZmljYXRpb24gZGlzYXBwZWFycyBhZnRlciBiZWluZyBzaG93biBvciBNYXRTbmFja0JhckNvbmZpZyBvYmplY3RcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbi9jb250cm9sIG9iamVjdCBmb3IgdGhlIFNuYWNrQmFyXG4gICAgICovXG4gICAgb3BlblNuYWNrTWVzc2FnZUFjdGlvbihtZXNzYWdlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nLCBjb25maWc6IG51bWJlciB8IE1hdFNuYWNrQmFyQ29uZmlnID0gTm90aWZpY2F0aW9uU2VydmljZS5ERUZBVUxUX0RVUkFUSU9OX01FU1NBR0UpOiBNYXRTbmFja0JhclJlZjxhbnk+IHtcblxuICAgICAgICBjb25zdCB0cmFuc2xhdGVkTWVzc2FnZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQobWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGNvbmZpZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLm9wZW4odHJhbnNsYXRlZE1lc3NhZ2UsIGFjdGlvbiwgY29uZmlnKTtcbiAgICB9XG59XG4iXX0=