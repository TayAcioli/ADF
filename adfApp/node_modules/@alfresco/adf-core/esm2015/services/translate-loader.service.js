/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, throwError, of } from 'rxjs';
import { ComponentTranslationModel } from '../models/component.model';
import { ObjectUtils } from '../utils/object-utils';
import { map, catchError, retry } from 'rxjs/operators';
export class TranslateLoaderService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.prefix = 'i18n';
        this.suffix = '.json';
        this.providers = [];
        this.queue = [];
    }
    /**
     * @param {?} name
     * @param {?} path
     * @return {?}
     */
    registerProvider(name, path) {
        /** @type {?} */
        let registered = this.providers.find(provider => provider.name === name);
        if (registered) {
            registered.path = path;
        }
        else {
            this.providers.push(new ComponentTranslationModel({ name: name, path: path }));
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    providerRegistered(name) {
        return this.providers.find(x => x.name === name) ? true : false;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getComponentToFetch(lang) {
        /** @type {?} */
        const observableBatch = [];
        if (!this.queue[lang]) {
            this.queue[lang] = [];
        }
        this.providers.forEach((component) => {
            if (!this.isComponentInQueue(lang, component.name)) {
                this.queue[lang].push(component.name);
                /** @type {?} */
                const translationUrl = `${component.path}/${this.prefix}/${lang}${this.suffix}?v=${Date.now()}`;
                observableBatch.push(this.http.get(translationUrl).pipe(map((res) => {
                    component.json[lang] = res;
                }), retry(3), catchError(() => throwError(`Failed to load ${translationUrl}`))));
            }
        });
        return observableBatch;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    init(lang) {
        if (this.queue[lang] === undefined) {
            this.queue[lang] = [];
        }
    }
    /**
     * @param {?} lang
     * @param {?} name
     * @return {?}
     */
    isComponentInQueue(lang, name) {
        return (this.queue[lang] || []).find(x => x === name) ? true : false;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getFullTranslationJSON(lang) {
        /** @type {?} */
        let result = {};
        this.providers
            .slice(0)
            .sort((a, b) => {
            if (a.name === 'app') {
                return 1;
            }
            if (b.name === 'app') {
                return -1;
            }
            return a.name.localeCompare(b.name);
        })
            .forEach(model => {
            if (model.json && model.json[lang]) {
                result = ObjectUtils.merge(result, model.json[lang]);
            }
        });
        return result;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getTranslation(lang) {
        /** @type {?} */
        let hasFailures = false;
        /** @type {?} */
        const batch = [
            ...this.getComponentToFetch(lang).map(observable => {
                return observable.pipe(catchError(error => {
                    console.warn(error);
                    hasFailures = true;
                    return of(error);
                }));
            })
        ];
        return Observable.create(observer => {
            if (batch.length > 0) {
                forkJoin(batch).subscribe(() => {
                    /** @type {?} */
                    let fullTranslation = this.getFullTranslationJSON(lang);
                    if (fullTranslation) {
                        observer.next(fullTranslation);
                    }
                    if (hasFailures) {
                        observer.error('Failed to load some resources');
                    }
                    else {
                        observer.complete();
                    }
                }, (err) => {
                    observer.error('Failed to load some resources');
                });
            }
            else {
                /** @type {?} */
                let fullTranslation = this.getFullTranslationJSON(lang);
                if (fullTranslation) {
                    observer.next(fullTranslation);
                    observer.complete();
                }
            }
        });
    }
}
TranslateLoaderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TranslateLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    TranslateLoaderService.prototype.prefix;
    /** @type {?} */
    TranslateLoaderService.prototype.suffix;
    /** @type {?} */
    TranslateLoaderService.prototype.providers;
    /** @type {?} */
    TranslateLoaderService.prototype.queue;
    /** @type {?} */
    TranslateLoaderService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,