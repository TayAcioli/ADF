/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable, Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { map, catchError, tap } from 'rxjs/operators';
import { HttpHeaders } from '@angular/common/http';
/** @type {?} */
const REMEMBER_ME_COOKIE_KEY = 'ALFRESCO_REMEMBER_ME';
/** @type {?} */
const REMEMBER_ME_UNTIL = 1000 * 60 * 60 * 24 * 30;
export class AuthenticationService {
    /**
     * @param {?} appConfig
     * @param {?} alfrescoApi
     * @param {?} cookie
     * @param {?} logService
     */
    constructor(appConfig, alfrescoApi, cookie, logService) {
        this.appConfig = appConfig;
        this.alfrescoApi = alfrescoApi;
        this.cookie = cookie;
        this.logService = logService;
        this.redirectUrl = null;
        this.bearerExcludedUrls = ['auth/realms', 'resources/', 'assets/'];
        this.onLogin = new Subject();
        this.onLogout = new Subject();
    }
    /**
     * Checks if the user logged in.
     * @return {?} True if logged in, false otherwise
     */
    isLoggedIn() {
        if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
            return false;
        }
        return this.alfrescoApi.getInstance().isLoggedIn();
    }
    /**
     * Does the provider support OAuth?
     * @return {?} True if supported, false otherwise
     */
    isOauth() {
        return this.alfrescoApi.getInstance().isOauthConfiguration();
    }
    /**
     * Does the provider support ECM?
     * @return {?} True if supported, false otherwise
     */
    isECMProvider() {
        return this.alfrescoApi.getInstance().isEcmConfiguration();
    }
    /**
     * Does the provider support BPM?
     * @return {?} True if supported, false otherwise
     */
    isBPMProvider() {
        return this.alfrescoApi.getInstance().isBpmConfiguration();
    }
    /**
     * Does the provider support both ECM and BPM?
     * @return {?} True if both are supported, false otherwise
     */
    isALLProvider() {
        return this.alfrescoApi.getInstance().isEcmBpmConfiguration();
    }
    /**
     * Logs the user in.
     * @param {?} username Username for the login
     * @param {?} password Password for the login
     * @param {?=} rememberMe Stores the user's login details if true
     * @return {?} Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    login(username, password, rememberMe = false) {
        return from(this.alfrescoApi.getInstance().login(username, password))
            .pipe(map((response) => {
            this.saveRememberMeCookie(rememberMe);
            this.onLogin.next(response);
            return {
                type: this.appConfig.get(AppConfigValues.PROVIDERS),
                ticket: response
            };
        }), catchError(err => this.handleError(err)));
    }
    /**
     * Logs the user in with SSO
     * @return {?}
     */
    ssoImplicitLogin() {
        this.alfrescoApi.getInstance().implicitLogin();
    }
    /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @param {?} rememberMe Enables a long-life cookie
     * @return {?}
     */
    saveRememberMeCookie(rememberMe) {
        /** @type {?} */
        let expiration = null;
        if (rememberMe) {
            expiration = new Date();
            /** @type {?} */
            const time = expiration.getTime();
            /** @type {?} */
            const expireTime = time + REMEMBER_ME_UNTIL;
            expiration.setTime(expireTime);
        }
        this.cookie.setItem(REMEMBER_ME_COOKIE_KEY, '1', expiration, null);
    }
    /**
     * Checks whether the "remember me" cookie was set or not.
     * @return {?} True if set, false otherwise
     */
    isRememberMeSet() {
        return (this.cookie.getItem(REMEMBER_ME_COOKIE_KEY) === null) ? false : true;
    }
    /**
     * Logs the user out.
     * @return {?} Response event called when logout is complete
     */
    logout() {
        return from(this.callApiLogout())
            .pipe(tap(response => {
            this.onLogout.next(response);
            return response;
        }), catchError(err => this.handleError(err)));
    }
    /**
     * @return {?}
     */
    callApiLogout() {
        if (this.alfrescoApi.getInstance()) {
            return this.alfrescoApi.getInstance().logout();
        }
    }
    /**
     * Gets the ECM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    getTicketEcm() {
        return this.alfrescoApi.getInstance().getTicketEcm();
    }
    /**
     * Gets the BPM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    getTicketBpm() {
        return this.alfrescoApi.getInstance().getTicketBpm();
    }
    /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @return {?} The ticket or `null` if none was found
     */
    getTicketEcmBase64() {
        /** @type {?} */
        let ticket = this.alfrescoApi.getInstance().getTicketEcm();
        if (ticket) {
            return 'Basic ' + btoa(ticket);
        }
        return null;
    }
    /**
     * Checks if the user is logged in on an ECM provider.
     * @return {?} True if logged in, false otherwise
     */
    isEcmLoggedIn() {
        if (this.isECMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isEcmLoggedIn();
        }
        return false;
    }
    /**
     * Checks if the user is logged in on a BPM provider.
     * @return {?} True if logged in, false otherwise
     */
    isBpmLoggedIn() {
        if (this.isBPMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isBpmLoggedIn();
        }
        return false;
    }
    /**
     * Gets the ECM username.
     * @return {?} The ECM username
     */
    getEcmUsername() {
        return this.alfrescoApi.getInstance().getEcmUsername();
    }
    /**
     * Gets the BPM username
     * @return {?} The BPM username
     */
    getBpmUsername() {
        return this.alfrescoApi.getInstance().getBpmUsername();
    }
    /**
     * Sets the URL to redirect to after login.
     * @param {?} url URL to redirect to
     * @return {?}
     */
    setRedirect(url) {
        this.redirectUrl = url;
    }
    /**
     * Gets the URL to redirect to after login.
     * @param {?} provider Service provider. Can be "ECM", "BPM" or "ALL".
     * @return {?} The redirect URL
     */
    getRedirect(provider) {
        return this.hasValidRedirection(provider) ? this.redirectUrl.url : null;
    }
    /**
     * Gets information about the user currently logged into APS.
     * @return {?} User information
     */
    getBpmLoggedUser() {
        return from(this.alfrescoApi.getInstance().activiti.profileApi.getProfile());
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    hasValidRedirection(provider) {
        return this.redirectUrl && (this.redirectUrl.provider === provider || this.hasSelectedProviderAll(provider));
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    hasSelectedProviderAll(provider) {
        return this.redirectUrl && (this.redirectUrl.provider === 'ALL' || provider === 'ALL');
    }
    /**
     * Prints an error message in the console browser
     * @param {?} error Error message
     * @return {?} Object representing the error message
     */
    handleError(error) {
        this.logService.error('Error when logging in', error);
        return throwError(error || 'Server error');
    }
    /**
     * @return {?}
     */
    getBearerExcludedUrls() {
        return this.bearerExcludedUrls;
    }
    /**
     * @return {?}
     */
    getToken() {
        return localStorage.getItem('access_token');
    }
    /**
     * @param {?=} headersArg
     * @return {?}
     */
    addTokenToHeader(headersArg) {
        return Observable.create((observer) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let headers = headersArg;
            if (!headers) {
                headers = new HttpHeaders();
            }
            try {
                /** @type {?} */
                const token = this.getToken();
                headers = headers.set('Authorization', 'bearer ' + token);
                observer.next(headers);
                observer.complete();
            }
            catch (error) {
                observer.error(error);
            }
        }));
    }
}
AuthenticationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthenticationService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: CookieService },
    { type: LogService }
];
if (false) {
    /** @type {?} */
    AuthenticationService.prototype.redirectUrl;
    /** @type {?} */
    AuthenticationService.prototype.bearerExcludedUrls;
    /** @type {?} */
    AuthenticationService.prototype.onLogin;
    /** @type {?} */
    AuthenticationService.prototype.onLogout;
    /** @type {?} */
    AuthenticationService.prototype.appConfig;
    /** @type {?} */
    AuthenticationService.prototype.alfrescoApi;
    /** @type {?} */
    AuthenticationService.prototype.cookie;
    /** @type {?} */
    AuthenticationService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,