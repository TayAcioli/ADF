/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject, from, throwError } from 'rxjs';
import { PermissionsEnum } from '../models/permissions.enum';
import { AlfrescoApiService } from './alfresco-api.service';
import { AuthenticationService } from './authentication.service';
import { LogService } from './log.service';
import { catchError, tap } from 'rxjs/operators';
export class ContentService {
    /**
     * @param {?} authService
     * @param {?} apiService
     * @param {?} logService
     * @param {?} sanitizer
     */
    constructor(authService, apiService, logService, sanitizer) {
        this.authService = authService;
        this.apiService = apiService;
        this.logService = logService;
        this.sanitizer = sanitizer;
        this.folderCreated = new Subject();
        this.folderCreate = new Subject();
        this.folderEdit = new Subject();
        this.saveData = (function () {
            /** @type {?} */
            let a = document.createElement('a');
            document.body.appendChild(a);
            a.style.display = 'none';
            return function (data, format, fileName) {
                /** @type {?} */
                let blob = null;
                if (format === 'blob' || format === 'data') {
                    blob = new Blob([data], { type: 'octet/stream' });
                }
                if (format === 'object' || format === 'json') {
                    /** @type {?} */
                    let json = JSON.stringify(data);
                    blob = new Blob([json], { type: 'octet/stream' });
                }
                if (blob) {
                    if (typeof window.navigator !== 'undefined' && window.navigator.msSaveOrOpenBlob) {
                        navigator.msSaveOrOpenBlob(blob, fileName);
                    }
                    else {
                        /** @type {?} */
                        let url = window.URL.createObjectURL(blob);
                        a.href = url;
                        a.download = fileName;
                        a.click();
                        window.URL.revokeObjectURL(url);
                    }
                }
            };
        }());
    }
    /**
     * Invokes content download for a Blob with a file name.
     * @param {?} blob Content to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    downloadBlob(blob, fileName) {
        this.saveData(blob, 'blob', fileName);
    }
    /**
     * Invokes content download for a data array with a file name.
     * @param {?} data Data to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    downloadData(data, fileName) {
        this.saveData(data, 'data', fileName);
    }
    /**
     * Invokes content download for a JSON object with a file name.
     * @param {?} json JSON object to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    downloadJSON(json, fileName) {
        this.saveData(json, 'json', fileName);
    }
    /**
     * Creates a trusted object URL from the Blob.
     * WARNING: calling this method with untrusted user data exposes your application to XSS security risks!
     * @param {?} blob Data to wrap into object URL
     * @return {?} URL string
     */
    createTrustedUrl(blob) {
        /** @type {?} */
        let url = window.URL.createObjectURL(blob);
        return /** @type {?} */ (this.sanitizer.bypassSecurityTrustUrl(url));
    }
    /**
     * @return {?}
     */
    get contentApi() {
        return this.apiService.getInstance().content;
    }
    /**
     * Gets a thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @param {?=} ticket Custom ticket to use for authentication
     * @return {?} URL string
     */
    getDocumentThumbnailUrl(node, attachment, ticket) {
        if (node && node.entry) {
            node = node.entry.id;
        }
        return this.contentApi.getDocumentThumbnailUrl(node, attachment, ticket);
    }
    /**
     * Gets a content URL for the given node.
     * @param {?} node Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @param {?=} ticket Custom ticket to use for authentication
     * @return {?} URL string
     */
    getContentUrl(node, attachment, ticket) {
        if (node && node.entry) {
            node = node.entry.id;
        }
        return this.contentApi.getContentUrl(node, attachment, ticket);
    }
    /**
     * Gets content for the given node.
     * @param {?} nodeId ID of the target node
     * @return {?} Content data
     */
    getNodeContent(nodeId) {
        return from(this.apiService.getInstance().core.nodesApi.getFileContent(nodeId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Creates a folder.
     * @param {?} relativePath Location to create the folder
     * @param {?} name Folder name
     * @param {?=} parentId Node ID of parent folder
     * @return {?} Information about the new folder
     */
    createFolder(relativePath, name, parentId) {
        return from(this.apiService.getInstance().nodes.createFolder(name, relativePath, parentId))
            .pipe(tap(data => {
            this.folderCreated.next(/** @type {?} */ ({
                relativePath: relativePath,
                name: name,
                parentId: parentId,
                node: data
            }));
        }), catchError(err => this.handleError(err)));
    }
    /**
     * Gets a Node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of the folder
     */
    getNode(nodeId, opts) {
        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts));
    }
    /**
     * Checks if the user has permissions on that node
     * @param {?} node Node to check allowableOperations
     * @param {?} permission Create, delete, update, updatePermissions, !create, !delete, !update, !updatePermissions
     * @return {?} True if the user has the required permissions, false otherwise
     */
    hasPermission(node, permission) {
        /** @type {?} */
        let hasPermission = false;
        if (this.hasAllowableOperations(node)) {
            if (permission && permission.startsWith('!')) {
                hasPermission = node.allowableOperations.find(currentPermission => currentPermission === permission.replace('!', '')) ? false : true;
            }
            else {
                hasPermission = node.allowableOperations.find(currentPermission => currentPermission === permission) ? true : false;
            }
        }
        else {
            if (permission && permission.startsWith('!')) {
                hasPermission = true;
            }
        }
        if (permission === PermissionsEnum.COPY) {
            hasPermission = true;
        }
        if (permission === PermissionsEnum.LOCK) {
            hasPermission = node.isFile;
            if (node.isLocked && this.hasAllowableOperations(node)) {
                hasPermission = !!~node.allowableOperations.indexOf('updatePermissions');
            }
        }
        return hasPermission;
    }
    /**
     * Checks if the node has the properties allowableOperations
     * @param {?} node Node to check allowableOperations
     * @return {?} True if the node has the property, false otherwise
     */
    hasAllowableOperations(node) {
        return node && node.allowableOperations ? true : false;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ContentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ContentService.ctorParameters = () => [
    { type: AuthenticationService },
    { type: AlfrescoApiService },
    { type: LogService },
    { type: DomSanitizer }
];
if (false) {
    /** @type {?} */
    ContentService.prototype.saveData;
    /** @type {?} */
    ContentService.prototype.folderCreated;
    /** @type {?} */
    ContentService.prototype.folderCreate;
    /** @type {?} */
    ContentService.prototype.folderEdit;
    /** @type {?} */
    ContentService.prototype.authService;
    /** @type {?} */
    ContentService.prototype.apiService;
    /** @type {?} */
    ContentService.prototype.logService;
    /** @type {?} */
    ContentService.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,