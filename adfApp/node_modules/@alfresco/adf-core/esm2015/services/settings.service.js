/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { LogService } from './log.service';
import { StorageService } from './storage.service';
export class SettingsService {
    /**
     * @param {?} appConfig
     * @param {?} logService
     * @param {?} storage
     */
    constructor(appConfig, logService, storage) {
        this.appConfig = appConfig;
        this.logService = logService;
        this.storage = storage;
    }
    /**
     * @deprecated in 1.6.0
     * @return {?}
     */
    get ecmHost() {
        this.logService.log('SettingsService.ecmHost is deprecated. Use AppConfigService instead.');
        return this.appConfig.get(AppConfigValues.ECMHOST);
    }
    /**
     * @deprecated in 1.7.0
     * @param {?} csrfDisabled
     * @return {?}
     */
    set csrfDisabled(csrfDisabled) {
        this.logService.log(`SettingsService.csrfDisabled is deprecated. Use UserPreferencesService.disableCSRF instead.`);
        if (csrfDisabled !== null && csrfDisabled !== undefined) {
            this.storage.setItem(AppConfigValues.DISABLECSRF, csrfDisabled.toString());
        }
    }
    /**
     * @deprecated in 1.6.0
     * @param {?} ecmHostUrl
     * @return {?}
     */
    set ecmHost(ecmHostUrl) {
        this.logService.log('SettingsService.ecmHost is deprecated. Use AppConfigService instead.');
    }
    /**
     * @deprecated in 1.6.0
     * @return {?}
     */
    get bpmHost() {
        this.logService.log('SettingsService.bpmHost is deprecated. Use AppConfigService instead.');
        return this.appConfig.get(AppConfigValues.BPMHOST);
    }
    /**
     * @deprecated in 1.6.0
     * @param {?} bpmHostUrl
     * @return {?}
     */
    set bpmHost(bpmHostUrl) {
        this.logService.log('SettingsService.bpmHost is deprecated. Use AppConfigService instead.');
    }
    /**
     * @deprecated in 1.6.0
     * @return {?}
     */
    getBPMApiBaseUrl() {
        this.logService.log('SettingsService.getBPMApiBaseUrl is deprecated.');
        return this.bpmHost + '/activiti-app';
    }
    /**
     * @deprecated in 1.7.0
     * @return {?}
     */
    getProviders() {
        this.logService.log(`SettingsService.getProviders is deprecated. Use UserPreferencesService.authType instead.`);
        return this.storage.getItem(AppConfigValues.PROVIDERS) || this.appConfig.get(AppConfigValues.PROVIDERS);
    }
    /**
     * @deprecated in 1.7.0
     * @param {?} providers
     * @return {?}
     */
    setProviders(providers) {
        this.logService.log(`SettingsService.setProviders is deprecated. Use the app-config.json`);
        if (providers) {
            this.storage.setItem(AppConfigValues.PROVIDERS, providers);
        }
    }
}
SettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SettingsService.ctorParameters = () => [
    { type: AppConfigService },
    { type: LogService },
    { type: StorageService }
];
if (false) {
    /** @type {?} */
    SettingsService.prototype.appConfig;
    /** @type {?} */
    SettingsService.prototype.logService;
    /** @type {?} */
    SettingsService.prototype.storage;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NldHRpbmdzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbkQsTUFBTTs7Ozs7O0lBRUYsWUFBb0IsU0FBMkIsRUFDM0IsWUFDQTtRQUZBLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGVBQVUsR0FBVixVQUFVO1FBQ1YsWUFBTyxHQUFQLE9BQU87S0FDMUI7Ozs7O1FBR1UsT0FBTztRQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7UUFDNUYsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7Ozs7UUFJcEQsWUFBWSxDQUFDLFlBQXFCO1FBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLDZGQUE2RixDQUFDLENBQUM7UUFDbkgsSUFBSSxZQUFZLEtBQUssSUFBSSxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM5RTs7Ozs7OztRQUlNLE9BQU8sQ0FBQyxVQUFrQjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDOzs7Ozs7UUFJckYsT0FBTztRQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7UUFDNUYsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7Ozs7UUFJcEQsT0FBTyxDQUFDLFVBQWtCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7Ozs7OztJQUl6RixnQkFBZ0I7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsaURBQWlELENBQUMsQ0FBQztRQUN2RSxPQUFPLElBQUksQ0FBQyxPQUFPLEdBQUcsZUFBZSxDQUFDOzs7Ozs7SUFJbkMsWUFBWTtRQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLDBGQUEwRixDQUFDLENBQUM7UUFDaEgsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQVMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7Ozs7O0lBSTdHLFlBQVksQ0FBQyxTQUFpQjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO1FBQzNGLElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM5RDs7OztZQXZEUixVQUFVOzs7O1lBSkYsZ0JBQWdCO1lBQ2hCLFVBQVU7WUFDVixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgQXBwQ29uZmlnVmFsdWVzIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4vbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgc3RvcmFnZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMS42LjAgKi9cbiAgICBwdWJsaWMgZ2V0IGVjbUhvc3QoKTogc3RyaW5nIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnU2V0dGluZ3NTZXJ2aWNlLmVjbUhvc3QgaXMgZGVwcmVjYXRlZC4gVXNlIEFwcENvbmZpZ1NlcnZpY2UgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5FQ01IT1NUKTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMS43LjAgKi9cbiAgICBwdWJsaWMgc2V0IGNzcmZEaXNhYmxlZChjc3JmRGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZyhgU2V0dGluZ3NTZXJ2aWNlLmNzcmZEaXNhYmxlZCBpcyBkZXByZWNhdGVkLiBVc2UgVXNlclByZWZlcmVuY2VzU2VydmljZS5kaXNhYmxlQ1NSRiBpbnN0ZWFkLmApO1xuICAgICAgICBpZiAoY3NyZkRpc2FibGVkICE9PSBudWxsICYmIGNzcmZEaXNhYmxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShBcHBDb25maWdWYWx1ZXMuRElTQUJMRUNTUkYsIGNzcmZEaXNhYmxlZC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjYuMCAqL1xuICAgIHB1YmxpYyBzZXQgZWNtSG9zdChlY21Ib3N0VXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnU2V0dGluZ3NTZXJ2aWNlLmVjbUhvc3QgaXMgZGVwcmVjYXRlZC4gVXNlIEFwcENvbmZpZ1NlcnZpY2UgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMS42LjAgKi9cbiAgICBwdWJsaWMgZ2V0IGJwbUhvc3QoKTogc3RyaW5nIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnU2V0dGluZ3NTZXJ2aWNlLmJwbUhvc3QgaXMgZGVwcmVjYXRlZC4gVXNlIEFwcENvbmZpZ1NlcnZpY2UgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5CUE1IT1NUKTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMS42LjAgKi9cbiAgICBwdWJsaWMgc2V0IGJwbUhvc3QoYnBtSG9zdFVybDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5sb2coJ1NldHRpbmdzU2VydmljZS5icG1Ib3N0IGlzIGRlcHJlY2F0ZWQuIFVzZSBBcHBDb25maWdTZXJ2aWNlIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgLyoqIEBkZXByZWNhdGVkIGluIDEuNi4wICovXG4gICAgcHVibGljIGdldEJQTUFwaUJhc2VVcmwoKTogc3RyaW5nIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnU2V0dGluZ3NTZXJ2aWNlLmdldEJQTUFwaUJhc2VVcmwgaXMgZGVwcmVjYXRlZC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnBtSG9zdCArICcvYWN0aXZpdGktYXBwJztcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMS43LjAgKi9cbiAgICBwdWJsaWMgZ2V0UHJvdmlkZXJzKCk6IHN0cmluZyB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5sb2coYFNldHRpbmdzU2VydmljZS5nZXRQcm92aWRlcnMgaXMgZGVwcmVjYXRlZC4gVXNlIFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UuYXV0aFR5cGUgaW5zdGVhZC5gKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRJdGVtKEFwcENvbmZpZ1ZhbHVlcy5QUk9WSURFUlMpIHx8IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5QUk9WSURFUlMpO1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjcuMCAqL1xuICAgIHB1YmxpYyBzZXRQcm92aWRlcnMocHJvdmlkZXJzOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZyhgU2V0dGluZ3NTZXJ2aWNlLnNldFByb3ZpZGVycyBpcyBkZXByZWNhdGVkLiBVc2UgdGhlIGFwcC1jb25maWcuanNvbmApO1xuICAgICAgICBpZiAocHJvdmlkZXJzKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShBcHBDb25maWdWYWx1ZXMuUFJPVklERVJTLCBwcm92aWRlcnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19