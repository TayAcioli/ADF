/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable, from, interval } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { concatMap, switchMap, takeWhile } from 'rxjs/operators';
/**
 * @deprecated
 * RenditionsService
 * (this service is deprecated in 2.2.0 and will be removed in future revisions)
 */
export class RenditionsService {
    /**
     * @param {?} apiService
     */
    constructor(apiService) {
        this.apiService = apiService;
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    isRenditionAvailable(nodeId, encoding) {
        return Observable.create((observer) => {
            this.getRendition(nodeId, encoding).subscribe((res) => {
                /** @type {?} */
                let isAvailable = true;
                if (res.entry.status.toString() === 'NOT_CREATED') {
                    isAvailable = false;
                }
                observer.next(isAvailable);
                observer.complete();
            }, () => {
                observer.next(false);
                observer.complete();
            });
        });
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    isConversionPossible(nodeId, encoding) {
        return Observable.create((observer) => {
            this.getRendition(nodeId, encoding).subscribe(() => {
                observer.next(true);
                observer.complete();
            }, () => {
                observer.next(false);
                observer.complete();
            });
        });
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    getRenditionUrl(nodeId, encoding) {
        return this.apiService.contentApi.getRenditionUrl(nodeId, encoding);
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    getRendition(nodeId, encoding) {
        return from(this.apiService.renditionsApi.getRendition(nodeId, encoding));
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @return {?}
     */
    getRenditionsListByNodeId(nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId));
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    createRendition(nodeId, encoding) {
        return from(this.apiService.renditionsApi.createRendition(nodeId, { id: encoding }));
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} pollingInterval
     * @param {?=} retries
     * @return {?}
     */
    convert(nodeId, encoding, pollingInterval = 1000, retries = 5) {
        return this.createRendition(nodeId, encoding)
            .pipe(concatMap(() => this.pollRendition(nodeId, encoding, pollingInterval, retries)));
    }
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} intervalSize
     * @param {?=} retries
     * @return {?}
     */
    pollRendition(nodeId, encoding, intervalSize = 1000, retries = 5) {
        /** @type {?} */
        let attempts = 0;
        return interval(intervalSize)
            .pipe(switchMap(() => this.getRendition(nodeId, encoding)), takeWhile((data) => {
            attempts += 1;
            if (attempts > retries) {
                return false;
            }
            return (data.entry.status.toString() !== 'CREATED');
        }));
    }
}
RenditionsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RenditionsService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
if (false) {
    /** @type {?} */
    RenditionsService.prototype.apiService;
}

//# sourceMappingURL=data:application/json;base64,