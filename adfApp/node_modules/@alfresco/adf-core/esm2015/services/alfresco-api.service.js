/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as alfrescoApi from 'alfresco-js-api';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { Subject } from 'rxjs';
export class AlfrescoApiService {
    /**
     * @param {?} appConfig
     * @param {?} storage
     */
    constructor(appConfig, storage) {
        this.appConfig = appConfig;
        this.storage = storage;
        /**
         * Publish/subscribe to events related to node updates.
         */
        this.nodeUpdated = new Subject();
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.alfrescoApi;
    }
    /**
     * @return {?}
     */
    get taskApi() {
        return this.getInstance().activiti.taskApi;
    }
    /**
     * @return {?}
     */
    get modelsApi() {
        return this.getInstance().activiti.modelsApi;
    }
    /**
     * @return {?}
     */
    get contentApi() {
        return this.getInstance().content;
    }
    /**
     * @return {?}
     */
    get nodesApi() {
        return this.getInstance().nodes;
    }
    /**
     * @return {?}
     */
    get renditionsApi() {
        return this.getInstance().core.renditionsApi;
    }
    /**
     * @return {?}
     */
    get sharedLinksApi() {
        return this.getInstance().core.sharedlinksApi;
    }
    /**
     * @return {?}
     */
    get sitesApi() {
        return this.getInstance().core.sitesApi;
    }
    /**
     * @return {?}
     */
    get favoritesApi() {
        return this.getInstance().core.favoritesApi;
    }
    /**
     * @return {?}
     */
    get peopleApi() {
        return this.getInstance().core.peopleApi;
    }
    /**
     * @return {?}
     */
    get searchApi() {
        return this.getInstance().search.searchApi;
    }
    /**
     * @return {?}
     */
    get versionsApi() {
        return this.getInstance().core.versionsApi;
    }
    /**
     * @return {?}
     */
    get classesApi() {
        return this.getInstance().core.classesApi;
    }
    /**
     * @return {?}
     */
    get groupsApi() {
        return this.getInstance().core.groupsApi;
    }
    /**
     * @return {?}
     */
    load() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.appConfig.load().then(() => {
                this.initAlfrescoApi();
            });
        });
    }
    /**
     * @return {?}
     */
    reset() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.initAlfrescoApi();
        });
    }
    /**
     * @return {?}
     */
    initAlfrescoApi() {
        /** @type {?} */
        let oauth = Object.assign({}, this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        if (oauth) {
            oauth.redirectUri = window.location.origin + (oauth.redirectUri || '/');
            oauth.redirectUriLogout = window.location.origin + (oauth.redirectUriLogout || '/');
        }
        /** @type {?} */
        const config = {
            provider: this.getProvider(),
            hostEcm: this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: this.appConfig.get(AppConfigValues.BPMHOST),
            authType: this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: this.getDisableCSRF(),
            oauth2: oauth
        };
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = /** @type {?} */ (new alfrescoApi(config));
        }
    }
    /**
     * @return {?}
     */
    getDisableCSRF() {
        if (this.storage.getItem(AppConfigValues.DISABLECSRF) === 'true') {
            return true;
        }
        else {
            return this.appConfig.get(AppConfigValues.DISABLECSRF);
        }
    }
    /**
     * @return {?}
     */
    getProvider() {
        return this.storage.getItem(AppConfigValues.PROVIDERS) || this.appConfig.get(AppConfigValues.PROVIDERS);
    }
}
AlfrescoApiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AlfrescoApiService.ctorParameters = () => [
    { type: AppConfigService },
    { type: StorageService }
];
if (false) {
    /**
     * Publish/subscribe to events related to node updates.
     * @type {?}
     */
    AlfrescoApiService.prototype.nodeUpdated;
    /** @type {?} */
    AlfrescoApiService.prototype.alfrescoApi;
    /** @type {?} */
    AlfrescoApiService.prototype.appConfig;
    /** @type {?} */
    AlfrescoApiService.prototype.storage;
}

//# sourceMappingURL=data:application/json;base64,