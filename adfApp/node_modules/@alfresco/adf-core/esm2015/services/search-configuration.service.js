/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
export class SearchConfigurationService {
    constructor() {
    }
    /**
     * Generates a QueryBody object with custom search parameters.
     * @param {?} searchTerm Term text to search for
     * @param {?} maxResults Maximum number of search results to show in a page
     * @param {?} skipCount The offset of the start of the page within the results list
     * @return {?} Query body defined by the parameters
     */
    generateQueryBody(searchTerm, maxResults, skipCount) {
        /** @type {?} */
        let defaultQueryBody = {
            query: {
                query: searchTerm ? `${searchTerm}* OR name:${searchTerm}*` : searchTerm
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder' OR TYPE:'cm:content'" },
                { query: 'NOT cm:creator:System' }
            ]
        };
        return defaultQueryBody;
    }
}
SearchConfigurationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SearchConfigurationService.ctorParameters = () => [];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NlYXJjaC1jb25maWd1cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQyxNQUFNO0lBRUY7S0FDQzs7Ozs7Ozs7SUFTTSxpQkFBaUIsQ0FBQyxVQUFrQixFQUFFLFVBQWtCLEVBQUUsU0FBaUI7O1FBQzlFLElBQUksZ0JBQWdCLEdBQWM7WUFDOUIsS0FBSyxFQUFFO2dCQUNILEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxhQUFhLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVO2FBQzNFO1lBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDO1lBQ3hDLE1BQU0sRUFBRTtnQkFDSixRQUFRLEVBQUUsVUFBVTtnQkFDcEIsU0FBUyxFQUFFLFNBQVM7YUFDdkI7WUFDRCxhQUFhLEVBQUU7Z0JBQ1gsRUFBRSxLQUFLLEVBQUUsdUNBQXVDLEVBQUU7Z0JBQ2xELEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFO2FBQUM7U0FDMUMsQ0FBQztRQUVGLE9BQU8sZ0JBQWdCLENBQUM7Ozs7WUE1Qi9CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBRdWVyeUJvZHkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlndXJhdGlvbkludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZS9zZWFyY2gtY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UgaW1wbGVtZW50cyBTZWFyY2hDb25maWd1cmF0aW9uSW50ZXJmYWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFF1ZXJ5Qm9keSBvYmplY3Qgd2l0aCBjdXN0b20gc2VhcmNoIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHNlYXJjaFRlcm0gVGVybSB0ZXh0IHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gbWF4UmVzdWx0cyBNYXhpbXVtIG51bWJlciBvZiBzZWFyY2ggcmVzdWx0cyB0byBzaG93IGluIGEgcGFnZVxuICAgICAqIEBwYXJhbSBza2lwQ291bnQgVGhlIG9mZnNldCBvZiB0aGUgc3RhcnQgb2YgdGhlIHBhZ2Ugd2l0aGluIHRoZSByZXN1bHRzIGxpc3RcbiAgICAgKiBAcmV0dXJucyBRdWVyeSBib2R5IGRlZmluZWQgYnkgdGhlIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2VuZXJhdGVRdWVyeUJvZHkoc2VhcmNoVGVybTogc3RyaW5nLCBtYXhSZXN1bHRzOiBudW1iZXIsIHNraXBDb3VudDogbnVtYmVyKTogUXVlcnlCb2R5IHtcbiAgICAgICAgbGV0IGRlZmF1bHRRdWVyeUJvZHk6IFF1ZXJ5Qm9keSA9IHtcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHNlYXJjaFRlcm0gPyBgJHtzZWFyY2hUZXJtfSogT1IgbmFtZToke3NlYXJjaFRlcm19KmAgOiBzZWFyY2hUZXJtXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZTogWydwYXRoJywgJ2FsbG93YWJsZU9wZXJhdGlvbnMnXSxcbiAgICAgICAgICAgIHBhZ2luZzoge1xuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiBtYXhSZXN1bHRzLFxuICAgICAgICAgICAgICAgIHNraXBDb3VudDogc2tpcENvdW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyUXVlcmllczogW1xuICAgICAgICAgICAgICAgIHsgcXVlcnk6IFwiVFlQRTonY206Zm9sZGVyJyBPUiBUWVBFOidjbTpjb250ZW50J1wiIH0sXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogJ05PVCBjbTpjcmVhdG9yOlN5c3RlbScgfV1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGVmYXVsdFF1ZXJ5Qm9keTtcbiAgICB9XG59XG4iXX0=