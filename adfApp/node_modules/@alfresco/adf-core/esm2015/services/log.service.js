/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { logLevels, LogLevelsEnum } from '../models/log-levels.model';
import { Subject } from 'rxjs';
export class LogService {
    /**
     * @param {?} appConfig
     */
    constructor(appConfig) {
        this.appConfig = appConfig;
        this.onMessage = new Subject();
    }
    /**
     * @return {?}
     */
    get currentLogLevel() {
        /** @type {?} */
        let configLevel = this.appConfig.get(AppConfigValues.LOG_LEVEL);
        if (configLevel) {
            return this.getLogLevel(configLevel);
        }
        return LogLevelsEnum.TRACE;
    }
    /**
     * Logs a message at the "ERROR" level.
     * @param {?=} message Message to log
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    error(message, ...optionalParams) {
        if (this.currentLogLevel >= LogLevelsEnum.ERROR) {
            this.messageBus(message, 'ERROR');
            console.error(message, ...optionalParams);
        }
    }
    /**
     * Logs a message at the "DEBUG" level.
     * @param {?=} message Message to log
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    debug(message, ...optionalParams) {
        if (this.currentLogLevel >= LogLevelsEnum.DEBUG) {
            this.messageBus(message, 'DEBUG');
            console.debug(message, ...optionalParams);
        }
    }
    /**
     * Logs a message at the "INFO" level.
     * @param {?=} message Message to log
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    info(message, ...optionalParams) {
        if (this.currentLogLevel >= LogLevelsEnum.INFO) {
            this.messageBus(message, 'INFO');
            console.info(message, ...optionalParams);
        }
    }
    /**
     * Logs a message at any level from "TRACE" upwards.
     * @param {?=} message Message to log
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    log(message, ...optionalParams) {
        if (this.currentLogLevel >= LogLevelsEnum.TRACE) {
            this.messageBus(message, 'LOG');
            console.log(message, ...optionalParams);
        }
    }
    /**
     * Logs a message at the "TRACE" level.
     * @param {?=} message Message to log
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    trace(message, ...optionalParams) {
        if (this.currentLogLevel >= LogLevelsEnum.TRACE) {
            this.messageBus(message, 'TRACE');
            console.trace(message, ...optionalParams);
        }
    }
    /**
     * Logs a message at the "WARN" level.
     * @param {?=} message Message to log
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    warn(message, ...optionalParams) {
        if (this.currentLogLevel >= LogLevelsEnum.WARN) {
            this.messageBus(message, 'WARN');
            console.warn(message, ...optionalParams);
        }
    }
    /**
     * Logs a message if a boolean test fails.
     * @param {?=} test Test value (typically a boolean expression)
     * @param {?=} message Message to show if test is false
     * @param {...?} optionalParams Interpolation values for the message in "printf" format
     * @return {?}
     */
    assert(test, message, ...optionalParams) {
        if (this.currentLogLevel !== LogLevelsEnum.SILENT) {
            this.messageBus(message, 'ASSERT');
            console.assert(test, message, ...optionalParams);
        }
    }
    /**
     * Starts an indented group of log messages.
     * @param {?=} groupTitle Title shown at the start of the group
     * @param {...?} optionalParams Interpolation values for the title in "printf" format
     * @return {?}
     */
    group(groupTitle, ...optionalParams) {
        if (this.currentLogLevel !== LogLevelsEnum.SILENT) {
            console.group(groupTitle, ...optionalParams);
        }
    }
    /**
     * Ends a indented group of log messages.
     * @return {?}
     */
    groupEnd() {
        if (this.currentLogLevel !== LogLevelsEnum.SILENT) {
            console.groupEnd();
        }
    }
    /**
     * Converts a log level name string into its numeric equivalent.
     * @param {?} level Level name
     * @return {?} Numeric log level
     */
    getLogLevel(level) {
        /** @type {?} */
        let referencedLevel = logLevels.find((currentLevel) => {
            return currentLevel.name.toLocaleLowerCase() === level.toLocaleLowerCase();
        });
        return referencedLevel ? referencedLevel.level : 5;
    }
    /**
     * Triggers notification callback for log messages.
     * @param {?} text Message text
     * @param {?} logLevel Log level for the message
     * @return {?}
     */
    messageBus(text, logLevel) {
        this.onMessage.next({ text: text, type: logLevel });
    }
}
LogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LogService.ctorParameters = () => [
    { type: AppConfigService }
];
if (false) {
    /** @type {?} */
    LogService.prototype.onMessage;
    /** @type {?} */
    LogService.prototype.appConfig;
}

//# sourceMappingURL=data:application/json;base64,