/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @record
 */
export function HightlightTransformResult() { }
/** @type {?} */
HightlightTransformResult.prototype.text;
/** @type {?} */
HightlightTransformResult.prototype.changed;
export class HighlightTransformService {
    /**
     * Searches for `search` string(s) within `text` and highlights all occurrences.
     * @param {?} text Text to search within
     * @param {?} search Text pattern to search for
     * @param {?=} wrapperClass CSS class used to provide highlighting style
     * @return {?} New text along with boolean value to indicate whether anything was highlighted
     */
    highlight(text, search, wrapperClass = 'highlight') {
        /** @type {?} */
        let isMatching = false;
        /** @type {?} */
        let result = text;
        if (search && text) {
            /** @type {?} */
            let pattern = search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
            pattern = pattern.split(' ').filter((t) => {
                return t.length > 0;
            }).join('|');
            /** @type {?} */
            const regex = new RegExp(pattern, 'gi');
            result = text.replace(regex, (match) => {
                isMatching = true;
                return `<span class="${wrapperClass}">${match}</span>`;
            });
            return { text: result, changed: isMatching };
        }
        else {
            return { text: result, changed: isMatching };
        }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LXRyYW5zZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvaGlnaGxpZ2h0LXRyYW5zZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkEsTUFBTTs7Ozs7Ozs7SUFTSyxTQUFTLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxlQUF1QixXQUFXOztRQUM3RSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQ0o7O1FBRGxCLElBQ0ksTUFBTSxHQUFHLElBQUksQ0FBQztRQUVsQixJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7O1lBQ2hCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMscUNBQXFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDdkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFFYixNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ25DLFVBQVUsR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLE9BQU8sZ0JBQWdCLFlBQVksS0FBSyxLQUFLLFNBQVMsQ0FBQzthQUMxRCxDQUFDLENBQUM7WUFDSCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUM7U0FDaEQ7YUFBTTtZQUNILE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztTQUNoRDs7Q0FFUiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSGlnaHRsaWdodFRyYW5zZm9ybVJlc3VsdCB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGNoYW5nZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIFNlYXJjaGVzIGZvciBgc2VhcmNoYCBzdHJpbmcocykgd2l0aGluIGB0ZXh0YCBhbmQgaGlnaGxpZ2h0cyBhbGwgb2NjdXJyZW5jZXMuXG4gICAgICogQHBhcmFtIHRleHQgVGV4dCB0byBzZWFyY2ggd2l0aGluXG4gICAgICogQHBhcmFtIHNlYXJjaCBUZXh0IHBhdHRlcm4gdG8gc2VhcmNoIGZvclxuICAgICAqIEBwYXJhbSB3cmFwcGVyQ2xhc3MgQ1NTIGNsYXNzIHVzZWQgdG8gcHJvdmlkZSBoaWdobGlnaHRpbmcgc3R5bGVcbiAgICAgKiBAcmV0dXJucyBOZXcgdGV4dCBhbG9uZyB3aXRoIGJvb2xlYW4gdmFsdWUgdG8gaW5kaWNhdGUgd2hldGhlciBhbnl0aGluZyB3YXMgaGlnaGxpZ2h0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgaGlnaGxpZ2h0KHRleHQ6IHN0cmluZywgc2VhcmNoOiBzdHJpbmcsIHdyYXBwZXJDbGFzczogc3RyaW5nID0gJ2hpZ2hsaWdodCcpOiBIaWdodGxpZ2h0VHJhbnNmb3JtUmVzdWx0IHtcbiAgICAgICAgbGV0IGlzTWF0Y2hpbmcgPSBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdCA9IHRleHQ7XG5cbiAgICAgICAgaWYgKHNlYXJjaCAmJiB0ZXh0KSB7XG4gICAgICAgICAgICBsZXQgcGF0dGVybiA9IHNlYXJjaC5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc3BsaXQoJyAnKS5maWx0ZXIoKHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5sZW5ndGggPiAwO1xuICAgICAgICAgICAgfSkuam9pbignfCcpO1xuXG4gICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiwgJ2dpJyk7XG4gICAgICAgICAgICByZXN1bHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIChtYXRjaCkgPT4ge1xuICAgICAgICAgICAgICAgIGlzTWF0Y2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCIke3dyYXBwZXJDbGFzc31cIj4ke21hdGNofTwvc3Bhbj5gO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4geyB0ZXh0OiByZXN1bHQsIGNoYW5nZWQ6IGlzTWF0Y2hpbmcgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRleHQ6IHJlc3VsdCwgY2hhbmdlZDogaXNNYXRjaGluZyB9O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19