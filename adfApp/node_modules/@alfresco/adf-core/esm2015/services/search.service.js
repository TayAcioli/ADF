/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { SearchConfigurationService } from './search-configuration.service';
import { catchError } from 'rxjs/operators';
export class SearchService {
    /**
     * @param {?} apiService
     * @param {?} searchConfigurationService
     */
    constructor(apiService, searchConfigurationService) {
        this.apiService = apiService;
        this.searchConfigurationService = searchConfigurationService;
        this.dataLoaded = new Subject();
    }
    /**
     * @param {?} term
     * @param {?=} options
     * @return {?}
     */
    getNodeQueryResults(term, options) {
        /** @type {?} */
        const promise = this.apiService.getInstance().core.queriesApi.findNodes(term, options);
        promise.then((data) => {
            this.dataLoaded.next(data);
        });
        return from(promise).pipe(catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} searchTerm
     * @param {?} maxResults
     * @param {?} skipCount
     * @return {?}
     */
    search(searchTerm, maxResults, skipCount) {
        /** @type {?} */
        const searchQuery = Object.assign(this.searchConfigurationService.generateQueryBody(searchTerm, maxResults, skipCount));
        /** @type {?} */
        const promise = this.apiService.getInstance().search.searchApi.search(searchQuery);
        promise.then((data) => {
            this.dataLoaded.next(data);
        });
        return from(promise).pipe(catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} queryBody
     * @return {?}
     */
    searchByQueryBody(queryBody) {
        /** @type {?} */
        const promise = this.apiService.getInstance().search.searchApi.search(queryBody);
        promise.then((data) => {
            this.dataLoaded.next(data);
        });
        return from(promise).pipe(catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
SearchService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SearchService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchConfigurationService }
];
if (false) {
    /** @type {?} */
    SearchService.prototype.dataLoaded;
    /** @type {?} */
    SearchService.prototype.apiService;
    /** @type {?} */
    SearchService.prototype.searchConfigurationService;
}
/**
 * @record
 */
export function SearchOptions() { }
/** @type {?|undefined} */
SearchOptions.prototype.skipCount;
/** @type {?|undefined} */
SearchOptions.prototype.maxItems;
/** @type {?|undefined} */
SearchOptions.prototype.rootNodeId;
/** @type {?|undefined} */
SearchOptions.prototype.nodeType;
/** @type {?|undefined} */
SearchOptions.prototype.include;
/** @type {?|undefined} */
SearchOptions.prototype.orderBy;
/** @type {?|undefined} */
SearchOptions.prototype.fields;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9zZWFyY2guc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHNUMsTUFBTTs7Ozs7SUFJRixZQUFvQixVQUE4QixFQUM5QjtRQURBLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLCtCQUEwQixHQUExQiwwQkFBMEI7MEJBSFosSUFBSSxPQUFPLEVBQUU7S0FJOUM7Ozs7OztJQUVELG1CQUFtQixDQUFDLElBQVksRUFBRSxPQUF1Qjs7UUFDckQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdkYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ0w7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBa0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCOztRQUM1RCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7O1FBQ3hILE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbkYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ0w7Ozs7O0lBRUQsaUJBQWlCLENBQUMsU0FBb0I7O1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ0w7Ozs7O0lBRU8sV0FBVyxDQUFDLEtBQVU7UUFDMUIsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDOzs7O1lBL0NsRCxVQUFVOzs7O1lBSkYsa0JBQWtCO1lBQ2xCLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVQYWdpbmcsIFF1ZXJ5Qm9keSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFNlYXJjaENvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZWFyY2gtY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZWFyY2hTZXJ2aWNlIHtcblxuICAgIGRhdGFMb2FkZWQ6IFN1YmplY3Q8Tm9kZVBhZ2luZz4gPSBuZXcgU3ViamVjdCgpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzZWFyY2hDb25maWd1cmF0aW9uU2VydmljZTogU2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXROb2RlUXVlcnlSZXN1bHRzKHRlcm06IHN0cmluZywgb3B0aW9ucz86IFNlYXJjaE9wdGlvbnMpOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmNvcmUucXVlcmllc0FwaS5maW5kTm9kZXModGVybSwgb3B0aW9ucyk7XG5cbiAgICAgICAgcHJvbWlzZS50aGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxvYWRlZC5uZXh0KGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHNlYXJjaChzZWFyY2hUZXJtOiBzdHJpbmcsIG1heFJlc3VsdHM6IG51bWJlciwgc2tpcENvdW50OiBudW1iZXIpOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgY29uc3Qgc2VhcmNoUXVlcnkgPSBPYmplY3QuYXNzaWduKHRoaXMuc2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UuZ2VuZXJhdGVRdWVyeUJvZHkoc2VhcmNoVGVybSwgbWF4UmVzdWx0cywgc2tpcENvdW50KSk7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5zZWFyY2guc2VhcmNoQXBpLnNlYXJjaChzZWFyY2hRdWVyeSk7XG5cbiAgICAgICAgcHJvbWlzZS50aGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxvYWRlZC5uZXh0KGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHNlYXJjaEJ5UXVlcnlCb2R5KHF1ZXJ5Qm9keTogUXVlcnlCb2R5KTogT2JzZXJ2YWJsZTxOb2RlUGFnaW5nPiB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5zZWFyY2guc2VhcmNoQXBpLnNlYXJjaChxdWVyeUJvZHkpO1xuXG4gICAgICAgIHByb21pc2UudGhlbigoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGFMb2FkZWQubmV4dChkYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20ocHJvbWlzZSkucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvciB8fCAnU2VydmVyIGVycm9yJyk7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaE9wdGlvbnMge1xuICAgIHNraXBDb3VudD86IG51bWJlcjtcbiAgICBtYXhJdGVtcz86IG51bWJlcjtcbiAgICByb290Tm9kZUlkPzogc3RyaW5nO1xuICAgIG5vZGVUeXBlPzogc3RyaW5nO1xuICAgIGluY2x1ZGU/OiBzdHJpbmdbXTtcbiAgICBvcmRlckJ5Pzogc3RyaW5nO1xuICAgIGZpZWxkcz86IHN0cmluZ1tdO1xufVxuIl19