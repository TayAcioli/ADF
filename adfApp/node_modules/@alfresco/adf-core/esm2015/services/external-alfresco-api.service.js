/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as alfrescoApi from 'alfresco-js-api';
export class ExternalAlfrescoApiService {
    /**
     * @return {?}
     */
    getInstance() {
        return this.alfrescoApi;
    }
    /**
     * @return {?}
     */
    get contentApi() {
        return this.getInstance().content;
    }
    /**
     * @return {?}
     */
    get nodesApi() {
        return this.getInstance().nodes;
    }
    /**
     * @param {?} ecmHost
     * @param {?} contextRoot
     * @return {?}
     */
    init(ecmHost, contextRoot) {
        /** @type {?} */
        let domainPrefix = this.createPrefixFromHost(ecmHost);
        /** @type {?} */
        const config = {
            provider: 'ECM',
            hostEcm: ecmHost,
            authType: 'BASIC',
            contextRoot: contextRoot,
            domainPrefix
        };
        this.initAlfrescoApi(config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    initAlfrescoApi(config) {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = /** @type {?} */ (new alfrescoApi(config));
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    createPrefixFromHost(url) {
        /** @type {?} */
        let match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
        /** @type {?} */
        let result = null;
        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
            result = match[2];
        }
        return result;
    }
}
ExternalAlfrescoApiService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ExternalAlfrescoApiService.prototype.alfrescoApi;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYWxmcmVzY28tYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9leHRlcm5hbC1hbGZyZXNjby1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNDLE9BQU8sS0FBSyxXQUFXLE1BQU0saUJBQWlCLENBQUM7QUFJL0MsTUFBTTs7OztJQUlGLFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDM0I7Ozs7SUFFRCxJQUFJLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUM7S0FDckM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUM7S0FDbkM7Ozs7OztJQUVELElBQUksQ0FBQyxPQUFlLEVBQUUsV0FBbUI7O1FBRXJDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7UUFFdEQsTUFBTSxNQUFNLEdBQUc7WUFDWCxRQUFRLEVBQUUsS0FBSztZQUNmLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLFlBQVk7U0FDZixDQUFDO1FBQ0YsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNoQzs7Ozs7SUFFUyxlQUFlLENBQUMsTUFBTTtRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0M7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLHFCQUFpQixJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDO1NBQzVEO0tBQ0o7Ozs7O0lBRU8sb0JBQW9CLENBQUMsR0FBVzs7UUFDcEMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDOztRQUN2RCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxRixNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxNQUFNLENBQUM7Ozs7WUE3Q3JCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFsZnJlc2NvQXBpLFxuICAgIENvbnRlbnRBcGksXG4gICAgTm9kZXNBcGlcbn0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCAqIGFzIGFsZnJlc2NvQXBpIGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG4vKiB0c2xpbnQ6ZGlzYWJsZTphZGYtZmlsZS1uYW1lICovXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFeHRlcm5hbEFsZnJlc2NvQXBpU2VydmljZSB7XG5cbiAgICBwcm90ZWN0ZWQgYWxmcmVzY29BcGk6IEFsZnJlc2NvQXBpO1xuXG4gICAgZ2V0SW5zdGFuY2UoKTogQWxmcmVzY29BcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGZyZXNjb0FwaTtcbiAgICB9XG5cbiAgICBnZXQgY29udGVudEFwaSgpOiBDb250ZW50QXBpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5zdGFuY2UoKS5jb250ZW50O1xuICAgIH1cblxuICAgIGdldCBub2Rlc0FwaSgpOiBOb2Rlc0FwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEluc3RhbmNlKCkubm9kZXM7XG4gICAgfVxuXG4gICAgaW5pdChlY21Ib3N0OiBzdHJpbmcsIGNvbnRleHRSb290OiBzdHJpbmcpIHtcblxuICAgICAgICBsZXQgZG9tYWluUHJlZml4ID0gdGhpcy5jcmVhdGVQcmVmaXhGcm9tSG9zdChlY21Ib3N0KTtcblxuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBwcm92aWRlcjogJ0VDTScsXG4gICAgICAgICAgICBob3N0RWNtOiBlY21Ib3N0LFxuICAgICAgICAgICAgYXV0aFR5cGU6ICdCQVNJQycsXG4gICAgICAgICAgICBjb250ZXh0Um9vdDogY29udGV4dFJvb3QsXG4gICAgICAgICAgICBkb21haW5QcmVmaXhcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbml0QWxmcmVzY29BcGkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdEFsZnJlc2NvQXBpKGNvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5hbGZyZXNjb0FwaSkge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaS5jb25maWd1cmVKc0FwaShjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaSA9IDxBbGZyZXNjb0FwaT4gbmV3IGFsZnJlc2NvQXBpKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVByZWZpeEZyb21Ib3N0KHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdXJsLm1hdGNoKC86XFwvXFwvKHd3d1swLTldP1xcLik/KC5bXi86XSspL2kpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgaWYgKG1hdGNoICE9IG51bGwgJiYgbWF0Y2gubGVuZ3RoID4gMiAmJiB0eXBlb2YgbWF0Y2hbMl0gPT09ICdzdHJpbmcnICYmIG1hdGNoWzJdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1hdGNoWzJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIl19