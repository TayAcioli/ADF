/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation, Input } from '@angular/core';
import { Validators, FormBuilder, FormControl } from '@angular/forms';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from '../services/storage.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
export class HostSettingsComponent {
    /**
     * @param {?} formBuilder
     * @param {?} storageService
     * @param {?} alfrescoApiService
     * @param {?} appConfig
     */
    constructor(formBuilder, storageService, alfrescoApiService, appConfig) {
        this.formBuilder = formBuilder;
        this.storageService = storageService;
        this.alfrescoApiService = alfrescoApiService;
        this.appConfig = appConfig;
        this.HOST_REGEX = '^(http|https):\/\/.*[^/]$';
        /**
         * Tells the component which provider options are available. Possible valid values
         * are "ECM" (Content), "BPM" (Process) , "ALL" (Content and Process), 'OAUTH2' SSO.
         */
        this.providers = ['BPM', 'ECM', 'ALL'];
        this.showSelectProviders = true;
        /**
         * Emitted when the URL is invalid.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the ecm host URL is changed.
         * @deprecated in 2.4.0
         */
        this.ecmHostChange = new EventEmitter();
        /**
         * Emitted when the user cancels the changes.
         */
        this.cancel = new EventEmitter();
        /**
         * Emitted when the changes are successfully applied.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when the bpm host URL is changed.
         * @deprecated in 2.4.0
         */
        this.bpmHostChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.providers.length === 1) {
            this.showSelectProviders = false;
        }
        /** @type {?} */
        let providerSelected = this.appConfig.get(AppConfigValues.PROVIDERS);
        /** @type {?} */
        const authType = this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC');
        this.form = this.formBuilder.group({
            providersControl: [providerSelected, Validators.required],
            authType: authType
        });
        this.addFormGroups();
        if (authType === 'OAUTH') {
            this.addOAuthFormGroup();
        }
        this.form.get('authType').valueChanges.subscribe((value) => {
            if (value === 'BASIC') {
                this.form.removeControl('oauthConfig');
            }
            else {
                this.addOAuthFormGroup();
            }
        });
        this.providersControl.valueChanges.subscribe(() => {
            this.removeFormGroups();
            this.addFormGroups();
        });
    }
    /**
     * @return {?}
     */
    removeFormGroups() {
        this.form.removeControl('bpmHost');
        this.form.removeControl('ecmHost');
    }
    /**
     * @return {?}
     */
    addFormGroups() {
        this.addBPMFormControl();
        this.addECMFormControl();
    }
    /**
     * @return {?}
     */
    addOAuthFormGroup() {
        /** @type {?} */
        const oauthFormGroup = this.createOAuthFormGroup();
        this.form.addControl('oauthConfig', oauthFormGroup);
    }
    /**
     * @return {?}
     */
    addBPMFormControl() {
        if ((this.isBPM() || this.isALL() || this.isOAUTH()) && !this.bpmHost) {
            /** @type {?} */
            const bpmFormControl = this.createBPMFormControl();
            this.form.addControl('bpmHost', bpmFormControl);
        }
    }
    /**
     * @return {?}
     */
    addECMFormControl() {
        if ((this.isECM() || this.isALL()) && !this.ecmHost) {
            /** @type {?} */
            const ecmFormControl = this.createECMFormControl();
            this.form.addControl('ecmHost', ecmFormControl);
        }
    }
    /**
     * @return {?}
     */
    createOAuthFormGroup() {
        /** @type {?} */
        let oauth = /** @type {?} */ (this.appConfig.get(AppConfigValues.OAUTHCONFIG, {}));
        return this.formBuilder.group({
            host: [oauth.host, [Validators.required, Validators.pattern(this.HOST_REGEX)]],
            clientId: [oauth.clientId, Validators.required],
            redirectUri: [oauth.redirectUri, Validators.required],
            redirectUriLogout: [oauth.redirectUriLogout],
            scope: [oauth.scope, Validators.required],
            secret: oauth.secret,
            silentLogin: oauth.silentLogin,
            implicitFlow: oauth.implicitFlow
        });
    }
    /**
     * @return {?}
     */
    createBPMFormControl() {
        return new FormControl(this.appConfig.get(AppConfigValues.BPMHOST), [Validators.required, Validators.pattern(this.HOST_REGEX)]);
    }
    /**
     * @return {?}
     */
    createECMFormControl() {
        return new FormControl(this.appConfig.get(AppConfigValues.ECMHOST), [Validators.required, Validators.pattern(this.HOST_REGEX)]);
    }
    /**
     * @return {?}
     */
    onCancel() {
        this.cancel.emit(true);
    }
    /**
     * @param {?} values
     * @return {?}
     */
    onSubmit(values) {
        this.storageService.setItem(AppConfigValues.PROVIDERS, values.providersControl);
        if (this.isBPM()) {
            this.saveBPMValues(values);
        }
        else if (this.isECM()) {
            this.saveECMValues(values);
        }
        else if (this.isALL()) {
            this.saveECMValues(values);
            this.saveBPMValues(values);
        }
        if (this.isOAUTH()) {
            this.saveOAuthValues(values);
        }
        this.storageService.setItem(AppConfigValues.AUTHTYPE, values.authType);
        this.alfrescoApiService.reset();
        this.alfrescoApiService.getInstance().invalidateSession();
        this.success.emit(true);
    }
    /**
     * @param {?} values
     * @return {?}
     */
    saveOAuthValues(values) {
        this.storageService.setItem(AppConfigValues.OAUTHCONFIG, JSON.stringify(values.oauthConfig));
    }
    /**
     * @param {?} values
     * @return {?}
     */
    saveBPMValues(values) {
        this.storageService.setItem(AppConfigValues.BPMHOST, values.bpmHost);
    }
    /**
     * @param {?} values
     * @return {?}
     */
    saveECMValues(values) {
        this.storageService.setItem(AppConfigValues.ECMHOST, values.ecmHost);
    }
    /**
     * @return {?}
     */
    isBPM() {
        return this.providersControl.value === 'BPM';
    }
    /**
     * @return {?}
     */
    isECM() {
        return this.providersControl.value === 'ECM';
    }
    /**
     * @return {?}
     */
    isALL() {
        return this.providersControl.value === 'ALL';
    }
    /**
     * @return {?}
     */
    isOAUTH() {
        return this.form.get('authType').value === 'OAUTH';
    }
    /**
     * @return {?}
     */
    get providersControl() {
        return this.form.get('providersControl');
    }
    /**
     * @return {?}
     */
    get bpmHost() {
        return this.form.get('bpmHost');
    }
    /**
     * @return {?}
     */
    get ecmHost() {
        return this.form.get('ecmHost');
    }
    /**
     * @return {?}
     */
    get host() {
        return this.oauthConfig.get('host');
    }
    /**
     * @return {?}
     */
    get clientId() {
        return this.oauthConfig.get('clientId');
    }
    /**
     * @return {?}
     */
    get scope() {
        return this.oauthConfig.get('scope');
    }
    /**
     * @return {?}
     */
    get secretId() {
        return this.oauthConfig.get('secretId');
    }
    /**
     * @return {?}
     */
    get implicitFlow() {
        return this.oauthConfig.get('implicitFlow');
    }
    /**
     * @return {?}
     */
    get silentLogin() {
        return this.oauthConfig.get('silentLogin');
    }
    /**
     * @return {?}
     */
    get redirectUri() {
        return this.oauthConfig.get('redirectUri');
    }
    /**
     * @return {?}
     */
    get redirectUriLogout() {
        return this.oauthConfig.get('redirectUriLogout');
    }
    /**
     * @return {?}
     */
    get oauthConfig() {
        return this.form.get('oauthConfig');
    }
}
HostSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-host-settings',
                template: "<div class=\"adf-setting-container\">\n    <mat-toolbar color=\"primary\" class=\"adf-setting-toolbar\">\n        <h3>{{'CORE.HOST_SETTINGS.TITLE' | translate}}</h3>\n    </mat-toolbar>\n    <mat-card class=\"adf-setting-card\">\n        <form id=\"host-form\" [formGroup]=\"form\" (submit)=\"onSubmit(form.value)\">\n\n            <mat-form-field floatLabel=\"{{'CORE.HOST_SETTINGS.PROVIDER' | translate }}\" *ngIf=\"showSelectProviders\">\n                <mat-select  id=\"adf-provider-selector\" placeholder=\"Provider\" [formControl]=\"providersControl\">\n                    <mat-option *ngFor=\"let provider of providers\" [value]=\"provider\">\n                        {{ provider }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <div class=\"adf-authentication-type\">\n                <label> {{'CORE.HOST_SETTINGS.TYPE-AUTH' | translate }} : </label>\n                <mat-radio-group formControlName=\"authType\" >\n                <mat-radio-button value=\"BASIC\">{{'CORE.HOST_SETTINGS.BASIC' | translate }}\n                </mat-radio-button>\n                <mat-radio-button value=\"OAUTH\">{{'CORE.HOST_SETTINGS.SSO' | translate }}\n                </mat-radio-button>\n            </mat-radio-group>\n            </div>\n\n            <ng-container *ngIf=\"isALL() || isECM()\">\n                <mat-card-content>\n                    <mat-form-field class=\"full-width\" floatLabel=\"{{'CORE.HOST_SETTINGS.CS-HOST' | translate }}\">\n                        <mat-label>{{'CORE.HOST_SETTINGS.CS-HOST' | translate }}</mat-label>\n                        <input matInput [formControl]=\"ecmHost\" data-automation-id=\"ecmHost\" type=\"text\" tabindex=\"2\"\n                               id=\"ecmHost\" placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"ecmHost.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"ecmHost.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                    <p>\n                </mat-card-content>\n            </ng-container>\n\n            <ng-container *ngIf=\"isALL() || isBPM()\">\n                <mat-card-content>\n                    <mat-form-field class=\"full-width\" floatLabel=\"{{'CORE.HOST_SETTINGS.BP-HOST' | translate }}\">\n                        <mat-label>{{'CORE.HOST_SETTINGS.BP-HOST' | translate }}</mat-label>\n                        <input matInput [formControl]=\"bpmHost\" data-automation-id=\"bpmHost\" type=\"text\" tabindex=\"2\"\n                               id=\"bpmHost\" placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"bpmHost.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"bpmHost.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                </mat-card-content>\n            </ng-container>\n\n            <ng-container *ngIf=\"isOAUTH()\">\n                <div formGroupName=\"oauthConfig\">\n                    <mat-form-field class=\"full-width\" floatLabel=\"Auth Host\">\n                        <mat-label>Auth Host</mat-label>\n                        <input matInput name=\"host\" id=\"oauthHost\" formControlName=\"host\"\n                               placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"host.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"host.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"full-width\" floatLabel=\"Client Id\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.CLIENT'| translate }}d</mat-label>\n                        <input matInput name=\"clientId\" id=\"clientId\" formControlName=\"clientId\"\n                               placeholder=\"Client Id\">\n                        <mat-error *ngIf=\"clientId.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n\n                    <mat-form-field class=\"full-width\" floatLabel=\"Scope\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.SCOPE'| translate }}</mat-label>\n                        <input matInput name=\"{{ 'CORE.HOST_SETTINGS.SCOPE'| translate }}\"\n                               formControlName=\"scope\" placeholder=\"Scope Id\">\n                        <mat-error *ngIf=\"scope.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n\n                    <label for=\"silentLogin\">{{ 'CORE.HOST_SETTINGS.SILENT'| translate }}</label>\n                    <mat-slide-toggle class=\"full-width\" name=\"silentLogin\" [color]=\"'primary'\"\n                                      formControlName=\"silentLogin\">\n                    </mat-slide-toggle>\n\n                    <label for=\"implicitFlow\">{{ 'CORE.HOST_SETTINGS.IMPLICIT-FLOW'| translate }}</label>\n                    <mat-slide-toggle class=\"full-width\" name=\"implicitFlow\" [color]=\"'primary'\"\n                                      formControlName=\"implicitFlow\">\n                    </mat-slide-toggle>\n\n\n                    <mat-form-field class=\"full-width\" floatLabel=\"Redirect Uri\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.REDIRECT'| translate }}</mat-label>\n                        <input matInput placeholder=\"{{ 'CORE.HOST_SETTINGS.REDIRECT'| translate }}\"\n                               name=\"redirectUri\" formControlName=\"redirectUri\">\n                        <mat-error *ngIf=\"redirectUri.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n\n                    <mat-form-field class=\"full-width\" floatLabel=\"Redirect Uri Logout\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.REDIRECT_LOGOUT'| translate }}</mat-label>\n                        <input matInput placeholder=\"{{ 'CORE.HOST_SETTINGS.REDIRECT_LOGOUT'| translate }}\"\n                               name=\"redirectUriLogout\" formControlName=\"redirectUriLogout\">\n                    </mat-form-field>\n                </div>\n            </ng-container>\n            <mat-card-actions class=\"adf-actions\">\n                <button mat-button (click)=\"onCancel()\" color=\"primary\">\n                    {{'CORE.HOST_SETTINGS.BACK' | translate }}\n                </button>\n                <button type=\"submit\" id=\"host-button\" tabindex=\"4\" class=\"adf-login-button\" mat-raised-button\n                        color=\"primary\" data-automation-id=\"host-button\"\n                        [disabled]=\"!form.valid\">\n                    {{'CORE.HOST_SETTINGS.APPLY' | translate }}\n                </button>\n            </mat-card-actions>\n        </form>\n    </mat-card>\n</div>\n",
                host: {
                    'class': 'adf-host-settings'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
HostSettingsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: StorageService },
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
HostSettingsComponent.propDecorators = {
    providers: [{ type: Input }],
    error: [{ type: Output }],
    ecmHostChange: [{ type: Output }],
    cancel: [{ type: Output }],
    success: [{ type: Output }],
    bpmHostChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    HostSettingsComponent.prototype.HOST_REGEX;
    /**
     * Tells the component which provider options are available. Possible valid values
     * are "ECM" (Content), "BPM" (Process) , "ALL" (Content and Process), 'OAUTH2' SSO.
     * @type {?}
     */
    HostSettingsComponent.prototype.providers;
    /** @type {?} */
    HostSettingsComponent.prototype.showSelectProviders;
    /** @type {?} */
    HostSettingsComponent.prototype.form;
    /**
     * Emitted when the URL is invalid.
     * @type {?}
     */
    HostSettingsComponent.prototype.error;
    /**
     * Emitted when the ecm host URL is changed.
     * @deprecated in 2.4.0
     * @type {?}
     */
    HostSettingsComponent.prototype.ecmHostChange;
    /**
     * Emitted when the user cancels the changes.
     * @type {?}
     */
    HostSettingsComponent.prototype.cancel;
    /**
     * Emitted when the changes are successfully applied.
     * @type {?}
     */
    HostSettingsComponent.prototype.success;
    /**
     * Emitted when the bpm host URL is changed.
     * @deprecated in 2.4.0
     * @type {?}
     */
    HostSettingsComponent.prototype.bpmHostChange;
    /** @type {?} */
    HostSettingsComponent.prototype.formBuilder;
    /** @type {?} */
    HostSettingsComponent.prototype.storageService;
    /** @type {?} */
    HostSettingsComponent.prototype.alfrescoApiService;
    /** @type {?} */
    HostSettingsComponent.prototype.appConfig;
}

//# sourceMappingURL=data:application/json;base64,