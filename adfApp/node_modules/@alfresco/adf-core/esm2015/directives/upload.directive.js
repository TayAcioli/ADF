/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, HostListener, Input, NgZone, Renderer2 } from '@angular/core';
import { FileUtils } from '../utils/file-utils';
export class UploadDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} ngZone
     */
    constructor(el, renderer, ngZone) {
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        /**
         * Enables/disables uploading.
         */
        this.enabled = true;
        /**
         * Upload mode. Can be "drop" (receives dropped files) or "click"
         * (clicking opens a file dialog). Both modes can be active at once.
         */
        this.mode = ['drop'];
        this.isDragging = false;
        this.cssClassName = 'adf-upload__dragging';
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.isClickMode() && this.renderer) {
            /** @type {?} */
            let inputUpload = this.renderer.createElement('input');
            this.upload = this.el.nativeElement.parentElement.appendChild(inputUpload);
            this.upload.type = 'file';
            this.upload.style.display = 'none';
            this.upload.addEventListener('change', e => this.onSelectFiles(e));
            if (this.multiple) {
                this.upload.setAttribute('multiple', '');
            }
            if (this.accept) {
                this.upload.setAttribute('accept', this.accept);
            }
            if (this.directory) {
                this.upload.setAttribute('webkitdirectory', '');
            }
        }
        if (this.isDropMode()) {
            this.ngZone.runOutsideAngular(() => {
                this.element.addEventListener('dragenter', this.onDragEnter.bind(this));
                this.element.addEventListener('dragover', this.onDragOver.bind(this));
                this.element.addEventListener('dragleave', this.onDragLeave.bind(this));
                this.element.addEventListener('drop', this.onDrop.bind(this));
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.element.removeEventListener('dragenter', this.onDragEnter);
        this.element.removeEventListener('dragover', this.onDragOver);
        this.element.removeEventListener('dragleave', this.onDragLeave);
        this.element.removeEventListener('drop', this.onDrop);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.isClickMode() && this.upload) {
            event.preventDefault();
            this.upload.click();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnter(event) {
        if (this.isDropMode()) {
            this.element.classList.add(this.cssClassName);
            this.isDragging = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        event.preventDefault();
        if (this.isDropMode()) {
            this.element.classList.add(this.cssClassName);
            this.isDragging = true;
        }
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        if (this.isDropMode()) {
            this.element.classList.remove(this.cssClassName);
            this.isDragging = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        if (this.isDropMode()) {
            event.stopPropagation();
            event.preventDefault();
            this.element.classList.remove(this.cssClassName);
            this.isDragging = false;
            /** @type {?} */
            const dataTranfer = this.getDataTransfer(event);
            if (dataTranfer) {
                this.getFilesDropped(dataTranfer).then(files => {
                    this.onUploadFiles(files);
                });
            }
        }
        return false;
    }
    /**
     * @param {?} files
     * @return {?}
     */
    onUploadFiles(files) {
        if (this.enabled && files.length > 0) {
            /** @type {?} */
            let e = new CustomEvent('upload-files', {
                detail: {
                    sender: this,
                    data: this.data,
                    files: files
                },
                bubbles: true
            });
            this.el.nativeElement.dispatchEvent(e);
        }
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    hasMode(mode) {
        return this.enabled && mode && this.mode && this.mode.indexOf(mode) > -1;
    }
    /**
     * @return {?}
     */
    isDropMode() {
        return this.hasMode('drop');
    }
    /**
     * @return {?}
     */
    isClickMode() {
        return this.hasMode('click');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getDataTransfer(event) {
        if (event && event.dataTransfer) {
            return event.dataTransfer;
        }
        if (event && event.originalEvent && event.originalEvent.dataTransfer) {
            return event.originalEvent.dataTransfer;
        }
        return null;
    }
    /**
     * Extract files from the DataTransfer object used to hold the data that is being dragged during a drag and drop operation.
     * @param {?} dataTransfer DataTransfer object
     * @return {?}
     */
    getFilesDropped(dataTransfer) {
        return new Promise(resolve => {
            /** @type {?} */
            const iterations = [];
            if (dataTransfer) {
                /** @type {?} */
                const items = dataTransfer.items;
                if (items) {
                    for (let i = 0; i < items.length; i++) {
                        if (typeof items[i].webkitGetAsEntry !== 'undefined') {
                            /** @type {?} */
                            let item = items[i].webkitGetAsEntry();
                            if (item) {
                                if (item.isFile) {
                                    iterations.push(Promise.resolve(/** @type {?} */ ({
                                        entry: item,
                                        file: items[i].getAsFile(),
                                        relativeFolder: '/'
                                    })));
                                }
                                else if (item.isDirectory) {
                                    iterations.push(new Promise(resolveFolder => {
                                        FileUtils.flattern(item).then(files => resolveFolder(files));
                                    }));
                                }
                            }
                        }
                        else {
                            iterations.push(Promise.resolve(/** @type {?} */ ({
                                entry: null,
                                file: items[i].getAsFile(),
                                relativeFolder: '/'
                            })));
                        }
                    }
                }
                else {
                    /** @type {?} */
                    let files = FileUtils
                        .toFileArray(dataTransfer.files)
                        .map(file => /** @type {?} */ ({
                        entry: null,
                        file: file,
                        relativeFolder: '/'
                    }));
                    iterations.push(Promise.resolve(files));
                }
            }
            Promise.all(iterations).then(result => {
                resolve(result.reduce((a, b) => a.concat(b), []));
            });
        });
    }
    /**
     * Invoked when user selects files or folders by means of File Dialog
     * @param {?} e DOM event
     * @return {?}
     */
    onSelectFiles(e) {
        if (this.isClickMode()) {
            /** @type {?} */
            const input = (/** @type {?} */ (e.currentTarget));
            /** @type {?} */
            const files = FileUtils.toFileArray(input.files);
            this.onUploadFiles(files.map(file => /** @type {?} */ ({
                entry: null,
                file: file,
                relativeFolder: '/'
            })));
            e.target.value = '';
        }
    }
}
UploadDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-upload]'
            },] }
];
/** @nocollapse */
UploadDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
UploadDirective.propDecorators = {
    enabled: [{ type: Input, args: ['adf-upload',] }],
    data: [{ type: Input, args: ['adf-upload-data',] }],
    mode: [{ type: Input }],
    multiple: [{ type: Input }],
    accept: [{ type: Input }],
    directory: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * Enables/disables uploading.
     * @type {?}
     */
    UploadDirective.prototype.enabled;
    /**
     * Data to upload.
     * @type {?}
     */
    UploadDirective.prototype.data;
    /**
     * Upload mode. Can be "drop" (receives dropped files) or "click"
     * (clicking opens a file dialog). Both modes can be active at once.
     * @type {?}
     */
    UploadDirective.prototype.mode;
    /**
     * Toggles multiple file uploads.
     * @type {?}
     */
    UploadDirective.prototype.multiple;
    /**
     * (Click mode only) MIME type filter for files to accept.
     * @type {?}
     */
    UploadDirective.prototype.accept;
    /**
     * (Click mode only) Toggles uploading of directories.
     * @type {?}
     */
    UploadDirective.prototype.directory;
    /** @type {?} */
    UploadDirective.prototype.isDragging;
    /** @type {?} */
    UploadDirective.prototype.cssClassName;
    /** @type {?} */
    UploadDirective.prototype.upload;
    /** @type {?} */
    UploadDirective.prototype.element;
    /** @type {?} */
    UploadDirective.prototype.el;
    /** @type {?} */
    UploadDirective.prototype.renderer;
    /** @type {?} */
    UploadDirective.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,