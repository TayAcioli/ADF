/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { HighlightTransformService } from '../services/highlight-transform.service';
export class HighlightDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} highlightTransformService
     */
    constructor(el, renderer, highlightTransformService) {
        this.el = el;
        this.renderer = renderer;
        this.highlightTransformService = highlightTransformService;
        /**
         * Class selector for highlightable elements.
         */
        this.selector = '';
        /**
         * Text to highlight.
         */
        this.search = '';
        /**
         * CSS class used to apply highlighting.
         */
        this.classToApply = 'adf-highlight';
    }
    /**
     * @param {?=} search
     * @param {?=} selector
     * @param {?=} classToApply
     * @return {?}
     */
    highlight(search = this.search, selector = this.selector, classToApply = this.classToApply) {
        if (search && selector) {
            /** @type {?} */
            const elements = this.el.nativeElement.querySelectorAll(selector);
            elements.forEach((element) => {
                /** @type {?} */
                const result = this.highlightTransformService.highlight(element.innerHTML, search, classToApply);
                if (result.changed) {
                    this.renderer.setProperty(element, 'innerHTML', result.text);
                }
            });
        }
    }
}
HighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-highlight]'
            },] }
];
/** @nocollapse */
HighlightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: HighlightTransformService }
];
HighlightDirective.propDecorators = {
    selector: [{ type: Input, args: ['adf-highlight-selector',] }],
    search: [{ type: Input, args: ['adf-highlight',] }],
    classToApply: [{ type: Input, args: ['adf-highlight-class',] }]
};
if (false) {
    /**
     * Class selector for highlightable elements.
     * @type {?}
     */
    HighlightDirective.prototype.selector;
    /**
     * Text to highlight.
     * @type {?}
     */
    HighlightDirective.prototype.search;
    /**
     * CSS class used to apply highlighting.
     * @type {?}
     */
    HighlightDirective.prototype.classToApply;
    /** @type {?} */
    HighlightDirective.prototype.el;
    /** @type {?} */
    HighlightDirective.prototype.renderer;
    /** @type {?} */
    HighlightDirective.prototype.highlightTransformService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvaGlnaGxpZ2h0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSx5QkFBeUIsRUFBNkIsTUFBTSx5Q0FBeUMsQ0FBQztBQUsvRyxNQUFNOzs7Ozs7SUFjRixZQUNZLElBQ0EsVUFDQTtRQUZBLE9BQUUsR0FBRixFQUFFO1FBQ0YsYUFBUSxHQUFSLFFBQVE7UUFDUiw4QkFBeUIsR0FBekIseUJBQXlCOzs7O3dCQWJsQixFQUFFOzs7O3NCQUlKLEVBQUU7Ozs7NEJBSUksZUFBZTtLQUsrQjs7Ozs7OztJQUU5RCxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZO1FBQzdGLElBQUksTUFBTSxJQUFJLFFBQVEsRUFBRTs7WUFDcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFbEUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFOztnQkFDekIsTUFBTSxNQUFNLEdBQThCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQzVILElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtvQkFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2hFO2FBQ0osQ0FBQyxDQUFDO1NBQ047Ozs7WUFoQ1IsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7YUFDOUI7Ozs7WUFMbUIsVUFBVTtZQUFTLFNBQVM7WUFDdkMseUJBQXlCOzs7dUJBUTdCLEtBQUssU0FBQyx3QkFBd0I7cUJBSTlCLEtBQUssU0FBQyxlQUFlOzJCQUlyQixLQUFLLFNBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhpZ2hsaWdodFRyYW5zZm9ybVNlcnZpY2UsIEhpZ2h0bGlnaHRUcmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi9zZXJ2aWNlcy9oaWdobGlnaHQtdHJhbnNmb3JtLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1thZGYtaGlnaGxpZ2h0XSdcbn0pXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0RGlyZWN0aXZlIHtcblxuICAgIC8qKiBDbGFzcyBzZWxlY3RvciBmb3IgaGlnaGxpZ2h0YWJsZSBlbGVtZW50cy4gKi9cbiAgICBASW5wdXQoJ2FkZi1oaWdobGlnaHQtc2VsZWN0b3InKVxuICAgIHNlbGVjdG9yOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBUZXh0IHRvIGhpZ2hsaWdodC4gKi9cbiAgICBASW5wdXQoJ2FkZi1oaWdobGlnaHQnKVxuICAgIHNlYXJjaDogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogQ1NTIGNsYXNzIHVzZWQgdG8gYXBwbHkgaGlnaGxpZ2h0aW5nLiAqL1xuICAgIEBJbnB1dCgnYWRmLWhpZ2hsaWdodC1jbGFzcycpXG4gICAgY2xhc3NUb0FwcGx5OiBzdHJpbmcgPSAnYWRmLWhpZ2hsaWdodCc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICBwcml2YXRlIGhpZ2hsaWdodFRyYW5zZm9ybVNlcnZpY2U6IEhpZ2hsaWdodFRyYW5zZm9ybVNlcnZpY2UpIHsgfVxuXG4gICAgcHVibGljIGhpZ2hsaWdodChzZWFyY2ggPSB0aGlzLnNlYXJjaCwgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yLCBjbGFzc1RvQXBwbHkgPSB0aGlzLmNsYXNzVG9BcHBseSkge1xuICAgICAgICBpZiAoc2VhcmNoICYmIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogSGlnaHRsaWdodFRyYW5zZm9ybVJlc3VsdCA9IHRoaXMuaGlnaGxpZ2h0VHJhbnNmb3JtU2VydmljZS5oaWdobGlnaHQoZWxlbWVudC5pbm5lckhUTUwsIHNlYXJjaCwgY2xhc3NUb0FwcGx5KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShlbGVtZW50LCAnaW5uZXJIVE1MJywgcmVzdWx0LnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19