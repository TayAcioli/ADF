/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, Directive, ElementRef, Host, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { ContentService } from './../services/content.service';
import { EXTENDIBLE_COMPONENT } from './../interface/injection.tokens';
/**
 * @record
 */
export function NodePermissionSubject() { }
/** @type {?} */
NodePermissionSubject.prototype.disabled;
export class NodePermissionDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} contentService
     * @param {?} changeDetector
     * @param {?=} parentComponent
     */
    constructor(elementRef, renderer, contentService, changeDetector, parentComponent) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.contentService = contentService;
        this.changeDetector = changeDetector;
        this.parentComponent = parentComponent;
        /**
         * Node permission to check (create, delete, update, updatePermissions,
         * !create, !delete, !update, !updatePermissions).
         */
        this.permission = null;
        /**
         * Nodes to check permission for.
         */
        this.nodes = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["nodes"] && !changes["nodes"].firstChange) {
            this.updateElement();
        }
    }
    /**
     * Updates disabled state for the decorated elememtn
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    updateElement() {
        /** @type {?} */
        let enable = this.hasPermission(this.nodes, this.permission);
        if (enable) {
            this.enable();
        }
        else {
            this.disable();
        }
        return enable;
    }
    /**
     * @return {?}
     */
    enable() {
        if (this.parentComponent) {
            this.parentComponent.disabled = false;
            this.changeDetector.detectChanges();
        }
        else {
            this.enableElement();
        }
    }
    /**
     * @return {?}
     */
    disable() {
        if (this.parentComponent) {
            this.parentComponent.disabled = true;
            this.changeDetector.detectChanges();
        }
        else {
            this.disableElement();
        }
    }
    /**
     * Enables decorated element
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    enableElement() {
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
    }
    /**
     * Disables decorated element
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    disableElement() {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');
    }
    /**
     * Checks whether all nodes have a particular permission
     *
     * \@memberof NodePermissionDirective
     * @param {?} nodes Node collection to check
     * @param {?} permission Permission to check for each node
     * @return {?}
     */
    hasPermission(nodes, permission) {
        if (nodes && nodes.length > 0) {
            return nodes.every(node => this.contentService.hasPermission(node.entry, permission));
        }
        return false;
    }
}
NodePermissionDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-node-permission]'
            },] }
];
/** @nocollapse */
NodePermissionDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ContentService },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Host }, { type: Optional }, { type: Inject, args: [EXTENDIBLE_COMPONENT,] }] }
];
NodePermissionDirective.propDecorators = {
    permission: [{ type: Input, args: ['adf-node-permission',] }],
    nodes: [{ type: Input, args: ['adf-nodes',] }]
};
if (false) {
    /**
     * Node permission to check (create, delete, update, updatePermissions,
     * !create, !delete, !update, !updatePermissions).
     * @type {?}
     */
    NodePermissionDirective.prototype.permission;
    /**
     * Nodes to check permission for.
     * @type {?}
     */
    NodePermissionDirective.prototype.nodes;
    /** @type {?} */
    NodePermissionDirective.prototype.elementRef;
    /** @type {?} */
    NodePermissionDirective.prototype.renderer;
    /** @type {?} */
    NodePermissionDirective.prototype.contentService;
    /** @type {?} */
    NodePermissionDirective.prototype.changeDetector;
    /** @type {?} */
    NodePermissionDirective.prototype.parentComponent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1wZXJtaXNzaW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvbm9kZS1wZXJtaXNzaW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBYSxRQUFRLEVBQUUsU0FBUyxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUU5SSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7Ozs7QUFTdkUsTUFBTTs7Ozs7Ozs7SUFZRixZQUFvQixVQUFzQixFQUN0QixVQUNBLGdCQUNBLGdCQUk4QixlQUF1QztRQVByRSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRO1FBQ1IsbUJBQWMsR0FBZCxjQUFjO1FBQ2QsbUJBQWMsR0FBZCxjQUFjO1FBSWdCLG9CQUFlLEdBQWYsZUFBZSxDQUF3Qjs7Ozs7MEJBYm5FLElBQUk7Ozs7cUJBSUcsRUFBRTtLQVU5Qjs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxPQUFPLGFBQVUsQ0FBQyxPQUFPLFVBQU8sV0FBVyxFQUFFO1lBQzdDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN4QjtLQUNKOzs7Ozs7O0lBT0QsYUFBYTs7UUFDVCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTdELElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2pCO2FBQU07WUFDSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDbEI7UUFFRCxPQUFPLE1BQU0sQ0FBQztLQUNqQjs7OztJQUVPLE1BQU07UUFDVixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdkM7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN4Qjs7Ozs7SUFHRyxPQUFPO1FBQ1gsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNyQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3ZDO2FBQU07WUFDSCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDekI7Ozs7Ozs7O0lBUUwsYUFBYTtRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQzVFOzs7Ozs7O0lBT0QsY0FBYztRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNqRjs7Ozs7Ozs7O0lBU0QsYUFBYSxDQUFDLEtBQTBCLEVBQUUsVUFBa0I7UUFDeEQsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ3pGO1FBRUQsT0FBTyxLQUFLLENBQUM7S0FDaEI7OztZQWpHSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjthQUNwQzs7OztZQVhzQyxVQUFVO1lBQTRDLFNBQVM7WUFFN0YsY0FBYztZQUZkLGlCQUFpQjs0Q0E2QlQsSUFBSSxZQUNKLFFBQVEsWUFDUixNQUFNLFNBQUMsb0JBQW9COzs7eUJBZHZDLEtBQUssU0FBQyxxQkFBcUI7b0JBSTNCLEtBQUssU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0LCBJbmplY3QsIElucHV0LCBPbkNoYW5nZXMsIE9wdGlvbmFsLCBSZW5kZXJlcjIsICBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvY29udGVudC5zZXJ2aWNlJztcbmltcG9ydCB7IEVYVEVORElCTEVfQ09NUE9ORU5UIH0gZnJvbSAnLi8uLi9pbnRlcmZhY2UvaW5qZWN0aW9uLnRva2Vucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9kZVBlcm1pc3Npb25TdWJqZWN0IHtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbYWRmLW5vZGUtcGVybWlzc2lvbl0nXG59KVxuZXhwb3J0IGNsYXNzIE5vZGVQZXJtaXNzaW9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBOb2RlIHBlcm1pc3Npb24gdG8gY2hlY2sgKGNyZWF0ZSwgZGVsZXRlLCB1cGRhdGUsIHVwZGF0ZVBlcm1pc3Npb25zLFxuICAgICAqICFjcmVhdGUsICFkZWxldGUsICF1cGRhdGUsICF1cGRhdGVQZXJtaXNzaW9ucykuXG4gICAgICovXG4gICAgQElucHV0KCdhZGYtbm9kZS1wZXJtaXNzaW9uJylcbiAgICBwZXJtaXNzaW9uOiBzdHJpbmcgID0gbnVsbDtcblxuICAgIC8qKiBOb2RlcyB0byBjaGVjayBwZXJtaXNzaW9uIGZvci4gKi9cbiAgICBASW5wdXQoJ2FkZi1ub2RlcycpXG4gICAgbm9kZXM6IE1pbmltYWxOb2RlRW50aXR5W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cbiAgICAgICAgICAgICAgICBASG9zdCgpXG4gICAgICAgICAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgICAgICAgICBASW5qZWN0KEVYVEVORElCTEVfQ09NUE9ORU5UKSBwcml2YXRlIHBhcmVudENvbXBvbmVudD86IE5vZGVQZXJtaXNzaW9uU3ViamVjdCkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXMubm9kZXMgJiYgIWNoYW5nZXMubm9kZXMuZmlyc3RDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBkaXNhYmxlZCBzdGF0ZSBmb3IgdGhlIGRlY29yYXRlZCBlbGVtZW10blxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5vZGVQZXJtaXNzaW9uRGlyZWN0aXZlXG4gICAgICovXG4gICAgdXBkYXRlRWxlbWVudCgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGVuYWJsZSA9IHRoaXMuaGFzUGVybWlzc2lvbih0aGlzLm5vZGVzLCB0aGlzLnBlcm1pc3Npb24pO1xuXG4gICAgICAgIGlmIChlbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbmFibGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlbmFibGUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudENvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRDb21wb25lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRpc2FibGUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudENvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRDb21wb25lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIGRlY29yYXRlZCBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTm9kZVBlcm1pc3Npb25EaXJlY3RpdmVcbiAgICAgKi9cbiAgICBlbmFibGVFbGVtZW50KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgZGVjb3JhdGVkIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOb2RlUGVybWlzc2lvbkRpcmVjdGl2ZVxuICAgICAqL1xuICAgIGRpc2FibGVFbGVtZW50KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhbGwgbm9kZXMgaGF2ZSBhIHBhcnRpY3VsYXIgcGVybWlzc2lvblxuICAgICAqXG4gICAgICogQHBhcmFtICBub2RlcyBOb2RlIGNvbGxlY3Rpb24gdG8gY2hlY2tcbiAgICAgKiBAcGFyYW0gIHBlcm1pc3Npb24gUGVybWlzc2lvbiB0byBjaGVjayBmb3IgZWFjaCBub2RlXG4gICAgICogQG1lbWJlcm9mIE5vZGVQZXJtaXNzaW9uRGlyZWN0aXZlXG4gICAgICovXG4gICAgaGFzUGVybWlzc2lvbihub2RlczogTWluaW1hbE5vZGVFbnRpdHlbXSwgcGVybWlzc2lvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChub2RlcyAmJiBub2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuZXZlcnkobm9kZSA9PiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc1Blcm1pc3Npb24obm9kZS5lbnRyeSwgcGVybWlzc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==