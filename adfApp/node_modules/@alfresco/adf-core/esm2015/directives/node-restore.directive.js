/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { forkJoin, from, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { TranslationService } from '../services/translation.service';
import { tap, mergeMap, map, catchError } from 'rxjs/operators';
export class RestoreMessageModel {
}
if (false) {
    /** @type {?} */
    RestoreMessageModel.prototype.message;
    /** @type {?} */
    RestoreMessageModel.prototype.path;
    /** @type {?} */
    RestoreMessageModel.prototype.action;
}
export class NodeRestoreDirective {
    /**
     * @param {?} alfrescoApiService
     * @param {?} translation
     */
    constructor(alfrescoApiService, translation) {
        this.alfrescoApiService = alfrescoApiService;
        this.translation = translation;
        /**
         * Path to restored node.
         * @deprecated 2.4.0
         */
        this.location = '';
        /**
         * Emitted when restoration is complete.
         */
        this.restore = new EventEmitter();
        this.restoreProcessStatus = this.processStatus();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.recover(this.selection);
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    recover(selection) {
        if (!selection.length) {
            return;
        }
        /** @type {?} */
        const nodesWithPath = this.getNodesWithPath(selection);
        if (selection.length && nodesWithPath.length) {
            this.restoreNodesBatch(nodesWithPath).pipe(tap(restoredNodes => {
                /** @type {?} */
                const status = this.processStatus(restoredNodes);
                this.restoreProcessStatus.fail.push(...status.fail);
                this.restoreProcessStatus.success.push(...status.success);
            }), mergeMap(() => this.getDeletedNodes()))
                .subscribe(deletedNodesList => {
                const { entries: nodelist } = deletedNodesList.list;
                const { fail: restoreErrorNodes } = this.restoreProcessStatus;
                /** @type {?} */
                const selectedNodes = this.diff(restoreErrorNodes, selection, false);
                /** @type {?} */
                const remainingNodes = this.diff(selectedNodes, nodelist);
                if (!remainingNodes.length) {
                    this.notification();
                }
                else {
                    this.recover(remainingNodes);
                }
            });
        }
        else {
            this.restoreProcessStatus.fail.push(...selection);
            this.notification();
            return;
        }
    }
    /**
     * @param {?} batch
     * @return {?}
     */
    restoreNodesBatch(batch) {
        return forkJoin(batch.map((node) => this.restoreNode(node)));
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    getNodesWithPath(selection) {
        return selection.filter((node) => node.entry.path);
    }
    /**
     * @return {?}
     */
    getDeletedNodes() {
        /** @type {?} */
        const promise = this.alfrescoApiService.getInstance()
            .core.nodesApi.getDeletedNodes({ include: ['path'] });
        return from(promise);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    restoreNode(node) {
        const { entry } = node;
        /** @type {?} */
        const promise = this.alfrescoApiService.getInstance().nodes.restoreNode(entry.id);
        return from(promise).pipe(map(() => ({
            status: 1,
            entry
        })), catchError((error) => {
            const { statusCode } = (JSON.parse(error.message)).error;
            return of({
                status: 0,
                statusCode,
                entry
            });
        }));
    }
    /**
     * @param {?} selection
     * @param {?} list
     * @param {?=} fromList
     * @return {?}
     */
    diff(selection, list, fromList = true) {
        /** @type {?} */
        const ids = selection.map(item => item.entry.id);
        return list.filter(item => {
            if (fromList) {
                return ids.includes(item.entry.id) ? item : null;
            }
            else {
                return !ids.includes(item.entry.id) ? item : null;
            }
        });
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    processStatus(data = []) {
        /** @type {?} */
        const status = {
            fail: [],
            success: [],
            /**
             * @return {?}
             */
            get someFailed() {
                return !!(this.fail.length);
            },
            /**
             * @return {?}
             */
            get someSucceeded() {
                return !!(this.success.length);
            },
            /**
             * @return {?}
             */
            get oneFailed() {
                return this.fail.length === 1;
            },
            /**
             * @return {?}
             */
            get oneSucceeded() {
                return this.success.length === 1;
            },
            /**
             * @return {?}
             */
            get allSucceeded() {
                return this.someSucceeded && !this.someFailed;
            },
            /**
             * @return {?}
             */
            get allFailed() {
                return this.someFailed && !this.someSucceeded;
            },
            /**
             * @return {?}
             */
            reset() {
                this.fail = [];
                this.success = [];
            }
        };
        return data.reduce((acc, node) => {
            if (node.status) {
                acc.success.push(node);
            }
            else {
                acc.fail.push(node);
            }
            return acc;
        }, status);
    }
    /**
     * @return {?}
     */
    getRestoreMessage() {
        const { restoreProcessStatus: status } = this;
        if (status.someFailed && !status.oneFailed) {
            return this.translation.instant('CORE.RESTORE_NODE.PARTIAL_PLURAL', {
                number: status.fail.length
            });
        }
        if (status.oneFailed && status.fail[0].statusCode) {
            if (status.fail[0].statusCode === 409) {
                return this.translation.instant('CORE.RESTORE_NODE.NODE_EXISTS', {
                    name: status.fail[0].entry.name
                });
            }
            else {
                return this.translation.instant('CORE.RESTORE_NODE.GENERIC', {
                    name: status.fail[0].entry.name
                });
            }
        }
        if (status.oneFailed && !status.fail[0].statusCode) {
            return this.translation.instant('CORE.RESTORE_NODE.LOCATION_MISSING', {
                name: status.fail[0].entry.name
            });
        }
        if (status.allSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.RESTORE_NODE.PLURAL');
        }
        if (status.allSucceeded && status.oneSucceeded) {
            return this.translation.instant('CORE.RESTORE_NODE.SINGULAR', {
                name: status.success[0].entry.name
            });
        }
    }
    /**
     * @return {?}
     */
    notification() {
        /** @type {?} */
        const status = Object.assign({}, this.restoreProcessStatus);
        /** @type {?} */
        let message = this.getRestoreMessage();
        this.reset();
        /** @type {?} */
        const action = (status.oneSucceeded && !status.someFailed) ? this.translation.instant('CORE.RESTORE_NODE.VIEW') : '';
        /** @type {?} */
        let path;
        if (status.success && status.success.length > 0) {
            path = status.success[0].entry.path;
        }
        this.restore.emit({
            message: message,
            action: action,
            path: path
        });
    }
    /**
     * @return {?}
     */
    reset() {
        this.restoreProcessStatus.reset();
        this.selection = [];
    }
}
NodeRestoreDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-restore]'
            },] }
];
/** @nocollapse */
NodeRestoreDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: TranslationService }
];
NodeRestoreDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-restore',] }],
    location: [{ type: Input }],
    restore: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NodeRestoreDirective.prototype.restoreProcessStatus;
    /**
     * Array of deleted nodes to restore.
     * @type {?}
     */
    NodeRestoreDirective.prototype.selection;
    /**
     * Path to restored node.
     * @deprecated 2.4.0
     * @type {?}
     */
    NodeRestoreDirective.prototype.location;
    /**
     * Emitted when restoration is complete.
     * @type {?}
     */
    NodeRestoreDirective.prototype.restore;
    /** @type {?} */
    NodeRestoreDirective.prototype.alfrescoApiService;
    /** @type {?} */
    NodeRestoreDirective.prototype.translation;
}

//# sourceMappingURL=data:application/json;base64,