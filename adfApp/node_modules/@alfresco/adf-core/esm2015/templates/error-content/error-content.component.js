/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, Input, ViewEncapsulation } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslationService } from '../../services/translation.service';
export class ErrorContentComponent {
    /**
     * @param {?} route
     * @param {?} router
     * @param {?} translateService
     */
    constructor(route, router, translateService) {
        this.route = route;
        this.router = router;
        this.translateService = translateService;
        /**
         * Target URL for the secondary button.
         */
        this.secondaryButtonUrl = 'report-issue';
        /**
         * Target URL for the return button.
         */
        this.returnButtonUrl = '/';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.route) {
            this.route.params.forEach((params) => {
                if (params['id'] && !this.errorCode) {
                    this.errorCode = params['id'];
                    /** @type {?} */
                    let unknown = '';
                    this.translateService.get('ERROR_CONTENT.' + this.errorCode + '.TITLE').subscribe((errorTranslation) => {
                        unknown = errorTranslation;
                    });
                    if (unknown === 'ERROR_CONTENT.' + this.errorCode + '.TITLE') {
                        this.errorCode = 'UNKNOWN';
                    }
                }
            });
        }
    }
    /**
     * @return {?}
     */
    getTranslations() {
        this.hasSecondButton = this.translateService.instant('ERROR_CONTENT.' + this.errorCode + '.SECONDARY_BUTTON.TEXT') ? true : false;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.getTranslations();
    }
    /**
     * @return {?}
     */
    onSecondButton() {
        this.router.navigate(['/' + this.secondaryButtonUrl]);
    }
    /**
     * @return {?}
     */
    onReturnButton() {
        this.router.navigate(['/' + this.returnButtonUrl]);
    }
}
ErrorContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-error-content',
                template: "<div class=\"adf-error-content\">\n    <p class=\"adf-error-content-code\">\n        {{ errorCode }}\n    </p>\n    <div class=\"adf-error-content-shadow\"></div>\n    <p class=\"adf-error-content-title\">\n        {{ 'ERROR_CONTENT.' + errorCode + '.TITLE' | translate }}\n    </p>\n    <p class=\"adf-error-content-description\">\n        {{ 'ERROR_CONTENT.' + errorCode + '.DESCRIPTION' | translate }}\n    </p>\n    <div class=\"adf-error-content-buttons\">\n        <a a id=\"adf-secondary-button\" mat-raised-button color=\"primary\"\n            *ngIf=\"hasSecondButton\" (click)=\"onSecondButton()\"\n            class=\"adf-error-content-description-link\">\n            {{ 'ERROR_CONTENT.' + errorCode + '.SECONDARY_BUTTON.TEXT' | translate | uppercase }}\n        </a>\n        <a id=\"adf-return-button\" mat-raised-button color=\"primary\" (click)=\"onReturnButton()\">\n            {{ 'ERROR_CONTENT.' + this.errorCode + '.RETURN_BUTTON.TEXT' | translate | uppercase }}\n        </a>\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-error-content' },
                styles: [""]
            }] }
];
/** @nocollapse */
ErrorContentComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: TranslationService }
];
ErrorContentComponent.propDecorators = {
    secondaryButtonUrl: [{ type: Input }],
    returnButtonUrl: [{ type: Input }],
    errorCode: [{ type: Input }]
};
if (false) {
    /**
     * Target URL for the secondary button.
     * @type {?}
     */
    ErrorContentComponent.prototype.secondaryButtonUrl;
    /**
     * Target URL for the return button.
     * @type {?}
     */
    ErrorContentComponent.prototype.returnButtonUrl;
    /**
     * Error code associated with this error.
     * @type {?}
     */
    ErrorContentComponent.prototype.errorCode;
    /** @type {?} */
    ErrorContentComponent.prototype.hasSecondButton;
    /** @type {?} */
    ErrorContentComponent.prototype.route;
    /** @type {?} */
    ErrorContentComponent.prototype.router;
    /** @type {?} */
    ErrorContentComponent.prototype.translateService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJ0ZW1wbGF0ZXMvZXJyb3ItY29udGVudC9lcnJvci1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUNULHVCQUF1QixFQUN2QixLQUFLLEVBQ0wsaUJBQWlCLEVBR3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBVSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFVeEUsTUFBTTs7Ozs7O0lBZ0JGLFlBQW9CLEtBQXFCLEVBQ3JCLFFBQ0E7UUFGQSxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixXQUFNLEdBQU4sTUFBTTtRQUNOLHFCQUFnQixHQUFoQixnQkFBZ0I7Ozs7a0NBZFAsY0FBYzs7OzsrQkFJakIsR0FBRztLQVc1Qjs7OztJQUVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtnQkFDekMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7b0JBQzlCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztvQkFDakIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUF3QixFQUFFLEVBQUU7d0JBQzNHLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQztxQkFDOUIsQ0FBQyxDQUFDO29CQUNILElBQUksT0FBTyxLQUFLLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxFQUFFO3dCQUMxRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztxQkFDOUI7aUJBQ0o7YUFDSixDQUFDLENBQUM7U0FDTjtLQUNKOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDaEQsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUNwRjs7OztJQUVELHFCQUFxQjtRQUNqQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDMUI7Ozs7SUFFRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztLQUN6RDs7OztJQUVELGNBQWM7UUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztLQUN0RDs7O1lBN0RKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix1Z0NBQTZDO2dCQUU3QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRTs7YUFDdkM7Ozs7WUFWZ0IsY0FBYztZQUFFLE1BQU07WUFDOUIsa0JBQWtCOzs7aUNBYXRCLEtBQUs7OEJBSUwsS0FBSzt3QkFJTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgSW5wdXQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgT25Jbml0LFxuICAgIEFmdGVyQ29udGVudENoZWNrZWRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXJhbXMsIEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdHJhbnNsYXRpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWVycm9yLWNvbnRlbnQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9lcnJvci1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9lcnJvci1jb250ZW50LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLWVycm9yLWNvbnRlbnQnIH1cbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRDaGVja2VkIHtcblxuICAgIC8qKiBUYXJnZXQgVVJMIGZvciB0aGUgc2Vjb25kYXJ5IGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNlY29uZGFyeUJ1dHRvblVybDogc3RyaW5nID0gJ3JlcG9ydC1pc3N1ZSc7XG5cbiAgICAvKiogVGFyZ2V0IFVSTCBmb3IgdGhlIHJldHVybiBidXR0b24uICovXG4gICAgQElucHV0KClcbiAgICByZXR1cm5CdXR0b25Vcmw6IHN0cmluZyA9ICcvJztcblxuICAgIC8qKiBFcnJvciBjb2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVycm9yLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZXJyb3JDb2RlOiBzdHJpbmc7XG5cbiAgICBoYXNTZWNvbmRCdXR0b246IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvdXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlLnBhcmFtcy5mb3JFYWNoKChwYXJhbXM6IFBhcmFtcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbJ2lkJ10gJiYgIXRoaXMuZXJyb3JDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JDb2RlID0gcGFyYW1zWydpZCddO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdW5rbm93biA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KCdFUlJPUl9DT05URU5ULicgKyB0aGlzLmVycm9yQ29kZSArICcuVElUTEUnKS5zdWJzY3JpYmUoKGVycm9yVHJhbnNsYXRpb246IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5rbm93biA9IGVycm9yVHJhbnNsYXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5rbm93biA9PT0gJ0VSUk9SX0NPTlRFTlQuJyArIHRoaXMuZXJyb3JDb2RlICsgJy5USVRMRScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JDb2RlID0gJ1VOS05PV04nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRUcmFuc2xhdGlvbnMoKSB7XG4gICAgICAgIHRoaXMuaGFzU2Vjb25kQnV0dG9uID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgICAgICAnRVJST1JfQ09OVEVOVC4nICsgdGhpcy5lcnJvckNvZGUgKyAnLlNFQ09OREFSWV9CVVRUT04uVEVYVCcpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy5nZXRUcmFuc2xhdGlvbnMoKTtcbiAgICB9XG5cbiAgICBvblNlY29uZEJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvJyArIHRoaXMuc2Vjb25kYXJ5QnV0dG9uVXJsXSk7XG4gICAgfVxuXG4gICAgb25SZXR1cm5CdXR0b24oKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLycgKyB0aGlzLnJldHVybkJ1dHRvblVybF0pO1xuICAgIH1cbn1cbiJdfQ==