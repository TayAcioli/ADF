/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, Subject, from, of, throwError } from 'rxjs';
import { FormDefinitionModel } from '../models/form-definition.model';
import { FormModel, FormOutcomeModel } from './../components/widgets/core/index';
import { EcmModelService } from './ecm-model.service';
import { map, catchError, switchMap, combineAll, defaultIfEmpty } from 'rxjs/operators';
export class FormService {
    /**
     * @param {?} ecmModelService
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(ecmModelService, apiService, logService) {
        this.ecmModelService = ecmModelService;
        this.apiService = apiService;
        this.logService = logService;
        this.formLoaded = new Subject();
        this.formDataRefreshed = new Subject();
        this.formFieldValueChanged = new Subject();
        this.formEvents = new Subject();
        this.taskCompleted = new Subject();
        this.taskCompletedError = new Subject();
        this.taskSaved = new Subject();
        this.taskSavedError = new Subject();
        this.formContentClicked = new Subject();
        this.validateForm = new Subject();
        this.validateFormField = new Subject();
        this.validateDynamicTableRow = new Subject();
        this.executeOutcome = new Subject();
    }
    /**
     * @return {?}
     */
    get taskApi() {
        return this.apiService.getInstance().activiti.taskApi;
    }
    /**
     * @return {?}
     */
    get modelsApi() {
        return this.apiService.getInstance().activiti.modelsApi;
    }
    /**
     * @return {?}
     */
    get editorApi() {
        return this.apiService.getInstance().activiti.editorApi;
    }
    /**
     * @return {?}
     */
    get processApi() {
        return this.apiService.getInstance().activiti.processApi;
    }
    /**
     * @return {?}
     */
    get processInstanceVariablesApi() {
        return this.apiService.getInstance().activiti.processInstanceVariablesApi;
    }
    /**
     * @return {?}
     */
    get usersWorkflowApi() {
        return this.apiService.getInstance().activiti.usersWorkflowApi;
    }
    /**
     * @return {?}
     */
    get groupsApi() {
        return this.apiService.getInstance().activiti.groupsApi;
    }
    /**
     * Parses JSON data to create a corresponding Form model.
     * @param {?} json JSON to create the form
     * @param {?=} data Values for the form fields
     * @param {?=} readOnly Should the form fields be read-only?
     * @return {?} Form model created from input data
     */
    parseForm(json, data, readOnly = false) {
        if (json) {
            /** @type {?} */
            let form = new FormModel(json, data, readOnly, this);
            if (!json.fields) {
                form.outcomes = [
                    new FormOutcomeModel(form, {
                        id: '$custom',
                        name: FormOutcomeModel.SAVE_ACTION,
                        isSystem: true
                    })
                ];
            }
            return form;
        }
        return null;
    }
    /**
     * Creates a Form with a field for each metadata property.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    createFormFromANode(formName) {
        return Observable.create(observer => {
            this.createForm(formName).subscribe(form => {
                this.ecmModelService.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(customType => {
                    /** @type {?} */
                    let formDefinitionModel = new FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);
                    this.addFieldsToAForm(form.id, formDefinitionModel).subscribe(formData => {
                        observer.next(formData);
                        observer.complete();
                    }, err => this.handleError(err));
                }, err => this.handleError(err));
            }, err => this.handleError(err));
        });
    }
    /**
     * Create a Form.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    createForm(formName) {
        /** @type {?} */
        let dataModel = {
            name: formName,
            description: '',
            modelType: 2,
            stencilSet: 0
        };
        return from(this.modelsApi.createModel(dataModel));
    }
    /**
     * Saves a form.
     * @param {?} formId ID of the form to save
     * @param {?} formModel Model data for the form
     * @return {?} Data for the saved form
     */
    saveForm(formId, formModel) {
        return from(this.editorApi.saveForm(formId, formModel));
    }
    /**
     * Add Fields to a form
     * @deprecated in 1.7.0, use saveForm API instead
     * @param {?} formId ID of the form
     * @param {?} formModel Form definition
     * @return {?}
     */
    addFieldsToAForm(formId, formModel) {
        this.logService.log('addFieldsToAForm is deprecated in 1.7.0, use saveForm API instead');
        return from(this.editorApi.saveForm(formId, formModel));
    }
    /**
     * Searches for a form by name.
     * @param {?} name The form name to search for
     * @return {?} Form model(s) matching the search name
     */
    searchFrom(name) {
        /** @type {?} */
        let opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(function (forms) {
            return forms.data.find(formdata => formdata.name === name);
        }), catchError(err => this.handleError(err)));
    }
    /**
     * Gets all the forms.
     * @return {?} List of form models
     */
    getForms() {
        /** @type {?} */
        let opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.toJsonArray), catchError(err => this.handleError(err)));
    }
    /**
     * Gets process definitions.
     * @return {?} List of process definitions
     */
    getProcessDefinitions() {
        return from(this.processApi.getProcessDefinitions({}))
            .pipe(map(this.toJsonArray), catchError(err => this.handleError(err)));
    }
    /**
     * Gets instance variables for a process.
     * @param {?} processInstanceId ID of the target process
     * @return {?} List of instance variable information
     */
    getProcessVarablesById(processInstanceId) {
        return from(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Gets all the tasks.
     * @return {?} List of tasks
     */
    getTasks() {
        return from(this.taskApi.listTasks({}))
            .pipe(map(this.toJsonArray), catchError(err => this.handleError(err)));
    }
    /**
     * Gets a task.
     * @param {?} taskId Task Id
     * @return {?} Task info
     */
    getTask(taskId) {
        return from(this.taskApi.getTask(taskId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Saves a task form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @return {?} Null response when the operation is complete
     */
    saveTaskForm(taskId, formValues) {
        /** @type {?} */
        let body = JSON.stringify({ values: formValues });
        return from(this.taskApi.saveTaskForm(taskId, body))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Completes a Task Form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @param {?=} outcome Form Outcome
     * @return {?} Null response when the operation is complete
     */
    completeTaskForm(taskId, formValues, outcome) {
        /** @type {?} */
        let data = { values: formValues };
        if (outcome) {
            data.outcome = outcome;
        }
        /** @type {?} */
        let body = JSON.stringify(data);
        return from(this.taskApi.completeTaskForm(taskId, body))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets a form related to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Form definition
     */
    getTaskForm(taskId) {
        return from(this.taskApi.getTaskForm(taskId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Gets a form definition.
     * @param {?} formId ID of the target form
     * @return {?} Form definition
     */
    getFormDefinitionById(formId) {
        return from(this.editorApi.getForm(formId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Gets the form definition with a given name.
     * @param {?} name The form name
     * @return {?} Form definition
     */
    getFormDefinitionByName(name) {
        /** @type {?} */
        let opts = {
            'filter': 'myReusableForms',
            'filterText': name,
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.getFormId), catchError(err => this.handleError(err)));
    }
    /**
     * Gets the start form instance for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    getStartFormInstance(processId) {
        return from(this.processApi.getProcessInstanceStartForm(processId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Gets a process instance.
     * @param {?} processId ID of the process to get
     * @return {?} Process instance
     */
    getProcessIntance(processId) {
        return from(this.processApi.getProcessInstance(processId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Gets the start form definition for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    getStartFormDefinition(processId) {
        return from(this.processApi.getProcessDefinitionStartForm(processId))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * Gets values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    getRestFieldValues(taskId, field) {
        return from(this.taskApi.getRestFieldValues(taskId, field))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    getRestFieldValuesByProcessId(processDefinitionId, field) {
        return from(this.processApi.getRestFieldValues(processDefinitionId, field))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets column values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    getRestFieldValuesColumnByProcessId(processDefinitionId, field, column) {
        return from(this.processApi.getRestTableFieldValues(processDefinitionId, field, column))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets column values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    getRestFieldValuesColumn(taskId, field, column) {
        return from(this.taskApi.getRestFieldValuesColumn(taskId, field, column))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Returns a URL for the profile picture of a user.
     * @param {?} userId ID of the target user
     * @return {?} URL string
     */
    getUserProfileImageApi(userId) {
        return this.apiService.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);
    }
    /**
     * Gets a list of workflow users.
     * @param {?} filter Filter to select specific users
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of users
     */
    getWorkflowUsers(filter, groupId) {
        /** @type {?} */
        let option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.usersWorkflowApi.getUsers(option))
            .pipe(switchMap((response) => /** @type {?} */ (response.data) || []), map((user) => {
            user.userImage = this.getUserProfileImageApi(user.id);
            return of(user);
        }), combineAll(), defaultIfEmpty([]), catchError(err => this.handleError(err)));
    }
    /**
     * Gets a list of groups in a workflow.
     * @param {?} filter Filter to select specific groups
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of groups
     */
    getWorkflowGroups(filter, groupId) {
        /** @type {?} */
        let option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.groupsApi.getGroups(option))
            .pipe(map((response) => /** @type {?} */ (response.data) || []), catchError(err => this.handleError(err)));
    }
    /**
     * Gets the ID of a form.
     * @param {?} res Object representing a form
     * @return {?} ID string
     */
    getFormId(res) {
        /** @type {?} */
        let result = null;
        if (res && res.data && res.data.length > 0) {
            result = res.data[0].id;
        }
        return result;
    }
    /**
     * Creates a JSON representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    /**
     * Creates a JSON array representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Error message
     */
    handleError(error) {
        /** @type {?} */
        let errMsg = FormService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : FormService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
FormService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
FormService.GENERIC_ERROR_MESSAGE = 'Server error';
FormService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormService.ctorParameters = () => [
    { type: EcmModelService },
    { type: AlfrescoApiService },
    { type: LogService }
];
if (false) {
    /** @type {?} */
    FormService.UNKNOWN_ERROR_MESSAGE;
    /** @type {?} */
    FormService.GENERIC_ERROR_MESSAGE;
    /** @type {?} */
    FormService.prototype.formLoaded;
    /** @type {?} */
    FormService.prototype.formDataRefreshed;
    /** @type {?} */
    FormService.prototype.formFieldValueChanged;
    /** @type {?} */
    FormService.prototype.formEvents;
    /** @type {?} */
    FormService.prototype.taskCompleted;
    /** @type {?} */
    FormService.prototype.taskCompletedError;
    /** @type {?} */
    FormService.prototype.taskSaved;
    /** @type {?} */
    FormService.prototype.taskSavedError;
    /** @type {?} */
    FormService.prototype.formContentClicked;
    /** @type {?} */
    FormService.prototype.validateForm;
    /** @type {?} */
    FormService.prototype.validateFormField;
    /** @type {?} */
    FormService.prototype.validateDynamicTableRow;
    /** @type {?} */
    FormService.prototype.executeOutcome;
    /** @type {?} */
    FormService.prototype.ecmModelService;
    /** @type {?} */
    FormService.prototype.apiService;
    /** @type {?} */
    FormService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiZm9ybS9zZXJ2aWNlcy9mb3JtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDekUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHdEUsT0FBTyxFQUFFLFNBQVMsRUFBb0IsZ0JBQWdCLEVBQWMsTUFBTSxvQ0FBb0MsQ0FBQztBQUsvRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUd4RixNQUFNOzs7Ozs7SUFxQkYsWUFBb0IsZUFBZ0MsRUFDaEMsWUFDRSxVQUFzQjtRQUZ4QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsZUFBVSxHQUFWLFVBQVU7UUFDUixlQUFVLEdBQVYsVUFBVSxDQUFZOzBCQWxCL0IsSUFBSSxPQUFPLEVBQWE7aUNBQ2pCLElBQUksT0FBTyxFQUFhO3FDQUNwQixJQUFJLE9BQU8sRUFBa0I7MEJBQ3hDLElBQUksT0FBTyxFQUFTOzZCQUNqQixJQUFJLE9BQU8sRUFBYTtrQ0FDbkIsSUFBSSxPQUFPLEVBQWtCO3lCQUN0QyxJQUFJLE9BQU8sRUFBYTs4QkFDbkIsSUFBSSxPQUFPLEVBQWtCO2tDQUN6QixJQUFJLE9BQU8sRUFBb0I7NEJBRXJDLElBQUksT0FBTyxFQUFxQjtpQ0FDM0IsSUFBSSxPQUFPLEVBQTBCO3VDQUMvQixJQUFJLE9BQU8sRUFBZ0M7OEJBRXBELElBQUksT0FBTyxFQUFvQjtLQUsvQzs7OztRQUVXLE9BQU87UUFDZixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzs7Ozs7UUFHOUMsU0FBUztRQUNqQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQzs7Ozs7UUFHaEQsU0FBUztRQUNqQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQzs7Ozs7UUFHaEQsVUFBVTtRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQzs7Ozs7UUFHakQsMkJBQTJCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUM7Ozs7O1FBR2xFLGdCQUFnQjtRQUN4QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDOzs7OztRQUd2RCxTQUFTO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDOzs7Ozs7Ozs7SUFVNUQsU0FBUyxDQUFDLElBQVMsRUFBRSxJQUFpQixFQUFFLFdBQW9CLEtBQUs7UUFDN0QsSUFBSSxJQUFJLEVBQUU7O1lBQ04sSUFBSSxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRztvQkFDWixJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRTt3QkFDdkIsRUFBRSxFQUFFLFNBQVM7d0JBQ2IsSUFBSSxFQUFFLGdCQUFnQixDQUFDLFdBQVc7d0JBQ2xDLFFBQVEsRUFBRSxJQUFJO3FCQUNqQixDQUFDO2lCQUNMLENBQUM7YUFDTDtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLElBQUksQ0FBQztLQUNmOzs7Ozs7SUFPRCxtQkFBbUIsQ0FBQyxRQUFnQjtRQUNoQyxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQy9CLElBQUksQ0FBQyxFQUFFO2dCQUNILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUM5RSxVQUFVLENBQUMsRUFBRTs7b0JBQ1QsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNqSixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTt3QkFDckUsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDeEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3FCQUN2QixFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUNwQyxFQUNELEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3JDLEVBQ0QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDckMsQ0FBQyxDQUFDO0tBQ047Ozs7OztJQU9ELFVBQVUsQ0FBQyxRQUFnQjs7UUFDdkIsSUFBSSxTQUFTLEdBQUc7WUFDWixJQUFJLEVBQUUsUUFBUTtZQUNkLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLENBQUM7WUFDWixVQUFVLEVBQUUsQ0FBQztTQUNoQixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQ3hDLENBQUM7S0FDTDs7Ozs7OztJQVFELFFBQVEsQ0FBQyxNQUFjLEVBQUUsU0FBOEI7UUFDbkQsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUM3QyxDQUFDO0tBQ0w7Ozs7Ozs7O0lBUUQsZ0JBQWdCLENBQUMsTUFBYyxFQUFFLFNBQThCO1FBQzNELElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7UUFDekYsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUM3QyxDQUFDO0tBQ0w7Ozs7OztJQU9ELFVBQVUsQ0FBQyxJQUFZOztRQUNuQixJQUFJLElBQUksR0FBRztZQUNQLFdBQVcsRUFBRSxDQUFDO1NBQ2pCLENBQUM7UUFFRixPQUFPLElBQUksQ0FDUCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDakM7YUFDQSxJQUFJLENBQ0QsR0FBRyxDQUFDLFVBQVUsS0FBVTtZQUNwQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztTQUM5RCxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ0w7Ozs7O0lBTUQsUUFBUTs7UUFDSixJQUFJLElBQUksR0FBRztZQUNQLFdBQVcsRUFBRSxDQUFDO1NBQ2pCLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QyxJQUFJLENBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFDckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ1Q7Ozs7O0lBTUQscUJBQXFCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDakQsSUFBSSxDQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQ3JCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7SUFPRCxzQkFBc0IsQ0FBQyxpQkFBeUI7UUFDNUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLDJCQUEyQixDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDdkYsSUFBSSxDQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ2hCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7OztJQU1ELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNsQyxJQUFJLENBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFDckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ1Q7Ozs7OztJQU9ELE9BQU8sQ0FBQyxNQUFjO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3BDLElBQUksQ0FDRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUNoQixVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNDLENBQUM7S0FDVDs7Ozs7OztJQVFELFlBQVksQ0FBQyxNQUFjLEVBQUUsVUFBc0I7O1FBQy9DLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztRQUVoRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDL0MsSUFBSSxDQUNELFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7OztJQVNELGdCQUFnQixDQUFDLE1BQWMsRUFBRSxVQUFzQixFQUFFLE9BQWdCOztRQUNyRSxJQUFJLElBQUksR0FBUSxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsQ0FBQztRQUNyQyxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzFCOztRQUNELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDbkQsSUFBSSxDQUNELFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7SUFPRCxXQUFXLENBQUMsTUFBYztRQUN0QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QyxJQUFJLENBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDaEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ1Q7Ozs7OztJQU9ELHFCQUFxQixDQUFDLE1BQWM7UUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdEMsSUFBSSxDQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ2hCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7SUFPRCx1QkFBdUIsQ0FBQyxJQUFZOztRQUNoQyxJQUFJLElBQUksR0FBRztZQUNQLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsWUFBWSxFQUFFLElBQUk7WUFDbEIsV0FBVyxFQUFFLENBQUM7U0FDakIsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3RDLElBQUksQ0FDRCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUNuQixVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNDLENBQUM7S0FDVDs7Ozs7O0lBT0Qsb0JBQW9CLENBQUMsU0FBaUI7UUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUM5RCxJQUFJLENBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDaEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ1Q7Ozs7OztJQU9ELGlCQUFpQixDQUFDLFNBQWlCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDckQsSUFBSSxDQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ2hCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7SUFPRCxzQkFBc0IsQ0FBQyxTQUFpQjtRQUNwQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLDZCQUE2QixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ2hFLElBQUksQ0FDRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUNoQixVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNDLENBQUM7S0FDVDs7Ozs7OztJQVFELGtCQUFrQixDQUFDLE1BQWMsRUFBRSxLQUFhO1FBQzVDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3RELElBQUksQ0FDRCxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNDLENBQUM7S0FDVDs7Ozs7OztJQVFELDZCQUE2QixDQUFDLG1CQUEyQixFQUFFLEtBQWE7UUFDcEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN0RSxJQUFJLENBQ0QsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0tBQ1Q7Ozs7Ozs7O0lBU0QsbUNBQW1DLENBQUMsbUJBQTJCLEVBQUUsS0FBYSxFQUFFLE1BQWU7UUFDM0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDbkYsSUFBSSxDQUNELFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7OztJQVNELHdCQUF3QixDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsTUFBZTtRQUNuRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDcEUsSUFBSSxDQUNELFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7SUFPRCxzQkFBc0IsQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzFGOzs7Ozs7O0lBUUQsZ0JBQWdCLENBQUMsTUFBYyxFQUFFLE9BQWdCOztRQUM3QyxJQUFJLE1BQU0sR0FBUSxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQztRQUNuQyxJQUFJLE9BQU8sRUFBRTtZQUNULE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM5QyxJQUFJLENBQ0QsU0FBUyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsbUJBQXNCLFFBQVEsQ0FBQyxJQUFJLEtBQUksRUFBRSxDQUFDLEVBQ3RFLEdBQUcsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CLENBQUMsRUFDRixVQUFVLEVBQUUsRUFDWixjQUFjLENBQUMsRUFBRSxDQUFDLEVBQ2xCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0MsQ0FBQztLQUNUOzs7Ozs7O0lBUUQsaUJBQWlCLENBQUMsTUFBYyxFQUFFLE9BQWdCOztRQUM5QyxJQUFJLE1BQU0sR0FBUSxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQztRQUNuQyxJQUFJLE9BQU8sRUFBRTtZQUNULE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEMsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFLG1CQUFnQixRQUFRLENBQUMsSUFBSSxLQUFJLEVBQUUsQ0FBQyxFQUMxRCxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNDLENBQUM7S0FDVDs7Ozs7O0lBT0QsU0FBUyxDQUFDLEdBQVE7O1FBQ2QsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBRWxCLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMzQjtRQUVELE9BQU8sTUFBTSxDQUFDO0tBQ2pCOzs7Ozs7SUFPRCxNQUFNLENBQUMsR0FBUTtRQUNYLElBQUksR0FBRyxFQUFFO1lBQ0wsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUM7S0FDYjs7Ozs7O0lBT0QsV0FBVyxDQUFDLEdBQVE7UUFDaEIsSUFBSSxHQUFHLEVBQUU7WUFDTCxPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxFQUFFLENBQUM7S0FDYjs7Ozs7O0lBT0QsV0FBVyxDQUFDLEtBQVU7O1FBQ2xCLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQztRQUMvQyxJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLE1BQU0sS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUM7U0FDbEc7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM3Qjs7b0NBemZzQyxlQUFlO29DQUNmLGNBQWM7O1lBSnhELFVBQVU7Ozs7WUFIRixlQUFlO1lBYmYsa0JBQWtCO1lBQ2xCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByb2Nlc3NNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBmcm9tLCBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRm9ybURlZmluaXRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9mb3JtLWRlZmluaXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgQ29udGVudExpbmtNb2RlbCB9IGZyb20gJy4vLi4vY29tcG9uZW50cy93aWRnZXRzL2NvcmUvY29udGVudC1saW5rLm1vZGVsJztcbmltcG9ydCB7IEdyb3VwTW9kZWwgfSBmcm9tICcuLy4uL2NvbXBvbmVudHMvd2lkZ2V0cy9jb3JlL2dyb3VwLm1vZGVsJztcbmltcG9ydCB7IEZvcm1Nb2RlbCwgRm9ybU91dGNvbWVFdmVudCwgRm9ybU91dGNvbWVNb2RlbCwgRm9ybVZhbHVlcyB9IGZyb20gJy4vLi4vY29tcG9uZW50cy93aWRnZXRzL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHtcbiAgICBGb3JtRXJyb3JFdmVudCwgRm9ybUV2ZW50LCBGb3JtRmllbGRFdmVudCxcbiAgICBWYWxpZGF0ZUR5bmFtaWNUYWJsZVJvd0V2ZW50LCBWYWxpZGF0ZUZvcm1FdmVudCwgVmFsaWRhdGVGb3JtRmllbGRFdmVudFxufSBmcm9tICcuLy4uL2V2ZW50cy9pbmRleCc7XG5pbXBvcnQgeyBFY21Nb2RlbFNlcnZpY2UgfSBmcm9tICcuL2VjbS1tb2RlbC5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciwgc3dpdGNoTWFwLCBjb21iaW5lQWxsLCBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvcm1TZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBVTktOT1dOX0VSUk9SX01FU1NBR0U6IHN0cmluZyA9ICdVbmtub3duIGVycm9yJztcbiAgICBzdGF0aWMgR0VORVJJQ19FUlJPUl9NRVNTQUdFOiBzdHJpbmcgPSAnU2VydmVyIGVycm9yJztcblxuICAgIGZvcm1Mb2FkZWQgPSBuZXcgU3ViamVjdDxGb3JtRXZlbnQ+KCk7XG4gICAgZm9ybURhdGFSZWZyZXNoZWQgPSBuZXcgU3ViamVjdDxGb3JtRXZlbnQ+KCk7XG4gICAgZm9ybUZpZWxkVmFsdWVDaGFuZ2VkID0gbmV3IFN1YmplY3Q8Rm9ybUZpZWxkRXZlbnQ+KCk7XG4gICAgZm9ybUV2ZW50cyA9IG5ldyBTdWJqZWN0PEV2ZW50PigpO1xuICAgIHRhc2tDb21wbGV0ZWQgPSBuZXcgU3ViamVjdDxGb3JtRXZlbnQ+KCk7XG4gICAgdGFza0NvbXBsZXRlZEVycm9yID0gbmV3IFN1YmplY3Q8Rm9ybUVycm9yRXZlbnQ+KCk7XG4gICAgdGFza1NhdmVkID0gbmV3IFN1YmplY3Q8Rm9ybUV2ZW50PigpO1xuICAgIHRhc2tTYXZlZEVycm9yID0gbmV3IFN1YmplY3Q8Rm9ybUVycm9yRXZlbnQ+KCk7XG4gICAgZm9ybUNvbnRlbnRDbGlja2VkID0gbmV3IFN1YmplY3Q8Q29udGVudExpbmtNb2RlbD4oKTtcblxuICAgIHZhbGlkYXRlRm9ybSA9IG5ldyBTdWJqZWN0PFZhbGlkYXRlRm9ybUV2ZW50PigpO1xuICAgIHZhbGlkYXRlRm9ybUZpZWxkID0gbmV3IFN1YmplY3Q8VmFsaWRhdGVGb3JtRmllbGRFdmVudD4oKTtcbiAgICB2YWxpZGF0ZUR5bmFtaWNUYWJsZVJvdyA9IG5ldyBTdWJqZWN0PFZhbGlkYXRlRHluYW1pY1RhYmxlUm93RXZlbnQ+KCk7XG5cbiAgICBleGVjdXRlT3V0Y29tZSA9IG5ldyBTdWJqZWN0PEZvcm1PdXRjb21lRXZlbnQ+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVjbU1vZGVsU2VydmljZTogRWNtTW9kZWxTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgdGFza0FwaSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkudGFza0FwaTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBtb2RlbHNBcGkoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLm1vZGVsc0FwaTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBlZGl0b3JBcGkoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLmVkaXRvckFwaTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBwcm9jZXNzQXBpKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlc0FwaSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucHJvY2Vzc0luc3RhbmNlVmFyaWFibGVzQXBpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHVzZXJzV29ya2Zsb3dBcGkoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnVzZXJzV29ya2Zsb3dBcGk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgZ3JvdXBzQXBpKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5ncm91cHNBcGk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIEpTT04gZGF0YSB0byBjcmVhdGUgYSBjb3JyZXNwb25kaW5nIEZvcm0gbW9kZWwuXG4gICAgICogQHBhcmFtIGpzb24gSlNPTiB0byBjcmVhdGUgdGhlIGZvcm1cbiAgICAgKiBAcGFyYW0gZGF0YSBWYWx1ZXMgZm9yIHRoZSBmb3JtIGZpZWxkc1xuICAgICAqIEBwYXJhbSByZWFkT25seSBTaG91bGQgdGhlIGZvcm0gZmllbGRzIGJlIHJlYWQtb25seT9cbiAgICAgKiBAcmV0dXJucyBGb3JtIG1vZGVsIGNyZWF0ZWQgZnJvbSBpbnB1dCBkYXRhXG4gICAgICovXG4gICAgcGFyc2VGb3JtKGpzb246IGFueSwgZGF0YT86IEZvcm1WYWx1ZXMsIHJlYWRPbmx5OiBib29sZWFuID0gZmFsc2UpOiBGb3JtTW9kZWwge1xuICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgbGV0IGZvcm0gPSBuZXcgRm9ybU1vZGVsKGpzb24sIGRhdGEsIHJlYWRPbmx5LCB0aGlzKTtcbiAgICAgICAgICAgIGlmICghanNvbi5maWVsZHMpIHtcbiAgICAgICAgICAgICAgICBmb3JtLm91dGNvbWVzID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgRm9ybU91dGNvbWVNb2RlbChmb3JtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJyRjdXN0b20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogRm9ybU91dGNvbWVNb2RlbC5TQVZFX0FDVElPTixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3lzdGVtOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBGb3JtIHdpdGggYSBmaWVsZCBmb3IgZWFjaCBtZXRhZGF0YSBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0gZm9ybU5hbWUgTmFtZSBvZiB0aGUgbmV3IGZvcm1cbiAgICAgKiBAcmV0dXJucyBUaGUgbmV3IGZvcm1cbiAgICAgKi9cbiAgICBjcmVhdGVGb3JtRnJvbUFOb2RlKGZvcm1OYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVGb3JtKGZvcm1OYW1lKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgZm9ybSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWNtTW9kZWxTZXJ2aWNlLnNlYXJjaEVjbVR5cGUoZm9ybU5hbWUsIEVjbU1vZGVsU2VydmljZS5NT0RFTF9OQU1FKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21UeXBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybURlZmluaXRpb25Nb2RlbCA9IG5ldyBGb3JtRGVmaW5pdGlvbk1vZGVsKGZvcm0uaWQsIGZvcm0ubmFtZSwgZm9ybS5sYXN0VXBkYXRlZEJ5RnVsbE5hbWUsIGZvcm0ubGFzdFVwZGF0ZWQsIGN1c3RvbVR5cGUuZW50cnkucHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRGaWVsZHNUb0FGb3JtKGZvcm0uaWQsIGZvcm1EZWZpbml0aW9uTW9kZWwpLnN1YnNjcmliZShmb3JtRGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZm9ybURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIEZvcm0uXG4gICAgICogQHBhcmFtIGZvcm1OYW1lIE5hbWUgb2YgdGhlIG5ldyBmb3JtXG4gICAgICogQHJldHVybnMgVGhlIG5ldyBmb3JtXG4gICAgICovXG4gICAgY3JlYXRlRm9ybShmb3JtTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgbGV0IGRhdGFNb2RlbCA9IHtcbiAgICAgICAgICAgIG5hbWU6IGZvcm1OYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICcnLFxuICAgICAgICAgICAgbW9kZWxUeXBlOiAyLFxuICAgICAgICAgICAgc3RlbmNpbFNldDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5tb2RlbHNBcGkuY3JlYXRlTW9kZWwoZGF0YU1vZGVsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhdmVzIGEgZm9ybS5cbiAgICAgKiBAcGFyYW0gZm9ybUlkIElEIG9mIHRoZSBmb3JtIHRvIHNhdmVcbiAgICAgKiBAcGFyYW0gZm9ybU1vZGVsIE1vZGVsIGRhdGEgZm9yIHRoZSBmb3JtXG4gICAgICogQHJldHVybnMgRGF0YSBmb3IgdGhlIHNhdmVkIGZvcm1cbiAgICAgKi9cbiAgICBzYXZlRm9ybShmb3JtSWQ6IHN0cmluZywgZm9ybU1vZGVsOiBGb3JtRGVmaW5pdGlvbk1vZGVsKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20oXG4gICAgICAgICAgICB0aGlzLmVkaXRvckFwaS5zYXZlRm9ybShmb3JtSWQsIGZvcm1Nb2RlbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgRmllbGRzIHRvIGEgZm9ybVxuICAgICAqIEBkZXByZWNhdGVkIGluIDEuNy4wLCB1c2Ugc2F2ZUZvcm0gQVBJIGluc3RlYWRcbiAgICAgKiBAcGFyYW0gZm9ybUlkIElEIG9mIHRoZSBmb3JtXG4gICAgICogQHBhcmFtIGZvcm1Nb2RlbCBGb3JtIGRlZmluaXRpb25cbiAgICAgKi9cbiAgICBhZGRGaWVsZHNUb0FGb3JtKGZvcm1JZDogc3RyaW5nLCBmb3JtTW9kZWw6IEZvcm1EZWZpbml0aW9uTW9kZWwpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKCdhZGRGaWVsZHNUb0FGb3JtIGlzIGRlcHJlY2F0ZWQgaW4gMS43LjAsIHVzZSBzYXZlRm9ybSBBUEkgaW5zdGVhZCcpO1xuICAgICAgICByZXR1cm4gZnJvbShcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yQXBpLnNhdmVGb3JtKGZvcm1JZCwgZm9ybU1vZGVsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaGVzIGZvciBhIGZvcm0gYnkgbmFtZS5cbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgZm9ybSBuYW1lIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcmV0dXJucyBGb3JtIG1vZGVsKHMpIG1hdGNoaW5nIHRoZSBzZWFyY2ggbmFtZVxuICAgICAqL1xuICAgIHNlYXJjaEZyb20obmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgbGV0IG9wdHMgPSB7XG4gICAgICAgICAgICAnbW9kZWxUeXBlJzogMlxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5tb2RlbHNBcGkuZ2V0TW9kZWxzKG9wdHMpXG4gICAgICAgIClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAoZnVuY3Rpb24gKGZvcm1zOiBhbnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybXMuZGF0YS5maW5kKGZvcm1kYXRhID0+IGZvcm1kYXRhLm5hbWUgPT09IG5hbWUpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgdGhlIGZvcm1zLlxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgZm9ybSBtb2RlbHNcbiAgICAgKi9cbiAgICBnZXRGb3JtcygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBsZXQgb3B0cyA9IHtcbiAgICAgICAgICAgICdtb2RlbFR5cGUnOiAyXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5tb2RlbHNBcGkuZ2V0TW9kZWxzKG9wdHMpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKHRoaXMudG9Kc29uQXJyYXkpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBwcm9jZXNzIGRlZmluaXRpb25zLlxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgcHJvY2VzcyBkZWZpbml0aW9uc1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NEZWZpbml0aW9ucygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnByb2Nlc3NBcGkuZ2V0UHJvY2Vzc0RlZmluaXRpb25zKHt9KSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCh0aGlzLnRvSnNvbkFycmF5KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgaW5zdGFuY2UgdmFyaWFibGVzIGZvciBhIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJbnN0YW5jZUlkIElEIG9mIHRoZSB0YXJnZXQgcHJvY2Vzc1xuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgaW5zdGFuY2UgdmFyaWFibGUgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBnZXRQcm9jZXNzVmFyYWJsZXNCeUlkKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueVtdPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMucHJvY2Vzc0luc3RhbmNlVmFyaWFibGVzQXBpLmdldFByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlcyhwcm9jZXNzSW5zdGFuY2VJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy50b0pzb24pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgdGhlIHRhc2tzLlxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgdGFza3NcbiAgICAgKi9cbiAgICBnZXRUYXNrcygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnRhc2tBcGkubGlzdFRhc2tzKHt9KSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCh0aGlzLnRvSnNvbkFycmF5KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSB0YXNrLlxuICAgICAqIEBwYXJhbSB0YXNrSWQgVGFzayBJZFxuICAgICAqIEByZXR1cm5zIFRhc2sgaW5mb1xuICAgICAqL1xuICAgIGdldFRhc2sodGFza0lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnRhc2tBcGkuZ2V0VGFzayh0YXNrSWQpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKHRoaXMudG9Kc29uKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhdmVzIGEgdGFzayBmb3JtLlxuICAgICAqIEBwYXJhbSB0YXNrSWQgVGFzayBJZFxuICAgICAqIEBwYXJhbSBmb3JtVmFsdWVzIEZvcm0gVmFsdWVzXG4gICAgICogQHJldHVybnMgTnVsbCByZXNwb25zZSB3aGVuIHRoZSBvcGVyYXRpb24gaXMgY29tcGxldGVcbiAgICAgKi9cbiAgICBzYXZlVGFza0Zvcm0odGFza0lkOiBzdHJpbmcsIGZvcm1WYWx1ZXM6IEZvcm1WYWx1ZXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHt2YWx1ZXM6IGZvcm1WYWx1ZXN9KTtcblxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnRhc2tBcGkuc2F2ZVRhc2tGb3JtKHRhc2tJZCwgYm9keSkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBsZXRlcyBhIFRhc2sgRm9ybS5cbiAgICAgKiBAcGFyYW0gdGFza0lkIFRhc2sgSWRcbiAgICAgKiBAcGFyYW0gZm9ybVZhbHVlcyBGb3JtIFZhbHVlc1xuICAgICAqIEBwYXJhbSBvdXRjb21lIEZvcm0gT3V0Y29tZVxuICAgICAqIEByZXR1cm5zIE51bGwgcmVzcG9uc2Ugd2hlbiB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG4gICAgY29tcGxldGVUYXNrRm9ybSh0YXNrSWQ6IHN0cmluZywgZm9ybVZhbHVlczogRm9ybVZhbHVlcywgb3V0Y29tZT86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGxldCBkYXRhOiBhbnkgPSB7dmFsdWVzOiBmb3JtVmFsdWVzfTtcbiAgICAgICAgaWYgKG91dGNvbWUpIHtcbiAgICAgICAgICAgIGRhdGEub3V0Y29tZSA9IG91dGNvbWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcblxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnRhc2tBcGkuY29tcGxldGVUYXNrRm9ybSh0YXNrSWQsIGJvZHkpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgZm9ybSByZWxhdGVkIHRvIGEgdGFzay5cbiAgICAgKiBAcGFyYW0gdGFza0lkIElEIG9mIHRoZSB0YXJnZXQgdGFza1xuICAgICAqIEByZXR1cm5zIEZvcm0gZGVmaW5pdGlvblxuICAgICAqL1xuICAgIGdldFRhc2tGb3JtKHRhc2tJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy50YXNrQXBpLmdldFRhc2tGb3JtKHRhc2tJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy50b0pzb24pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGZvcm0gZGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gZm9ybUlkIElEIG9mIHRoZSB0YXJnZXQgZm9ybVxuICAgICAqIEByZXR1cm5zIEZvcm0gZGVmaW5pdGlvblxuICAgICAqL1xuICAgIGdldEZvcm1EZWZpbml0aW9uQnlJZChmb3JtSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuZWRpdG9yQXBpLmdldEZvcm0oZm9ybUlkKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCh0aGlzLnRvSnNvbiksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmb3JtIGRlZmluaXRpb24gd2l0aCBhIGdpdmVuIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIGZvcm0gbmFtZVxuICAgICAqIEByZXR1cm5zIEZvcm0gZGVmaW5pdGlvblxuICAgICAqL1xuICAgIGdldEZvcm1EZWZpbml0aW9uQnlOYW1lKG5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGxldCBvcHRzID0ge1xuICAgICAgICAgICAgJ2ZpbHRlcic6ICdteVJldXNhYmxlRm9ybXMnLFxuICAgICAgICAgICAgJ2ZpbHRlclRleHQnOiBuYW1lLFxuICAgICAgICAgICAgJ21vZGVsVHlwZSc6IDJcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLm1vZGVsc0FwaS5nZXRNb2RlbHMob3B0cykpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy5nZXRGb3JtSWQpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhcnQgZm9ybSBpbnN0YW5jZSBmb3IgYSBnaXZlbiBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSWQgUHJvY2VzcyBkZWZpbml0aW9uIElEXG4gICAgICogQHJldHVybnMgRm9ybSBkZWZpbml0aW9uXG4gICAgICovXG4gICAgZ2V0U3RhcnRGb3JtSW5zdGFuY2UocHJvY2Vzc0lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnByb2Nlc3NBcGkuZ2V0UHJvY2Vzc0luc3RhbmNlU3RhcnRGb3JtKHByb2Nlc3NJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy50b0pzb24pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHByb2Nlc3MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJZCBJRCBvZiB0aGUgcHJvY2VzcyB0byBnZXRcbiAgICAgKiBAcmV0dXJucyBQcm9jZXNzIGluc3RhbmNlXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0ludGFuY2UocHJvY2Vzc0lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnByb2Nlc3NBcGkuZ2V0UHJvY2Vzc0luc3RhbmNlKHByb2Nlc3NJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy50b0pzb24pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhcnQgZm9ybSBkZWZpbml0aW9uIGZvciBhIGdpdmVuIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJZCBQcm9jZXNzIGRlZmluaXRpb24gSURcbiAgICAgKiBAcmV0dXJucyBGb3JtIGRlZmluaXRpb25cbiAgICAgKi9cbiAgICBnZXRTdGFydEZvcm1EZWZpbml0aW9uKHByb2Nlc3NJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5wcm9jZXNzQXBpLmdldFByb2Nlc3NEZWZpbml0aW9uU3RhcnRGb3JtKHByb2Nlc3NJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy50b0pzb24pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB2YWx1ZXMgb2YgZmllbGRzIHBvcHVsYXRlZCBieSBhIFJFU1QgYmFja2VuZC5cbiAgICAgKiBAcGFyYW0gdGFza0lkIFRhc2sgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBmaWVsZCBGaWVsZCBpZGVudGlmaWVyXG4gICAgICogQHJldHVybnMgRmllbGQgdmFsdWVzXG4gICAgICovXG4gICAgZ2V0UmVzdEZpZWxkVmFsdWVzKHRhc2tJZDogc3RyaW5nLCBmaWVsZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy50YXNrQXBpLmdldFJlc3RGaWVsZFZhbHVlcyh0YXNrSWQsIGZpZWxkKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB2YWx1ZXMgb2YgZmllbGRzIHBvcHVsYXRlZCBieSBhIFJFU1QgYmFja2VuZCB1c2luZyBhIHByb2Nlc3MgSUQuXG4gICAgICogQHBhcmFtIHByb2Nlc3NEZWZpbml0aW9uSWQgUHJvY2VzcyBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIGZpZWxkIEZpZWxkIGlkZW50aWZpZXJcbiAgICAgKiBAcmV0dXJucyBGaWVsZCB2YWx1ZXNcbiAgICAgKi9cbiAgICBnZXRSZXN0RmllbGRWYWx1ZXNCeVByb2Nlc3NJZChwcm9jZXNzRGVmaW5pdGlvbklkOiBzdHJpbmcsIGZpZWxkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnByb2Nlc3NBcGkuZ2V0UmVzdEZpZWxkVmFsdWVzKHByb2Nlc3NEZWZpbml0aW9uSWQsIGZpZWxkKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBjb2x1bW4gdmFsdWVzIG9mIGZpZWxkcyBwb3B1bGF0ZWQgYnkgYSBSRVNUIGJhY2tlbmQgdXNpbmcgYSBwcm9jZXNzIElELlxuICAgICAqIEBwYXJhbSBwcm9jZXNzRGVmaW5pdGlvbklkIFByb2Nlc3MgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBmaWVsZCBGaWVsZCBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIGNvbHVtbiBDb2x1bW4gaWRlbnRpZmllclxuICAgICAqIEByZXR1cm5zIEZpZWxkIHZhbHVlc1xuICAgICAqL1xuICAgIGdldFJlc3RGaWVsZFZhbHVlc0NvbHVtbkJ5UHJvY2Vzc0lkKHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZywgZmllbGQ6IHN0cmluZywgY29sdW1uPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5wcm9jZXNzQXBpLmdldFJlc3RUYWJsZUZpZWxkVmFsdWVzKHByb2Nlc3NEZWZpbml0aW9uSWQsIGZpZWxkLCBjb2x1bW4pKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGNvbHVtbiB2YWx1ZXMgb2YgZmllbGRzIHBvcHVsYXRlZCBieSBhIFJFU1QgYmFja2VuZC5cbiAgICAgKiBAcGFyYW0gdGFza0lkIFRhc2sgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBmaWVsZCBGaWVsZCBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIGNvbHVtbiBDb2x1bW4gaWRlbnRpZmllclxuICAgICAqIEByZXR1cm5zIEZpZWxkIHZhbHVlc1xuICAgICAqL1xuICAgIGdldFJlc3RGaWVsZFZhbHVlc0NvbHVtbih0YXNrSWQ6IHN0cmluZywgZmllbGQ6IHN0cmluZywgY29sdW1uPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy50YXNrQXBpLmdldFJlc3RGaWVsZFZhbHVlc0NvbHVtbih0YXNrSWQsIGZpZWxkLCBjb2x1bW4pKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgVVJMIGZvciB0aGUgcHJvZmlsZSBwaWN0dXJlIG9mIGEgdXNlci5cbiAgICAgKiBAcGFyYW0gdXNlcklkIElEIG9mIHRoZSB0YXJnZXQgdXNlclxuICAgICAqIEByZXR1cm5zIFVSTCBzdHJpbmdcbiAgICAgKi9cbiAgICBnZXRVc2VyUHJvZmlsZUltYWdlQXBpKHVzZXJJZDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnVzZXJBcGkuZ2V0VXNlclByb2ZpbGVQaWN0dXJlVXJsKHVzZXJJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2Ygd29ya2Zsb3cgdXNlcnMuXG4gICAgICogQHBhcmFtIGZpbHRlciBGaWx0ZXIgdG8gc2VsZWN0IHNwZWNpZmljIHVzZXJzXG4gICAgICogQHBhcmFtIGdyb3VwSWQgR3JvdXAgSUQgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiB1c2Vyc1xuICAgICAqL1xuICAgIGdldFdvcmtmbG93VXNlcnMoZmlsdGVyOiBzdHJpbmcsIGdyb3VwSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFVzZXJQcm9jZXNzTW9kZWxbXT4ge1xuICAgICAgICBsZXQgb3B0aW9uOiBhbnkgPSB7ZmlsdGVyOiBmaWx0ZXJ9O1xuICAgICAgICBpZiAoZ3JvdXBJZCkge1xuICAgICAgICAgICAgb3B0aW9uLmdyb3VwSWQgPSBncm91cElkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMudXNlcnNXb3JrZmxvd0FwaS5nZXRVc2VycyhvcHRpb24pKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKChyZXNwb25zZTogYW55KSA9PiA8VXNlclByb2Nlc3NNb2RlbFtdPiByZXNwb25zZS5kYXRhIHx8IFtdKSxcbiAgICAgICAgICAgICAgICBtYXAoKHVzZXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyLnVzZXJJbWFnZSA9IHRoaXMuZ2V0VXNlclByb2ZpbGVJbWFnZUFwaSh1c2VyLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHVzZXIpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNvbWJpbmVBbGwoKSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0SWZFbXB0eShbXSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbGlzdCBvZiBncm91cHMgaW4gYSB3b3JrZmxvdy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEZpbHRlciB0byBzZWxlY3Qgc3BlY2lmaWMgZ3JvdXBzXG4gICAgICogQHBhcmFtIGdyb3VwSWQgR3JvdXAgSUQgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBncm91cHNcbiAgICAgKi9cbiAgICBnZXRXb3JrZmxvd0dyb3VwcyhmaWx0ZXI6IHN0cmluZywgZ3JvdXBJZD86IHN0cmluZyk6IE9ic2VydmFibGU8R3JvdXBNb2RlbFtdPiB7XG4gICAgICAgIGxldCBvcHRpb246IGFueSA9IHtmaWx0ZXI6IGZpbHRlcn07XG4gICAgICAgIGlmIChncm91cElkKSB7XG4gICAgICAgICAgICBvcHRpb24uZ3JvdXBJZCA9IGdyb3VwSWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5ncm91cHNBcGkuZ2V0R3JvdXBzKG9wdGlvbikpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlc3BvbnNlOiBhbnkpID0+IDxHcm91cE1vZGVsW10+IHJlc3BvbnNlLmRhdGEgfHwgW10pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgSUQgb2YgYSBmb3JtLlxuICAgICAqIEBwYXJhbSByZXMgT2JqZWN0IHJlcHJlc2VudGluZyBhIGZvcm1cbiAgICAgKiBAcmV0dXJucyBJRCBzdHJpbmdcbiAgICAgKi9cbiAgICBnZXRGb3JtSWQocmVzOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICBpZiAocmVzICYmIHJlcy5kYXRhICYmIHJlcy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlcy5kYXRhWzBdLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBmb3JtIGRhdGEuXG4gICAgICogQHBhcmFtIHJlcyBPYmplY3QgcmVwcmVzZW50aW5nIGZvcm0gZGF0YVxuICAgICAqIEByZXR1cm5zIEpTT04gZGF0YVxuICAgICAqL1xuICAgIHRvSnNvbihyZXM6IGFueSkge1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgSlNPTiBhcnJheSByZXByZXNlbnRhdGlvbiBvZiBmb3JtIGRhdGEuXG4gICAgICogQHBhcmFtIHJlcyBPYmplY3QgcmVwcmVzZW50aW5nIGZvcm0gZGF0YVxuICAgICAqIEByZXR1cm5zIEpTT04gZGF0YVxuICAgICAqL1xuICAgIHRvSnNvbkFycmF5KHJlczogYW55KSB7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuZGF0YSB8fCBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwb3J0cyBhbiBlcnJvciBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSBlcnJvciBEYXRhIG9iamVjdCB3aXRoIG9wdGlvbmFsIGBtZXNzYWdlYCBhbmQgYHN0YXR1c2AgZmllbGRzIGZvciB0aGUgZXJyb3JcbiAgICAgKiBAcmV0dXJucyBFcnJvciBtZXNzYWdlXG4gICAgICovXG4gICAgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGxldCBlcnJNc2cgPSBGb3JtU2VydmljZS5VTktOT1dOX0VSUk9SX01FU1NBR0U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgZXJyTXNnID0gKGVycm9yLm1lc3NhZ2UpID8gZXJyb3IubWVzc2FnZSA6XG4gICAgICAgICAgICAgICAgZXJyb3Iuc3RhdHVzID8gYCR7ZXJyb3Iuc3RhdHVzfSAtICR7ZXJyb3Iuc3RhdHVzVGV4dH1gIDogRm9ybVNlcnZpY2UuR0VORVJJQ19FUlJPUl9NRVNTQUdFO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJNc2cpO1xuICAgIH1cbn1cbiJdfQ==