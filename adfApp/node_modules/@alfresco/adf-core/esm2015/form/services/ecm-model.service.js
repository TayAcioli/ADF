/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../services/log.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
export class EcmModelService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    createEcmTypeForActivitiForm(formName, form) {
        return Observable.create(observer => {
            this.searchActivitiEcmModel().subscribe(model => {
                if (!model) {
                    this.createActivitiEcmModel(formName, form).subscribe(typeForm => {
                        observer.next(typeForm);
                        observer.complete();
                    });
                }
                else {
                    this.saveFomType(formName, form).subscribe(typeForm => {
                        observer.next(typeForm);
                        observer.complete();
                    });
                }
            }, err => this.handleError(err));
        });
    }
    /**
     * @return {?}
     */
    searchActivitiEcmModel() {
        return this.getEcmModels().pipe(map(function (ecmModels) {
            return ecmModels.list.entries.find(model => model.entry.name === EcmModelService.MODEL_NAME);
        }));
    }
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    createActivitiEcmModel(formName, form) {
        return Observable.create(observer => {
            this.createEcmModel(EcmModelService.MODEL_NAME, EcmModelService.MODEL_NAMESPACE).subscribe(model => {
                this.logService.info('model created', model);
                this.activeEcmModel(EcmModelService.MODEL_NAME).subscribe(modelActive => {
                    this.logService.info('model active', modelActive);
                    this.createEcmTypeWithProperties(formName, form).subscribe(typeCreated => {
                        observer.next(typeCreated);
                        observer.complete();
                    });
                }, err => this.handleError(err));
            }, err => this.handleError(err));
        });
    }
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    saveFomType(formName, form) {
        return Observable.create(observer => {
            this.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(ecmType => {
                this.logService.info('custom types', ecmType);
                if (!ecmType) {
                    this.createEcmTypeWithProperties(formName, form).subscribe(typeCreated => {
                        observer.next(typeCreated);
                        observer.complete();
                    });
                }
                else {
                    observer.next(ecmType);
                    observer.complete();
                }
            }, err => this.handleError(err));
        });
    }
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    createEcmTypeWithProperties(formName, form) {
        return Observable.create(observer => {
            this.createEcmType(formName, EcmModelService.MODEL_NAME, EcmModelService.TYPE_MODEL).subscribe(typeCreated => {
                this.logService.info('type Created', typeCreated);
                this.addPropertyToAType(EcmModelService.MODEL_NAME, formName, form).subscribe(properyAdded => {
                    this.logService.info('property Added', properyAdded);
                    observer.next(typeCreated);
                    observer.complete();
                }, err => this.handleError(err));
            }, err => this.handleError(err));
        });
    }
    /**
     * @param {?} typeName
     * @param {?} modelName
     * @return {?}
     */
    searchEcmType(typeName, modelName) {
        return this.getEcmType(modelName).pipe(map(function (customTypes) {
            return customTypes.list.entries.find(type => type.entry.prefixedName === typeName || type.entry.title === typeName);
        }));
    }
    /**
     * @param {?} modelName
     * @return {?}
     */
    activeEcmModel(modelName) {
        return from(this.apiService.getInstance().core.customModelApi.activateCustomModel(modelName))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} modelName
     * @param {?} nameSpace
     * @return {?}
     */
    createEcmModel(modelName, nameSpace) {
        return from(this.apiService.getInstance().core.customModelApi.createCustomModel('DRAFT', '', modelName, modelName, nameSpace))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * @return {?}
     */
    getEcmModels() {
        return from(this.apiService.getInstance().core.customModelApi.getAllCustomModel())
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} modelName
     * @return {?}
     */
    getEcmType(modelName) {
        return from(this.apiService.getInstance().core.customModelApi.getAllCustomType(modelName))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} typeName
     * @param {?} modelName
     * @param {?} parentType
     * @return {?}
     */
    createEcmType(typeName, modelName, parentType) {
        /** @type {?} */
        let name = this.cleanNameType(typeName);
        return from(this.apiService.getInstance().core.customModelApi.createCustomType(modelName, name, parentType, typeName, ''))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} modelName
     * @param {?} typeName
     * @param {?} formFields
     * @return {?}
     */
    addPropertyToAType(modelName, typeName, formFields) {
        /** @type {?} */
        let name = this.cleanNameType(typeName);
        /** @type {?} */
        let properties = [];
        if (formFields && formFields.values) {
            for (let key in formFields.values) {
                if (key) {
                    properties.push({
                        name: key,
                        title: key,
                        description: key,
                        dataType: 'd:text',
                        multiValued: false,
                        mandatory: false,
                        mandatoryEnforced: false
                    });
                }
            }
        }
        return from(this.apiService.getInstance().core.customModelApi.addPropertyToType(modelName, name, properties))
            .pipe(map(this.toJson), catchError(err => this.handleError(err)));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    cleanNameType(name) {
        /** @type {?} */
        let cleanName = name;
        if (name.indexOf(':') !== -1) {
            cleanName = name.split(':')[1];
        }
        return cleanName.replace(/[^a-zA-Z ]/g, '');
    }
    /**
     * @param {?} res
     * @return {?}
     */
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    /**
     * @param {?} err
     * @return {?}
     */
    handleError(err) {
        this.logService.error(err);
    }
}
EcmModelService.MODEL_NAMESPACE = 'activitiForms';
EcmModelService.MODEL_NAME = 'activitiFormsModel';
EcmModelService.TYPE_MODEL = 'cm:folder';
EcmModelService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EcmModelService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
if (false) {
    /** @type {?} */
    EcmModelService.MODEL_NAMESPACE;
    /** @type {?} */
    EcmModelService.MODEL_NAME;
    /** @type {?} */
    EcmModelService.TYPE_MODEL;
    /** @type {?} */
    EcmModelService.prototype.apiService;
    /** @type {?} */
    EcmModelService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,