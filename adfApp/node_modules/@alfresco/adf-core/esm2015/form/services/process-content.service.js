/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
export class ProcessContentService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * @return {?}
     */
    get contentApi() {
        return this.apiService.getInstance().activiti.contentApi;
    }
    /**
     * Create temporary related content from an uploaded file.
     * @param {?} file File to use for content
     * @return {?} The created content data
     */
    createTemporaryRawRelatedContent(file) {
        return from(this.contentApi.createTemporaryRawRelatedContent(file))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets the metadata for a related content item.
     * @param {?} contentId ID of the content item
     * @return {?} Metadata for the content
     */
    getFileContent(contentId) {
        return from(this.contentApi.getContent(contentId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets raw binary content data for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the related content
     */
    getFileRawContent(contentId) {
        return from(this.contentApi.getRawContent(contentId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets the preview for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the content preview
     */
    getContentPreview(contentId) {
        return new Observable(observer => {
            this.contentApi.getContentPreview(contentId).then((result) => {
                observer.next(result);
                observer.complete();
            }, () => {
                this.contentApi.getRawContent(contentId).then((data) => {
                    observer.next(data);
                    observer.complete();
                }, (err) => {
                    observer.error(err);
                    observer.complete();
                });
            });
        });
    }
    /**
     * Gets a URL for direct access to a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} URL to access the content
     */
    getFileRawContentUrl(contentId) {
        return this.contentApi.getRawContentUrl(contentId);
    }
    /**
     * Gets the thumbnail for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the thumbnail image
     */
    getContentThumbnail(contentId) {
        return from(this.contentApi.getContentThumbnail(contentId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets related content items for a task instance.
     * @param {?} taskId ID of the target task
     * @return {?} Metadata for the content
     */
    getTaskRelatedContent(taskId) {
        return from(this.contentApi.getRelatedContentForTask(taskId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Gets related content items for a process instance.
     * @param {?} processId ID of the target process
     * @return {?} Metadata for the content
     */
    getProcessRelatedContent(processId) {
        return from(this.contentApi.getRelatedContentForProcessInstance(processId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Deletes related content.
     * @param {?} contentId Identifier of the content to delete
     * @return {?} Null response that notifies when the deletion is complete
     */
    deleteRelatedContent(contentId) {
        return from(this.contentApi.deleteContent(contentId))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Associates an uploaded file with a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @param {?} content File to associate
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of created content
     */
    createProcessRelatedContent(processInstanceId, content, opts) {
        return from(this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, content, opts))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Associates an uploaded file with a task instance.
     * @param {?} taskId ID of the target task
     * @param {?} file File to associate
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of created content
     */
    createTaskRelatedContent(taskId, file, opts) {
        return from(this.contentApi.createRelatedContentOnTask(taskId, file, opts))
            .pipe(catchError(err => this.handleError(err)));
    }
    /**
     * Creates a JSON representation of data.
     * @param {?} res Object representing data
     * @return {?} JSON object
     */
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    /**
     * Creates a JSON array representation of data.
     * @param {?} res Object representing data
     * @return {?} JSON array object
     */
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Callback when an error occurs
     */
    handleError(error) {
        /** @type {?} */
        let errMsg = ProcessContentService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : ProcessContentService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
ProcessContentService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
ProcessContentService.GENERIC_ERROR_MESSAGE = 'Server error';
ProcessContentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
if (false) {
    /** @type {?} */
    ProcessContentService.UNKNOWN_ERROR_MESSAGE;
    /** @type {?} */
    ProcessContentService.GENERIC_ERROR_MESSAGE;
    /** @type {?} */
    ProcessContentService.prototype.apiService;
    /** @type {?} */
    ProcessContentService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,