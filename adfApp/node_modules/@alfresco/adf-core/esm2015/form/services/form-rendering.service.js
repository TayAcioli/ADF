/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import { AmountWidgetComponent, CheckboxWidgetComponent, ContainerWidgetComponent, DateWidgetComponent, DisplayTextWidgetComponentComponent, DocumentWidgetComponent, DropdownWidgetComponent, DynamicTableWidgetComponent, FunctionalGroupWidgetComponent, HyperlinkWidgetComponent, MultilineTextWidgetComponentComponent, NumberWidgetComponent, PeopleWidgetComponent, RadioButtonsWidgetComponent, TextWidgetComponent, TypeaheadWidgetComponent, UnknownWidgetComponent, UploadWidgetComponent, DateTimeWidgetComponent } from './../components/widgets/index';
export class FormRenderingService extends DynamicComponentMapper {
    constructor() {
        super();
        this.defaultValue = UnknownWidgetComponent;
        this.types = {
            'text': DynamicComponentResolver.fromType(TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),
            'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(DateTimeWidgetComponent)
        };
    }
}
FormRenderingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormRenderingService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    FormRenderingService.prototype.defaultValue;
    /** @type {?} */
    FormRenderingService.prototype.types;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsc0JBQXNCLEVBQW1DLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDcEosT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUN2Qix3QkFBd0IsRUFDeEIsbUJBQW1CLEVBQ25CLG1DQUFtQyxFQUNuQyx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLDJCQUEyQixFQUMzQiw4QkFBOEIsRUFDOUIsd0JBQXdCLEVBQ3hCLHFDQUFxQyxFQUNyQyxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLDJCQUEyQixFQUMzQixtQkFBbUIsRUFDbkIsd0JBQXdCLEVBQ3hCLHNCQUFzQixFQUN0QixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQzFCLE1BQU0sK0JBQStCLENBQUM7QUFHdkMsTUFBTSwyQkFBNEIsU0FBUSxzQkFBc0I7SUEwQjVEO1FBQ0ksS0FBSyxFQUFFLENBQUM7NEJBekJ1QixzQkFBc0I7cUJBQ2E7WUFDbEUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUM5RCxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQ2hFLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbkUsaUJBQWlCLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFDQUFxQyxDQUFDO1lBQzNGLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7WUFDckUsVUFBVSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztZQUN0RSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQzlELFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbEUsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQztZQUMvRSxXQUFXLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQ3hFLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUNBQW1DLENBQUM7WUFDdkYsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUN4RSxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ2xFLGtCQUFrQixFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQztZQUNyRixlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDO1lBQy9FLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUNwRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3RFLFFBQVEsRUFBRyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbkUsVUFBVSxFQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztTQUMxRTtLQUlBOzs7WUE3QkosVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnRNYXBwZXIsIER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24sIER5bmFtaWNDb21wb25lbnRSZXNvbHZlciB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2R5bmFtaWMtY29tcG9uZW50LW1hcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtcbiAgICBBbW91bnRXaWRnZXRDb21wb25lbnQsXG4gICAgQ2hlY2tib3hXaWRnZXRDb21wb25lbnQsXG4gICAgQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50LFxuICAgIERhdGVXaWRnZXRDb21wb25lbnQsXG4gICAgRGlzcGxheVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQsXG4gICAgRG9jdW1lbnRXaWRnZXRDb21wb25lbnQsXG4gICAgRHJvcGRvd25XaWRnZXRDb21wb25lbnQsXG4gICAgRHluYW1pY1RhYmxlV2lkZ2V0Q29tcG9uZW50LFxuICAgIEZ1bmN0aW9uYWxHcm91cFdpZGdldENvbXBvbmVudCxcbiAgICBIeXBlcmxpbmtXaWRnZXRDb21wb25lbnQsXG4gICAgTXVsdGlsaW5lVGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCxcbiAgICBOdW1iZXJXaWRnZXRDb21wb25lbnQsXG4gICAgUGVvcGxlV2lkZ2V0Q29tcG9uZW50LFxuICAgIFJhZGlvQnV0dG9uc1dpZGdldENvbXBvbmVudCxcbiAgICBUZXh0V2lkZ2V0Q29tcG9uZW50LFxuICAgIFR5cGVhaGVhZFdpZGdldENvbXBvbmVudCxcbiAgICBVbmtub3duV2lkZ2V0Q29tcG9uZW50LFxuICAgIFVwbG9hZFdpZGdldENvbXBvbmVudCxcbiAgICBEYXRlVGltZVdpZGdldENvbXBvbmVudFxufSBmcm9tICcuLy4uL2NvbXBvbmVudHMvd2lkZ2V0cy9pbmRleCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGb3JtUmVuZGVyaW5nU2VydmljZSBleHRlbmRzIER5bmFtaWNDb21wb25lbnRNYXBwZXIge1xuXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRWYWx1ZTogVHlwZTx7fT4gPSBVbmtub3duV2lkZ2V0Q29tcG9uZW50O1xuICAgIHByb3RlY3RlZCB0eXBlczogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIH0gPSB7XG4gICAgICAgICd0ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnc3RyaW5nJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnaW50ZWdlcic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShOdW1iZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnbXVsdGktbGluZS10ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKE11bHRpbGluZVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAnYm9vbGVhbic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDaGVja2JveFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkcm9wZG93bic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEcm9wZG93bldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkYXRlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERhdGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnYW1vdW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKEFtb3VudFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdyYWRpby1idXR0b25zJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFJhZGlvQnV0dG9uc1dpZGdldENvbXBvbmVudCksXG4gICAgICAgICdoeXBlcmxpbmsnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoSHlwZXJsaW5rV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JlYWRvbmx5LXRleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGlzcGxheVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAndHlwZWFoZWFkJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFR5cGVhaGVhZFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdwZW9wbGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoUGVvcGxlV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2Z1bmN0aW9uYWwtZ3JvdXAnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRnVuY3Rpb25hbEdyb3VwV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2R5bmFtaWMtdGFibGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRHluYW1pY1RhYmxlV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2NvbnRhaW5lcic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDb250YWluZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZ3JvdXAnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RvY3VtZW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERvY3VtZW50V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3VwbG9hZCc6ICBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVXBsb2FkV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RhdGV0aW1lJzogIER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEYXRlVGltZVdpZGdldENvbXBvbmVudClcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuIl19