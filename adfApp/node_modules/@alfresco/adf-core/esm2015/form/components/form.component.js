/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormErrorEvent, FormEvent } from './../events/index';
import { EcmModelService } from './../services/ecm-model.service';
import { FormService } from './../services/form.service';
import { NodeService } from './../services/node.service';
import { FormModel, FormOutcomeEvent, FormOutcomeModel } from './widgets/core/index';
import { of } from 'rxjs';
import { WidgetVisibilityService } from './../services/widget-visibility.service';
import { switchMap } from 'rxjs/operators';
export class FormComponent {
    /**
     * @param {?} formService
     * @param {?} visibilityService
     * @param {?} ecmModelService
     * @param {?} nodeService
     */
    constructor(formService, visibilityService, ecmModelService, nodeService) {
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.ecmModelService = ecmModelService;
        this.nodeService = nodeService;
        /**
         * Toggle saving of form metadata.
         */
        this.saveMetadata = false;
        /**
         * Toggle rendering of the form title.
         */
        this.showTitle = true;
        /**
         * Toggle rendering of the `Complete` outcome button.
         */
        this.showCompleteButton = true;
        /**
         * If true then the `Complete` outcome button is shown but it will be disabled.
         */
        this.disableCompleteButton = false;
        /**
         * If true then the `Start Process` outcome button is shown but it will be disabled.
         */
        this.disableStartProcessButton = false;
        /**
         * Toggle rendering of the `Save` outcome button.
         */
        this.showSaveButton = true;
        /**
         * Toggle debug options.
         */
        this.showDebugButton = false;
        /**
         * Toggle readonly state of the form. Forces all form widgets to render as readonly if enabled.
         */
        this.readOnly = false;
        /**
         * Toggle rendering of the `Refresh` button.
         */
        this.showRefreshButton = true;
        /**
         * Toggle rendering of the validation icon next to the form title.
         */
        this.showValidationIcon = true;
        /**
         * Contains a list of form field validator instances.
         */
        this.fieldValidators = [];
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        this.formCompleted = new EventEmitter();
        /**
         * Emitted when form content is clicked.
         */
        this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        this.formLoaded = new EventEmitter();
        /**
         * Emitted when form values are refreshed due to a data property change.
         */
        this.formDataRefreshed = new EventEmitter();
        /**
         * Emitted when form validations has validation error.
         */
        this.formError = new EventEmitter();
        /**
         * Emitted when any outcome is executed. Default behaviour can be prevented
         * via `event.preventDefault()`.
         */
        this.executeOutcome = new EventEmitter();
        /**
         * Emitted when any error occurs.
         * @deprecated in 2.4.0, will be renamed as "error" in 3.x.x
         */
        this.onError = new EventEmitter();
        this.debugMode = false;
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    hasForm() {
        return this.form ? true : false;
    }
    /**
     * @return {?}
     */
    isTitleEnabled() {
        if (this.showTitle) {
            if (this.form && this.form.taskName) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} outcomeName
     * @return {?}
     */
    getColorForOutcome(outcomeName) {
        return outcomeName === FormComponent.COMPLETE_OUTCOME_NAME ? FormComponent.COMPLETE_BUTTON_COLOR : '';
    }
    /**
     * @param {?} outcome
     * @return {?}
     */
    isOutcomeButtonEnabled(outcome) {
        if (this.form.readOnly) {
            return false;
        }
        if (outcome) {
            // Make 'Save' button always available
            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {
                return true;
            }
            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {
                return this.disableCompleteButton ? false : this.form.isValid;
            }
            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
                return this.disableStartProcessButton ? false : this.form.isValid;
            }
            return this.form.isValid;
        }
        return false;
    }
    /**
     * @param {?} outcome
     * @param {?} isFormReadOnly
     * @return {?}
     */
    isOutcomeButtonVisible(outcome, isFormReadOnly) {
        if (outcome && outcome.name) {
            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {
                return this.showCompleteButton;
            }
            if (isFormReadOnly) {
                return outcome.isSelected;
            }
            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {
                return this.showSaveButton;
            }
            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
                return false;
            }
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.formService.formContentClicked.subscribe((content) => {
            this.formContentClicked.emit(content);
        }), this.formService.validateForm.subscribe((validateFormEvent) => {
            if (validateFormEvent.errorsField.length > 0) {
                this.formError.next(validateFormEvent.errorsField);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        /** @type {?} */
        let formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        /** @type {?} */
        let formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
        /** @type {?} */
        let nodeId = changes['nodeId'];
        if (nodeId && nodeId.currentValue) {
            this.loadFormForEcmNode(nodeId.currentValue);
            return;
        }
        /** @type {?} */
        let data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    /**
     * Invoked when user clicks outcome button.
     * @param {?} outcome Form outcome model
     * @return {?}
     */
    onOutcomeClicked(outcome) {
        if (!this.readOnly && outcome && this.form) {
            if (!this.onExecuteOutcome(outcome)) {
                return false;
            }
            if (outcome.isSystem) {
                if (outcome.id === FormComponent.SAVE_OUTCOME_ID) {
                    this.saveTaskForm();
                    return true;
                }
                if (outcome.id === FormComponent.COMPLETE_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === FormComponent.START_PROCESS_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === FormComponent.CUSTOM_OUTCOME_ID) {
                    this.onTaskSaved(this.form);
                    this.storeFormAsMetadata();
                    return true;
                }
            }
            else {
                // Note: Activiti is using NAME field rather than ID for outcomes
                if (outcome.name) {
                    this.onTaskSaved(this.form);
                    this.completeTaskForm(outcome.name);
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    onRefreshClicked() {
        this.loadForm();
    }
    /**
     * @return {?}
     */
    loadForm() {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    findProcessVariablesByTaskId(taskId) {
        return this.formService.getTask(taskId).pipe(switchMap((task) => {
            if (this.isAProcessTask(task)) {
                return this.visibilityService.getTaskProcessVariable(taskId);
            }
            else {
                return of({});
            }
        }));
    }
    /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    getFormByTaskId(taskId) {
        return new Promise((resolve, reject) => {
            this.findProcessVariablesByTaskId(taskId).subscribe((processVariables) => {
                this.formService
                    .getTaskForm(taskId)
                    .subscribe(form => {
                    /** @type {?} */
                    const parsedForm = this.parseForm(form);
                    this.visibilityService.refreshVisibility(parsedForm);
                    parsedForm.validateForm();
                    this.form = parsedForm;
                    this.onFormLoaded(this.form);
                    resolve(this.form);
                }, error => {
                    this.handleError(error);
                    // reject(error);
                    resolve(null);
                });
            });
        });
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    getFormDefinitionByFormId(formId) {
        this.formService
            .getFormDefinitionById(formId)
            .subscribe(form => {
            this.formName = form.name;
            this.form = this.parseForm(form);
            this.visibilityService.refreshVisibility(this.form);
            this.form.validateForm();
            this.onFormLoaded(this.form);
        }, (error) => {
            this.handleError(error);
        });
    }
    /**
     * @param {?} formName
     * @return {?}
     */
    getFormDefinitionByFormName(formName) {
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe(id => {
            this.formService.getFormDefinitionById(id).subscribe(form => {
                this.form = this.parseForm(form);
                this.visibilityService.refreshVisibility(this.form);
                this.form.validateForm();
                this.onFormLoaded(this.form);
            }, (error) => {
                this.handleError(error);
            });
        }, (error) => {
            this.handleError(error);
        });
    }
    /**
     * @return {?}
     */
    saveTaskForm() {
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe(() => {
                this.onTaskSaved(this.form);
                this.storeFormAsMetadata();
            }, error => this.onTaskSavedError(this.form, error));
        }
    }
    /**
     * @param {?=} outcome
     * @return {?}
     */
    completeTaskForm(outcome) {
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe(() => {
                this.onTaskCompleted(this.form);
                this.storeFormAsMetadata();
            }, error => this.onTaskCompletedError(this.form, error));
        }
    }
    /**
     * @param {?} err
     * @return {?}
     */
    handleError(err) {
        this.onError.emit(err);
    }
    /**
     * @param {?} json
     * @return {?}
     */
    parseForm(json) {
        if (json) {
            /** @type {?} */
            let form = new FormModel(json, this.data, this.readOnly, this.formService);
            if (!json.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$custom', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    /**
     * @return {?}
     */
    refreshFormData() {
        this.form = this.parseForm(this.form.json);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    /**
     * @param {?} nodeId
     * @return {?}
     */
    loadFormForEcmNode(nodeId) {
        this.nodeService.getNodeMetadata(nodeId).subscribe(data => {
            this.data = data.metadata;
            this.loadFormFromActiviti(data.nodeType);
        }, this.handleError);
    }
    /**
     * @param {?} nodeType
     * @return {?}
     */
    loadFormFromActiviti(nodeType) {
        this.formService.searchFrom(nodeType).subscribe(form => {
            if (!form) {
                this.formService.createFormFromANode(nodeType).subscribe(formMetadata => {
                    this.loadFormFromFormId(formMetadata.id);
                });
            }
            else {
                this.loadFormFromFormId(form.id);
            }
        }, (error) => {
            this.handleError(error);
        });
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    loadFormFromFormId(formId) {
        this.formId = formId;
        this.loadForm();
    }
    /**
     * @return {?}
     */
    storeFormAsMetadata() {
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(type => {
                this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);
            }, (error) => {
                this.handleError(error);
            });
        }
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onFormLoaded(form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new FormEvent(form));
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
        this.formService.formDataRefreshed.next(new FormEvent(form));
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onTaskSaved(form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new FormEvent(form));
    }
    /**
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    onTaskSavedError(form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new FormErrorEvent(form, error));
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new FormEvent(form));
    }
    /**
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    onTaskCompletedError(form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));
    }
    /**
     * @param {?} outcome
     * @return {?}
     */
    onExecuteOutcome(outcome) {
        /** @type {?} */
        let args = new FormOutcomeEvent(outcome);
        this.formService.executeOutcome.next(args);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        if (args.defaultPrevented) {
            return false;
        }
        return true;
    }
}
FormComponent.SAVE_OUTCOME_ID = '$save';
FormComponent.COMPLETE_OUTCOME_ID = '$complete';
FormComponent.START_PROCESS_OUTCOME_ID = '$startProcess';
FormComponent.CUSTOM_OUTCOME_ID = '$custom';
FormComponent.COMPLETE_BUTTON_COLOR = 'primary';
FormComponent.COMPLETE_OUTCOME_NAME = 'Complete';
FormComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"{{form.className}} adf-form-container\" [ngClass]=\"{'adf-readonly-form': readOnly }\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\" *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\">{{form.taskName}}</span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf=\"form.hasTabs()\">\n                <tabs-widget [tabs]=\"form.tabs\"></tabs-widget>\n            </div>\n\n            <div *ngIf=\"!form.hasTabs() && form.hasFields()\">\n                <div *ngFor=\"let field of form.fields\">\n                    <adf-form-field [field]=\"field.field\"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <!--[class.mdl-button--colored]=\"!outcome.isSystem\"-->\n            <button [id]=\"'adf-form-'+ outcome.name  | lowercase\" *ngFor=\"let outcome of form.outcomes\"\n                    [color]=\"getColorForOutcome(outcome.name)\"\n                    mat-button\n                    [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n<!--\nFor debugging and data visualisation purposes,\nwill be removed during future revisions\n-->\n<div *ngIf=\"showDebugButton\" class=\"adf-form-debug-container\">\n    <mat-slide-toggle [(ngModel)]=\"debugMode\">Debug mode</mat-slide-toggle>\n    <div *ngIf=\"debugMode && hasForm()\">\n        <h4>Values</h4>\n        <pre>{{form.values | json}}</pre>\n\n        <h4>Form</h4>\n        <pre>{{form.json | json}}</pre>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [
    { type: FormService },
    { type: WidgetVisibilityService },
    { type: EcmModelService },
    { type: NodeService }
];
FormComponent.propDecorators = {
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    nodeId: [{ type: Input }],
    formId: [{ type: Input }],
    formName: [{ type: Input }],
    saveMetadata: [{ type: Input }],
    data: [{ type: Input }],
    path: [{ type: Input }],
    nameNode: [{ type: Input }],
    showTitle: [{ type: Input }],
    showCompleteButton: [{ type: Input }],
    disableCompleteButton: [{ type: Input }],
    disableStartProcessButton: [{ type: Input }],
    showSaveButton: [{ type: Input }],
    showDebugButton: [{ type: Input }],
    readOnly: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    showValidationIcon: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }],
    formError: [{ type: Output }],
    executeOutcome: [{ type: Output }],
    onError: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FormComponent.SAVE_OUTCOME_ID;
    /** @type {?} */
    FormComponent.COMPLETE_OUTCOME_ID;
    /** @type {?} */
    FormComponent.START_PROCESS_OUTCOME_ID;
    /** @type {?} */
    FormComponent.CUSTOM_OUTCOME_ID;
    /** @type {?} */
    FormComponent.COMPLETE_BUTTON_COLOR;
    /** @type {?} */
    FormComponent.COMPLETE_OUTCOME_NAME;
    /**
     * Underlying form model instance.
     * @type {?}
     */
    FormComponent.prototype.form;
    /**
     * Task id to fetch corresponding form and values.
     * @type {?}
     */
    FormComponent.prototype.taskId;
    /**
     * Content Services node ID for the form metadata.
     * @type {?}
     */
    FormComponent.prototype.nodeId;
    /**
     * The id of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formId;
    /**
     * Name of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formName;
    /**
     * Toggle saving of form metadata.
     * @type {?}
     */
    FormComponent.prototype.saveMetadata;
    /**
     * Custom form values map to be used with the rendered form.
     * @type {?}
     */
    FormComponent.prototype.data;
    /**
     * Path of the folder where the metadata will be stored.
     * @type {?}
     */
    FormComponent.prototype.path;
    /**
     * Name to assign to the new node where the metadata are stored.
     * @type {?}
     */
    FormComponent.prototype.nameNode;
    /**
     * Toggle rendering of the form title.
     * @type {?}
     */
    FormComponent.prototype.showTitle;
    /**
     * Toggle rendering of the `Complete` outcome button.
     * @type {?}
     */
    FormComponent.prototype.showCompleteButton;
    /**
     * If true then the `Complete` outcome button is shown but it will be disabled.
     * @type {?}
     */
    FormComponent.prototype.disableCompleteButton;
    /**
     * If true then the `Start Process` outcome button is shown but it will be disabled.
     * @type {?}
     */
    FormComponent.prototype.disableStartProcessButton;
    /**
     * Toggle rendering of the `Save` outcome button.
     * @type {?}
     */
    FormComponent.prototype.showSaveButton;
    /**
     * Toggle debug options.
     * @type {?}
     */
    FormComponent.prototype.showDebugButton;
    /**
     * Toggle readonly state of the form. Forces all form widgets to render as readonly if enabled.
     * @type {?}
     */
    FormComponent.prototype.readOnly;
    /**
     * Toggle rendering of the `Refresh` button.
     * @type {?}
     */
    FormComponent.prototype.showRefreshButton;
    /**
     * Toggle rendering of the validation icon next to the form title.
     * @type {?}
     */
    FormComponent.prototype.showValidationIcon;
    /**
     * Contains a list of form field validator instances.
     * @type {?}
     */
    FormComponent.prototype.fieldValidators;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    FormComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    FormComponent.prototype.formCompleted;
    /**
     * Emitted when form content is clicked.
     * @type {?}
     */
    FormComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    FormComponent.prototype.formLoaded;
    /**
     * Emitted when form values are refreshed due to a data property change.
     * @type {?}
     */
    FormComponent.prototype.formDataRefreshed;
    /**
     * Emitted when form validations has validation error.
     * @type {?}
     */
    FormComponent.prototype.formError;
    /**
     * Emitted when any outcome is executed. Default behaviour can be prevented
     * via `event.preventDefault()`.
     * @type {?}
     */
    FormComponent.prototype.executeOutcome;
    /**
     * Emitted when any error occurs.
     * @deprecated in 2.4.0, will be renamed as "error" in 3.x.x
     * @type {?}
     */
    FormComponent.prototype.onError;
    /** @type {?} */
    FormComponent.prototype.debugMode;
    /** @type {?} */
    FormComponent.prototype.subscriptions;
    /** @type {?} */
    FormComponent.prototype.formService;
    /** @type {?} */
    FormComponent.prototype.visibilityService;
    /** @type {?} */
    FormComponent.prototype.ecmModelService;
    /** @type {?} */
    FormComponent.prototype.nodeService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJmb3JtL2NvbXBvbmVudHMvZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsT0FBTyxFQUNILFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUM5QixNQUFNLEVBQWlCLGlCQUFpQixFQUMzQyxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXpELE9BQU8sRUFDYSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBRWhFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFVM0MsTUFBTTs7Ozs7OztJQThIRixZQUFzQixXQUF3QixFQUN4QixpQkFBMEMsRUFDNUMsaUJBQ0E7UUFIRSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQXlCO1FBQzVDLG9CQUFlLEdBQWYsZUFBZTtRQUNmLGdCQUFXLEdBQVgsV0FBVzs7Ozs0QkFsR1AsS0FBSzs7Ozt5QkFnQlIsSUFBSTs7OztrQ0FJSyxJQUFJOzs7O3FDQUlELEtBQUs7Ozs7eUNBSUQsS0FBSzs7Ozs4QkFJaEIsSUFBSTs7OzsrQkFJSCxLQUFLOzs7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QU87b0NBQ0gsV0FBVzt5Q0FDTixlQUFlO2tDQUN0QixTQUFTO3NDQUNMLFNBQVM7c0NBQ1QsVUFBVTs7WUFicEQsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxVQUFVO2dCQUNwQix5MEZBQW9DO2dCQUVwQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7Ozs7WUFsQlEsV0FBVztZQVFYLHVCQUF1QjtZQVR2QixlQUFlO1lBRWYsV0FBVzs7O21CQTRCZixLQUFLO3FCQUlMLEtBQUs7cUJBSUwsS0FBSztxQkFJTCxLQUFLO3VCQUlMLEtBQUs7MkJBSUwsS0FBSzttQkFJTCxLQUFLO21CQUlMLEtBQUs7dUJBSUwsS0FBSzt3QkFJTCxLQUFLO2lDQUlMLEtBQUs7b0NBSUwsS0FBSzt3Q0FJTCxLQUFLOzZCQUlMLEtBQUs7OEJBSUwsS0FBSzt1QkFJTCxLQUFLO2dDQUlMLEtBQUs7aUNBSUwsS0FBSzs4QkFJTCxLQUFLO3dCQUlMLE1BQU07NEJBSU4sTUFBTTtpQ0FJTixNQUFNO3lCQUlOLE1BQU07Z0NBSU4sTUFBTTt3QkFJTixNQUFNOzZCQU1OLE1BQU07c0JBT04sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlICovXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCxcbiAgICBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUVycm9yRXZlbnQsIEZvcm1FdmVudCB9IGZyb20gJy4vLi4vZXZlbnRzL2luZGV4JztcbmltcG9ydCB7IEVjbU1vZGVsU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZWNtLW1vZGVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBOb2RlU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRlbnRMaW5rTW9kZWwgfSBmcm9tICcuL3dpZGdldHMvY29yZS9jb250ZW50LWxpbmsubW9kZWwnO1xuaW1wb3J0IHtcbiAgICBGb3JtRmllbGRNb2RlbCwgRm9ybU1vZGVsLCBGb3JtT3V0Y29tZUV2ZW50LCBGb3JtT3V0Y29tZU1vZGVsLFxuICAgIEZvcm1WYWx1ZXMsIEZvcm1GaWVsZFZhbGlkYXRvclxufSBmcm9tICcuL3dpZGdldHMvY29yZS9pbmRleCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgV2lkZ2V0VmlzaWJpbGl0eVNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3dpZGdldC12aXNpYmlsaXR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVmFsaWRhdGVGb3JtRXZlbnQgfSBmcm9tICcuLy4uL2V2ZW50cy92YWxpZGF0ZS1mb3JtLmV2ZW50JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1mb3JtJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9ybS5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gICAgc3RhdGljIFNBVkVfT1VUQ09NRV9JRDogc3RyaW5nID0gJyRzYXZlJztcbiAgICBzdGF0aWMgQ09NUExFVEVfT1VUQ09NRV9JRDogc3RyaW5nID0gJyRjb21wbGV0ZSc7XG4gICAgc3RhdGljIFNUQVJUX1BST0NFU1NfT1VUQ09NRV9JRDogc3RyaW5nID0gJyRzdGFydFByb2Nlc3MnO1xuICAgIHN0YXRpYyBDVVNUT01fT1VUQ09NRV9JRDogc3RyaW5nID0gJyRjdXN0b20nO1xuICAgIHN0YXRpYyBDT01QTEVURV9CVVRUT05fQ09MT1I6IHN0cmluZyA9ICdwcmltYXJ5JztcbiAgICBzdGF0aWMgQ09NUExFVEVfT1VUQ09NRV9OQU1FOiBzdHJpbmcgPSAnQ29tcGxldGUnXG5cbiAgICAvKiogVW5kZXJseWluZyBmb3JtIG1vZGVsIGluc3RhbmNlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZm9ybTogRm9ybU1vZGVsO1xuXG4gICAgLyoqIFRhc2sgaWQgdG8gZmV0Y2ggY29ycmVzcG9uZGluZyBmb3JtIGFuZCB2YWx1ZXMuICovXG4gICAgQElucHV0KClcbiAgICB0YXNrSWQ6IHN0cmluZztcblxuICAgIC8qKiBDb250ZW50IFNlcnZpY2VzIG5vZGUgSUQgZm9yIHRoZSBmb3JtIG1ldGFkYXRhLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIGlkIG9mIHRoZSBmb3JtIGRlZmluaXRpb24gdG8gbG9hZCBhbmQgZGlzcGxheSB3aXRoIGN1c3RvbSB2YWx1ZXMuICovXG4gICAgQElucHV0KClcbiAgICBmb3JtSWQ6IHN0cmluZztcblxuICAgIC8qKiBOYW1lIG9mIHRoZSBmb3JtIGRlZmluaXRpb24gdG8gbG9hZCBhbmQgZGlzcGxheSB3aXRoIGN1c3RvbSB2YWx1ZXMuICovXG4gICAgQElucHV0KClcbiAgICBmb3JtTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqIFRvZ2dsZSBzYXZpbmcgb2YgZm9ybSBtZXRhZGF0YS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNhdmVNZXRhZGF0YTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEN1c3RvbSBmb3JtIHZhbHVlcyBtYXAgdG8gYmUgdXNlZCB3aXRoIHRoZSByZW5kZXJlZCBmb3JtLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogRm9ybVZhbHVlcztcblxuICAgIC8qKiBQYXRoIG9mIHRoZSBmb2xkZXIgd2hlcmUgdGhlIG1ldGFkYXRhIHdpbGwgYmUgc3RvcmVkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGF0aDogc3RyaW5nO1xuXG4gICAgLyoqIE5hbWUgdG8gYXNzaWduIHRvIHRoZSBuZXcgbm9kZSB3aGVyZSB0aGUgbWV0YWRhdGEgYXJlIHN0b3JlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5hbWVOb2RlOiBzdHJpbmc7XG5cbiAgICAvKiogVG9nZ2xlIHJlbmRlcmluZyBvZiB0aGUgZm9ybSB0aXRsZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dUaXRsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogVG9nZ2xlIHJlbmRlcmluZyBvZiB0aGUgYENvbXBsZXRlYCBvdXRjb21lIGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dDb21wbGV0ZUJ1dHRvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogSWYgdHJ1ZSB0aGVuIHRoZSBgQ29tcGxldGVgIG91dGNvbWUgYnV0dG9uIGlzIHNob3duIGJ1dCBpdCB3aWxsIGJlIGRpc2FibGVkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzYWJsZUNvbXBsZXRlQnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogSWYgdHJ1ZSB0aGVuIHRoZSBgU3RhcnQgUHJvY2Vzc2Agb3V0Y29tZSBidXR0b24gaXMgc2hvd24gYnV0IGl0IHdpbGwgYmUgZGlzYWJsZWQuICovXG4gICAgQElucHV0KClcbiAgICBkaXNhYmxlU3RhcnRQcm9jZXNzQnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlIHJlbmRlcmluZyBvZiB0aGUgYFNhdmVgIG91dGNvbWUgYnV0dG9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd1NhdmVCdXR0b246IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZSBkZWJ1ZyBvcHRpb25zLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0RlYnVnQnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlIHJlYWRvbmx5IHN0YXRlIG9mIHRoZSBmb3JtLiBGb3JjZXMgYWxsIGZvcm0gd2lkZ2V0cyB0byByZW5kZXIgYXMgcmVhZG9ubHkgaWYgZW5hYmxlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHJlYWRPbmx5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlIHJlbmRlcmluZyBvZiB0aGUgYFJlZnJlc2hgIGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dSZWZyZXNoQnV0dG9uOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBUb2dnbGUgcmVuZGVyaW5nIG9mIHRoZSB2YWxpZGF0aW9uIGljb24gbmV4dCB0byB0aGUgZm9ybSB0aXRsZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dWYWxpZGF0aW9uSWNvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQ29udGFpbnMgYSBsaXN0IG9mIGZvcm0gZmllbGQgdmFsaWRhdG9yIGluc3RhbmNlcy4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZpZWxkVmFsaWRhdG9yczogRm9ybUZpZWxkVmFsaWRhdG9yW10gPSBbXTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkIHdpdGggdGhlIGBTYXZlYCBvciBjdXN0b20gb3V0Y29tZXMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZm9ybVNhdmVkOiBFdmVudEVtaXR0ZXI8Rm9ybU1vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybU1vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQgd2l0aCB0aGUgYENvbXBsZXRlYCBvdXRjb21lLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1Db21wbGV0ZWQ6IEV2ZW50RW1pdHRlcjxGb3JtTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxGb3JtTW9kZWw+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGZvcm0gY29udGVudCBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1Db250ZW50Q2xpY2tlZDogRXZlbnRFbWl0dGVyPENvbnRlbnRMaW5rTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb250ZW50TGlua01vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBpcyBsb2FkZWQgb3IgcmVsb2FkZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgZm9ybUxvYWRlZDogRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gZm9ybSB2YWx1ZXMgYXJlIHJlZnJlc2hlZCBkdWUgdG8gYSBkYXRhIHByb3BlcnR5IGNoYW5nZS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBmb3JtRGF0YVJlZnJlc2hlZDogRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gZm9ybSB2YWxpZGF0aW9ucyBoYXMgdmFsaWRhdGlvbiBlcnJvci4qL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1FcnJvcjogRXZlbnRFbWl0dGVyPEZvcm1GaWVsZE1vZGVsW10+ID0gbmV3IEV2ZW50RW1pdHRlcjxGb3JtRmllbGRNb2RlbFtdPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbnkgb3V0Y29tZSBpcyBleGVjdXRlZC4gRGVmYXVsdCBiZWhhdmlvdXIgY2FuIGJlIHByZXZlbnRlZFxuICAgICAqIHZpYSBgZXZlbnQucHJldmVudERlZmF1bHQoKWAuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgZXhlY3V0ZU91dGNvbWU6IEV2ZW50RW1pdHRlcjxGb3JtT3V0Y29tZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybU91dGNvbWVFdmVudD4oKTtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhbnkgZXJyb3Igb2NjdXJzLlxuICAgICAqIEBkZXByZWNhdGVkIGluIDIuNC4wLCB3aWxsIGJlIHJlbmFtZWQgYXMgXCJlcnJvclwiIGluIDMueC54XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgb25FcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGRlYnVnTW9kZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm9ybVNlcnZpY2U6IEZvcm1TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2aXNpYmlsaXR5U2VydmljZTogV2lkZ2V0VmlzaWJpbGl0eVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBlY21Nb2RlbFNlcnZpY2U6IEVjbU1vZGVsU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5vZGVTZXJ2aWNlOiBOb2RlU2VydmljZSkge1xuICAgIH1cblxuICAgIGhhc0Zvcm0oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm0gPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNUaXRsZUVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnNob3dUaXRsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybSAmJiB0aGlzLmZvcm0udGFza05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0Q29sb3JGb3JPdXRjb21lKG91dGNvbWVOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gb3V0Y29tZU5hbWUgPT09IEZvcm1Db21wb25lbnQuQ09NUExFVEVfT1VUQ09NRV9OQU1FID8gRm9ybUNvbXBvbmVudC5DT01QTEVURV9CVVRUT05fQ09MT1IgOiAnJztcbiAgICB9XG5cbiAgICBpc091dGNvbWVCdXR0b25FbmFibGVkKG91dGNvbWU6IEZvcm1PdXRjb21lTW9kZWwpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybS5yZWFkT25seSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG91dGNvbWUpIHtcbiAgICAgICAgICAgIC8vIE1ha2UgJ1NhdmUnIGJ1dHRvbiBhbHdheXMgYXZhaWxhYmxlXG4gICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lID09PSBGb3JtT3V0Y29tZU1vZGVsLlNBVkVfQUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lID09PSBGb3JtT3V0Y29tZU1vZGVsLkNPTVBMRVRFX0FDVElPTikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVDb21wbGV0ZUJ1dHRvbiA/IGZhbHNlIDogdGhpcy5mb3JtLmlzVmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lID09PSBGb3JtT3V0Y29tZU1vZGVsLlNUQVJUX1BST0NFU1NfQUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZVN0YXJ0UHJvY2Vzc0J1dHRvbiA/IGZhbHNlIDogdGhpcy5mb3JtLmlzVmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtLmlzVmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzT3V0Y29tZUJ1dHRvblZpc2libGUob3V0Y29tZTogRm9ybU91dGNvbWVNb2RlbCwgaXNGb3JtUmVhZE9ubHk6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKG91dGNvbWUgJiYgb3V0Y29tZS5uYW1lKSB7XG4gICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lID09PSBGb3JtT3V0Y29tZU1vZGVsLkNPTVBMRVRFX0FDVElPTikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dDb21wbGV0ZUJ1dHRvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0Zvcm1SZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXRjb21lLmlzU2VsZWN0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lID09PSBGb3JtT3V0Y29tZU1vZGVsLlNBVkVfQUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd1NhdmVCdXR0b247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lID09PSBGb3JtT3V0Y29tZU1vZGVsLlNUQVJUX1BST0NFU1NfQUNUSU9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZm9ybUNvbnRlbnRDbGlja2VkLnN1YnNjcmliZSgoY29udGVudDogQ29udGVudExpbmtNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUNvbnRlbnRDbGlja2VkLmVtaXQoY29udGVudCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuZm9ybVNlcnZpY2UudmFsaWRhdGVGb3JtLnN1YnNjcmliZSgodmFsaWRhdGVGb3JtRXZlbnQ6IFZhbGlkYXRlRm9ybUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlRm9ybUV2ZW50LmVycm9yc0ZpZWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtRXJyb3IubmV4dCh2YWxpZGF0ZUZvcm1FdmVudC5lcnJvcnNGaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBsZXQgdGFza0lkID0gY2hhbmdlc1sndGFza0lkJ107XG4gICAgICAgIGlmICh0YXNrSWQgJiYgdGFza0lkLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRGb3JtQnlUYXNrSWQodGFza0lkLmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZm9ybUlkID0gY2hhbmdlc1snZm9ybUlkJ107XG4gICAgICAgIGlmIChmb3JtSWQgJiYgZm9ybUlkLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRGb3JtRGVmaW5pdGlvbkJ5Rm9ybUlkKGZvcm1JZC5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcm1OYW1lID0gY2hhbmdlc1snZm9ybU5hbWUnXTtcbiAgICAgICAgaWYgKGZvcm1OYW1lICYmIGZvcm1OYW1lLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRGb3JtRGVmaW5pdGlvbkJ5Rm9ybU5hbWUoZm9ybU5hbWUuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub2RlSWQgPSBjaGFuZ2VzWydub2RlSWQnXTtcbiAgICAgICAgaWYgKG5vZGVJZCAmJiBub2RlSWQuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRGb3JtRm9yRWNtTm9kZShub2RlSWQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkYXRhID0gY2hhbmdlc1snZGF0YSddO1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoRm9ybURhdGEoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB1c2VyIGNsaWNrcyBvdXRjb21lIGJ1dHRvbi5cbiAgICAgKiBAcGFyYW0gb3V0Y29tZSBGb3JtIG91dGNvbWUgbW9kZWxcbiAgICAgKi9cbiAgICBvbk91dGNvbWVDbGlja2VkKG91dGNvbWU6IEZvcm1PdXRjb21lTW9kZWwpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlYWRPbmx5ICYmIG91dGNvbWUgJiYgdGhpcy5mb3JtKSB7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5vbkV4ZWN1dGVPdXRjb21lKG91dGNvbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3V0Y29tZS5pc1N5c3RlbSkge1xuICAgICAgICAgICAgICAgIGlmIChvdXRjb21lLmlkID09PSBGb3JtQ29tcG9uZW50LlNBVkVfT1VUQ09NRV9JRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVUYXNrRm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZS5pZCA9PT0gRm9ybUNvbXBvbmVudC5DT01QTEVURV9PVVRDT01FX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVUYXNrRm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZS5pZCA9PT0gRm9ybUNvbXBvbmVudC5TVEFSVF9QUk9DRVNTX09VVENPTUVfSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVRhc2tGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvdXRjb21lLmlkID09PSBGb3JtQ29tcG9uZW50LkNVU1RPTV9PVVRDT01FX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25UYXNrU2F2ZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZUZvcm1Bc01ldGFkYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogQWN0aXZpdGkgaXMgdXNpbmcgTkFNRSBmaWVsZCByYXRoZXIgdGhhbiBJRCBmb3Igb3V0Y29tZXNcbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25UYXNrU2F2ZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVRhc2tGb3JtKG91dGNvbWUubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdXNlciBjbGlja3MgZm9ybSByZWZyZXNoIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBvblJlZnJlc2hDbGlja2VkKCkge1xuICAgICAgICB0aGlzLmxvYWRGb3JtKCk7XG4gICAgfVxuXG4gICAgbG9hZEZvcm0oKSB7XG4gICAgICAgIGlmICh0aGlzLnRhc2tJZCkge1xuICAgICAgICAgICAgdGhpcy5nZXRGb3JtQnlUYXNrSWQodGhpcy50YXNrSWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZm9ybUlkKSB7XG4gICAgICAgICAgICB0aGlzLmdldEZvcm1EZWZpbml0aW9uQnlGb3JtSWQodGhpcy5mb3JtSWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZm9ybU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Rm9ybURlZmluaXRpb25CeUZvcm1OYW1lKHRoaXMuZm9ybU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZFByb2Nlc3NWYXJpYWJsZXNCeVRhc2tJZCh0YXNrSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1TZXJ2aWNlLmdldFRhc2sodGFza0lkKS5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKCh0YXNrOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0FQcm9jZXNzVGFzayh0YXNrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpYmlsaXR5U2VydmljZS5nZXRUYXNrUHJvY2Vzc1ZhcmlhYmxlKHRhc2tJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlzQVByb2Nlc3NUYXNrKHRhc2tSZXByZXNlbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gdGFza1JlcHJlc2VudGF0aW9uLnByb2Nlc3NEZWZpbml0aW9uSWQgJiYgdGFza1JlcHJlc2VudGF0aW9uLnByb2Nlc3NEZWZpbml0aW9uRGVwbG95bWVudElkICE9PSAnbnVsbCc7XG4gICAgfVxuXG4gICAgZ2V0Rm9ybUJ5VGFza0lkKHRhc2tJZDogc3RyaW5nKTogUHJvbWlzZTxGb3JtTW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEZvcm1Nb2RlbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5maW5kUHJvY2Vzc1ZhcmlhYmxlc0J5VGFza0lkKHRhc2tJZCkuc3Vic2NyaWJlKChwcm9jZXNzVmFyaWFibGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAuZ2V0VGFza0Zvcm0odGFza0lkKVxuICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkRm9ybSA9IHRoaXMucGFyc2VGb3JtKGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eVNlcnZpY2UucmVmcmVzaFZpc2liaWxpdHkocGFyc2VkRm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRm9ybS52YWxpZGF0ZUZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0gPSBwYXJzZWRGb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Gb3JtTG9hZGVkKHRoaXMuZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Rm9ybURlZmluaXRpb25CeUZvcm1JZChmb3JtSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0Rm9ybURlZmluaXRpb25CeUlkKGZvcm1JZClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgZm9ybSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybU5hbWUgPSBmb3JtLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybSA9IHRoaXMucGFyc2VGb3JtKGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2liaWxpdHlTZXJ2aWNlLnJlZnJlc2hWaXNpYmlsaXR5KHRoaXMuZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS52YWxpZGF0ZUZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEZvcm1EZWZpbml0aW9uQnlGb3JtTmFtZShmb3JtTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2VcbiAgICAgICAgICAgIC5nZXRGb3JtRGVmaW5pdGlvbkJ5TmFtZShmb3JtTmFtZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmdldEZvcm1EZWZpbml0aW9uQnlJZChpZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5wYXJzZUZvcm0oZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5U2VydmljZS5yZWZyZXNoVmlzaWJpbGl0eSh0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS52YWxpZGF0ZUZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRm9ybUxvYWRlZCh0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgc2F2ZVRhc2tGb3JtKCkge1xuICAgICAgICBpZiAodGhpcy5mb3JtICYmIHRoaXMuZm9ybS50YXNrSWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybVNlcnZpY2VcbiAgICAgICAgICAgICAgICAuc2F2ZVRhc2tGb3JtKHRoaXMuZm9ybS50YXNrSWQsIHRoaXMuZm9ybS52YWx1ZXMpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblRhc2tTYXZlZCh0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZUZvcm1Bc01ldGFkYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0+IHRoaXMub25UYXNrU2F2ZWRFcnJvcih0aGlzLmZvcm0sIGVycm9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wbGV0ZVRhc2tGb3JtKG91dGNvbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybSAmJiB0aGlzLmZvcm0udGFza0lkKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmNvbXBsZXRlVGFza0Zvcm0odGhpcy5mb3JtLnRhc2tJZCwgdGhpcy5mb3JtLnZhbHVlcywgb3V0Y29tZSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVGFza0NvbXBsZXRlZCh0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZUZvcm1Bc01ldGFkYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0+IHRoaXMub25UYXNrQ29tcGxldGVkRXJyb3IodGhpcy5mb3JtLCBlcnJvcilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlRXJyb3IoZXJyOiBhbnkpOiBhbnkge1xuICAgICAgICB0aGlzLm9uRXJyb3IuZW1pdChlcnIpO1xuICAgIH1cblxuICAgIHBhcnNlRm9ybShqc29uOiBhbnkpOiBGb3JtTW9kZWwge1xuICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgbGV0IGZvcm0gPSBuZXcgRm9ybU1vZGVsKGpzb24sIHRoaXMuZGF0YSwgdGhpcy5yZWFkT25seSwgdGhpcy5mb3JtU2VydmljZSk7XG4gICAgICAgICAgICBpZiAoIWpzb24uZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgZm9ybS5vdXRjb21lcyA9IHRoaXMuZ2V0Rm9ybURlZmluaXRpb25PdXRjb21lcyhmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkVmFsaWRhdG9ycyAmJiB0aGlzLmZpZWxkVmFsaWRhdG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9ybS5maWVsZFZhbGlkYXRvcnMgPSB0aGlzLmZpZWxkVmFsaWRhdG9ycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjdXN0b20gc2V0IG9mIG91dGNvbWVzIGZvciBhIEZvcm0gRGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gZm9ybSBGb3JtIGRlZmluaXRpb24gbW9kZWwuXG4gICAgICovXG4gICAgZ2V0Rm9ybURlZmluaXRpb25PdXRjb21lcyhmb3JtOiBGb3JtTW9kZWwpOiBGb3JtT3V0Y29tZU1vZGVsW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3IEZvcm1PdXRjb21lTW9kZWwoZm9ybSwgeyBpZDogJyRjdXN0b20nLCBuYW1lOiBGb3JtT3V0Y29tZU1vZGVsLlNBVkVfQUNUSU9OLCBpc1N5c3RlbTogdHJ1ZSB9KVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGNoZWNrVmlzaWJpbGl0eShmaWVsZDogRm9ybUZpZWxkTW9kZWwpIHtcbiAgICAgICAgaWYgKGZpZWxkICYmIGZpZWxkLmZvcm0pIHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eVNlcnZpY2UucmVmcmVzaFZpc2liaWxpdHkoZmllbGQuZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZnJlc2hGb3JtRGF0YSgpIHtcbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5wYXJzZUZvcm0odGhpcy5mb3JtLmpzb24pO1xuICAgICAgICB0aGlzLm9uRm9ybUxvYWRlZCh0aGlzLmZvcm0pO1xuICAgICAgICB0aGlzLm9uRm9ybURhdGFSZWZyZXNoZWQodGhpcy5mb3JtKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRGb3JtRm9yRWNtTm9kZShub2RlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLm5vZGVTZXJ2aWNlLmdldE5vZGVNZXRhZGF0YShub2RlSWQpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhLm1ldGFkYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEZvcm1Gcm9tQWN0aXZpdGkoZGF0YS5ub2RlVHlwZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcik7XG4gICAgfVxuXG4gICAgbG9hZEZvcm1Gcm9tQWN0aXZpdGkobm9kZVR5cGU6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2Uuc2VhcmNoRnJvbShub2RlVHlwZSkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgZm9ybSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuY3JlYXRlRm9ybUZyb21BTm9kZShub2RlVHlwZSkuc3Vic2NyaWJlKGZvcm1NZXRhZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGb3JtRnJvbUZvcm1JZChmb3JtTWV0YWRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGb3JtRnJvbUZvcm1JZChmb3JtLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRm9ybUZyb21Gb3JtSWQoZm9ybUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5mb3JtSWQgPSBmb3JtSWQ7XG4gICAgICAgIHRoaXMubG9hZEZvcm0oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0b3JlRm9ybUFzTWV0YWRhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLnNhdmVNZXRhZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5lY21Nb2RlbFNlcnZpY2UuY3JlYXRlRWNtVHlwZUZvckFjdGl2aXRpRm9ybSh0aGlzLmZvcm1OYW1lLCB0aGlzLmZvcm0pLnN1YnNjcmliZSh0eXBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlU2VydmljZS5jcmVhdGVOb2RlTWV0YWRhdGEodHlwZS5ub2RlVHlwZSB8fCB0eXBlLmVudHJ5LnByZWZpeGVkTmFtZSwgRWNtTW9kZWxTZXJ2aWNlLk1PREVMX05BTUVTUEFDRSwgdGhpcy5mb3JtLnZhbHVlcywgdGhpcy5wYXRoLCB0aGlzLm5hbWVOb2RlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uRm9ybUxvYWRlZChmb3JtOiBGb3JtTW9kZWwpIHtcbiAgICAgICAgdGhpcy5mb3JtTG9hZGVkLmVtaXQoZm9ybSk7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZm9ybUxvYWRlZC5uZXh0KG5ldyBGb3JtRXZlbnQoZm9ybSkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbkZvcm1EYXRhUmVmcmVzaGVkKGZvcm06IEZvcm1Nb2RlbCkge1xuICAgICAgICB0aGlzLmZvcm1EYXRhUmVmcmVzaGVkLmVtaXQoZm9ybSk7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZm9ybURhdGFSZWZyZXNoZWQubmV4dChuZXcgRm9ybUV2ZW50KGZvcm0pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25UYXNrU2F2ZWQoZm9ybTogRm9ybU1vZGVsKSB7XG4gICAgICAgIHRoaXMuZm9ybVNhdmVkLmVtaXQoZm9ybSk7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UudGFza1NhdmVkLm5leHQobmV3IEZvcm1FdmVudChmb3JtKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVGFza1NhdmVkRXJyb3IoZm9ybTogRm9ybU1vZGVsLCBlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLnRhc2tTYXZlZEVycm9yLm5leHQobmV3IEZvcm1FcnJvckV2ZW50KGZvcm0sIGVycm9yKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVGFza0NvbXBsZXRlZChmb3JtOiBGb3JtTW9kZWwpIHtcbiAgICAgICAgdGhpcy5mb3JtQ29tcGxldGVkLmVtaXQoZm9ybSk7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UudGFza0NvbXBsZXRlZC5uZXh0KG5ldyBGb3JtRXZlbnQoZm9ybSkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvblRhc2tDb21wbGV0ZWRFcnJvcihmb3JtOiBGb3JtTW9kZWwsIGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UudGFza0NvbXBsZXRlZEVycm9yLm5leHQobmV3IEZvcm1FcnJvckV2ZW50KGZvcm0sIGVycm9yKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uRXhlY3V0ZU91dGNvbWUob3V0Y29tZTogRm9ybU91dGNvbWVNb2RlbCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgYXJncyA9IG5ldyBGb3JtT3V0Y29tZUV2ZW50KG91dGNvbWUpO1xuXG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZXhlY3V0ZU91dGNvbWUubmV4dChhcmdzKTtcbiAgICAgICAgaWYgKGFyZ3MuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5leGVjdXRlT3V0Y29tZS5lbWl0KGFyZ3MpO1xuICAgICAgICBpZiAoYXJncy5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXX0=