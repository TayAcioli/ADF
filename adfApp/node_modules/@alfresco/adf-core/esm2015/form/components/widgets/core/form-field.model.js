/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { ContainerColumnModel } from './container-column.model';
import { ErrorMessageModel } from './error-message.model';
import { FormFieldTypes } from './form-field-types';
import { NumberFieldValidator } from './form-field-validator';
import { FormWidgetModel } from './form-widget.model';
export class FormFieldModel extends FormWidgetModel {
    /**
     * @param {?} form
     * @param {?=} json
     */
    constructor(form, json) {
        super(form, json);
        this._readOnly = false;
        this._isValid = true;
        this._required = false;
        this.defaultDateFormat = 'D-M-YYYY';
        this.deafultDateTimeFormat = 'D-M-YYYY hh:mm A';
        this.rowspan = 1;
        this.colspan = 1;
        this.placeholder = null;
        this.minLength = 0;
        this.maxLength = 0;
        this.options = [];
        this.params = {};
        this.isVisible = true;
        this.visibilityCondition = null;
        this.enableFractions = false;
        this.currency = null;
        this.dateDisplayFormat = this.dateDisplayFormat || this.defaultDateFormat;
        // container model members
        this.numberOfColumns = 1;
        this.fields = [];
        this.columns = [];
        if (json) {
            this.fieldType = json.fieldType;
            this.id = json.id;
            this.name = json.name;
            this.type = json.type;
            this._required = /** @type {?} */ (json.required);
            this._readOnly = /** @type {?} */ (json.readOnly) || json.type === 'readonly';
            this.overrideId = /** @type {?} */ (json.overrideId);
            this.tab = json.tab;
            this.restUrl = json.restUrl;
            this.restResponsePath = json.restResponsePath;
            this.restIdProperty = json.restIdProperty;
            this.restLabelProperty = json.restLabelProperty;
            this.colspan = /** @type {?} */ (json.colspan);
            this.minLength = /** @type {?} */ (json.minLength) || 0;
            this.maxLength = /** @type {?} */ (json.maxLength) || 0;
            this.minValue = json.minValue;
            this.maxValue = json.maxValue;
            this.regexPattern = json.regexPattern;
            this.options = /** @type {?} */ (json.options) || [];
            this.hasEmptyValue = /** @type {?} */ (json.hasEmptyValue);
            this.className = json.className;
            this.optionType = json.optionType;
            this.params = /** @type {?} */ (json.params) || {};
            this.hyperlinkUrl = json.hyperlinkUrl;
            this.displayText = json.displayText;
            this.visibilityCondition = /** @type {?} */ (json.visibilityCondition);
            this.enableFractions = /** @type {?} */ (json.enableFractions);
            this.currency = json.currency;
            this.dateDisplayFormat = json.dateDisplayFormat || this.getDefaultDateFormat(json);
            this._value = this.parseValue(json);
            this.validationSummary = new ErrorMessageModel();
            if (json.placeholder && json.placeholder !== '' && json.placeholder !== 'null') {
                this.placeholder = json.placeholder;
            }
            if (FormFieldTypes.isReadOnlyType(json.type)) {
                if (json.params && json.params.field) {
                    if (form.processVariables) {
                        /** @type {?} */
                        const processVariable = this.getProcessVariableValue(json.params.field, form);
                        if (processVariable) {
                            this.value = processVariable;
                        }
                    }
                    else if (json.params.field.responseVariable) {
                        /** @type {?} */
                        const formVariable = this.getVariablesValue(json.params.field.name, form);
                        if (formVariable) {
                            this.value = formVariable;
                        }
                    }
                }
            }
            if (FormFieldTypes.isContainerType(json.type)) {
                this.containerFactory(json, form);
            }
        }
        if (this.hasEmptyValue && this.options && this.options.length > 0) {
            this.emptyOption = this.options[0];
        }
        this.updateForm();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this._value = v;
        this.updateForm();
    }
    /**
     * @return {?}
     */
    get readOnly() {
        if (this.form && this.form.readOnly) {
            return true;
        }
        return this._readOnly;
    }
    /**
     * @param {?} readOnly
     * @return {?}
     */
    set readOnly(readOnly) {
        this._readOnly = readOnly;
        this.updateForm();
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) {
        this._required = value;
        this.updateForm();
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this._isValid;
    }
    /**
     * @return {?}
     */
    markAsInvalid() {
        this._isValid = false;
    }
    /**
     * @return {?}
     */
    validate() {
        this.validationSummary = new ErrorMessageModel();
        if (!this.readOnly) {
            /** @type {?} */
            let validators = this.form.fieldValidators || [];
            for (let validator of validators) {
                if (!validator.validate(this)) {
                    this._isValid = false;
                    return this._isValid;
                }
            }
        }
        this._isValid = true;
        return this._isValid;
    }
    /**
     * @param {?} jsonField
     * @return {?}
     */
    getDefaultDateFormat(jsonField) {
        /** @type {?} */
        let originalType = jsonField.type;
        if (FormFieldTypes.isReadOnlyType(jsonField.type) &&
            jsonField.params &&
            jsonField.params.field) {
            originalType = jsonField.params.field.type;
        }
        return originalType === FormFieldTypes.DATETIME ? this.deafultDateTimeFormat : this.defaultDateFormat;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    isTypeaHeadFieldType(type) {
        return type === 'typeahead' ? true : false;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getFieldNameWithLabel(name) {
        return name += '_LABEL';
    }
    /**
     * @param {?} field
     * @param {?} form
     * @return {?}
     */
    getProcessVariableValue(field, form) {
        /** @type {?} */
        let fieldName = field.name;
        if (this.isTypeaHeadFieldType(field.type)) {
            fieldName = this.getFieldNameWithLabel(field.id);
        }
        return this.findProcessVariableValue(fieldName, form);
    }
    /**
     * @param {?} variableName
     * @param {?} form
     * @return {?}
     */
    getVariablesValue(variableName, form) {
        /** @type {?} */
        let variable = form.json.variables.find((currentVariable) => {
            return currentVariable.name === variableName;
        });
        if (variable) {
            if (variable.type === 'boolean') {
                return JSON.parse(variable.value);
            }
            return variable.value;
        }
        return null;
    }
    /**
     * @param {?} variableName
     * @param {?} form
     * @return {?}
     */
    findProcessVariableValue(variableName, form) {
        if (form.processVariables) {
            /** @type {?} */
            const variable = form.processVariables.find((currentVariable) => {
                return currentVariable.name === variableName;
            });
            if (variable) {
                return variable.type === 'boolean' ? JSON.parse(variable.value) : variable.value;
            }
        }
        return undefined;
    }
    /**
     * @param {?} json
     * @param {?} form
     * @return {?}
     */
    containerFactory(json, form) {
        this.numberOfColumns = /** @type {?} */ (json.numberOfColumns) || 1;
        this.fields = json.fields;
        this.rowspan = 1;
        this.colspan = 1;
        if (json.fields) {
            for (let currentField in json.fields) {
                if (json.fields.hasOwnProperty(currentField)) {
                    /** @type {?} */
                    let col = new ContainerColumnModel();
                    /** @type {?} */
                    let fields = (json.fields[currentField] || []).map(f => new FormFieldModel(form, f));
                    col.fields = fields;
                    col.rowspan = json.fields[currentField].length;
                    col.fields.forEach((colFields) => {
                        this.colspan = colFields.colspan > this.colspan ? colFields.colspan : this.colspan;
                    });
                    this.rowspan = this.rowspan < col.rowspan ? col.rowspan : this.rowspan;
                    this.columns.push(col);
                }
            }
        }
    }
    /**
     * @param {?} json
     * @return {?}
     */
    parseValue(json) {
        /** @type {?} */
        let value = json.value;
        /*
                 This is needed due to Activiti issue related to reading dropdown values as value string
                 but saving back as object: { id: <id>, name: <name> }
                 */
        if (json.type === FormFieldTypes.DROPDOWN) {
            if (json.hasEmptyValue && json.options) {
                /** @type {?} */
                let options = /** @type {?} */ (json.options) || [];
                if (options.length > 0) {
                    /** @type {?} */
                    let emptyOption = json.options[0];
                    if (value === '' || value === emptyOption.id || value === emptyOption.name) {
                        value = emptyOption.id;
                    }
                    else if (value.id && value.name) {
                        value = value.id;
                    }
                }
            }
        }
        /*
                 This is needed due to Activiti issue related to reading radio button values as value string
                 but saving back as object: { id: <id>, name: <name> }
                 */
        if (json.type === FormFieldTypes.RADIO_BUTTONS) {
            /** @type {?} */
            let entry = this.options.filter(opt => opt.id === value || opt.name === value || (value && (opt.id === value.id || opt.name === value.name)));
            if (entry.length > 0) {
                value = entry[0].id;
            }
        }
        /*
                 This is needed due to Activiti displaying/editing dates in d-M-YYYY format
                 but storing on server in ISO8601 format (i.e. 2013-02-04T22:44:30.652Z)
                 */
        if (this.isDateField(json) || this.isDateTimeField(json)) {
            if (value) {
                /** @type {?} */
                let dateValue;
                if (NumberFieldValidator.isNumber(value)) {
                    dateValue = moment(value);
                }
                else {
                    dateValue = this.isDateTimeField(json) ? moment(value, 'YYYY-MM-DD hh:mm A') : moment(value.split('T')[0], 'YYYY-M-D');
                }
                if (dateValue && dateValue.isValid()) {
                    value = dateValue.format(this.dateDisplayFormat);
                }
            }
        }
        return value;
    }
    /**
     * @return {?}
     */
    updateForm() {
        if (!this.form) {
            return;
        }
        switch (this.type) {
            case FormFieldTypes.DROPDOWN:
                /*
                                 This is needed due to Activiti reading dropdown values as string
                                 but saving back as object: { id: <id>, name: <name> }
                                 */
                if (this.value === 'empty' || this.value === '') {
                    this.form.values[this.id] = {};
                }
                else {
                    /** @type {?} */
                    let entry = this.options.filter(opt => opt.id === this.value);
                    if (entry.length > 0) {
                        this.form.values[this.id] = entry[0];
                    }
                }
                break;
            case FormFieldTypes.RADIO_BUTTONS:
                /** @type {?} */
                let rbEntry = this.options.filter(opt => opt.id === this.value);
                if (rbEntry.length > 0) {
                    this.form.values[this.id] = rbEntry[0];
                }
                break;
            case FormFieldTypes.UPLOAD:
                if (this.value && this.value.length > 0) {
                    this.form.values[this.id] = this.value.map(elem => elem.id).join(',');
                }
                else {
                    this.form.values[this.id] = null;
                }
                break;
            case FormFieldTypes.TYPEAHEAD:
                /** @type {?} */
                let taEntry = this.options.filter(opt => opt.id === this.value || opt.name === this.value);
                if (taEntry.length > 0) {
                    this.form.values[this.id] = taEntry[0];
                }
                else if (this.options.length > 0) {
                    this.form.values[this.id] = null;
                }
                break;
            case FormFieldTypes.DATE:
                /** @type {?} */
                let dateValue = moment(this.value, this.dateDisplayFormat, true);
                if (dateValue && dateValue.isValid()) {
                    this.form.values[this.id] = `${dateValue.format('YYYY-MM-DD')}T00:00:00.000Z`;
                }
                else {
                    this.form.values[this.id] = null;
                    this._value = this.value;
                }
                break;
            case FormFieldTypes.DATETIME:
                /** @type {?} */
                const dateTimeValue = moment(this.value, this.dateDisplayFormat, true);
                if (dateTimeValue && dateTimeValue.isValid()) {
                    this.form.values[this.id] = dateTimeValue.format('YYYY-MM-DDTHH:mm:ssZ');
                }
                else {
                    this.form.values[this.id] = null;
                    this._value = this.value;
                }
                break;
            case FormFieldTypes.NUMBER:
                this.form.values[this.id] = parseInt(this.value, 10);
                break;
            case FormFieldTypes.AMOUNT:
                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);
                break;
            default:
                if (!FormFieldTypes.isReadOnlyType(this.type) && !this.isInvalidFieldType(this.type)) {
                    this.form.values[this.id] = this.value;
                }
        }
        this.form.onFormFieldChanged(this);
    }
    /**
     * Skip the invalid field type
     * @param {?} type
     * @return {?}
     */
    isInvalidFieldType(type) {
        if (type === 'container') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    getOptionName() {
        /** @type {?} */
        let option = this.options.find(opt => opt.id === this.value);
        return option ? option.name : null;
    }
    /**
     * @return {?}
     */
    hasOptions() {
        return this.options && this.options.length > 0;
    }
    /**
     * @param {?} json
     * @return {?}
     */
    isDateField(json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.DATE) ||
            json.type === FormFieldTypes.DATE;
    }
    /**
     * @param {?} json
     * @return {?}
     */
    isDateTimeField(json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.DATETIME) ||
            json.type === FormFieldTypes.DATETIME;
    }
}
if (false) {
    /** @type {?} */
    FormFieldModel.prototype._value;
    /** @type {?} */
    FormFieldModel.prototype._readOnly;
    /** @type {?} */
    FormFieldModel.prototype._isValid;
    /** @type {?} */
    FormFieldModel.prototype._required;
    /** @type {?} */
    FormFieldModel.prototype.defaultDateFormat;
    /** @type {?} */
    FormFieldModel.prototype.deafultDateTimeFormat;
    /** @type {?} */
    FormFieldModel.prototype.fieldType;
    /** @type {?} */
    FormFieldModel.prototype.id;
    /** @type {?} */
    FormFieldModel.prototype.name;
    /** @type {?} */
    FormFieldModel.prototype.type;
    /** @type {?} */
    FormFieldModel.prototype.overrideId;
    /** @type {?} */
    FormFieldModel.prototype.tab;
    /** @type {?} */
    FormFieldModel.prototype.rowspan;
    /** @type {?} */
    FormFieldModel.prototype.colspan;
    /** @type {?} */
    FormFieldModel.prototype.placeholder;
    /** @type {?} */
    FormFieldModel.prototype.minLength;
    /** @type {?} */
    FormFieldModel.prototype.maxLength;
    /** @type {?} */
    FormFieldModel.prototype.minValue;
    /** @type {?} */
    FormFieldModel.prototype.maxValue;
    /** @type {?} */
    FormFieldModel.prototype.regexPattern;
    /** @type {?} */
    FormFieldModel.prototype.options;
    /** @type {?} */
    FormFieldModel.prototype.restUrl;
    /** @type {?} */
    FormFieldModel.prototype.restResponsePath;
    /** @type {?} */
    FormFieldModel.prototype.restIdProperty;
    /** @type {?} */
    FormFieldModel.prototype.restLabelProperty;
    /** @type {?} */
    FormFieldModel.prototype.hasEmptyValue;
    /** @type {?} */
    FormFieldModel.prototype.className;
    /** @type {?} */
    FormFieldModel.prototype.optionType;
    /** @type {?} */
    FormFieldModel.prototype.params;
    /** @type {?} */
    FormFieldModel.prototype.hyperlinkUrl;
    /** @type {?} */
    FormFieldModel.prototype.displayText;
    /** @type {?} */
    FormFieldModel.prototype.isVisible;
    /** @type {?} */
    FormFieldModel.prototype.visibilityCondition;
    /** @type {?} */
    FormFieldModel.prototype.enableFractions;
    /** @type {?} */
    FormFieldModel.prototype.currency;
    /** @type {?} */
    FormFieldModel.prototype.dateDisplayFormat;
    /** @type {?} */
    FormFieldModel.prototype.numberOfColumns;
    /** @type {?} */
    FormFieldModel.prototype.fields;
    /** @type {?} */
    FormFieldModel.prototype.columns;
    /** @type {?} */
    FormFieldModel.prototype.emptyOption;
    /** @type {?} */
    FormFieldModel.prototype.validationSummary;
}

//# sourceMappingURL=data:application/json;base64,