/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../services/form.service';
import { FormFieldModel } from './core/index';
/** @type {?} */
export const baseHost = {
    '(click)': 'event($event)',
    '(blur)': 'event($event)',
    '(change)': 'event($event)',
    '(focus)': 'event($event)',
    '(focusin)': 'event($event)',
    '(focusout)': 'event($event)',
    '(input)': 'event($event)',
    '(invalid)': 'event($event)',
    '(select)': 'event($event)'
};
/**
 * Base widget component.
 */
export class WidgetComponent {
    /**
     * @param {?=} formService
     */
    constructor(formService) {
        this.formService = formService;
        /**
         * Does the widget show a read-only value? (ie, can't be edited)
         */
        this.readOnly = false;
        /**
         * Emitted when a field value changes.
         * @deprecated Used only to trigger visibility engine; components should do that internally if needed.
         */
        this.fieldChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    hasField() {
        return this.field ? true : false;
    }
    /**
     * @return {?}
     */
    isRequired() {
        if (this.field && this.field.required) {
            return true;
        }
        return null;
    }
    /**
     * @return {?}
     */
    isValid() {
        return this.field.validationSummary ? true : false;
    }
    /**
     * @return {?}
     */
    hasValue() {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    }
    /**
     * @return {?}
     */
    isInvalidFieldRequired() {
        return !this.field.isValid && !this.field.validationSummary && this.isRequired();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.fieldChanged.emit(this.field);
    }
    /**
     * @deprecated used only to trigger visibility engine, components should do that internally if needed
     * @param {?} field
     * @return {?}
     */
    checkVisibility(field) {
        this.fieldChanged.emit(field);
    }
    /**
     * @deprecated used only to trigger visibility engine, components should do that internally if needed
     * @param {?} field
     * @return {?}
     */
    onFieldChanged(field) {
        this.fieldChanged.emit(field);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getHyperlinkUrl(field) {
        /** @type {?} */
        let url = WidgetComponent.DEFAULT_HYPERLINK_URL;
        if (field && field.hyperlinkUrl) {
            url = field.hyperlinkUrl;
            if (!/^https?:\/\//i.test(url)) {
                url = `${WidgetComponent.DEFAULT_HYPERLINK_SCHEME}${url}`;
            }
        }
        return url;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getHyperlinkText(field) {
        if (field) {
            return field.displayText || field.hyperlinkUrl;
        }
        return null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    event(event) {
        this.formService.formEvents.next(event);
    }
}
WidgetComponent.DEFAULT_HYPERLINK_URL = '#';
WidgetComponent.DEFAULT_HYPERLINK_SCHEME = 'http://';
WidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'base-widget',
                template: '',
                host: baseHost,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
WidgetComponent.ctorParameters = () => [
    { type: FormService }
];
WidgetComponent.propDecorators = {
    readOnly: [{ type: Input }],
    field: [{ type: Input }],
    fieldChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    WidgetComponent.DEFAULT_HYPERLINK_URL;
    /** @type {?} */
    WidgetComponent.DEFAULT_HYPERLINK_SCHEME;
    /**
     * Does the widget show a read-only value? (ie, can't be edited)
     * @type {?}
     */
    WidgetComponent.prototype.readOnly;
    /**
     * Data to be displayed in the field
     * @type {?}
     */
    WidgetComponent.prototype.field;
    /**
     * Emitted when a field value changes.
     * @deprecated Used only to trigger visibility engine; components should do that internally if needed.
     * @type {?}
     */
    WidgetComponent.prototype.fieldChanged;
    /** @type {?} */
    WidgetComponent.prototype.formService;
}

//# sourceMappingURL=data:application/json;base64,