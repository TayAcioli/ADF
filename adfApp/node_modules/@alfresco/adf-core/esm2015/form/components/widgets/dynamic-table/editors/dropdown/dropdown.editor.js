/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../../../../../services/log.service';
import { Component, Input } from '@angular/core';
import { FormService } from './../../../../../services/form.service';
import { DynamicTableModel } from './../../dynamic-table.widget.model';
export class DropdownEditorComponent {
    /**
     * @param {?} formService
     * @param {?} logService
     */
    constructor(formService, logService) {
        this.formService = formService;
        this.logService = logService;
        this.value = null;
        this.options = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let field = this.table.field;
        if (field) {
            if (this.column.optionType === 'rest') {
                if (this.table.form && this.table.form.taskId) {
                    this.getValuesByTaskId(field);
                }
                else {
                    this.getValuesByProcessDefinitionId(field);
                }
            }
            else {
                this.options = this.column.options || [];
                this.value = this.table.getCellValue(this.row, this.column);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getValuesByTaskId(field) {
        this.formService
            .getRestFieldValuesColumn(field.form.taskId, field.id, this.column.id)
            .subscribe((result) => {
            this.column.options = result || [];
            this.options = this.column.options;
            this.value = this.table.getCellValue(this.row, this.column);
        }, err => this.handleError(err));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getValuesByProcessDefinitionId(field) {
        this.formService
            .getRestFieldValuesColumnByProcessId(field.form.processDefinitionId, field.id, this.column.id)
            .subscribe((result) => {
            this.column.options = result || [];
            this.options = this.column.options;
            this.value = this.table.getCellValue(this.row, this.column);
        }, err => this.handleError(err));
    }
    /**
     * @param {?} row
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    onValueChanged(row, column, event) {
        /** @type {?} */
        let value = (/** @type {?} */ (event)).value;
        value = column.options.find(opt => opt.name === value);
        row.value[column.id] = value;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
    }
}
DropdownEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-dropdown-editor',
                template: "<div class=\"dropdown-editor\">\n    <label [attr.for]=\"column.id\">{{column.name}}</label>\n    <mat-form-field>\n        <mat-select\n            floatPlaceholder=\"never\"\n            class=\"adf-dropdown-editor-select\"\n            [id]=\"column.id\"\n            [(ngModel)]=\"value\"\n            [required]=\"column.required\"\n            [disabled]=\"!column.editable\"\n            (selectionChange)=\"onValueChanged(row, column, $event)\">\n            <mat-option></mat-option>\n            <mat-option *ngFor=\"let opt of options\" [value]=\"opt.name\" [id]=\"opt.id\">{{opt.name}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                styles: [".adf-dropdown-editor-select{width:100%}"]
            }] }
];
/** @nocollapse */
DropdownEditorComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService }
];
DropdownEditorComponent.propDecorators = {
    table: [{ type: Input }],
    row: [{ type: Input }],
    column: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DropdownEditorComponent.prototype.value;
    /** @type {?} */
    DropdownEditorComponent.prototype.options;
    /** @type {?} */
    DropdownEditorComponent.prototype.table;
    /** @type {?} */
    DropdownEditorComponent.prototype.row;
    /** @type {?} */
    DropdownEditorComponent.prototype.column;
    /** @type {?} */
    DropdownEditorComponent.prototype.formService;
    /** @type {?} */
    DropdownEditorComponent.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uZWRpdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiZm9ybS9jb21wb25lbnRzL3dpZGdldHMvZHluYW1pYy10YWJsZS9lZGl0b3JzL2Ryb3Bkb3duL2Ryb3Bkb3duLmVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBSXJFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBT3ZFLE1BQU07Ozs7O0lBY0YsWUFBbUIsV0FBd0IsRUFDdkI7UUFERCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN2QixlQUFVLEdBQVYsVUFBVTtxQkFiakIsSUFBSTt1QkFDcUIsRUFBRTtLQWF2Qzs7OztJQUVELFFBQVE7O1FBQ0osSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtnQkFDbkMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQzNDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDakM7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM5QzthQUNKO2lCQUFNO2dCQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQy9EO1NBQ0o7S0FDSjs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxLQUFLO1FBQ25CLElBQUksQ0FBQyxXQUFXO2FBQ1gsd0JBQXdCLENBQ3JCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUNqQixLQUFLLENBQUMsRUFBRSxFQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUNqQjthQUNBLFNBQVMsQ0FDTixDQUFDLE1BQWtDLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvRCxFQUNELEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FDL0IsQ0FBQztLQUNUOzs7OztJQUVELDhCQUE4QixDQUFDLEtBQUs7UUFDaEMsSUFBSSxDQUFDLFdBQVc7YUFDWCxtQ0FBbUMsQ0FDaEMsS0FBSyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFDOUIsS0FBSyxDQUFDLEVBQUUsRUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FDakI7YUFDQSxTQUFTLENBQ04sQ0FBQyxNQUFrQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0QsRUFDRCxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQy9CLENBQUM7S0FDVDs7Ozs7OztJQUVELGNBQWMsQ0FBQyxHQUFvQixFQUFFLE1BQTBCLEVBQUUsS0FBVTs7UUFDdkUsSUFBSSxLQUFLLEdBQVEsbUJBQW9CLEtBQUssRUFBQyxDQUFDLEtBQUssQ0FBQztRQUNsRCxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUNoQzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBVTtRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQzs7O1lBakZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixzcUJBQXFDOzthQUV4Qzs7OztZQVZRLFdBQVc7WUFGWCxVQUFVOzs7b0JBa0JkLEtBQUs7a0JBR0wsS0FBSztxQkFHTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBEeW5hbWljVGFibGVDb2x1bW5PcHRpb24gfSBmcm9tICcuLy4uLy4uL2R5bmFtaWMtdGFibGUtY29sdW1uLW9wdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBEeW5hbWljVGFibGVDb2x1bW4gfSBmcm9tICcuLy4uLy4uL2R5bmFtaWMtdGFibGUtY29sdW1uLm1vZGVsJztcbmltcG9ydCB7IER5bmFtaWNUYWJsZVJvdyB9IGZyb20gJy4vLi4vLi4vZHluYW1pYy10YWJsZS1yb3cubW9kZWwnO1xuaW1wb3J0IHsgRHluYW1pY1RhYmxlTW9kZWwgfSBmcm9tICcuLy4uLy4uL2R5bmFtaWMtdGFibGUud2lkZ2V0Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtZHJvcGRvd24tZWRpdG9yJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZHJvcGRvd24uZWRpdG9yLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2Ryb3Bkb3duLmVkaXRvci5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25FZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgdmFsdWU6IGFueSA9IG51bGw7XG4gICAgb3B0aW9uczogRHluYW1pY1RhYmxlQ29sdW1uT3B0aW9uW10gPSBbXTtcblxuICAgIEBJbnB1dCgpXG4gICAgdGFibGU6IER5bmFtaWNUYWJsZU1vZGVsO1xuXG4gICAgQElucHV0KClcbiAgICByb3c6IER5bmFtaWNUYWJsZVJvdztcblxuICAgIEBJbnB1dCgpXG4gICAgY29sdW1uOiBEeW5hbWljVGFibGVDb2x1bW47XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZm9ybVNlcnZpY2U6IEZvcm1TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBsZXQgZmllbGQgPSB0aGlzLnRhYmxlLmZpZWxkO1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbi5vcHRpb25UeXBlID09PSAncmVzdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YWJsZS5mb3JtICYmIHRoaXMudGFibGUuZm9ybS50YXNrSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRWYWx1ZXNCeVRhc2tJZChmaWVsZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRWYWx1ZXNCeVByb2Nlc3NEZWZpbml0aW9uSWQoZmllbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5jb2x1bW4ub3B0aW9ucyB8fCBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy50YWJsZS5nZXRDZWxsVmFsdWUodGhpcy5yb3csIHRoaXMuY29sdW1uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFZhbHVlc0J5VGFza0lkKGZpZWxkKSB7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2VcbiAgICAgICAgICAgIC5nZXRSZXN0RmllbGRWYWx1ZXNDb2x1bW4oXG4gICAgICAgICAgICAgICAgZmllbGQuZm9ybS50YXNrSWQsXG4gICAgICAgICAgICAgICAgZmllbGQuaWQsXG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4uaWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlc3VsdDogRHluYW1pY1RhYmxlQ29sdW1uT3B0aW9uW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4ub3B0aW9ucyA9IHJlc3VsdCB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5jb2x1bW4ub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudGFibGUuZ2V0Q2VsbFZhbHVlKHRoaXMucm93LCB0aGlzLmNvbHVtbik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFZhbHVlc0J5UHJvY2Vzc0RlZmluaXRpb25JZChmaWVsZCkge1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0UmVzdEZpZWxkVmFsdWVzQ29sdW1uQnlQcm9jZXNzSWQoXG4gICAgICAgICAgICAgICAgZmllbGQuZm9ybS5wcm9jZXNzRGVmaW5pdGlvbklkLFxuICAgICAgICAgICAgICAgIGZpZWxkLmlkLFxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uLmlkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChyZXN1bHQ6IER5bmFtaWNUYWJsZUNvbHVtbk9wdGlvbltdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uLm9wdGlvbnMgPSByZXN1bHQgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuY29sdW1uLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnRhYmxlLmdldENlbGxWYWx1ZSh0aGlzLnJvdywgdGhpcy5jb2x1bW4pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlZChyb3c6IER5bmFtaWNUYWJsZVJvdywgY29sdW1uOiBEeW5hbWljVGFibGVDb2x1bW4sIGV2ZW50OiBhbnkpIHtcbiAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+IGV2ZW50KS52YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBjb2x1bW4ub3B0aW9ucy5maW5kKG9wdCA9PiBvcHQubmFtZSA9PT0gdmFsdWUpO1xuICAgICAgICByb3cudmFsdWVbY29sdW1uLmlkXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICB9XG59XG4iXX0=