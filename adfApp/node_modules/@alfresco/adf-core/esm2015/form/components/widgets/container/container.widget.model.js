/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContainerModel } from './../core/container.model';
import { FormFieldTypes } from './../core/form-field-types';
export class ContainerWidgetComponentModel extends ContainerModel {
    /**
     * @param {?} field
     */
    constructor(field) {
        super(field);
        this.columns = [];
        this.isExpanded = true;
        this.rowspan = 1;
        this.colspan = 1;
        if (this.field) {
            this.columns = this.field.columns || [];
            this.isExpanded = !this.isCollapsedByDefault();
            this.colspan = field.colspan;
            this.rowspan = field.rowspan;
        }
    }
    /**
     * @return {?}
     */
    isGroup() {
        return this.type === FormFieldTypes.GROUP;
    }
    /**
     * @return {?}
     */
    isCollapsible() {
        /** @type {?} */
        let allowCollapse = false;
        if (this.isGroup() && this.field.params['allowCollapse']) {
            allowCollapse = /** @type {?} */ (this.field.params['allowCollapse']);
        }
        return allowCollapse;
    }
    /**
     * @return {?}
     */
    isCollapsedByDefault() {
        /** @type {?} */
        let collapseByDefault = false;
        if (this.isCollapsible() && this.field.params['collapseByDefault']) {
            collapseByDefault = /** @type {?} */ (this.field.params['collapseByDefault']);
        }
        return collapseByDefault;
    }
}
if (false) {
    /** @type {?} */
    ContainerWidgetComponentModel.prototype.columns;
    /** @type {?} */
    ContainerWidgetComponentModel.prototype.isExpanded;
    /** @type {?} */
    ContainerWidgetComponentModel.prototype.rowspan;
    /** @type {?} */
    ContainerWidgetComponentModel.prototype.colspan;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLndpZGdldC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vY29tcG9uZW50cy93aWRnZXRzL2NvbnRhaW5lci9jb250YWluZXIud2lkZ2V0Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHNUQsTUFBTSxvQ0FBcUMsU0FBUSxjQUFjOzs7O0lBK0I3RCxZQUFZLEtBQXFCO1FBQzdCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzt1QkE5QmlCLEVBQUU7MEJBQ2QsSUFBSTt1QkFDUixDQUFDO3VCQUNELENBQUM7UUE2QmYsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7WUFDeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7U0FDaEM7S0FDSjs7OztJQWpDRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxLQUFLLENBQUM7S0FDN0M7Ozs7SUFFRCxhQUFhOztRQUNULElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUUxQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUN0RCxhQUFhLHFCQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBLENBQUM7U0FDaEU7UUFFRCxPQUFPLGFBQWEsQ0FBQztLQUN4Qjs7OztJQUVELG9CQUFvQjs7UUFDaEIsSUFBSSxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFFOUIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUNoRSxpQkFBaUIscUJBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQSxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztLQUM1QjtDQVlKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb250YWluZXJDb2x1bW5Nb2RlbCB9IGZyb20gJy4vLi4vY29yZS9jb250YWluZXItY29sdW1uLm1vZGVsJztcbmltcG9ydCB7IENvbnRhaW5lck1vZGVsIH0gZnJvbSAnLi8uLi9jb3JlL2NvbnRhaW5lci5tb2RlbCc7XG5pbXBvcnQgeyBGb3JtRmllbGRUeXBlcyB9IGZyb20gJy4vLi4vY29yZS9mb3JtLWZpZWxkLXR5cGVzJztcbmltcG9ydCB7IEZvcm1GaWVsZE1vZGVsIH0gZnJvbSAnLi8uLi9jb3JlL2Zvcm0tZmllbGQubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50TW9kZWwgZXh0ZW5kcyBDb250YWluZXJNb2RlbCB7XG5cbiAgICBjb2x1bW5zOiBDb250YWluZXJDb2x1bW5Nb2RlbFtdID0gW107XG4gICAgaXNFeHBhbmRlZDogYm9vbGVhbiA9IHRydWU7XG4gICAgcm93c3BhbjogbnVtYmVyID0gMTtcbiAgICBjb2xzcGFuOiBudW1iZXIgPSAxO1xuXG4gICAgaXNHcm91cCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gRm9ybUZpZWxkVHlwZXMuR1JPVVA7XG4gICAgfVxuXG4gICAgaXNDb2xsYXBzaWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGFsbG93Q29sbGFwc2UgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5pc0dyb3VwKCkgJiYgdGhpcy5maWVsZC5wYXJhbXNbJ2FsbG93Q29sbGFwc2UnXSkge1xuICAgICAgICAgICAgYWxsb3dDb2xsYXBzZSA9IDxib29sZWFuPiB0aGlzLmZpZWxkLnBhcmFtc1snYWxsb3dDb2xsYXBzZSddO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFsbG93Q29sbGFwc2U7XG4gICAgfVxuXG4gICAgaXNDb2xsYXBzZWRCeURlZmF1bHQoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBjb2xsYXBzZUJ5RGVmYXVsdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQ29sbGFwc2libGUoKSAmJiB0aGlzLmZpZWxkLnBhcmFtc1snY29sbGFwc2VCeURlZmF1bHQnXSkge1xuICAgICAgICAgICAgY29sbGFwc2VCeURlZmF1bHQgPSA8Ym9vbGVhbj4gdGhpcy5maWVsZC5wYXJhbXNbJ2NvbGxhcHNlQnlEZWZhdWx0J107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGFwc2VCeURlZmF1bHQ7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IEZvcm1GaWVsZE1vZGVsKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkKTtcblxuICAgICAgICBpZiAodGhpcy5maWVsZCkge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gdGhpcy5maWVsZC5jb2x1bW5zIHx8IFtdO1xuICAgICAgICAgICAgdGhpcy5pc0V4cGFuZGVkID0gIXRoaXMuaXNDb2xsYXBzZWRCeURlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuY29sc3BhbiA9IGZpZWxkLmNvbHNwYW47XG4gICAgICAgICAgICB0aGlzLnJvd3NwYW4gPSBmaWVsZC5yb3dzcGFuO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19