/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../../../services/log.service';
import { ChangeDetectorRef, Component, ElementRef, ViewEncapsulation } from '@angular/core';
import { WidgetVisibilityService } from '../../../services/widget-visibility.service';
import { FormService } from './../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
import { DynamicTableModel } from './dynamic-table.widget.model';
export class DynamicTableWidgetComponent extends WidgetComponent {
    /**
     * @param {?} formService
     * @param {?} elementRef
     * @param {?} visibilityService
     * @param {?} logService
     * @param {?} cd
     */
    constructor(formService, elementRef, visibilityService, logService, cd) {
        super(formService);
        this.formService = formService;
        this.elementRef = elementRef;
        this.visibilityService = visibilityService;
        this.logService = logService;
        this.cd = cd;
        this.ERROR_MODEL_NOT_FOUND = 'Table model not found';
        this.editMode = false;
        this.editRow = null;
        this.selectArrayCode = [32, 0, 13];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field) {
            this.content = new DynamicTableModel(this.field, this.formService);
            this.visibilityService.refreshVisibility(this.field.form);
        }
    }
    /**
     * @return {?}
     */
    forceFocusOnAddButton() {
        if (this.content) {
            this.cd.detectChanges();
            /** @type {?} */
            let buttonAddRow = /** @type {?} */ (this.elementRef.nativeElement.querySelector('#' + this.content.id + '-add-row'));
            if (this.isDynamicTableReady(buttonAddRow)) {
                buttonAddRow.focus();
            }
        }
    }
    /**
     * @param {?} buttonAddRow
     * @return {?}
     */
    isDynamicTableReady(buttonAddRow) {
        return this.field && !this.editMode && buttonAddRow;
    }
    /**
     * @return {?}
     */
    isValid() {
        /** @type {?} */
        let result = true;
        if (this.content && this.content.field) {
            result = this.content.field.isValid;
        }
        return result;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onRowClicked(row) {
        if (this.content) {
            this.content.selectedRow = row;
        }
    }
    /**
     * @param {?} $event
     * @param {?} row
     * @return {?}
     */
    onKeyPressed($event, row) {
        if (this.content && this.isEnterOrSpacePressed($event.keyCode)) {
            this.content.selectedRow = row;
        }
    }
    /**
     * @param {?} keycode
     * @return {?}
     */
    isEnterOrSpacePressed(keycode) {
        return this.selectArrayCode.indexOf(keycode) !== -1;
    }
    /**
     * @return {?}
     */
    hasSelection() {
        return !!(this.content && this.content.selectedRow);
    }
    /**
     * @return {?}
     */
    moveSelectionUp() {
        if (this.content && !this.readOnly) {
            this.content.moveRow(this.content.selectedRow, -1);
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    moveSelectionDown() {
        if (this.content && !this.readOnly) {
            this.content.moveRow(this.content.selectedRow, 1);
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    deleteSelection() {
        if (this.content && !this.readOnly) {
            this.content.deleteRow(this.content.selectedRow);
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    addNewRow() {
        if (this.content && !this.readOnly) {
            this.editRow = /** @type {?} */ ({
                isNew: true,
                selected: false,
                value: {}
            });
            this.editMode = true;
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    editSelection() {
        if (this.content && !this.readOnly) {
            this.editRow = this.copyRow(this.content.selectedRow);
            this.editMode = true;
            return true;
        }
        return false;
    }
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    getCellValue(row, column) {
        if (this.content) {
            /** @type {?} */
            let result = this.content.getCellValue(row, column);
            if (column.type === 'Amount') {
                return (column.amountCurrency || '$') + ' ' + (result || 0);
            }
            return result;
        }
        return null;
    }
    /**
     * @return {?}
     */
    onSaveChanges() {
        if (this.content) {
            if (this.editRow.isNew) {
                /** @type {?} */
                let row = this.copyRow(this.editRow);
                this.content.selectedRow = null;
                this.content.addRow(row);
                this.editRow.isNew = false;
            }
            else {
                this.content.selectedRow.value = this.copyObject(this.editRow.value);
            }
            this.content.flushValue();
        }
        else {
            this.logService.error(this.ERROR_MODEL_NOT_FOUND);
        }
        this.editMode = false;
        this.forceFocusOnAddButton();
    }
    /**
     * @return {?}
     */
    onCancelChanges() {
        this.editMode = false;
        this.editRow = null;
        this.forceFocusOnAddButton();
    }
    /**
     * @param {?} row
     * @return {?}
     */
    copyRow(row) {
        return /** @type {?} */ ({
            value: this.copyObject(row.value)
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    copyObject(obj) {
        /** @type {?} */
        let result = obj;
        if (typeof obj === 'object' && obj !== null && obj !== undefined) {
            result = Object.assign({}, obj);
            Object.keys(obj).forEach(key => {
                if (typeof obj[key] === 'object') {
                    result[key] = this.copyObject(obj[key]);
                }
            });
        }
        return result;
    }
}
DynamicTableWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'dynamic-table-widget',
                template: "<div class=\"adf-dynamic-table-scrolling {{field.className}}\"\n    [class.adf-invalid]=\"!isValid()\">\n    <div class=\"adf-label\">{{content.name}}<span *ngIf=\"isRequired()\">*</span></div>\n\n    <div *ngIf=\"!editMode\">\n        <div class=\"adf-table-container\">\n            <table class=\"full-width adf-dynamic-table\" id=\"dynamic-table-{{content.id}}\">\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let column of content.visibleColumns\">\n                            {{column.name}}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let row of content.rows; let idx = index\" tabindex=\"0\" id=\"{{content.id}}-row-{{idx}}\"\n                        [class.adf-dynamic-table-widget__row-selected]=\"row.selected\" (keyup)=\"onKeyPressed($event, row)\">\n                        <td *ngFor=\"let column of content.visibleColumns\"\n                            (click)=\"onRowClicked(row)\">\n                            <span *ngIf=\"column.type !== 'Boolean' else checkbox\">\n                                {{ getCellValue(row, column) }}\n                            </span>\n                            <ng-template #checkbox>\n                                <mat-checkbox disabled [checked]=\"getCellValue(row, column)\">\n                                </mat-checkbox>\n                            </ng-template>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <div *ngIf=\"!readOnly\">\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"moveSelectionUp()\">\n                <mat-icon>arrow_upward</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"moveSelectionDown()\">\n                <mat-icon>arrow_downward</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"field.readOnly\"\n                    id=\"{{content.id}}-add-row\"\n                    (click)=\"addNewRow()\">\n                <mat-icon>add_circle_outline</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"deleteSelection()\">\n                <mat-icon>remove_circle_outline</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"editSelection()\">\n                <mat-icon>edit</mat-icon>\n            </button>\n        </div>\n     </div>\n\n     <row-editor *ngIf=\"editMode\"\n        [table]=\"content\"\n        [row]=\"editRow\"\n        (save)=\"onSaveChanges()\"\n        (cancel)=\"onCancelChanges()\">\n     </row-editor>\n    <error-widget [error]=\"field.validationSummary\" ></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: baseHost,
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
DynamicTableWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: ElementRef },
    { type: WidgetVisibilityService },
    { type: LogService },
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.ERROR_MODEL_NOT_FOUND;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.content;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.editMode;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.editRow;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.selectArrayCode;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.formService;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.elementRef;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.visibilityService;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.logService;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.cd;
}

//# sourceMappingURL=data:application/json;base64,