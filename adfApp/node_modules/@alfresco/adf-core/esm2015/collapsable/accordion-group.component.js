/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatExpansionPanel } from '@angular/material';
export class AccordionGroupComponent {
    constructor() {
        this._isOpen = false;
        this._isSelected = false;
        /**
         * Should the (expanded) accordion icon be shown?
         */
        this.hasAccordionIcon = true;
        /**
         * Emitted when the heading is clicked.
         */
        this.headingClick = new EventEmitter();
    }
    /**
     * Is this group currently open?
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        this._isOpen = value;
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this._isOpen;
    }
    /**
     * Is this group currently selected?
     * @param {?} value
     * @return {?}
     */
    set isSelected(value) {
        this._isSelected = value;
    }
    /**
     * @return {?}
     */
    get isSelected() {
        return this._isSelected;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.hasContent = this.contentWrapper.nativeElement && this.contentWrapper.nativeElement.children.length > 0;
    }
    /**
     * @return {?}
     */
    hasHeadingIcon() {
        return !!this.headingIcon;
    }
    /**
     * @return {?}
     */
    onHeaderClick() {
        this.headingClick.emit(this.heading);
    }
    /**
     * @return {?}
     */
    isExpandable() {
        if (!this.hasContent || !this.isOpen) {
            this.expandPanel();
        }
    }
    /**
     * @return {?}
     */
    expandPanel() {
        this.expansionPanel.expanded = !this.expansionPanel.expanded;
    }
    /**
     * @return {?}
     */
    toggleExpansion() {
        return this.isOpen && this.isSelected;
    }
}
AccordionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-accordion-group',
                template: "<mat-accordion class=\"adf-panel\">\n    <mat-expansion-panel #expansionPanel\n        id=\"adf-expansion-panel-id\"\n        (click)=\"isExpandable()\"\n        [expanded]=\"toggleExpansion()\"\n        (opened)=\"onHeaderClick()\"\n        [hideToggle]=\"!hasAccordionIcon\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                <div class=\"adf-panel-heading\" data-automation-id=\"adf-panel-heading\" [ngClass]=\"{'adf-panel-heading-selected': isSelected}\">\n                    <div id=\"heading-icon\" *ngIf=\"hasHeadingIcon()\" class=\"adf-panel-heading-icon\">\n                        <mat-icon class=\"material-icons\"\n                            [matTooltip]=\"headingIconTooltip\"\n                            [matTooltipDisabled]=\"!headingIconTooltip\">\n                            {{headingIcon}}\n                        </mat-icon>\n                    </div>\n                    <div id=\"heading-text\" class=\"adf-panel-heading-text\">{{heading}}</div>\n                </div>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div id=\"adf-expansion-panel-content-id\" #contentWrapper>\n            <ng-content></ng-content>\n        </div>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
AccordionGroupComponent.ctorParameters = () => [];
AccordionGroupComponent.propDecorators = {
    contentWrapper: [{ type: ViewChild, args: ['contentWrapper',] }],
    expansionPanel: [{ type: ViewChild, args: ['expansionPanel',] }],
    heading: [{ type: Input }],
    headingIcon: [{ type: Input }],
    headingIconTooltip: [{ type: Input }],
    hasAccordionIcon: [{ type: Input }],
    headingClick: [{ type: Output }],
    isOpen: [{ type: Input }],
    isSelected: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AccordionGroupComponent.prototype._isOpen;
    /** @type {?} */
    AccordionGroupComponent.prototype._isSelected;
    /** @type {?} */
    AccordionGroupComponent.prototype.contentWrapper;
    /** @type {?} */
    AccordionGroupComponent.prototype.expansionPanel;
    /**
     * Title heading for the group.
     * @type {?}
     */
    AccordionGroupComponent.prototype.heading;
    /**
     * The material design icon.
     * @type {?}
     */
    AccordionGroupComponent.prototype.headingIcon;
    /**
     * Tooltip message to be shown for headingIcon
     * @type {?}
     */
    AccordionGroupComponent.prototype.headingIconTooltip;
    /**
     * Should the (expanded) accordion icon be shown?
     * @type {?}
     */
    AccordionGroupComponent.prototype.hasAccordionIcon;
    /**
     * Emitted when the heading is clicked.
     * @type {?}
     */
    AccordionGroupComponent.prototype.headingClick;
    /** @type {?} */
    AccordionGroupComponent.prototype.hasContent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNvbGxhcHNhYmxlL2FjY29yZGlvbi1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFrQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqSSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVF0RCxNQUFNO0lBbURGO3VCQWxEMkIsS0FBSzsyQkFDRCxLQUFLOzs7O2dDQXFCUixJQUFJOzs7OzRCQUlFLElBQUksWUFBWSxFQUFPO0tBd0J4Qzs7Ozs7O0lBckJqQixJQUNJLE1BQU0sQ0FBQyxLQUFjO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ3hCOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQ3ZCOzs7Ozs7SUFHRCxJQUNJLFVBQVUsQ0FBQyxLQUFjO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0tBQzVCOzs7O0lBRUQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0tBQzNCOzs7O0lBTUQsZUFBZTtRQUNYLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7S0FDaEg7Ozs7SUFFRCxjQUFjO1FBQ1YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUM3Qjs7OztJQUVELGFBQWE7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDeEM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtLQUNKOzs7O0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7S0FDaEU7Ozs7SUFFRCxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDekM7OztZQW5GSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0Isd3dDQUE2QztnQkFFN0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7Ozs2QkFLSSxTQUFTLFNBQUMsZ0JBQWdCOzZCQUcxQixTQUFTLFNBQUMsZ0JBQWdCO3NCQUcxQixLQUFLOzBCQUlMLEtBQUs7aUNBSUwsS0FBSzsrQkFJTCxLQUFLOzJCQUlMLE1BQU07cUJBSU4sS0FBSzt5QkFVTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCAsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRFeHBhbnNpb25QYW5lbCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYWNjb3JkaW9uLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2FjY29yZGlvbi1ncm91cC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Hcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgX2lzT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2lzU2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBWaWV3Q2hpbGQoJ2NvbnRlbnRXcmFwcGVyJylcbiAgICBjb250ZW50V3JhcHBlcjogRWxlbWVudFJlZjtcblxuICAgIEBWaWV3Q2hpbGQoJ2V4cGFuc2lvblBhbmVsJykgZXhwYW5zaW9uUGFuZWw6IE1hdEV4cGFuc2lvblBhbmVsO1xuXG4gICAgLyoqIFRpdGxlIGhlYWRpbmcgZm9yIHRoZSBncm91cC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGhlYWRpbmc6IHN0cmluZztcblxuICAgIC8qKiBUaGUgbWF0ZXJpYWwgZGVzaWduIGljb24uICovXG4gICAgQElucHV0KClcbiAgICBoZWFkaW5nSWNvbjogc3RyaW5nO1xuXG4gICAgLyoqIFRvb2x0aXAgbWVzc2FnZSB0byBiZSBzaG93biBmb3IgaGVhZGluZ0ljb24gKi9cbiAgICBASW5wdXQoKVxuICAgIGhlYWRpbmdJY29uVG9vbHRpcDogc3RyaW5nO1xuXG4gICAvKiogU2hvdWxkIHRoZSAoZXhwYW5kZWQpIGFjY29yZGlvbiBpY29uIGJlIHNob3duPyAqL1xuICAgIEBJbnB1dCgpXG4gICAgaGFzQWNjb3JkaW9uSWNvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBoZWFkaW5nIGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgaGVhZGluZ0NsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIElzIHRoaXMgZ3JvdXAgY3VycmVudGx5IG9wZW4/ICovXG4gICAgQElucHV0KClcbiAgICBzZXQgaXNPcGVuKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2lzT3BlbiA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBpc09wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gICAgfVxuXG4gICAgLyoqIElzIHRoaXMgZ3JvdXAgY3VycmVudGx5IHNlbGVjdGVkPyAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGlzU2VsZWN0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNTZWxlY3RlZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBpc1NlbGVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBoYXNDb250ZW50OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5oYXNDb250ZW50ID0gdGhpcy5jb250ZW50V3JhcHBlci5uYXRpdmVFbGVtZW50ICYmIHRoaXMuY29udGVudFdyYXBwZXIubmF0aXZlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGhhc0hlYWRpbmdJY29uKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmhlYWRpbmdJY29uO1xuICAgIH1cblxuICAgIG9uSGVhZGVyQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGVhZGluZ0NsaWNrLmVtaXQodGhpcy5oZWFkaW5nKTtcbiAgICB9XG5cbiAgICBpc0V4cGFuZGFibGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNDb250ZW50IHx8ICF0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5leHBhbmRQYW5lbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwYW5kUGFuZWwoKSB7XG4gICAgICAgIHRoaXMuZXhwYW5zaW9uUGFuZWwuZXhwYW5kZWQgPSAhdGhpcy5leHBhbnNpb25QYW5lbC5leHBhbmRlZDtcbiAgICB9XG5cbiAgICB0b2dnbGVFeHBhbnNpb24oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzT3BlbiAmJiB0aGlzLmlzU2VsZWN0ZWQ7XG4gICAgfVxufVxuIl19