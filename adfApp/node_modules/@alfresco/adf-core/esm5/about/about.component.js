/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { AuthenticationService } from '../services/authentication.service';
import { DiscoveryApiService } from '../services/discovery-api.service';
import { ObjectDataTableAdapter } from '../datatable/data/object-datatable-adapter';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
var AboutComponent = /** @class */ (function () {
    function AboutComponent(http, appConfig, authService, discovery) {
        this.http = http;
        this.appConfig = appConfig;
        this.authService = authService;
        this.discovery = discovery;
        this.githubUrlCommitAlpha = 'https://github.com/Alfresco/alfresco-ng2-components/commits/';
        this.ecmHost = '';
        this.bpmHost = '';
        this.ecmVersion = null;
        this.bpmVersion = null;
    }
    /**
     * @return {?}
     */
    AboutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.authService.isEcmLoggedIn()) {
            this.discovery.getEcmProductInfo().subscribe(function (ecmVers) {
                _this.ecmVersion = ecmVers;
                _this.modules = new ObjectDataTableAdapter(_this.ecmVersion.modules, [
                    { type: 'text', key: 'id', title: 'ID', sortable: true },
                    { type: 'text', key: 'title', title: 'Title', sortable: true },
                    { type: 'text', key: 'version', title: 'Description', sortable: true },
                    { type: 'text', key: 'installDate', title: 'Install Date', sortable: true },
                    { type: 'text', key: 'installState', title: 'Install State', sortable: true },
                    { type: 'text', key: 'versionMin', title: 'Version Minor', sortable: true },
                    { type: 'text', key: 'versionMax', title: 'Version Max', sortable: true }
                ]);
                _this.status = new ObjectDataTableAdapter([_this.ecmVersion.status], [
                    { type: 'text', key: 'isReadOnly', title: 'ReadOnly', sortable: true },
                    { type: 'text', key: 'isAuditEnabled', title: 'Is Audit Enable', sortable: true },
                    { type: 'text', key: 'isQuickShareEnabled', title: 'Is quick shared enable', sortable: true },
                    { type: 'text', key: 'isThumbnailGenerationEnabled', title: 'Thumbnail Generation', sortable: true }
                ]);
                _this.license = new ObjectDataTableAdapter([_this.ecmVersion.license], [
                    { type: 'text', key: 'issuedAt', title: 'Issued At', sortable: true },
                    { type: 'text', key: 'expiresAt', title: 'Expires At', sortable: true },
                    { type: 'text', key: 'remainingDays', title: 'Remaining Days', sortable: true },
                    { type: 'text', key: 'holder', title: 'Holder', sortable: true },
                    { type: 'text', key: 'mode', title: 'Mode', sortable: true },
                    { type: 'text', key: 'isClusterEnabled', title: 'Is Cluster Enabled', sortable: true },
                    { type: 'text', key: 'isCryptodocEnabled', title: 'Is Cryptodoc Enable', sortable: true }
                ]);
            });
        }
        if (this.authService.isBpmLoggedIn()) {
            this.discovery.getBpmProductInfo().subscribe(function (bpmVers) {
                _this.bpmVersion = bpmVers;
            });
        }
        this.http.get('/versions.json?' + new Date()).subscribe(function (response) {
            /** @type {?} */
            var regexp = new RegExp('^(@alfresco)');
            /** @type {?} */
            var alfrescoPackages = Object.keys(response.dependencies).filter(function (val) {
                return regexp.test(val);
            });
            /** @type {?} */
            var alfrescoPackagesTableRepresentation = [];
            alfrescoPackages.forEach(function (val) {
                alfrescoPackagesTableRepresentation.push({
                    name: val,
                    version: response.dependencies[val].version
                });
            });
            _this.gitHubLinkCreation(alfrescoPackagesTableRepresentation);
            _this.data = new ObjectDataTableAdapter(alfrescoPackagesTableRepresentation, [
                { type: 'text', key: 'name', title: 'Name', sortable: true },
                { type: 'text', key: 'version', title: 'Version', sortable: true }
            ]);
        });
        this.ecmHost = this.appConfig.get(AppConfigValues.ECMHOST);
        this.bpmHost = this.appConfig.get(AppConfigValues.BPMHOST);
    };
    /**
     * @param {?} alfrescoPackagesTableRepresentation
     * @return {?}
     */
    AboutComponent.prototype.gitHubLinkCreation = /**
     * @param {?} alfrescoPackagesTableRepresentation
     * @return {?}
     */
    function (alfrescoPackagesTableRepresentation) {
        /** @type {?} */
        var corePackage = alfrescoPackagesTableRepresentation.find(function (packageUp) {
            return packageUp.name === '@alfresco/adf-core';
        });
        if (corePackage) {
            /** @type {?} */
            var commitIsh = corePackage.version.split('-');
            if (commitIsh.length > 1) {
                this.githubUrlCommitAlpha = this.githubUrlCommitAlpha + commitIsh[1];
            }
            else {
                this.githubUrlCommitAlpha = this.githubUrlCommitAlpha + corePackage.version;
            }
        }
    };
    AboutComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-about',
                    template: "<div class=\"about-container\">\n    <h3>Server settings</h3>\n    <mat-list>\n        <small>The values below are taken from the AppConfigService </small>\n        <mat-list-item>\n            <h4 matLine> Alfresco Process Services URL: {{ bpmHost }}</h4>\n        </mat-list-item>\n        <mat-divider></mat-divider>\n        <mat-list-item>\n            <h4 matLine>Alfresco Content Services URL: {{ ecmHost }}</h4>\n        </mat-list-item>\n    </mat-list>\n\n    <h3>Product Versions</h3>\n    <div *ngIf=\"bpmVersion\">\n        <h3>BPM</h3>\n        <label> Edition </label> {{ bpmVersion.edition }}\n        <p></p>\n        <label> Version </label> {{ bpmVersion.majorVersion }}.{{ bpmVersion.minorVersion }}.{{ bpmVersion.revisionVersion }}\n    </div>\n    <div *ngIf=\"ecmVersion\">\n        <h3>ECM</h3>\n        <label> Edition </label> {{ ecmVersion.edition }}\n        <p></p>\n        <label> Version </label> {{ ecmVersion.version.display }}\n        <p></p>\n        <h4>License</h4>\n        <adf-datatable [data]=\"license\"></adf-datatable>\n\n        <h4> Status</h4>\n        <adf-datatable [data]=\"status\"></adf-datatable>\n\n        <h4>Modules</h4>\n\n        <adf-datatable [data]=\"modules\"></adf-datatable>\n    </div>\n\n    <div *ngIf=\"githubUrlCommitAlpha\">\n        <h3>Source code</h3>\n        <small>You are running the project based on the following commit:</small>\n        <div>\n            <a [href]=\"githubUrlCommitAlpha\">{{githubUrlCommitAlpha}}</a>\n        </div>\n    </div>\n\n    <h3>Packages</h3>\n    <small>Current project is using the following ADF libraries:</small>\n    <adf-datatable [data]=\"data\"></adf-datatable>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".about-container{padding:10px}.adf-table-version{width:60%;border:0;border-spacing:0;text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    AboutComponent.ctorParameters = function () { return [
        { type: HttpClient },
        { type: AppConfigService },
        { type: AuthenticationService },
        { type: DiscoveryApiService }
    ]; };
    return AboutComponent;
}());
export { AboutComponent };
if (false) {
    /** @type {?} */
    AboutComponent.prototype.data;
    /** @type {?} */
    AboutComponent.prototype.status;
    /** @type {?} */
    AboutComponent.prototype.license;
    /** @type {?} */
    AboutComponent.prototype.modules;
    /** @type {?} */
    AboutComponent.prototype.githubUrlCommitAlpha;
    /** @type {?} */
    AboutComponent.prototype.ecmHost;
    /** @type {?} */
    AboutComponent.prototype.bpmHost;
    /** @type {?} */
    AboutComponent.prototype.ecmVersion;
    /** @type {?} */
    AboutComponent.prototype.bpmVersion;
    /** @type {?} */
    AboutComponent.prototype.http;
    /** @type {?} */
    AboutComponent.prototype.appConfig;
    /** @type {?} */
    AboutComponent.prototype.authService;
    /** @type {?} */
    AboutComponent.prototype.discovery;
}

//# sourceMappingURL=data:application/json;base64,