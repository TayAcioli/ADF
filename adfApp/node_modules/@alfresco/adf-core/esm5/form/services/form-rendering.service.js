/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import { AmountWidgetComponent, CheckboxWidgetComponent, ContainerWidgetComponent, DateWidgetComponent, DisplayTextWidgetComponentComponent, DocumentWidgetComponent, DropdownWidgetComponent, DynamicTableWidgetComponent, FunctionalGroupWidgetComponent, HyperlinkWidgetComponent, MultilineTextWidgetComponentComponent, NumberWidgetComponent, PeopleWidgetComponent, RadioButtonsWidgetComponent, TextWidgetComponent, TypeaheadWidgetComponent, UnknownWidgetComponent, UploadWidgetComponent, DateTimeWidgetComponent } from './../components/widgets/index';
var FormRenderingService = /** @class */ (function (_super) {
    tslib_1.__extends(FormRenderingService, _super);
    function FormRenderingService() {
        var _this = _super.call(this) || this;
        _this.defaultValue = UnknownWidgetComponent;
        _this.types = {
            'text': DynamicComponentResolver.fromType(TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),
            'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(DateTimeWidgetComponent)
        };
        return _this;
    }
    FormRenderingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormRenderingService.ctorParameters = function () { return []; };
    return FormRenderingService;
}(DynamicComponentMapper));
export { FormRenderingService };
if (false) {
    /** @type {?} */
    FormRenderingService.prototype.defaultValue;
    /** @type {?} */
    FormRenderingService.prototype.types;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLHNCQUFzQixFQUFtQyx3QkFBd0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3BKLE9BQU8sRUFBRSxVQUFVLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUNILHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsd0JBQXdCLEVBQ3hCLG1CQUFtQixFQUNuQixtQ0FBbUMsRUFDbkMsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2QiwyQkFBMkIsRUFDM0IsOEJBQThCLEVBQzlCLHdCQUF3QixFQUN4QixxQ0FBcUMsRUFDckMscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQiwyQkFBMkIsRUFDM0IsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN4QixzQkFBc0IsRUFDdEIscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUMxQixNQUFNLCtCQUErQixDQUFDOztJQUdHLGdEQUFzQjtJQTBCNUQ7UUFBQSxZQUNJLGlCQUFPLFNBQ1Y7NkJBMUJrQyxzQkFBc0I7c0JBQ2E7WUFDbEUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUM5RCxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQ2hFLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbkUsaUJBQWlCLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFDQUFxQyxDQUFDO1lBQzNGLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7WUFDckUsVUFBVSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztZQUN0RSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQzlELFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbEUsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQztZQUMvRSxXQUFXLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQ3hFLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUNBQW1DLENBQUM7WUFDdkYsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUN4RSxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ2xFLGtCQUFrQixFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQztZQUNyRixlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDO1lBQy9FLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUNwRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3RFLFFBQVEsRUFBRyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbkUsVUFBVSxFQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztTQUMxRTs7S0FJQTs7Z0JBN0JKLFVBQVU7Ozs7K0JBMUNYO0VBMkMwQyxzQkFBc0I7U0FBbkQsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1hcHBlciwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICAgIEFtb3VudFdpZGdldENvbXBvbmVudCxcbiAgICBDaGVja2JveFdpZGdldENvbXBvbmVudCxcbiAgICBDb250YWluZXJXaWRnZXRDb21wb25lbnQsXG4gICAgRGF0ZVdpZGdldENvbXBvbmVudCxcbiAgICBEaXNwbGF5VGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCxcbiAgICBEb2N1bWVudFdpZGdldENvbXBvbmVudCxcbiAgICBEcm9wZG93bldpZGdldENvbXBvbmVudCxcbiAgICBEeW5hbWljVGFibGVXaWRnZXRDb21wb25lbnQsXG4gICAgRnVuY3Rpb25hbEdyb3VwV2lkZ2V0Q29tcG9uZW50LFxuICAgIEh5cGVybGlua1dpZGdldENvbXBvbmVudCxcbiAgICBNdWx0aWxpbmVUZXh0V2lkZ2V0Q29tcG9uZW50Q29tcG9uZW50LFxuICAgIE51bWJlcldpZGdldENvbXBvbmVudCxcbiAgICBQZW9wbGVXaWRnZXRDb21wb25lbnQsXG4gICAgUmFkaW9CdXR0b25zV2lkZ2V0Q29tcG9uZW50LFxuICAgIFRleHRXaWRnZXRDb21wb25lbnQsXG4gICAgVHlwZWFoZWFkV2lkZ2V0Q29tcG9uZW50LFxuICAgIFVua25vd25XaWRnZXRDb21wb25lbnQsXG4gICAgVXBsb2FkV2lkZ2V0Q29tcG9uZW50LFxuICAgIERhdGVUaW1lV2lkZ2V0Q29tcG9uZW50XG59IGZyb20gJy4vLi4vY29tcG9uZW50cy93aWRnZXRzL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvcm1SZW5kZXJpbmdTZXJ2aWNlIGV4dGVuZHMgRHluYW1pY0NvbXBvbmVudE1hcHBlciB7XG5cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdFZhbHVlOiBUeXBlPHt9PiA9IFVua25vd25XaWRnZXRDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIHR5cGVzOiB7IFtrZXk6IHN0cmluZ106IER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24gfSA9IHtcbiAgICAgICAgJ3RleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdzdHJpbmcnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdpbnRlZ2VyJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKE51bWJlcldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdtdWx0aS1saW5lLXRleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoTXVsdGlsaW5lVGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCksXG4gICAgICAgICdib29sZWFuJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENoZWNrYm94V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2Ryb3Bkb3duJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERyb3Bkb3duV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RhdGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGF0ZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdhbW91bnQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQW1vdW50V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JhZGlvLWJ1dHRvbnMnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoUmFkaW9CdXR0b25zV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2h5cGVybGluayc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShIeXBlcmxpbmtXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAncmVhZG9ubHktdGV4dCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEaXNwbGF5VGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCksXG4gICAgICAgICd0eXBlYWhlYWQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVHlwZWFoZWFkV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3Blb3BsZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShQZW9wbGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZnVuY3Rpb25hbC1ncm91cCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShGdW5jdGlvbmFsR3JvdXBXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZHluYW1pYy10YWJsZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEeW5hbWljVGFibGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnY29udGFpbmVyJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENvbnRhaW5lcldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdncm91cCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDb250YWluZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZG9jdW1lbnQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRG9jdW1lbnRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAndXBsb2FkJzogIER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShVcGxvYWRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZGF0ZXRpbWUnOiAgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERhdGVUaW1lV2lkZ2V0Q29tcG9uZW50KVxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG4iXX0=