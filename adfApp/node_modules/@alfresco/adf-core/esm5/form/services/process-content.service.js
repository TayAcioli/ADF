/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
var ProcessContentService = /** @class */ (function () {
    function ProcessContentService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    Object.defineProperty(ProcessContentService.prototype, "contentApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.contentApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create temporary related content from an uploaded file.
     * @param file File to use for content
     * @returns The created content data
     */
    /**
     * Create temporary related content from an uploaded file.
     * @param {?} file File to use for content
     * @return {?} The created content data
     */
    ProcessContentService.prototype.createTemporaryRawRelatedContent = /**
     * Create temporary related content from an uploaded file.
     * @param {?} file File to use for content
     * @return {?} The created content data
     */
    function (file) {
        var _this = this;
        return from(this.contentApi.createTemporaryRawRelatedContent(file))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the metadata for a related content item.
     * @param contentId ID of the content item
     * @returns Metadata for the content
     */
    /**
     * Gets the metadata for a related content item.
     * @param {?} contentId ID of the content item
     * @return {?} Metadata for the content
     */
    ProcessContentService.prototype.getFileContent = /**
     * Gets the metadata for a related content item.
     * @param {?} contentId ID of the content item
     * @return {?} Metadata for the content
     */
    function (contentId) {
        var _this = this;
        return from(this.contentApi.getContent(contentId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets raw binary content data for a related content file.
     * @param contentId ID of the related content
     * @returns Binary data of the related content
     */
    /**
     * Gets raw binary content data for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the related content
     */
    ProcessContentService.prototype.getFileRawContent = /**
     * Gets raw binary content data for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the related content
     */
    function (contentId) {
        var _this = this;
        return from(this.contentApi.getRawContent(contentId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the preview for a related content file.
     * @param contentId ID of the related content
     * @returns Binary data of the content preview
     */
    /**
     * Gets the preview for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the content preview
     */
    ProcessContentService.prototype.getContentPreview = /**
     * Gets the preview for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the content preview
     */
    function (contentId) {
        var _this = this;
        return new Observable(function (observer) {
            _this.contentApi.getContentPreview(contentId).then(function (result) {
                observer.next(result);
                observer.complete();
            }, function () {
                _this.contentApi.getRawContent(contentId).then(function (data) {
                    observer.next(data);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            });
        });
    };
    /**
     * Gets a URL for direct access to a related content file.
     * @param contentId ID of the related content
     * @returns URL to access the content
     */
    /**
     * Gets a URL for direct access to a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} URL to access the content
     */
    ProcessContentService.prototype.getFileRawContentUrl = /**
     * Gets a URL for direct access to a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} URL to access the content
     */
    function (contentId) {
        return this.contentApi.getRawContentUrl(contentId);
    };
    /**
     * Gets the thumbnail for a related content file.
     * @param contentId ID of the related content
     * @returns Binary data of the thumbnail image
     */
    /**
     * Gets the thumbnail for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the thumbnail image
     */
    ProcessContentService.prototype.getContentThumbnail = /**
     * Gets the thumbnail for a related content file.
     * @param {?} contentId ID of the related content
     * @return {?} Binary data of the thumbnail image
     */
    function (contentId) {
        var _this = this;
        return from(this.contentApi.getContentThumbnail(contentId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets related content items for a task instance.
     * @param taskId ID of the target task
     * @returns Metadata for the content
     */
    /**
     * Gets related content items for a task instance.
     * @param {?} taskId ID of the target task
     * @return {?} Metadata for the content
     */
    ProcessContentService.prototype.getTaskRelatedContent = /**
     * Gets related content items for a task instance.
     * @param {?} taskId ID of the target task
     * @return {?} Metadata for the content
     */
    function (taskId) {
        var _this = this;
        return from(this.contentApi.getRelatedContentForTask(taskId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets related content items for a process instance.
     * @param processId ID of the target process
     * @returns Metadata for the content
     */
    /**
     * Gets related content items for a process instance.
     * @param {?} processId ID of the target process
     * @return {?} Metadata for the content
     */
    ProcessContentService.prototype.getProcessRelatedContent = /**
     * Gets related content items for a process instance.
     * @param {?} processId ID of the target process
     * @return {?} Metadata for the content
     */
    function (processId) {
        var _this = this;
        return from(this.contentApi.getRelatedContentForProcessInstance(processId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Deletes related content.
     * @param contentId Identifier of the content to delete
     * @returns Null response that notifies when the deletion is complete
     */
    /**
     * Deletes related content.
     * @param {?} contentId Identifier of the content to delete
     * @return {?} Null response that notifies when the deletion is complete
     */
    ProcessContentService.prototype.deleteRelatedContent = /**
     * Deletes related content.
     * @param {?} contentId Identifier of the content to delete
     * @return {?} Null response that notifies when the deletion is complete
     */
    function (contentId) {
        var _this = this;
        return from(this.contentApi.deleteContent(contentId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Associates an uploaded file with a process instance.
     * @param processInstanceId ID of the target process instance
     * @param content File to associate
     * @param opts Options supported by JSAPI
     * @returns Details of created content
     */
    /**
     * Associates an uploaded file with a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @param {?} content File to associate
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of created content
     */
    ProcessContentService.prototype.createProcessRelatedContent = /**
     * Associates an uploaded file with a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @param {?} content File to associate
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of created content
     */
    function (processInstanceId, content, opts) {
        var _this = this;
        return from(this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, content, opts))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Associates an uploaded file with a task instance.
     * @param taskId ID of the target task
     * @param file File to associate
     * @param opts Options supported by JSAPI
     * @returns Details of created content
     */
    /**
     * Associates an uploaded file with a task instance.
     * @param {?} taskId ID of the target task
     * @param {?} file File to associate
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of created content
     */
    ProcessContentService.prototype.createTaskRelatedContent = /**
     * Associates an uploaded file with a task instance.
     * @param {?} taskId ID of the target task
     * @param {?} file File to associate
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Details of created content
     */
    function (taskId, file, opts) {
        var _this = this;
        return from(this.contentApi.createRelatedContentOnTask(taskId, file, opts))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Creates a JSON representation of data.
     * @param res Object representing data
     * @returns JSON object
     */
    /**
     * Creates a JSON representation of data.
     * @param {?} res Object representing data
     * @return {?} JSON object
     */
    ProcessContentService.prototype.toJson = /**
     * Creates a JSON representation of data.
     * @param {?} res Object representing data
     * @return {?} JSON object
     */
    function (res) {
        if (res) {
            return res || {};
        }
        return {};
    };
    /**
     * Creates a JSON array representation of data.
     * @param res Object representing data
     * @returns JSON array object
     */
    /**
     * Creates a JSON array representation of data.
     * @param {?} res Object representing data
     * @return {?} JSON array object
     */
    ProcessContentService.prototype.toJsonArray = /**
     * Creates a JSON array representation of data.
     * @param {?} res Object representing data
     * @return {?} JSON array object
     */
    function (res) {
        if (res) {
            return res.data || [];
        }
        return [];
    };
    /**
     * Reports an error message.
     * @param error Data object with optional `message` and `status` fields for the error
     * @returns Callback when an error occurs
     */
    /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Callback when an error occurs
     */
    ProcessContentService.prototype.handleError = /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Callback when an error occurs
     */
    function (error) {
        /** @type {?} */
        var errMsg = ProcessContentService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? error.status + " - " + error.statusText : ProcessContentService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    };
    ProcessContentService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
    ProcessContentService.GENERIC_ERROR_MESSAGE = 'Server error';
    ProcessContentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessContentService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    return ProcessContentService;
}());
export { ProcessContentService };
if (false) {
    /** @type {?} */
    ProcessContentService.UNKNOWN_ERROR_MESSAGE;
    /** @type {?} */
    ProcessContentService.GENERIC_ERROR_MESSAGE;
    /** @type {?} */
    ProcessContentService.prototype.apiService;
    /** @type {?} */
    ProcessContentService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,