/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
import { ContainerWidgetComponentModel } from './container.widget.model';
var ContainerWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerWidgetComponent, _super);
    function ContainerWidgetComponent(formService) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        return _this;
    }
    /**
     * @return {?}
     */
    ContainerWidgetComponent.prototype.onExpanderClicked = /**
     * @return {?}
     */
    function () {
        if (this.content && this.content.isCollapsible()) {
            this.content.isExpanded = !this.content.isExpanded;
        }
    };
    /**
     * @return {?}
     */
    ContainerWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field) {
            this.content = new ContainerWidgetComponentModel(this.field);
        }
    };
    Object.defineProperty(ContainerWidgetComponent.prototype, "fields", {
        /**
         * Serializes column fields
         */
        get: /**
         * Serializes column fields
         * @return {?}
         */
        function () {
            /** @type {?} */
            var fields = [];
            /** @type {?} */
            var rowContainsElement = true;
            /** @type {?} */
            var rowIndex = 0;
            while (rowContainsElement) {
                rowContainsElement = false;
                for (var i = 0; i < this.content.columns.length; i++) {
                    /** @type {?} */
                    var field = this.content.columns[i].fields[rowIndex];
                    if (field) {
                        rowContainsElement = true;
                    }
                    fields.push(field);
                }
                rowIndex++;
            }
            return fields;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Calculate the column width based on the numberOfColumns and current field's colspan property
     *
     * @param field
     */
    /**
     * Calculate the column width based on the numberOfColumns and current field's colspan property
     *
     * @param {?} field
     * @return {?}
     */
    ContainerWidgetComponent.prototype.getColumnWith = /**
     * Calculate the column width based on the numberOfColumns and current field's colspan property
     *
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var colspan = field ? field.colspan : 1;
        return (100 / this.content.json.numberOfColumns) * colspan + '%';
    };
    ContainerWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'container-widget',
                    template: "<div [hidden]=\"!content?.isGroup()\" class=\"container-widget__header\">\n    <h4 class=\"container-widget__header-text\" id=\"container-header\"\n        [class.collapsible]=\"content?.isCollapsible()\">\n        <button *ngIf=\"content?.isCollapsible()\"\n                mat-icon-button\n                class=\"mdl-button--icon\"\n                (click)=\"onExpanderClicked()\">\n            <mat-icon>{{ content?.isExpanded ? 'expand_more' : 'expand_less' }}</mat-icon>\n        </button>\n        <span (click)=\"onExpanderClicked()\" id=\"container-header-label\">{{content.name}}</span>\n    </h4>\n</div>\n\n<section class=\"grid-list\" *ngIf=\"content?.isExpanded\">\n    <div class=\"grid-list-item\" *ngFor=\"let field of fields\" [style.width]=\"getColumnWith(field)\">\n        <adf-form-field *ngIf=\"field\" [field]=\"field\"></adf-form-field>\n    </div>\n</section>\n\n\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContainerWidgetComponent.ctorParameters = function () { return [
        { type: FormService }
    ]; };
    return ContainerWidgetComponent;
}(WidgetComponent));
export { ContainerWidgetComponent };
if (false) {
    /** @type {?} */
    ContainerWidgetComponent.prototype.content;
    /** @type {?} */
    ContainerWidgetComponent.prototype.formService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLndpZGdldC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vY29tcG9uZW50cy93aWRnZXRzL2NvbnRhaW5lci9jb250YWluZXIud2lkZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQWlCLFNBQVMsRUFBVSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0QsT0FBTyxFQUFFLFFBQVEsRUFBRyxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7SUFTM0Isb0RBQWU7SUFJekQsa0NBQW1CLFdBQXdCO1FBQTNDLFlBQ0ssa0JBQU0sV0FBVyxDQUFDLFNBQ3RCO1FBRmtCLGlCQUFXLEdBQVgsV0FBVyxDQUFhOztLQUUxQzs7OztJQUVELG9EQUFpQjs7O0lBQWpCO1FBQ0ksSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztTQUN0RDtLQUNKOzs7O0lBRUQsMkNBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLDZCQUE2QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRTtLQUNKO0lBS0Qsc0JBQUksNENBQU07UUFIVjs7V0FFRzs7Ozs7UUFDSDs7WUFDSSxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7O1lBRWxCLElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUNaOztZQURqQixJQUNJLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFFakIsT0FBTyxrQkFBa0IsRUFBRTtnQkFDdkIsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO2dCQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFHOztvQkFDbkQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUNyRCxJQUFJLEtBQUssRUFBRTt3QkFDUCxrQkFBa0IsR0FBRyxJQUFJLENBQUM7cUJBQzdCO29CQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3RCO2dCQUNELFFBQVEsRUFBRSxDQUFDO2FBQ2Q7WUFFRCxPQUFPLE1BQU0sQ0FBQztTQUNqQjs7O09BQUE7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0gsZ0RBQWE7Ozs7OztJQUFiLFVBQWMsS0FBcUI7O1FBQy9CLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQztLQUNwRTs7Z0JBNURKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1Qix1NEJBQXNDO29CQUV0QyxJQUFJLEVBQUUsUUFBUTtvQkFDZCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQVhRLFdBQVc7O21DQXBCcEI7RUFnQzhDLGVBQWU7U0FBaEQsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtU2VydmljZSB9IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvZm9ybS5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1GaWVsZE1vZGVsIH0gZnJvbSAnLi8uLi9jb3JlL2Zvcm0tZmllbGQubW9kZWwnO1xuaW1wb3J0IHsgYmFzZUhvc3QgLCBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuLy4uL3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50TW9kZWwgfSBmcm9tICcuL2NvbnRhaW5lci53aWRnZXQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2NvbnRhaW5lci13aWRnZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb250YWluZXIud2lkZ2V0Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbnRhaW5lci53aWRnZXQuc2NzcyddLFxuICAgIGhvc3Q6IGJhc2VIb3N0LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50IGV4dGVuZHMgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcblxuICAgIGNvbnRlbnQ6IENvbnRhaW5lcldpZGdldENvbXBvbmVudE1vZGVsO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSkge1xuICAgICAgICAgc3VwZXIoZm9ybVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uRXhwYW5kZXJDbGlja2VkKCkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50ICYmIHRoaXMuY29udGVudC5pc0NvbGxhcHNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5pc0V4cGFuZGVkID0gIXRoaXMuY29udGVudC5pc0V4cGFuZGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXcgQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50TW9kZWwodGhpcy5maWVsZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIGNvbHVtbiBmaWVsZHNcbiAgICAgKi9cbiAgICBnZXQgZmllbGRzKCk6IEZvcm1GaWVsZE1vZGVsW10ge1xuICAgICAgICBjb25zdCBmaWVsZHMgPSBbXTtcblxuICAgICAgICBsZXQgcm93Q29udGFpbnNFbGVtZW50ID0gdHJ1ZSxcbiAgICAgICAgICAgIHJvd0luZGV4ID0gMDtcblxuICAgICAgICB3aGlsZSAocm93Q29udGFpbnNFbGVtZW50KSB7XG4gICAgICAgICAgICByb3dDb250YWluc0VsZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50LmNvbHVtbnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpZWxkID0gdGhpcy5jb250ZW50LmNvbHVtbnNbaV0uZmllbGRzW3Jvd0luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93Q29udGFpbnNFbGVtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dJbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbHVtbiB3aWR0aCBiYXNlZCBvbiB0aGUgbnVtYmVyT2ZDb2x1bW5zIGFuZCBjdXJyZW50IGZpZWxkJ3MgY29sc3BhbiBwcm9wZXJ0eVxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkXG4gICAgICovXG4gICAgZ2V0Q29sdW1uV2l0aChmaWVsZDogRm9ybUZpZWxkTW9kZWwpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBjb2xzcGFuID0gZmllbGQgPyBmaWVsZC5jb2xzcGFuIDogMTtcbiAgICAgICAgcmV0dXJuICgxMDAgLyB0aGlzLmNvbnRlbnQuanNvbi5udW1iZXJPZkNvbHVtbnMpICogY29sc3BhbiArICclJztcbiAgICB9XG59XG4iXX0=