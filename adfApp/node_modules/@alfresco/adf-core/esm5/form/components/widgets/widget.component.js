/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../services/form.service';
import { FormFieldModel } from './core/index';
/** @type {?} */
export var baseHost = {
    '(click)': 'event($event)',
    '(blur)': 'event($event)',
    '(change)': 'event($event)',
    '(focus)': 'event($event)',
    '(focusin)': 'event($event)',
    '(focusout)': 'event($event)',
    '(input)': 'event($event)',
    '(invalid)': 'event($event)',
    '(select)': 'event($event)'
};
/**
 * Base widget component.
 */
var WidgetComponent = /** @class */ (function () {
    function WidgetComponent(formService) {
        this.formService = formService;
        /**
         * Does the widget show a read-only value? (ie, can't be edited)
         */
        this.readOnly = false;
        /**
         * Emitted when a field value changes.
         * @deprecated Used only to trigger visibility engine; components should do that internally if needed.
         */
        this.fieldChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetComponent.prototype.hasField = /**
     * @return {?}
     */
    function () {
        return this.field ? true : false;
    };
    // Note for developers:
    // returns <any> object to be able binding it to the <element reguired="required"> attribute
    /**
     * @return {?}
     */
    WidgetComponent.prototype.isRequired = /**
     * @return {?}
     */
    function () {
        if (this.field && this.field.required) {
            return true;
        }
        return null;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.isValid = /**
     * @return {?}
     */
    function () {
        return this.field.validationSummary ? true : false;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.hasValue = /**
     * @return {?}
     */
    function () {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.isInvalidFieldRequired = /**
     * @return {?}
     */
    function () {
        return !this.field.isValid && !this.field.validationSummary && this.isRequired();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.fieldChanged.emit(this.field);
    };
    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */
    /**
     * @deprecated used only to trigger visibility engine, components should do that internally if needed
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.checkVisibility = /**
     * @deprecated used only to trigger visibility engine, components should do that internally if needed
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.fieldChanged.emit(field);
    };
    /** @deprecated used only to trigger visibility engine, components should do that internally if needed */
    /**
     * @deprecated used only to trigger visibility engine, components should do that internally if needed
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.onFieldChanged = /**
     * @deprecated used only to trigger visibility engine, components should do that internally if needed
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.fieldChanged.emit(field);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.getHyperlinkUrl = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var url = WidgetComponent.DEFAULT_HYPERLINK_URL;
        if (field && field.hyperlinkUrl) {
            url = field.hyperlinkUrl;
            if (!/^https?:\/\//i.test(url)) {
                url = "" + WidgetComponent.DEFAULT_HYPERLINK_SCHEME + url;
            }
        }
        return url;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.getHyperlinkText = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field) {
            return field.displayText || field.hyperlinkUrl;
        }
        return null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    WidgetComponent.prototype.event = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.formService.formEvents.next(event);
    };
    WidgetComponent.DEFAULT_HYPERLINK_URL = '#';
    WidgetComponent.DEFAULT_HYPERLINK_SCHEME = 'http://';
    WidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'base-widget',
                    template: '',
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    WidgetComponent.ctorParameters = function () { return [
        { type: FormService }
    ]; };
    WidgetComponent.propDecorators = {
        readOnly: [{ type: Input }],
        field: [{ type: Input }],
        fieldChanged: [{ type: Output }]
    };
    return WidgetComponent;
}());
export { WidgetComponent };
if (false) {
    /** @type {?} */
    WidgetComponent.DEFAULT_HYPERLINK_URL;
    /** @type {?} */
    WidgetComponent.DEFAULT_HYPERLINK_SCHEME;
    /**
     * Does the widget show a read-only value? (ie, can't be edited)
     * @type {?}
     */
    WidgetComponent.prototype.readOnly;
    /**
     * Data to be displayed in the field
     * @type {?}
     */
    WidgetComponent.prototype.field;
    /**
     * Emitted when a field value changes.
     * @deprecated Used only to trigger visibility engine; components should do that internally if needed.
     * @type {?}
     */
    WidgetComponent.prototype.fieldChanged;
    /** @type {?} */
    WidgetComponent.prototype.formService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vY29tcG9uZW50cy93aWRnZXRzL3dpZGdldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBRTlDLFdBQWEsUUFBUSxHQUFHO0lBQ3BCLFNBQVMsRUFBRSxlQUFlO0lBQzFCLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLFVBQVUsRUFBRSxlQUFlO0lBQzNCLFNBQVMsRUFBRSxlQUFlO0lBQzFCLFdBQVcsRUFBRSxlQUFlO0lBQzVCLFlBQVksRUFBRSxlQUFlO0lBQzdCLFNBQVMsRUFBRSxlQUFlO0lBQzFCLFdBQVcsRUFBRSxlQUFlO0lBQzVCLFVBQVUsRUFBRSxlQUFlO0NBQzlCLENBQUM7Ozs7O0lBK0JFLHlCQUFtQixXQUF5QjtRQUF6QixnQkFBVyxHQUFYLFdBQVcsQ0FBYzs7Ozt3QkFieEIsS0FBSzs7Ozs7NEJBV29CLElBQUksWUFBWSxFQUFrQjtLQUc5RTs7OztJQUVELGtDQUFROzs7SUFBUjtRQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDcEM7SUFFRCx1QkFBdUI7SUFDdkIsNEZBQTRGOzs7O0lBQzVGLG9DQUFVOzs7SUFBVjtRQUNJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxJQUFJLENBQUM7S0FDZjs7OztJQUVELGlDQUFPOzs7SUFBUDtRQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDdEQ7Ozs7SUFFRCxrQ0FBUTs7O0lBQVI7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLO1lBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSTtZQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7S0FDdEM7Ozs7SUFFRCxnREFBc0I7OztJQUF0QjtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ3BGOzs7O0lBRUQseUNBQWU7OztJQUFmO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RDO0lBRUQseUdBQXlHOzs7Ozs7SUFDekcseUNBQWU7Ozs7O0lBQWYsVUFBZ0IsS0FBcUI7UUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDakM7SUFFRCx5R0FBeUc7Ozs7OztJQUN6Ryx3Q0FBYzs7Ozs7SUFBZCxVQUFlLEtBQXFCO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2pDOzs7OztJQUVTLHlDQUFlOzs7O0lBQXpCLFVBQTBCLEtBQXFCOztRQUMzQyxJQUFJLEdBQUcsR0FBRyxlQUFlLENBQUMscUJBQXFCLENBQUM7UUFDaEQsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtZQUM3QixHQUFHLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztZQUN6QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDNUIsR0FBRyxHQUFHLEtBQUcsZUFBZSxDQUFDLHdCQUF3QixHQUFHLEdBQUssQ0FBQzthQUM3RDtTQUNKO1FBQ0QsT0FBTyxHQUFHLENBQUM7S0FDZDs7Ozs7SUFFUywwQ0FBZ0I7Ozs7SUFBMUIsVUFBMkIsS0FBcUI7UUFDNUMsSUFBSSxLQUFLLEVBQUU7WUFDUCxPQUFPLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQztTQUNsRDtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2Y7Ozs7O0lBRUQsK0JBQUs7Ozs7SUFBTCxVQUFNLEtBQVk7UUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0M7NENBbEZzQyxHQUFHOytDQUNBLFNBQVM7O2dCQVR0RCxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxFQUFFO29CQUNaLElBQUksRUFBRSxRQUFRO29CQUNkLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN4Qzs7OztnQkF2QlEsV0FBVzs7OzJCQThCZixLQUFLO3dCQUlMLEtBQUs7K0JBT0wsTUFBTTs7MEJBN0RYOztTQTRDYSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9zZXJ2aWNlcy9mb3JtLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybUZpZWxkTW9kZWwgfSBmcm9tICcuL2NvcmUvaW5kZXgnO1xuXG5leHBvcnQgY29uc3QgYmFzZUhvc3QgPSB7XG4gICAgJyhjbGljayknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgJyhibHVyKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAnKGNoYW5nZSknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgJyhmb2N1cyknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgJyhmb2N1c2luKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAnKGZvY3Vzb3V0KSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAnKGlucHV0KSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAnKGludmFsaWQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICcoc2VsZWN0KSc6ICdldmVudCgkZXZlbnQpJ1xufTtcblxuLyoqXG4gKiBCYXNlIHdpZGdldCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYmFzZS13aWRnZXQnLFxuICAgIHRlbXBsYXRlOiAnJyxcbiAgICBob3N0OiBiYXNlSG9zdCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFdpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gICAgc3RhdGljIERFRkFVTFRfSFlQRVJMSU5LX1VSTDogc3RyaW5nID0gJyMnO1xuICAgIHN0YXRpYyBERUZBVUxUX0hZUEVSTElOS19TQ0hFTUU6IHN0cmluZyA9ICdodHRwOi8vJztcblxuICAgIC8qKiBEb2VzIHRoZSB3aWRnZXQgc2hvdyBhIHJlYWQtb25seSB2YWx1ZT8gKGllLCBjYW4ndCBiZSBlZGl0ZWQpICovXG4gICAgQElucHV0KClcbiAgICByZWFkT25seTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIERhdGEgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBmaWVsZCAqL1xuICAgIEBJbnB1dCgpXG4gICAgZmllbGQ6IEZvcm1GaWVsZE1vZGVsO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgZmllbGQgdmFsdWUgY2hhbmdlcy5cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2VkIG9ubHkgdG8gdHJpZ2dlciB2aXNpYmlsaXR5IGVuZ2luZTsgY29tcG9uZW50cyBzaG91bGQgZG8gdGhhdCBpbnRlcm5hbGx5IGlmIG5lZWRlZC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBmaWVsZENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxGb3JtRmllbGRNb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1GaWVsZE1vZGVsPigpO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGZvcm1TZXJ2aWNlPzogRm9ybVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBoYXNGaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gTm90ZSBmb3IgZGV2ZWxvcGVyczpcbiAgICAvLyByZXR1cm5zIDxhbnk+IG9iamVjdCB0byBiZSBhYmxlIGJpbmRpbmcgaXQgdG8gdGhlIDxlbGVtZW50IHJlZ3VpcmVkPVwicmVxdWlyZWRcIj4gYXR0cmlidXRlXG4gICAgaXNSZXF1aXJlZCgpOiBhbnkge1xuICAgICAgICBpZiAodGhpcy5maWVsZCAmJiB0aGlzLmZpZWxkLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC52YWxpZGF0aW9uU3VtbWFyeSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBoYXNWYWx1ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQgJiZcbiAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpc0ludmFsaWRGaWVsZFJlcXVpcmVkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuZmllbGQuaXNWYWxpZCAmJiAhdGhpcy5maWVsZC52YWxpZGF0aW9uU3VtbWFyeSAmJiB0aGlzLmlzUmVxdWlyZWQoKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuZmllbGRDaGFuZ2VkLmVtaXQodGhpcy5maWVsZCk7XG4gICAgfVxuXG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZWQgb25seSB0byB0cmlnZ2VyIHZpc2liaWxpdHkgZW5naW5lLCBjb21wb25lbnRzIHNob3VsZCBkbyB0aGF0IGludGVybmFsbHkgaWYgbmVlZGVkICovXG4gICAgY2hlY2tWaXNpYmlsaXR5KGZpZWxkOiBGb3JtRmllbGRNb2RlbCkge1xuICAgICAgICB0aGlzLmZpZWxkQ2hhbmdlZC5lbWl0KGZpZWxkKTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlZCBvbmx5IHRvIHRyaWdnZXIgdmlzaWJpbGl0eSBlbmdpbmUsIGNvbXBvbmVudHMgc2hvdWxkIGRvIHRoYXQgaW50ZXJuYWxseSBpZiBuZWVkZWQgKi9cbiAgICBvbkZpZWxkQ2hhbmdlZChmaWVsZDogRm9ybUZpZWxkTW9kZWwpIHtcbiAgICAgICAgdGhpcy5maWVsZENoYW5nZWQuZW1pdChmaWVsZCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEh5cGVybGlua1VybChmaWVsZDogRm9ybUZpZWxkTW9kZWwpIHtcbiAgICAgICAgbGV0IHVybCA9IFdpZGdldENvbXBvbmVudC5ERUZBVUxUX0hZUEVSTElOS19VUkw7XG4gICAgICAgIGlmIChmaWVsZCAmJiBmaWVsZC5oeXBlcmxpbmtVcmwpIHtcbiAgICAgICAgICAgIHVybCA9IGZpZWxkLmh5cGVybGlua1VybDtcbiAgICAgICAgICAgIGlmICghL15odHRwcz86XFwvXFwvL2kudGVzdCh1cmwpKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gYCR7V2lkZ2V0Q29tcG9uZW50LkRFRkFVTFRfSFlQRVJMSU5LX1NDSEVNRX0ke3VybH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEh5cGVybGlua1RleHQoZmllbGQ6IEZvcm1GaWVsZE1vZGVsKSB7XG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmRpc3BsYXlUZXh0IHx8IGZpZWxkLmh5cGVybGlua1VybDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBldmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb3JtU2VydmljZS5mb3JtRXZlbnRzLm5leHQoZXZlbnQpO1xuICAgIH1cbn1cbiJdfQ==