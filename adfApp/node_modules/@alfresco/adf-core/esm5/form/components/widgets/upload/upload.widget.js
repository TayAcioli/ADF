/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { LogService } from '../../../../services/log.service';
import { ThumbnailService } from '../../../../services/thumbnail.service';
import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { from } from 'rxjs';
import { FormService } from '../../../services/form.service';
import { ProcessContentService } from '../../../services/process-content.service';
import { ContentLinkModel } from '../core/content-link.model';
import { baseHost, WidgetComponent } from './../widget.component';
import { mergeMap, map } from 'rxjs/operators';
var UploadWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(UploadWidgetComponent, _super);
    function UploadWidgetComponent(formService, logService, thumbnailService, processContentService) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.logService = logService;
        _this.thumbnailService = thumbnailService;
        _this.processContentService = processContentService;
        _this.multipleOption = '';
        return _this;
    }
    /**
     * @return {?}
     */
    UploadWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
        }
        this.getMultipleFileParam();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadWidgetComponent.prototype.removeFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (this.field) {
            this.removeElementFromList(file);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadWidgetComponent.prototype.onFileChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var files = event.target.files;
        /** @type {?} */
        var filesSaved = [];
        if (this.field.json.value) {
            filesSaved = tslib_1.__spread(this.field.json.value);
        }
        if (files && files.length > 0) {
            from(files)
                .pipe(mergeMap(function (file) { return _this.uploadRawContent(file); }))
                .subscribe(function (res) { return filesSaved.push(res); }, function () { return _this.logService.error('Error uploading file. See console output for more details.'); }, function () {
                _this.field.value = filesSaved;
                _this.field.json.value = filesSaved;
                _this.hasFile = true;
            });
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadWidgetComponent.prototype.uploadRawContent = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        return this.processContentService.createTemporaryRawRelatedContent(file)
            .pipe(map(function (response) {
            _this.logService.info(response);
            response.contentBlob = file;
            return response;
        }));
    };
    /**
     * @return {?}
     */
    UploadWidgetComponent.prototype.getMultipleFileParam = /**
     * @return {?}
     */
    function () {
        if (this.field &&
            this.field.params && this.field.params["multiple"]) {
            this.multipleOption = this.field.params["multiple"] ? 'multiple' : '';
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadWidgetComponent.prototype.removeElementFromList = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var index = this.field.value.indexOf(file);
        if (index !== -1) {
            this.field.value.splice(index, 1);
            this.field.json.value = this.field.value;
            this.field.updateForm();
        }
        this.hasFile = this.field.value.length > 0;
        this.resetFormValueWithNoFiles();
    };
    /**
     * @return {?}
     */
    UploadWidgetComponent.prototype.resetFormValueWithNoFiles = /**
     * @return {?}
     */
    function () {
        if (this.field.value.length === 0) {
            this.field.value = [];
            this.field.json.value = [];
        }
    };
    /**
     * @param {?} mimeType
     * @return {?}
     */
    UploadWidgetComponent.prototype.getIcon = /**
     * @param {?} mimeType
     * @return {?}
     */
    function (mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    UploadWidgetComponent.prototype.fileClicked = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var file = new ContentLinkModel(obj);
        /** @type {?} */
        var fetch = this.processContentService.getContentPreview(file.id);
        if (file.isTypeImage() || file.isTypePdf()) {
            fetch = this.processContentService.getFileRawContent(file.id);
        }
        fetch.subscribe(function (blob) {
            file.contentBlob = blob;
            _this.formService.formContentClicked.next(file);
        }, function () {
            _this.logService.error('Unable to send event for file ' + file.name);
        });
    };
    UploadWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'upload-widget',
                    template: "<div class=\"adf-upload-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-upload-widget-container\">\n        <div>\n            <mat-list *ngIf=\"hasFile\">\n                <mat-list-item class=\"adf-upload-files-row\" *ngFor=\"let file of field.value\">\n                    <img mat-list-icon class=\"adf-upload-widget__icon\"\n                         [id]=\"'file-'+file.id+'-icon'\"\n                         [src]=\"getIcon(file.mimeType)\"\n                         [alt]=\"mimeTypeIcon\"\n                         (click)=\"fileClicked(file)\"\n                         (keyup.enter)=\"fileClicked(file)\"\n                         role=\"button\"\n                         tabindex=\"0\"/>\n                    <span matLine id=\"{{'file-'+file.id}}\" (click)=\"fileClicked(file)\" (keyup.enter)=\"fileClicked(file)\"\n                          role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n                    <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'file-'+file.id+'-remove'\"\n                            (click)=\"removeFile(file);\" (keyup.enter)=\"removeFile(file);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n        </div>\n\n        <div class=\"button-row\" *ngIf=\"(!hasFile || multipleOption) && !field.readOnly\">\n            <a mat-raised-button color=\"primary\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                       [multiple]=\"multipleOption\"\n                       type=\"file\"\n                       [id]=\"field.id\"\n                       (change)=\"onFileChanged($event)\"/>\n            </a>\n        </div>\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-upload-widget-container{margin-bottom:15px}.adf-upload-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-upload-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-upload-widget__icon{padding:6px;float:left;cursor:pointer}.adf-upload-widget__reset{margin-top:-2px}.adf-upload-files-row .mat-line{margin-bottom:0}"]
                }] }
    ];
    /** @nocollapse */
    UploadWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService },
        { type: ThumbnailService },
        { type: ProcessContentService }
    ]; };
    UploadWidgetComponent.propDecorators = {
        fileInput: [{ type: ViewChild, args: ['uploadFiles',] }]
    };
    return UploadWidgetComponent;
}(WidgetComponent));
export { UploadWidgetComponent };
if (false) {
    /** @type {?} */
    UploadWidgetComponent.prototype.hasFile;
    /** @type {?} */
    UploadWidgetComponent.prototype.displayText;
    /** @type {?} */
    UploadWidgetComponent.prototype.multipleOption;
    /** @type {?} */
    UploadWidgetComponent.prototype.mimeTypeIcon;
    /** @type {?} */
    UploadWidgetComponent.prototype.fileInput;
    /** @type {?} */
    UploadWidgetComponent.prototype.formService;
    /** @type {?} */
    UploadWidgetComponent.prototype.logService;
    /** @type {?} */
    UploadWidgetComponent.prototype.thumbnailService;
    /** @type {?} */
    UploadWidgetComponent.prototype.processContentService;
}

//# sourceMappingURL=data:application/json;base64,