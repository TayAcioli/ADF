/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService } from '../../../../services/content.service';
import { LogService } from '../../../../services/log.service';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { ProcessContentService } from '../../../services/process-content.service';
import { ContentLinkModel } from '../core/content-link.model';
import { FormService } from './../../../services/form.service';
var ContentWidgetComponent = /** @class */ (function () {
    function ContentWidgetComponent(formService, logService, contentService, processContentService) {
        this.formService = formService;
        this.logService = logService;
        this.contentService = contentService;
        this.processContentService = processContentService;
        this.showDocumentContent = true;
        this.contentClick = new EventEmitter();
        this.thumbnailLoaded = new EventEmitter();
        this.contentLoaded = new EventEmitter();
        this.error = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ContentWidgetComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var contentId = changes['id'];
        if (contentId && contentId.currentValue) {
            this.loadContent(contentId.currentValue);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ContentWidgetComponent.prototype.loadContent = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        this.processContentService
            .getFileContent(id)
            .subscribe(function (response) {
            _this.content = new ContentLinkModel(response);
            _this.contentLoaded.emit(_this.content);
            _this.loadThumbnailUrl(_this.content);
        }, function (error) {
            _this.error.emit(error);
        });
    };
    /**
     * @param {?} content
     * @return {?}
     */
    ContentWidgetComponent.prototype.loadThumbnailUrl = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        if (this.content.isThumbnailSupported()) {
            /** @type {?} */
            var observable = void 0;
            if (this.content.isTypeImage()) {
                observable = this.processContentService.getFileRawContent(content.id);
            }
            else {
                observable = this.processContentService.getContentThumbnail(content.id);
            }
            if (observable) {
                observable.subscribe(function (response) {
                    _this.content.thumbnailUrl = _this.contentService.createTrustedUrl(response);
                    _this.thumbnailLoaded.emit(_this.content.thumbnailUrl);
                }, function (error) {
                    _this.error.emit(error);
                });
            }
        }
    };
    /**
     * @param {?} content
     * @return {?}
     */
    ContentWidgetComponent.prototype.openViewer = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        /** @type {?} */
        var fetch = this.processContentService.getContentPreview(content.id);
        if (content.isTypeImage() || content.isTypePdf()) {
            fetch = this.processContentService.getFileRawContent(content.id);
        }
        fetch.subscribe(function (blob) {
            content.contentBlob = blob;
            _this.contentClick.emit(content);
            _this.logService.info('Content clicked' + content.id);
            _this.formService.formContentClicked.next(content);
        }, function (error) {
            _this.error.emit(error);
        });
    };
    /**
     * Invoke content download.
     */
    /**
     * Invoke content download.
     * @param {?} content
     * @return {?}
     */
    ContentWidgetComponent.prototype.download = /**
     * Invoke content download.
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.processContentService.getFileRawContent(content.id).subscribe(function (blob) { return _this.contentService.downloadBlob(blob, content.name); }, function (error) {
            _this.error.emit(error);
        });
    };
    ContentWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content',
                    template: "<mat-card class=\"adf-content-container\" *ngIf=\"content\">\n    <mat-card-content *ngIf=\"showDocumentContent\">\n        <div *ngIf=\"content.isThumbnailSupported()\" >\n            <img id=\"thumbnailPreview\" class=\"adf-img-upload-widget\" [src]=\"content.thumbnailUrl\" alt=\"{{content.name}}\">\n        </div>\n        <div *ngIf=\"!content.isThumbnailSupported()\">\n            <mat-icon>image</mat-icon>\n            <div id=\"unsupported-thumbnail\" class=\"adf-content-widget-preview-text\">{{ 'FORM.PREVIEW.IMAGE_NOT_AVAILABLE' | translate }}\n            </div>\n        </div>\n        <div class=\"mdl-card__supporting-text upload-widget__content-text\">{{content.name}}</div>\n    </mat-card-content>\n\n    <mat-card-actions>\n        <button mat-icon-button id=\"view\" (click)=\"openViewer(content)\">\n            <mat-icon class=\"mat-24\">zoom_in</mat-icon>\n        </button>\n        <button mat-icon-button id=\"download\" (click)=\"download(content)\">\n            <mat-icon class=\"mat-24\">file_download</mat-icon>\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-img-upload-widget{width:100%;height:100%;border:1px solid rgba(117,117,117,.57);box-shadow:1px 1px 2px #ddd;background-color:#fff}.adf-content-widget-preview-text{word-wrap:break-word;word-break:break-all;text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    ContentWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService },
        { type: ContentService },
        { type: ProcessContentService }
    ]; };
    ContentWidgetComponent.propDecorators = {
        id: [{ type: Input }],
        showDocumentContent: [{ type: Input }],
        contentClick: [{ type: Output }],
        thumbnailLoaded: [{ type: Output }],
        contentLoaded: [{ type: Output }],
        error: [{ type: Output }]
    };
    return ContentWidgetComponent;
}());
export { ContentWidgetComponent };
if (false) {
    /** @type {?} */
    ContentWidgetComponent.prototype.id;
    /** @type {?} */
    ContentWidgetComponent.prototype.showDocumentContent;
    /** @type {?} */
    ContentWidgetComponent.prototype.contentClick;
    /** @type {?} */
    ContentWidgetComponent.prototype.thumbnailLoaded;
    /** @type {?} */
    ContentWidgetComponent.prototype.contentLoaded;
    /** @type {?} */
    ContentWidgetComponent.prototype.error;
    /** @type {?} */
    ContentWidgetComponent.prototype.content;
    /** @type {?} */
    ContentWidgetComponent.prototype.formService;
    /** @type {?} */
    ContentWidgetComponent.prototype.logService;
    /** @type {?} */
    ContentWidgetComponent.prototype.contentService;
    /** @type {?} */
    ContentWidgetComponent.prototype.processContentService;
}

//# sourceMappingURL=data:application/json;base64,