/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { FormFieldEvent } from './../../../events/form-field.event';
import { ValidateFormFieldEvent } from './../../../events/validate-form-field.event';
import { ValidateFormEvent } from './../../../events/validate-form.event';
import { ContainerModel } from './container.model';
import { FormFieldTypes } from './form-field-types';
import { FormFieldModel } from './form-field.model';
import { FormOutcomeModel } from './form-outcome.model';
import { TabModel } from './tab.model';
import { FORM_FIELD_VALIDATORS } from './form-field-validator';
var FormModel = /** @class */ (function () {
    function FormModel(json, data, readOnly, formService) {
        if (readOnly === void 0) { readOnly = false; }
        var _this = this;
        this.formService = formService;
        this.taskName = FormModel.UNSET_TASK_NAME;
        this._isValid = true;
        this.readOnly = false;
        this.tabs = [];
        /**
         * Stores root containers
         */
        this.fields = [];
        this.outcomes = [];
        this.customFieldTemplates = {};
        this.fieldValidators = tslib_1.__spread(FORM_FIELD_VALIDATORS);
        this.values = {};
        this.readOnly = readOnly;
        if (json) {
            this.json = json;
            this.id = json.id;
            this.name = json.name;
            this.taskId = json.taskId;
            this.taskName = json.taskName || json.name || FormModel.UNSET_TASK_NAME;
            this.processDefinitionId = json.processDefinitionId;
            this.customFieldTemplates = json.customFieldTemplates || {};
            this.selectedOutcome = json.selectedOutcome || {};
            this.className = json.className || '';
            /** @type {?} */
            var tabCache_1 = {};
            this.processVariables = json.processVariables;
            this.tabs = (json.tabs || []).map(function (t) {
                /** @type {?} */
                var model = new TabModel(_this, t);
                tabCache_1[model.id] = model;
                return model;
            });
            this.fields = this.parseRootFields(json);
            if (data) {
                this.loadData(data);
            }
            for (var i = 0; i < this.fields.length; i++) {
                /** @type {?} */
                var field = this.fields[i];
                if (field.tab) {
                    /** @type {?} */
                    var tab = tabCache_1[field.tab];
                    if (tab) {
                        tab.fields.push(field);
                    }
                }
            }
            if (json.fields) {
                /** @type {?} */
                var saveOutcome = new FormOutcomeModel(this, {
                    id: FormModel.SAVE_OUTCOME,
                    name: 'Save',
                    isSystem: true
                });
                /** @type {?} */
                var completeOutcome = new FormOutcomeModel(this, {
                    id: FormModel.COMPLETE_OUTCOME,
                    name: 'Complete',
                    isSystem: true
                });
                /** @type {?} */
                var startProcessOutcome = new FormOutcomeModel(this, {
                    id: FormModel.START_PROCESS_OUTCOME,
                    name: 'Start Process',
                    isSystem: true
                });
                /** @type {?} */
                var customOutcomes = (json.outcomes || []).map(function (obj) { return new FormOutcomeModel(_this, obj); });
                this.outcomes = [saveOutcome].concat(customOutcomes.length > 0 ? customOutcomes : [completeOutcome, startProcessOutcome]);
            }
        }
        this.validateForm();
    }
    Object.defineProperty(FormModel.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isValid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormModel.prototype.hasTabs = /**
     * @return {?}
     */
    function () {
        return this.tabs && this.tabs.length > 0;
    };
    /**
     * @return {?}
     */
    FormModel.prototype.hasFields = /**
     * @return {?}
     */
    function () {
        return this.fields && this.fields.length > 0;
    };
    /**
     * @return {?}
     */
    FormModel.prototype.hasOutcomes = /**
     * @return {?}
     */
    function () {
        return this.outcomes && this.outcomes.length > 0;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormModel.prototype.onFormFieldChanged = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.validateField(field);
        if (this.formService) {
            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));
        }
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormModel.prototype.getFieldById = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        return this.getFormFields().find(function (field) { return field.id === fieldId; });
    };
    // TODO: consider evaluating and caching once the form is loaded
    /**
     * @return {?}
     */
    FormModel.prototype.getFormFields = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = [];
        for (var i = 0; i < this.fields.length; i++) {
            /** @type {?} */
            var field = this.fields[i];
            if (field instanceof ContainerModel) {
                /** @type {?} */
                var container = /** @type {?} */ (field);
                result.push(container.field);
                container.field.columns.forEach(function (column) {
                    result.push.apply(result, tslib_1.__spread(column.fields));
                });
            }
        }
        return result;
    };
    /**
     * @return {?}
     */
    FormModel.prototype.markAsInvalid = /**
     * @return {?}
     */
    function () {
        this._isValid = false;
    };
    /**
     * Validates entire form and all form fields.
     *
     * @memberof FormModel
     */
    /**
     * Validates entire form and all form fields.
     *
     * \@memberof FormModel
     * @return {?}
     */
    FormModel.prototype.validateForm = /**
     * Validates entire form and all form fields.
     *
     * \@memberof FormModel
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validateFormEvent = new ValidateFormEvent(this);
        /** @type {?} */
        var errorsField = [];
        /** @type {?} */
        var fields = this.getFormFields();
        for (var i = 0; i < fields.length; i++) {
            if (!fields[i].validate()) {
                errorsField.push(fields[i]);
            }
        }
        this._isValid = errorsField.length > 0 ? false : true;
        if (this.formService) {
            validateFormEvent.isValid = this._isValid;
            validateFormEvent.errorsField = errorsField;
            this.formService.validateForm.next(validateFormEvent);
        }
    };
    /**
     * Validates a specific form field, triggers form validation.
     *
     * @param field Form field to validate.
     * @memberof FormModel
     */
    /**
     * Validates a specific form field, triggers form validation.
     *
     * \@memberof FormModel
     * @param {?} field Form field to validate.
     * @return {?}
     */
    FormModel.prototype.validateField = /**
     * Validates a specific form field, triggers form validation.
     *
     * \@memberof FormModel
     * @param {?} field Form field to validate.
     * @return {?}
     */
    function (field) {
        if (!field) {
            return;
        }
        /** @type {?} */
        var validateFieldEvent = new ValidateFormFieldEvent(this, field);
        if (this.formService) {
            this.formService.validateFormField.next(validateFieldEvent);
        }
        if (!validateFieldEvent.isValid) {
            this._isValid = false;
            return;
        }
        if (validateFieldEvent.defaultPrevented) {
            return;
        }
        if (!field.validate()) {
            this._isValid = false;
        }
        this.validateForm();
    };
    /**
     * @param {?} json
     * @return {?}
     */
    FormModel.prototype.parseRootFields = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        var e_1, _a;
        /** @type {?} */
        var fields = [];
        if (json.fields) {
            fields = json.fields;
        }
        else if (json.formDefinition && json.formDefinition.fields) {
            fields = json.formDefinition.fields;
        }
        /** @type {?} */
        var result = [];
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                if (field.type === FormFieldTypes.DISPLAY_VALUE) {
                    // workaround for dynamic table on a completed/readonly form
                    if (field.params) {
                        /** @type {?} */
                        var originalField = field.params['field'];
                        if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {
                            result.push(new ContainerModel(new FormFieldModel(this, field)));
                        }
                    }
                }
                else {
                    result.push(new ContainerModel(new FormFieldModel(this, field)));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    FormModel.prototype.loadData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.getFormFields()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var field = _c.value;
                if (data[field.id]) {
                    field.json.value = data[field.id];
                    field.value = field.parseValue(field.json);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    FormModel.UNSET_TASK_NAME = 'Nameless task';
    FormModel.SAVE_OUTCOME = '$save';
    FormModel.COMPLETE_OUTCOME = '$complete';
    FormModel.START_PROCESS_OUTCOME = '$startProcess';
    return FormModel;
}());
export { FormModel };
if (false) {
    /** @type {?} */
    FormModel.UNSET_TASK_NAME;
    /** @type {?} */
    FormModel.SAVE_OUTCOME;
    /** @type {?} */
    FormModel.COMPLETE_OUTCOME;
    /** @type {?} */
    FormModel.START_PROCESS_OUTCOME;
    /** @type {?} */
    FormModel.prototype.id;
    /** @type {?} */
    FormModel.prototype.name;
    /** @type {?} */
    FormModel.prototype.taskId;
    /** @type {?} */
    FormModel.prototype.taskName;
    /** @type {?} */
    FormModel.prototype.processDefinitionId;
    /** @type {?} */
    FormModel.prototype._isValid;
    /** @type {?} */
    FormModel.prototype.className;
    /** @type {?} */
    FormModel.prototype.readOnly;
    /** @type {?} */
    FormModel.prototype.tabs;
    /**
     * Stores root containers
     * @type {?}
     */
    FormModel.prototype.fields;
    /** @type {?} */
    FormModel.prototype.outcomes;
    /** @type {?} */
    FormModel.prototype.customFieldTemplates;
    /** @type {?} */
    FormModel.prototype.fieldValidators;
    /** @type {?} */
    FormModel.prototype.selectedOutcome;
    /** @type {?} */
    FormModel.prototype.values;
    /** @type {?} */
    FormModel.prototype.processVariables;
    /** @type {?} */
    FormModel.prototype.json;
    /** @type {?} */
    FormModel.prototype.formService;
}

//# sourceMappingURL=data:application/json;base64,