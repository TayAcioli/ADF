/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormService } from './../services/form.service';
import { WidgetVisibilityService } from './../services/widget-visibility.service';
import { FormComponent } from './form.component';
import { FormOutcomeModel } from './widgets/core/index';
var StartFormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(StartFormComponent, _super);
    function StartFormComponent(formService, visibilityService) {
        var _this = _super.call(this, formService, visibilityService, null, null) || this;
        /**
         * Should form outcome buttons be shown?
         */
        _this.showOutcomeButtons = true;
        /**
         * Should the refresh button be shown?
         */
        _this.showRefreshButton = true;
        /**
         * Is the form read-only (ie, can't be edited)?
         */
        _this.readOnlyForm = false;
        /**
         * Emitted when the user clicks one of the outcome buttons that completes the form.
         */
        _this.outcomeClick = new EventEmitter();
        /**
         * Emitted when a field of the form is clicked.
         */
        _this.formContentClicked = new EventEmitter();
        _this.outcomesContainer = null;
        _this.showTitle = false;
        return _this;
    }
    /**
     * @return {?}
     */
    StartFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.formService.formContentClicked.subscribe(function (content) {
            _this.formContentClicked.emit(content);
        }), this.formService.validateForm.subscribe(function (validateFormEvent) {
            if (validateFormEvent.errorsField.length > 0) {
                _this.formError.next(validateFormEvent.errorsField);
            }
        }));
    };
    /**
     * @return {?}
     */
    StartFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    StartFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var processDefinitionId = changes['processDefinitionId'];
        if (processDefinitionId && processDefinitionId.currentValue) {
            this.visibilityService.cleanProcessVariable();
            this.getStartFormDefinition(processDefinitionId.currentValue);
            return;
        }
        /** @type {?} */
        var processId = changes['processId'];
        if (processId && processId.currentValue) {
            this.visibilityService.cleanProcessVariable();
            this.loadStartForm(processId.currentValue);
            return;
        }
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    StartFormComponent.prototype.loadStartForm = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        var _this = this;
        this.formService.getProcessIntance(processId)
            .subscribe(function (instance) {
            _this.formService
                .getStartFormInstance(processId)
                .subscribe(function (form) {
                _this.formName = form.name;
                if (instance.variables) {
                    form.processVariables = instance.variables;
                }
                _this.form = _this.parseForm(form);
                _this.visibilityService.refreshVisibility(_this.form);
                _this.form.validateForm();
                _this.form.readOnly = _this.readOnlyForm;
                _this.onFormLoaded(_this.form);
            }, function (error) { return _this.handleError(error); });
        });
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    StartFormComponent.prototype.getStartFormDefinition = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        var _this = this;
        this.formService
            .getStartFormDefinition(processId)
            .subscribe(function (form) {
            _this.formName = form.processDefinitionName;
            _this.form = _this.parseForm(form);
            _this.visibilityService.refreshVisibility(_this.form);
            _this.form.validateForm();
            _this.form.readOnly = _this.readOnlyForm;
            _this.onFormLoaded(_this.form);
        }, function (error) { return _this.handleError(error); });
    };
    /** @override */
    /**
     * @override
     * @param {?} outcome
     * @param {?} isFormReadOnly
     * @return {?}
     */
    StartFormComponent.prototype.isOutcomeButtonVisible = /**
     * @override
     * @param {?} outcome
     * @param {?} isFormReadOnly
     * @return {?}
     */
    function (outcome, isFormReadOnly) {
        if (outcome && outcome.isSystem && (outcome.name === FormOutcomeModel.SAVE_ACTION ||
            outcome.name === FormOutcomeModel.COMPLETE_ACTION)) {
            return false;
        }
        else if (outcome && outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
            return true;
        }
        return _super.prototype.isOutcomeButtonVisible.call(this, outcome, isFormReadOnly);
    };
    /** @override */
    /**
     * @override
     * @return {?}
     */
    StartFormComponent.prototype.saveTaskForm = /**
     * @override
     * @return {?}
     */
    function () {
        // do nothing
    };
    /** @override */
    /**
     * @override
     * @return {?}
     */
    StartFormComponent.prototype.onRefreshClicked = /**
     * @override
     * @return {?}
     */
    function () {
        if (this.processDefinitionId) {
            this.visibilityService.cleanProcessVariable();
            this.getStartFormDefinition(this.processDefinitionId);
        }
        else if (this.processId) {
            this.visibilityService.cleanProcessVariable();
            this.loadStartForm(this.processId);
        }
    };
    /**
     * @param {?=} outcome
     * @return {?}
     */
    StartFormComponent.prototype.completeTaskForm = /**
     * @param {?=} outcome
     * @return {?}
     */
    function (outcome) {
        this.outcomeClick.emit(outcome);
    };
    StartFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-start-form',
                    template: "<div class=\"adf-start-form-container\" *ngIf=\"hasForm()\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h2 *ngIf=\"isTitleEnabled()\" class=\"mdl-card__title-text\">{{form.taskName}}</h2>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf=\"form.hasTabs()\">\n                <tabs-widget [tabs]=\"form.tabs\" (formTabChanged)=\"checkVisibility($event);\"></tabs-widget>\n            </div>\n\n            <div *ngIf=\"!form.hasTabs() && form.hasFields()\">\n                <div *ngFor=\"let field of form.fields\">\n                    <adf-form-field [field]=\"field.field\"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-content class=\"adf-start-form-actions\" *ngIf=\"showOutcomeButtons && form.hasOutcomes()\"\n                          #outcomesContainer>\n            <ng-content select=\"[form-custom-button]\"></ng-content>\n            <button *ngFor=\"let outcome of form.outcomes\"\n                    mat-button\n                    [attr.data-automation-id]=\"'adf-form-' + outcome.name  | lowercase\"\n                    [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.mdl-button--colored]=\"!outcome.isSystem\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                {{ outcome.name | translate | uppercase}}\n            </button>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"showRefreshButton\">\n            <button mat-button\n                    (click)=\"onRefreshClicked()\">\n                <mat-icon>refresh</mat-icon>\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    StartFormComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: WidgetVisibilityService }
    ]; };
    StartFormComponent.propDecorators = {
        processDefinitionId: [{ type: Input }],
        processId: [{ type: Input }],
        showOutcomeButtons: [{ type: Input }],
        showRefreshButton: [{ type: Input }],
        readOnlyForm: [{ type: Input }],
        outcomeClick: [{ type: Output }],
        formContentClicked: [{ type: Output }],
        outcomesContainer: [{ type: ViewChild, args: ['outcomesContainer', {},] }]
    };
    return StartFormComponent;
}(FormComponent));
export { StartFormComponent };
if (false) {
    /**
     * Definition ID of the process to start.
     * @type {?}
     */
    StartFormComponent.prototype.processDefinitionId;
    /**
     * Process ID of the process to start.
     * @type {?}
     */
    StartFormComponent.prototype.processId;
    /**
     * Should form outcome buttons be shown?
     * @type {?}
     */
    StartFormComponent.prototype.showOutcomeButtons;
    /**
     * Should the refresh button be shown?
     * @type {?}
     */
    StartFormComponent.prototype.showRefreshButton;
    /**
     * Is the form read-only (ie, can't be edited)?
     * @type {?}
     */
    StartFormComponent.prototype.readOnlyForm;
    /**
     * Emitted when the user clicks one of the outcome buttons that completes the form.
     * @type {?}
     */
    StartFormComponent.prototype.outcomeClick;
    /**
     * Emitted when a field of the form is clicked.
     * @type {?}
     */
    StartFormComponent.prototype.formContentClicked;
    /** @type {?} */
    StartFormComponent.prototype.outcomesContainer;
}

//# sourceMappingURL=data:application/json;base64,