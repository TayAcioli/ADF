/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input, EventEmitter, Output } from '@angular/core';
var SortingPickerComponent = /** @class */ (function () {
    function SortingPickerComponent() {
        /**
         * Available sorting options
         */
        this.options = [];
        /**
         * Current sorting direction
         */
        this.ascending = true;
        /**
         * Raised each time sorting key or direction gets changed.
         */
        this.change = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    SortingPickerComponent.prototype.onChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selected = event.value;
        this.raiseChangedEvent();
    };
    /**
     * @return {?}
     */
    SortingPickerComponent.prototype.toggleSortDirection = /**
     * @return {?}
     */
    function () {
        this.ascending = !this.ascending;
        this.raiseChangedEvent();
    };
    /**
     * @return {?}
     */
    SortingPickerComponent.prototype.raiseChangedEvent = /**
     * @return {?}
     */
    function () {
        this.change.emit({
            key: this.selected,
            ascending: this.ascending
        });
    };
    SortingPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-sorting-picker',
                    template: "<mat-form-field>\n    <mat-select [(value)]=\"selected\" (selectionChange)=\"onChanged($event)\">\n        <mat-option *ngFor=\"let option of options\" [value]=\"option.key\">\n            {{ option.label | translate }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n\n<button *ngIf=\"selected\" mat-icon-button (click)=\"toggleSortDirection()\">\n    <mat-icon *ngIf=\"ascending\">arrow_upward</mat-icon>\n    <mat-icon *ngIf=\"!ascending\">arrow_downward</mat-icon>\n</button>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-sorting-picker' }
                }] }
    ];
    SortingPickerComponent.propDecorators = {
        options: [{ type: Input }],
        selected: [{ type: Input }],
        ascending: [{ type: Input }],
        change: [{ type: Output }]
    };
    return SortingPickerComponent;
}());
export { SortingPickerComponent };
if (false) {
    /**
     * Available sorting options
     * @type {?}
     */
    SortingPickerComponent.prototype.options;
    /**
     * Currently selected option key
     * @type {?}
     */
    SortingPickerComponent.prototype.selected;
    /**
     * Current sorting direction
     * @type {?}
     */
    SortingPickerComponent.prototype.ascending;
    /**
     * Raised each time sorting key or direction gets changed.
     * @type {?}
     */
    SortingPickerComponent.prototype.change;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGluZy1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic29ydGluZy1waWNrZXIvc29ydGluZy1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozt1QkFhdkMsRUFBRTs7Ozt5QkFRckMsSUFBSTs7OztzQkFJUCxJQUFJLFlBQVksRUFBdUM7Ozs7OztJQUVoRSwwQ0FBUzs7OztJQUFULFVBQVUsS0FBc0I7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0tBQzVCOzs7O0lBRUQsb0RBQW1COzs7SUFBbkI7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUM1Qjs7OztJQUVPLGtEQUFpQjs7OztRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDNUIsQ0FBQyxDQUFDOzs7Z0JBdENWLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QiwyZkFBOEM7b0JBQzlDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7aUJBQ3hDOzs7MEJBSUksS0FBSzsyQkFJTCxLQUFLOzRCQUlMLEtBQUs7eUJBSUwsTUFBTTs7aUNBekNYOztTQTBCYSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFNlbGVjdENoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtc29ydGluZy1waWNrZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zb3J0aW5nLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXNvcnRpbmctcGlja2VyJyB9XG59KVxuZXhwb3J0IGNsYXNzIFNvcnRpbmdQaWNrZXJDb21wb25lbnQge1xuXG4gICAgLyoqIEF2YWlsYWJsZSBzb3J0aW5nIG9wdGlvbnMgKi9cbiAgICBASW5wdXQoKVxuICAgIG9wdGlvbnM6IEFycmF5PHtrZXk6IHN0cmluZywgbGFiZWw6IHN0cmluZ30+ID0gW107XG5cbiAgICAvKiogQ3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbiBrZXkgKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdGVkOiBzdHJpbmc7XG5cbiAgICAvKiogQ3VycmVudCBzb3J0aW5nIGRpcmVjdGlvbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXNjZW5kaW5nID0gdHJ1ZTtcblxuICAgIC8qKiBSYWlzZWQgZWFjaCB0aW1lIHNvcnRpbmcga2V5IG9yIGRpcmVjdGlvbiBnZXRzIGNoYW5nZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx7IGtleTogc3RyaW5nLCBhc2NlbmRpbmc6IGJvb2xlYW4gfT4oKTtcblxuICAgIG9uQ2hhbmdlZChldmVudDogTWF0U2VsZWN0Q2hhbmdlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBldmVudC52YWx1ZTtcbiAgICAgICAgdGhpcy5yYWlzZUNoYW5nZWRFdmVudCgpO1xuICAgIH1cblxuICAgIHRvZ2dsZVNvcnREaXJlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYXNjZW5kaW5nID0gIXRoaXMuYXNjZW5kaW5nO1xuICAgICAgICB0aGlzLnJhaXNlQ2hhbmdlZEV2ZW50KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByYWlzZUNoYW5nZWRFdmVudCgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh7XG4gICAgICAgICAgICBrZXk6IHRoaXMuc2VsZWN0ZWQsXG4gICAgICAgICAgICBhc2NlbmRpbmc6IHRoaXMuYXNjZW5kaW5nXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==