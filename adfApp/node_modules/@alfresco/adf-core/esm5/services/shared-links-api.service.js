/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
var SharedLinksApiService = /** @class */ (function () {
    function SharedLinksApiService(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    Object.defineProperty(SharedLinksApiService.prototype, "sharedLinksApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().core.sharedlinksApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets shared links available to the current user.
     * @param options Options supported by JSAPI
     * @returns List of shared links
     */
    /**
     * Gets shared links available to the current user.
     * @param {?=} options Options supported by JSAPI
     * @return {?} List of shared links
     */
    SharedLinksApiService.prototype.getSharedLinks = /**
     * Gets shared links available to the current user.
     * @param {?=} options Options supported by JSAPI
     * @return {?} List of shared links
     */
    function (options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            include: ['properties', 'allowableOperations']
        };
        /** @type {?} */
        var queryOptions = Object.assign({}, defaultOptions, options);
        /** @type {?} */
        var promise = this.sharedLinksApi.findSharedLinks(queryOptions);
        return from(promise).pipe(catchError(function (err) { return of(err); }));
    };
    /**
     * Creates a shared link available to the current user.
     * @param nodeId ID of the node to link to
     * @param options Options supported by JSAPI
     * @returns The shared link just created
     */
    /**
     * Creates a shared link available to the current user.
     * @param {?} nodeId ID of the node to link to
     * @param {?=} options Options supported by JSAPI
     * @return {?} The shared link just created
     */
    SharedLinksApiService.prototype.createSharedLinks = /**
     * Creates a shared link available to the current user.
     * @param {?} nodeId ID of the node to link to
     * @param {?=} options Options supported by JSAPI
     * @return {?} The shared link just created
     */
    function (nodeId, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var promise = this.sharedLinksApi.addSharedLink({ nodeId: nodeId });
        return from(promise).pipe(catchError(function (err) { return of(err); }));
    };
    /**
     * Deletes a shared link.
     * @param sharedId ID of the link to delete
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Deletes a shared link.
     * @param {?} sharedId ID of the link to delete
     * @return {?} Null response notifying when the operation is complete
     */
    SharedLinksApiService.prototype.deleteSharedLink = /**
     * Deletes a shared link.
     * @param {?} sharedId ID of the link to delete
     * @return {?} Null response notifying when the operation is complete
     */
    function (sharedId) {
        /** @type {?} */
        var promise = this.sharedLinksApi.deleteSharedLink(sharedId);
        return from(promise).pipe(catchError(function (err) { return of(err); }));
    };
    SharedLinksApiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SharedLinksApiService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: UserPreferencesService }
    ]; };
    return SharedLinksApiService;
}());
export { SharedLinksApiService };
if (false) {
    /** @type {?} */
    SharedLinksApiService.prototype.apiService;
    /** @type {?} */
    SharedLinksApiService.prototype.preferences;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLWxpbmtzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvc2hhcmVkLWxpbmtzLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztJQUt4QywrQkFBb0IsVUFBOEIsRUFDOUI7UUFEQSxlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUM5QixnQkFBVyxHQUFYLFdBQVc7S0FDOUI7MEJBRVcsaURBQWM7Ozs7O1lBQ3RCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDOzs7OztJQUc3RDs7OztPQUlHOzs7Ozs7SUFDSCw4Q0FBYzs7Ozs7SUFBZCxVQUFlLE9BQWlCO1FBQWpCLHdCQUFBLEVBQUEsWUFBaUI7O1FBQzVCLElBQU0sY0FBYyxHQUFHO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWM7WUFDekMsU0FBUyxFQUFFLENBQUM7WUFDWixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUM7U0FDakQsQ0FBQzs7UUFDRixJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7O1FBQ2hFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWxFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFQLENBQU8sQ0FBQyxDQUM3QixDQUFDO0tBQ0w7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILGlEQUFpQjs7Ozs7O0lBQWpCLFVBQWtCLE1BQWMsRUFBRSxPQUFpQjtRQUFqQix3QkFBQSxFQUFBLFlBQWlCOztRQUMvQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBRXRFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFQLENBQU8sQ0FBQyxDQUM3QixDQUFDO0tBQ0w7SUFFRDs7OztPQUlHOzs7Ozs7SUFDSCxnREFBZ0I7Ozs7O0lBQWhCLFVBQWlCLFFBQWdCOztRQUM3QixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRS9ELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFQLENBQU8sQ0FBQyxDQUM3QixDQUFDO0tBQ0w7O2dCQXZESixVQUFVOzs7O2dCQUpGLGtCQUFrQjtnQkFDbEIsc0JBQXNCOztnQ0FyQi9COztTQXlCYSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlUGFnaW5nLCBTaGFyZWRMaW5rRW50cnkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4vYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTaGFyZWRMaW5rc0FwaVNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzU2VydmljZSkge1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHNoYXJlZExpbmtzQXBpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS5zaGFyZWRsaW5rc0FwaTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHNoYXJlZCBsaW5rcyBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgdXNlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHN1cHBvcnRlZCBieSBKU0FQSVxuICAgICAqIEByZXR1cm5zIExpc3Qgb2Ygc2hhcmVkIGxpbmtzXG4gICAgICovXG4gICAgZ2V0U2hhcmVkTGlua3Mob3B0aW9uczogYW55ID0ge30pOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5wcmVmZXJlbmNlcy5wYWdpbmF0aW9uU2l6ZSxcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncHJvcGVydGllcycsICdhbGxvd2FibGVPcGVyYXRpb25zJ11cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5zaGFyZWRMaW5rc0FwaS5maW5kU2hhcmVkTGlua3MocXVlcnlPcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gb2YoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhcmVkIGxpbmsgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IHVzZXIuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgbm9kZSB0byBsaW5rIHRvXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBzdXBwb3J0ZWQgYnkgSlNBUElcbiAgICAgKiBAcmV0dXJucyBUaGUgc2hhcmVkIGxpbmsganVzdCBjcmVhdGVkXG4gICAgICovXG4gICAgY3JlYXRlU2hhcmVkTGlua3Mobm9kZUlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogT2JzZXJ2YWJsZTxTaGFyZWRMaW5rRW50cnk+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuc2hhcmVkTGlua3NBcGkuYWRkU2hhcmVkTGluayh7IG5vZGVJZDogbm9kZUlkIH0pO1xuXG4gICAgICAgIHJldHVybiBmcm9tKHByb21pc2UpLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiBvZihlcnIpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBzaGFyZWQgbGluay5cbiAgICAgKiBAcGFyYW0gc2hhcmVkSWQgSUQgb2YgdGhlIGxpbmsgdG8gZGVsZXRlXG4gICAgICogQHJldHVybnMgTnVsbCByZXNwb25zZSBub3RpZnlpbmcgd2hlbiB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG4gICAgZGVsZXRlU2hhcmVkTGluayhzaGFyZWRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxTaGFyZWRMaW5rRW50cnk+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuc2hhcmVkTGlua3NBcGkuZGVsZXRlU2hhcmVkTGluayhzaGFyZWRJZCk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20ocHJvbWlzZSkucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IG9mKGVycikpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19