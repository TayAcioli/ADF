/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material';
import { TranslationService } from './translation.service';
var NotificationService = /** @class */ (function () {
    function NotificationService(snackBar, translationService) {
        this.snackBar = snackBar;
        this.translationService = translationService;
    }
    /**
     * Opens a SnackBar notification to show a message.
     * @param message The message (or resource key) to show.
     * @param config Time before notification disappears after being shown or MatSnackBarConfig object
     * @returns Information/control object for the SnackBar
     */
    /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    NotificationService.prototype.openSnackMessage = /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    function (message, config) {
        if (config === void 0) { config = NotificationService.DEFAULT_DURATION_MESSAGE; }
        /** @type {?} */
        var translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, null, config);
    };
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param message The message (or resource key) to show.
     * @param action Caption for the response button
     * @param config Time before notification disappears after being shown or MatSnackBarConfig object
     * @returns Information/control object for the SnackBar
     */
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    NotificationService.prototype.openSnackMessageAction = /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    function (message, action, config) {
        if (config === void 0) { config = NotificationService.DEFAULT_DURATION_MESSAGE; }
        /** @type {?} */
        var translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, action, config);
    };
    NotificationService.DEFAULT_DURATION_MESSAGE = 5000;
    NotificationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotificationService.ctorParameters = function () { return [
        { type: MatSnackBar },
        { type: TranslationService }
    ]; };
    return NotificationService;
}());
export { NotificationService };
if (false) {
    /** @type {?} */
    NotificationService.DEFAULT_DURATION_MESSAGE;
    /** @type {?} */
    NotificationService.prototype.snackBar;
    /** @type {?} */
    NotificationService.prototype.translationService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQXFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbkYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0lBT3ZELDZCQUFvQixRQUFxQixFQUNyQjtRQURBLGFBQVEsR0FBUixRQUFRLENBQWE7UUFDckIsdUJBQWtCLEdBQWxCLGtCQUFrQjtLQUNyQztJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsOENBQWdCOzs7Ozs7SUFBaEIsVUFBaUIsT0FBZSxFQUFFLE1BQWlGO1FBQWpGLHVCQUFBLEVBQUEsU0FBcUMsbUJBQW1CLENBQUMsd0JBQXdCOztRQUUvRyxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkUsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDNUIsTUFBTSxHQUFHO2dCQUNMLFFBQVEsRUFBRSxNQUFNO2FBQ25CLENBQUM7U0FDTDtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzlEO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7OztJQUNILG9EQUFzQjs7Ozs7OztJQUF0QixVQUF1QixPQUFlLEVBQUUsTUFBYyxFQUFFLE1BQWlGO1FBQWpGLHVCQUFBLEVBQUEsU0FBcUMsbUJBQW1CLENBQUMsd0JBQXdCOztRQUVySSxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkUsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDNUIsTUFBTSxHQUFHO2dCQUNMLFFBQVEsRUFBRSxNQUFNO2FBQ25CLENBQUM7U0FDTDtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2hFO21EQTNDeUMsSUFBSTs7Z0JBSGpELFVBQVU7Ozs7Z0JBSEYsV0FBVztnQkFDWCxrQkFBa0I7OzhCQW5CM0I7O1NBc0JhLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFNuYWNrQmFyLCBNYXRTbmFja0JhclJlZiwgTWF0U25hY2tCYXJDb25maWcgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uU2VydmljZSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9EVVJBVElPTl9NRVNTQUdFOiBudW1iZXIgPSA1MDAwO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzbmFja0JhcjogTWF0U25hY2tCYXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgU25hY2tCYXIgbm90aWZpY2F0aW9uIHRvIHNob3cgYSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIChvciByZXNvdXJjZSBrZXkpIHRvIHNob3cuXG4gICAgICogQHBhcmFtIGNvbmZpZyBUaW1lIGJlZm9yZSBub3RpZmljYXRpb24gZGlzYXBwZWFycyBhZnRlciBiZWluZyBzaG93biBvciBNYXRTbmFja0JhckNvbmZpZyBvYmplY3RcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbi9jb250cm9sIG9iamVjdCBmb3IgdGhlIFNuYWNrQmFyXG4gICAgICovXG4gICAgb3BlblNuYWNrTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIGNvbmZpZzogbnVtYmVyIHwgTWF0U25hY2tCYXJDb25maWcgPSBOb3RpZmljYXRpb25TZXJ2aWNlLkRFRkFVTFRfRFVSQVRJT05fTUVTU0FHRSk6IE1hdFNuYWNrQmFyUmVmPGFueT4ge1xuXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRNZXNzYWdlID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudChtZXNzYWdlKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogY29uZmlnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc25hY2tCYXIub3Blbih0cmFuc2xhdGVkTWVzc2FnZSwgbnVsbCwgY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIFNuYWNrQmFyIG5vdGlmaWNhdGlvbiB3aXRoIGEgbWVzc2FnZSBhbmQgYSByZXNwb25zZSBidXR0b24uXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgKG9yIHJlc291cmNlIGtleSkgdG8gc2hvdy5cbiAgICAgKiBAcGFyYW0gYWN0aW9uIENhcHRpb24gZm9yIHRoZSByZXNwb25zZSBidXR0b25cbiAgICAgKiBAcGFyYW0gY29uZmlnIFRpbWUgYmVmb3JlIG5vdGlmaWNhdGlvbiBkaXNhcHBlYXJzIGFmdGVyIGJlaW5nIHNob3duIG9yIE1hdFNuYWNrQmFyQ29uZmlnIG9iamVjdFxuICAgICAqIEByZXR1cm5zIEluZm9ybWF0aW9uL2NvbnRyb2wgb2JqZWN0IGZvciB0aGUgU25hY2tCYXJcbiAgICAgKi9cbiAgICBvcGVuU25hY2tNZXNzYWdlQWN0aW9uKG1lc3NhZ2U6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGNvbmZpZzogbnVtYmVyIHwgTWF0U25hY2tCYXJDb25maWcgPSBOb3RpZmljYXRpb25TZXJ2aWNlLkRFRkFVTFRfRFVSQVRJT05fTUVTU0FHRSk6IE1hdFNuYWNrQmFyUmVmPGFueT4ge1xuXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRNZXNzYWdlID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudChtZXNzYWdlKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogY29uZmlnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc25hY2tCYXIub3Blbih0cmFuc2xhdGVkTWVzc2FnZSwgYWN0aW9uLCBjb25maWcpO1xuICAgIH1cbn1cbiJdfQ==