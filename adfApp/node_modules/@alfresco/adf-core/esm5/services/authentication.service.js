/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable, Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { map, catchError, tap } from 'rxjs/operators';
import { HttpHeaders } from '@angular/common/http';
/** @type {?} */
var REMEMBER_ME_COOKIE_KEY = 'ALFRESCO_REMEMBER_ME';
/** @type {?} */
var REMEMBER_ME_UNTIL = 1000 * 60 * 60 * 24 * 30;
var AuthenticationService = /** @class */ (function () {
    function AuthenticationService(appConfig, alfrescoApi, cookie, logService) {
        this.appConfig = appConfig;
        this.alfrescoApi = alfrescoApi;
        this.cookie = cookie;
        this.logService = logService;
        this.redirectUrl = null;
        this.bearerExcludedUrls = ['auth/realms', 'resources/', 'assets/'];
        this.onLogin = new Subject();
        this.onLogout = new Subject();
    }
    /**
     * Checks if the user logged in.
     * @returns True if logged in, false otherwise
     */
    /**
     * Checks if the user logged in.
     * @return {?} True if logged in, false otherwise
     */
    AuthenticationService.prototype.isLoggedIn = /**
     * Checks if the user logged in.
     * @return {?} True if logged in, false otherwise
     */
    function () {
        if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
            return false;
        }
        return this.alfrescoApi.getInstance().isLoggedIn();
    };
    /**
     * Does the provider support OAuth?
     * @returns True if supported, false otherwise
     */
    /**
     * Does the provider support OAuth?
     * @return {?} True if supported, false otherwise
     */
    AuthenticationService.prototype.isOauth = /**
     * Does the provider support OAuth?
     * @return {?} True if supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isOauthConfiguration();
    };
    /**
     * Does the provider support ECM?
     * @returns True if supported, false otherwise
     */
    /**
     * Does the provider support ECM?
     * @return {?} True if supported, false otherwise
     */
    AuthenticationService.prototype.isECMProvider = /**
     * Does the provider support ECM?
     * @return {?} True if supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isEcmConfiguration();
    };
    /**
     * Does the provider support BPM?
     * @returns True if supported, false otherwise
     */
    /**
     * Does the provider support BPM?
     * @return {?} True if supported, false otherwise
     */
    AuthenticationService.prototype.isBPMProvider = /**
     * Does the provider support BPM?
     * @return {?} True if supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isBpmConfiguration();
    };
    /**
     * Does the provider support both ECM and BPM?
     * @returns True if both are supported, false otherwise
     */
    /**
     * Does the provider support both ECM and BPM?
     * @return {?} True if both are supported, false otherwise
     */
    AuthenticationService.prototype.isALLProvider = /**
     * Does the provider support both ECM and BPM?
     * @return {?} True if both are supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isEcmBpmConfiguration();
    };
    /**
     * Logs the user in.
     * @param username Username for the login
     * @param password Password for the login
     * @param rememberMe Stores the user's login details if true
     * @returns Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    /**
     * Logs the user in.
     * @param {?} username Username for the login
     * @param {?} password Password for the login
     * @param {?=} rememberMe Stores the user's login details if true
     * @return {?} Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    AuthenticationService.prototype.login = /**
     * Logs the user in.
     * @param {?} username Username for the login
     * @param {?} password Password for the login
     * @param {?=} rememberMe Stores the user's login details if true
     * @return {?} Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    function (username, password, rememberMe) {
        var _this = this;
        if (rememberMe === void 0) { rememberMe = false; }
        return from(this.alfrescoApi.getInstance().login(username, password))
            .pipe(map(function (response) {
            _this.saveRememberMeCookie(rememberMe);
            _this.onLogin.next(response);
            return {
                type: _this.appConfig.get(AppConfigValues.PROVIDERS),
                ticket: response
            };
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Logs the user in with SSO
     */
    /**
     * Logs the user in with SSO
     * @return {?}
     */
    AuthenticationService.prototype.ssoImplicitLogin = /**
     * Logs the user in with SSO
     * @return {?}
     */
    function () {
        this.alfrescoApi.getInstance().implicitLogin();
    };
    /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @param {?} rememberMe Enables a long-life cookie
     * @return {?}
     */
    AuthenticationService.prototype.saveRememberMeCookie = /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @param {?} rememberMe Enables a long-life cookie
     * @return {?}
     */
    function (rememberMe) {
        /** @type {?} */
        var expiration = null;
        if (rememberMe) {
            expiration = new Date();
            /** @type {?} */
            var time = expiration.getTime();
            /** @type {?} */
            var expireTime = time + REMEMBER_ME_UNTIL;
            expiration.setTime(expireTime);
        }
        this.cookie.setItem(REMEMBER_ME_COOKIE_KEY, '1', expiration, null);
    };
    /**
     * Checks whether the "remember me" cookie was set or not.
     * @returns True if set, false otherwise
     */
    /**
     * Checks whether the "remember me" cookie was set or not.
     * @return {?} True if set, false otherwise
     */
    AuthenticationService.prototype.isRememberMeSet = /**
     * Checks whether the "remember me" cookie was set or not.
     * @return {?} True if set, false otherwise
     */
    function () {
        return (this.cookie.getItem(REMEMBER_ME_COOKIE_KEY) === null) ? false : true;
    };
    /**
     * Logs the user out.
     * @returns Response event called when logout is complete
     */
    /**
     * Logs the user out.
     * @return {?} Response event called when logout is complete
     */
    AuthenticationService.prototype.logout = /**
     * Logs the user out.
     * @return {?} Response event called when logout is complete
     */
    function () {
        var _this = this;
        return from(this.callApiLogout())
            .pipe(tap(function (response) {
            _this.onLogout.next(response);
            return response;
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.callApiLogout = /**
     * @return {?}
     */
    function () {
        if (this.alfrescoApi.getInstance()) {
            return this.alfrescoApi.getInstance().logout();
        }
    };
    /**
     * Gets the ECM ticket stored in the Storage.
     * @returns The ticket or `null` if none was found
     */
    /**
     * Gets the ECM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    AuthenticationService.prototype.getTicketEcm = /**
     * Gets the ECM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    function () {
        return this.alfrescoApi.getInstance().getTicketEcm();
    };
    /**
     * Gets the BPM ticket stored in the Storage.
     * @returns The ticket or `null` if none was found
     */
    /**
     * Gets the BPM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    AuthenticationService.prototype.getTicketBpm = /**
     * Gets the BPM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    function () {
        return this.alfrescoApi.getInstance().getTicketBpm();
    };
    /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @returns The ticket or `null` if none was found
     */
    /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @return {?} The ticket or `null` if none was found
     */
    AuthenticationService.prototype.getTicketEcmBase64 = /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @return {?} The ticket or `null` if none was found
     */
    function () {
        /** @type {?} */
        var ticket = this.alfrescoApi.getInstance().getTicketEcm();
        if (ticket) {
            return 'Basic ' + btoa(ticket);
        }
        return null;
    };
    /**
     * Checks if the user is logged in on an ECM provider.
     * @returns True if logged in, false otherwise
     */
    /**
     * Checks if the user is logged in on an ECM provider.
     * @return {?} True if logged in, false otherwise
     */
    AuthenticationService.prototype.isEcmLoggedIn = /**
     * Checks if the user is logged in on an ECM provider.
     * @return {?} True if logged in, false otherwise
     */
    function () {
        if (this.isECMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isEcmLoggedIn();
        }
        return false;
    };
    /**
     * Checks if the user is logged in on a BPM provider.
     * @returns True if logged in, false otherwise
     */
    /**
     * Checks if the user is logged in on a BPM provider.
     * @return {?} True if logged in, false otherwise
     */
    AuthenticationService.prototype.isBpmLoggedIn = /**
     * Checks if the user is logged in on a BPM provider.
     * @return {?} True if logged in, false otherwise
     */
    function () {
        if (this.isBPMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isBpmLoggedIn();
        }
        return false;
    };
    /**
     * Gets the ECM username.
     * @returns The ECM username
     */
    /**
     * Gets the ECM username.
     * @return {?} The ECM username
     */
    AuthenticationService.prototype.getEcmUsername = /**
     * Gets the ECM username.
     * @return {?} The ECM username
     */
    function () {
        return this.alfrescoApi.getInstance().getEcmUsername();
    };
    /**
     * Gets the BPM username
     * @returns The BPM username
     */
    /**
     * Gets the BPM username
     * @return {?} The BPM username
     */
    AuthenticationService.prototype.getBpmUsername = /**
     * Gets the BPM username
     * @return {?} The BPM username
     */
    function () {
        return this.alfrescoApi.getInstance().getBpmUsername();
    };
    /** Sets the URL to redirect to after login.
     * @param url URL to redirect to
     */
    /**
     * Sets the URL to redirect to after login.
     * @param {?} url URL to redirect to
     * @return {?}
     */
    AuthenticationService.prototype.setRedirect = /**
     * Sets the URL to redirect to after login.
     * @param {?} url URL to redirect to
     * @return {?}
     */
    function (url) {
        this.redirectUrl = url;
    };
    /** Gets the URL to redirect to after login.
     * @param provider Service provider. Can be "ECM", "BPM" or "ALL".
     * @returns The redirect URL
     */
    /**
     * Gets the URL to redirect to after login.
     * @param {?} provider Service provider. Can be "ECM", "BPM" or "ALL".
     * @return {?} The redirect URL
     */
    AuthenticationService.prototype.getRedirect = /**
     * Gets the URL to redirect to after login.
     * @param {?} provider Service provider. Can be "ECM", "BPM" or "ALL".
     * @return {?} The redirect URL
     */
    function (provider) {
        return this.hasValidRedirection(provider) ? this.redirectUrl.url : null;
    };
    /**
     * Gets information about the user currently logged into APS.
     * @returns User information
     */
    /**
     * Gets information about the user currently logged into APS.
     * @return {?} User information
     */
    AuthenticationService.prototype.getBpmLoggedUser = /**
     * Gets information about the user currently logged into APS.
     * @return {?} User information
     */
    function () {
        return from(this.alfrescoApi.getInstance().activiti.profileApi.getProfile());
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    AuthenticationService.prototype.hasValidRedirection = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        return this.redirectUrl && (this.redirectUrl.provider === provider || this.hasSelectedProviderAll(provider));
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    AuthenticationService.prototype.hasSelectedProviderAll = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        return this.redirectUrl && (this.redirectUrl.provider === 'ALL' || provider === 'ALL');
    };
    /**
     * Prints an error message in the console browser
     * @param error Error message
     * @returns Object representing the error message
     */
    /**
     * Prints an error message in the console browser
     * @param {?} error Error message
     * @return {?} Object representing the error message
     */
    AuthenticationService.prototype.handleError = /**
     * Prints an error message in the console browser
     * @param {?} error Error message
     * @return {?} Object representing the error message
     */
    function (error) {
        this.logService.error('Error when logging in', error);
        return throwError(error || 'Server error');
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getBearerExcludedUrls = /**
     * @return {?}
     */
    function () {
        return this.bearerExcludedUrls;
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getToken = /**
     * @return {?}
     */
    function () {
        return localStorage.getItem('access_token');
    };
    /**
     * @param {?=} headersArg
     * @return {?}
     */
    AuthenticationService.prototype.addTokenToHeader = /**
     * @param {?=} headersArg
     * @return {?}
     */
    function (headersArg) {
        var _this = this;
        return Observable.create(function (observer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var headers, token;
            return tslib_1.__generator(this, function (_a) {
                headers = headersArg;
                if (!headers) {
                    headers = new HttpHeaders();
                }
                try {
                    token = this.getToken();
                    headers = headers.set('Authorization', 'bearer ' + token);
                    observer.next(headers);
                    observer.complete();
                }
                catch (error) {
                    observer.error(error);
                }
                return [2 /*return*/];
            });
        }); });
    };
    AuthenticationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthenticationService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService },
        { type: CookieService },
        { type: LogService }
    ]; };
    return AuthenticationService;
}());
export { AuthenticationService };
if (false) {
    /** @type {?} */
    AuthenticationService.prototype.redirectUrl;
    /** @type {?} */
    AuthenticationService.prototype.bearerExcludedUrls;
    /** @type {?} */
    AuthenticationService.prototype.onLogin;
    /** @type {?} */
    AuthenticationService.prototype.onLogout;
    /** @type {?} */
    AuthenticationService.prototype.appConfig;
    /** @type {?} */
    AuthenticationService.prototype.alfrescoApi;
    /** @type {?} */
    AuthenticationService.prototype.cookie;
    /** @type {?} */
    AuthenticationService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,