/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
var NodesApiService = /** @class */ (function () {
    function NodesApiService(api, preferences) {
        this.api = api;
        this.preferences = preferences;
    }
    Object.defineProperty(NodesApiService.prototype, "nodesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.api.getInstance().core.nodesApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} entity
     * @return {?}
     */
    NodesApiService.prototype.getEntryFromEntity = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        return entity.entry;
    };
    /**
     * Gets the stored information about a node.
     * @param nodeId ID of the target node
     * @param options Optional parameters supported by JSAPI
     * @returns Node information
     */
    /**
     * Gets the stored information about a node.
     * @param {?} nodeId ID of the target node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Node information
     */
    NodesApiService.prototype.getNode = /**
     * Gets the stored information about a node.
     * @param {?} nodeId ID of the target node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Node information
     */
    function (nodeId, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var defaults = {
            include: ['path', 'properties', 'allowableOperations', 'permissions']
        };
        /** @type {?} */
        var queryOptions = Object.assign(defaults, options);
        /** @type {?} */
        var promise = this.nodesApi
            .getNode(nodeId, queryOptions)
            .then(this.getEntryFromEntity);
        return from(promise).pipe(catchError(function (err) { return throwError(err); }));
    };
    /**
     * Gets the items contained in a folder node.
     * @param nodeId ID of the target node
     * @param options Optional parameters supported by JSAPI
     * @returns List of child items from the folder
     */
    /**
     * Gets the items contained in a folder node.
     * @param {?} nodeId ID of the target node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} List of child items from the folder
     */
    NodesApiService.prototype.getNodeChildren = /**
     * Gets the items contained in a folder node.
     * @param {?} nodeId ID of the target node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} List of child items from the folder
     */
    function (nodeId, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var defaults = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            include: ['path', 'properties', 'allowableOperations', 'permissions']
        };
        /** @type {?} */
        var queryOptions = Object.assign(defaults, options);
        /** @type {?} */
        var promise = this.nodesApi
            .getNodeChildren(nodeId, queryOptions);
        return from(promise).pipe(catchError(function (err) { return throwError(err); }));
    };
    /**
     * Creates a new document node inside a folder.
     * @param parentNodeId ID of the parent folder node
     * @param nodeBody Data for the new node
     * @param options Optional parameters supported by JSAPI
     * @returns Details of the new node
     */
    /**
     * Creates a new document node inside a folder.
     * @param {?} parentNodeId ID of the parent folder node
     * @param {?} nodeBody Data for the new node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Details of the new node
     */
    NodesApiService.prototype.createNode = /**
     * Creates a new document node inside a folder.
     * @param {?} parentNodeId ID of the parent folder node
     * @param {?} nodeBody Data for the new node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Details of the new node
     */
    function (parentNodeId, nodeBody, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var promise = this.nodesApi
            .addNode(parentNodeId, nodeBody, options)
            .then(this.getEntryFromEntity);
        return from(promise).pipe(catchError(function (err) { return throwError(err); }));
    };
    /**
     * Creates a new folder node inside a parent folder.
     * @param parentNodeId ID of the parent folder node
     * @param nodeBody Data for the new folder
     * @param options Optional parameters supported by JSAPI
     * @returns Details of the new folder
     */
    /**
     * Creates a new folder node inside a parent folder.
     * @param {?} parentNodeId ID of the parent folder node
     * @param {?} nodeBody Data for the new folder
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Details of the new folder
     */
    NodesApiService.prototype.createFolder = /**
     * Creates a new folder node inside a parent folder.
     * @param {?} parentNodeId ID of the parent folder node
     * @param {?} nodeBody Data for the new folder
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Details of the new folder
     */
    function (parentNodeId, nodeBody, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var body = Object.assign({ nodeType: 'cm:folder' }, nodeBody);
        return this.createNode(parentNodeId, body, options);
    };
    /**
     * Updates the information about a node.
     * @param nodeId ID of the target node
     * @param nodeBody New data for the node
     * @param options Optional parameters supported by JSAPI
     * @returns Updated node information
     */
    /**
     * Updates the information about a node.
     * @param {?} nodeId ID of the target node
     * @param {?} nodeBody New data for the node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Updated node information
     */
    NodesApiService.prototype.updateNode = /**
     * Updates the information about a node.
     * @param {?} nodeId ID of the target node
     * @param {?} nodeBody New data for the node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Updated node information
     */
    function (nodeId, nodeBody, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var defaults = {
            include: ['path', 'properties', 'allowableOperations', 'permissions']
        };
        /** @type {?} */
        var queryOptions = Object.assign(defaults, options);
        /** @type {?} */
        var promise = this.nodesApi
            .updateNode(nodeId, nodeBody, queryOptions)
            .then(this.getEntryFromEntity);
        return from(promise).pipe(catchError(function (err) { return throwError(err); }));
    };
    /**
     * Moves a node to the trashcan.
     * @param nodeId ID of the target node
     * @param options Optional parameters supported by JSAPI
     * @returns Empty result that notifies when the deletion is complete
     */
    /**
     * Moves a node to the trashcan.
     * @param {?} nodeId ID of the target node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Empty result that notifies when the deletion is complete
     */
    NodesApiService.prototype.deleteNode = /**
     * Moves a node to the trashcan.
     * @param {?} nodeId ID of the target node
     * @param {?=} options Optional parameters supported by JSAPI
     * @return {?} Empty result that notifies when the deletion is complete
     */
    function (nodeId, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var promise = this.nodesApi.deleteNode(nodeId, options);
        return from(promise).pipe(catchError(function (err) { return throwError(err); }));
    };
    /**
     * Restores a node previously moved to the trashcan.
     * @param nodeId ID of the node to restore
     * @returns Details of the restored node
     */
    /**
     * Restores a node previously moved to the trashcan.
     * @param {?} nodeId ID of the node to restore
     * @return {?} Details of the restored node
     */
    NodesApiService.prototype.restoreNode = /**
     * Restores a node previously moved to the trashcan.
     * @param {?} nodeId ID of the node to restore
     * @return {?} Details of the restored node
     */
    function (nodeId) {
        /** @type {?} */
        var promise = this.nodesApi
            .restoreNode(nodeId)
            .then(this.getEntryFromEntity);
        return from(promise).pipe(catchError(function (err) { return throwError(err); }));
    };
    NodesApiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NodesApiService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: UserPreferencesService }
    ]; };
    return NodesApiService;
}());
export { NodesApiService };
if (false) {
    /** @type {?} */
    NodesApiService.prototype.api;
    /** @type {?} */
    NodesApiService.prototype.preferences;
}

//# sourceMappingURL=data:application/json;base64,