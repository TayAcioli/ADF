/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError } from 'rxjs/operators';
var SitesService = /** @class */ (function () {
    function SitesService(apiService) {
        this.apiService = apiService;
    }
    /**
     * Gets a list of all sites in the repository.
     * @param opts Options supported by JSAPI
     * @returns List of sites
     */
    /**
     * Gets a list of all sites in the repository.
     * @param {?=} opts Options supported by JSAPI
     * @return {?} List of sites
     */
    SitesService.prototype.getSites = /**
     * Gets a list of all sites in the repository.
     * @param {?=} opts Options supported by JSAPI
     * @return {?} List of sites
     */
    function (opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        /** @type {?} */
        var defaultOptions = {
            skipCount: 0,
            include: ['properties']
        };
        /** @type {?} */
        var queryOptions = Object.assign({}, defaultOptions, opts);
        return from(this.apiService.getInstance().core.sitesApi.getSites(queryOptions))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the details for a site.
     * @param siteId ID of the target site
     * @param opts Options supported by JSAPI
     * @returns Information about the site
     */
    /**
     * Gets the details for a site.
     * @param {?} siteId ID of the target site
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Information about the site
     */
    SitesService.prototype.getSite = /**
     * Gets the details for a site.
     * @param {?} siteId ID of the target site
     * @param {?=} opts Options supported by JSAPI
     * @return {?} Information about the site
     */
    function (siteId, opts) {
        var _this = this;
        return from(this.apiService.getInstance().core.sitesApi.getSite(siteId, opts))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Deletes a site.
     * @param siteId Site to delete
     * @param permanentFlag True: deletion is permanent; False: site is moved to the trash
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Deletes a site.
     * @param {?} siteId Site to delete
     * @param {?=} permanentFlag True: deletion is permanent; False: site is moved to the trash
     * @return {?} Null response notifying when the operation is complete
     */
    SitesService.prototype.deleteSite = /**
     * Deletes a site.
     * @param {?} siteId Site to delete
     * @param {?=} permanentFlag True: deletion is permanent; False: site is moved to the trash
     * @return {?} Null response notifying when the operation is complete
     */
    function (siteId, permanentFlag) {
        var _this = this;
        if (permanentFlag === void 0) { permanentFlag = true; }
        /** @type {?} */
        var options = {};
        options.permanent = permanentFlag;
        return from(this.apiService.getInstance().core.sitesApi.deleteSite(siteId, options))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a site's content.
     * @param siteId ID of the target site
     * @returns Site content
     */
    /**
     * Gets a site's content.
     * @param {?} siteId ID of the target site
     * @return {?} Site content
     */
    SitesService.prototype.getSiteContent = /**
     * Gets a site's content.
     * @param {?} siteId ID of the target site
     * @return {?} Site content
     */
    function (siteId) {
        return this.getSite(siteId, { relations: ['containers'] });
    };
    /**
     * Gets a list of all a site's members.
     * @param siteId ID of the target site
     * @returns Site members
     */
    /**
     * Gets a list of all a site's members.
     * @param {?} siteId ID of the target site
     * @return {?} Site members
     */
    SitesService.prototype.getSiteMembers = /**
     * Gets a list of all a site's members.
     * @param {?} siteId ID of the target site
     * @return {?} Site members
     */
    function (siteId) {
        return this.getSite(siteId, { relations: ['members'] });
    };
    /**
     * Gets the username of the user currently logged into ACS.
     * @returns Username string
     */
    /**
     * Gets the username of the user currently logged into ACS.
     * @return {?} Username string
     */
    SitesService.prototype.getEcmCurrentLoggedUserName = /**
     * Gets the username of the user currently logged into ACS.
     * @return {?} Username string
     */
    function () {
        return this.apiService.getInstance().getEcmUsername();
    };
    /**
     * @param {?} error
     * @return {?}
     */
    SitesService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        console.error(error);
        return throwError(error || 'Server error');
    };
    SitesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SitesService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    return SitesService;
}());
export { SitesService };
if (false) {
    /** @type {?} */
    SitesService.prototype.apiService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NpdGVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBS3hDLHNCQUNZO1FBQUEsZUFBVSxHQUFWLFVBQVU7S0FBeUI7SUFFL0M7Ozs7T0FJRzs7Ozs7O0lBQ0gsK0JBQVE7Ozs7O0lBQVIsVUFBUyxJQUFjO1FBQXZCLGlCQVVDO1FBVlEscUJBQUEsRUFBQSxTQUFjOztRQUNuQixJQUFNLGNBQWMsR0FBRztZQUNuQixTQUFTLEVBQUUsQ0FBQztZQUNaLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztTQUMxQixDQUFDOztRQUNGLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzFFLElBQUksQ0FDRCxVQUFVLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQzNDLENBQUM7S0FDVDtJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsOEJBQU87Ozs7OztJQUFQLFVBQVEsTUFBYyxFQUFFLElBQVU7UUFBbEMsaUJBS0M7UUFKRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUN6RSxJQUFJLENBQ0QsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsQ0FBQyxDQUMzQyxDQUFDO0tBQ1Q7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILGlDQUFVOzs7Ozs7SUFBVixVQUFXLE1BQWMsRUFBRSxhQUE2QjtRQUF4RCxpQkFPQztRQVAwQiw4QkFBQSxFQUFBLG9CQUE2Qjs7UUFDcEQsSUFBSSxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQy9FLElBQUksQ0FDRCxVQUFVLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQzNDLENBQUM7S0FDVDtJQUVEOzs7O09BSUc7Ozs7OztJQUNILHFDQUFjOzs7OztJQUFkLFVBQWUsTUFBYztRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzlEO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0gscUNBQWM7Ozs7O0lBQWQsVUFBZSxNQUFjO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDM0Q7SUFFRDs7O09BR0c7Ozs7O0lBQ0gsa0RBQTJCOzs7O0lBQTNCO1FBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQ3pEOzs7OztJQUVPLGtDQUFXOzs7O2NBQUMsS0FBZTtRQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQzs7O2dCQS9FbEQsVUFBVTs7OztnQkFKRixrQkFBa0I7O3VCQXBCM0I7O1NBeUJhLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBTaXRlUGFnaW5nLCBTaXRlRW50cnkgfSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpdGVzU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHsgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgYWxsIHNpdGVzIGluIHRoZSByZXBvc2l0b3J5LlxuICAgICAqIEBwYXJhbSBvcHRzIE9wdGlvbnMgc3VwcG9ydGVkIGJ5IEpTQVBJXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBzaXRlc1xuICAgICAqL1xuICAgIGdldFNpdGVzKG9wdHM6IGFueSA9IHt9KTogT2JzZXJ2YWJsZTxTaXRlUGFnaW5nPiB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgaW5jbHVkZTogWydwcm9wZXJ0aWVzJ11cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdHMpO1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLnNpdGVzQXBpLmdldFNpdGVzKHF1ZXJ5T3B0aW9ucykpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRldGFpbHMgZm9yIGEgc2l0ZS5cbiAgICAgKiBAcGFyYW0gc2l0ZUlkIElEIG9mIHRoZSB0YXJnZXQgc2l0ZVxuICAgICAqIEBwYXJhbSBvcHRzIE9wdGlvbnMgc3VwcG9ydGVkIGJ5IEpTQVBJXG4gICAgICogQHJldHVybnMgSW5mb3JtYXRpb24gYWJvdXQgdGhlIHNpdGVcbiAgICAgKi9cbiAgICBnZXRTaXRlKHNpdGVJZDogc3RyaW5nLCBvcHRzPzogYW55KTogT2JzZXJ2YWJsZTxTaXRlRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS5zaXRlc0FwaS5nZXRTaXRlKHNpdGVJZCwgb3B0cykpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBzaXRlLlxuICAgICAqIEBwYXJhbSBzaXRlSWQgU2l0ZSB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0gcGVybWFuZW50RmxhZyBUcnVlOiBkZWxldGlvbiBpcyBwZXJtYW5lbnQ7IEZhbHNlOiBzaXRlIGlzIG1vdmVkIHRvIHRoZSB0cmFzaFxuICAgICAqIEByZXR1cm5zIE51bGwgcmVzcG9uc2Ugbm90aWZ5aW5nIHdoZW4gdGhlIG9wZXJhdGlvbiBpcyBjb21wbGV0ZVxuICAgICAqL1xuICAgIGRlbGV0ZVNpdGUoc2l0ZUlkOiBzdHJpbmcsIHBlcm1hbmVudEZsYWc6IGJvb2xlYW4gPSB0cnVlKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgbGV0IG9wdGlvbnM6IGFueSA9IHt9O1xuICAgICAgICBvcHRpb25zLnBlcm1hbmVudCA9IHBlcm1hbmVudEZsYWc7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmNvcmUuc2l0ZXNBcGkuZGVsZXRlU2l0ZShzaXRlSWQsIG9wdGlvbnMpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc2l0ZSdzIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHNpdGVJZCBJRCBvZiB0aGUgdGFyZ2V0IHNpdGVcbiAgICAgKiBAcmV0dXJucyBTaXRlIGNvbnRlbnRcbiAgICAgKi9cbiAgICBnZXRTaXRlQ29udGVudChzaXRlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8U2l0ZUVudHJ5PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNpdGUoc2l0ZUlkLCB7IHJlbGF0aW9uczogWydjb250YWluZXJzJ10gfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgYWxsIGEgc2l0ZSdzIG1lbWJlcnMuXG4gICAgICogQHBhcmFtIHNpdGVJZCBJRCBvZiB0aGUgdGFyZ2V0IHNpdGVcbiAgICAgKiBAcmV0dXJucyBTaXRlIG1lbWJlcnNcbiAgICAgKi9cbiAgICBnZXRTaXRlTWVtYmVycyhzaXRlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8U2l0ZUVudHJ5PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNpdGUoc2l0ZUlkLCB7IHJlbGF0aW9uczogWydtZW1iZXJzJ10gfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdXNlcm5hbWUgb2YgdGhlIHVzZXIgY3VycmVudGx5IGxvZ2dlZCBpbnRvIEFDUy5cbiAgICAgKiBAcmV0dXJucyBVc2VybmFtZSBzdHJpbmdcbiAgICAgKi9cbiAgICBnZXRFY21DdXJyZW50TG9nZ2VkVXNlck5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldEVjbVVzZXJuYW1lKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogUmVzcG9uc2UpOiBhbnkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==