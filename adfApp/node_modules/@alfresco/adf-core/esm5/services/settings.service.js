/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { LogService } from './log.service';
import { StorageService } from './storage.service';
var SettingsService = /** @class */ (function () {
    function SettingsService(appConfig, logService, storage) {
        this.appConfig = appConfig;
        this.logService = logService;
        this.storage = storage;
    }
    Object.defineProperty(SettingsService.prototype, "ecmHost", {
        get: /**
         * @deprecated in 1.6.0
         * @return {?}
         */
        function () {
            this.logService.log('SettingsService.ecmHost is deprecated. Use AppConfigService instead.');
            return this.appConfig.get(AppConfigValues.ECMHOST);
        },
        set: /**
         * @deprecated in 1.6.0
         * @param {?} ecmHostUrl
         * @return {?}
         */
        function (ecmHostUrl) {
            this.logService.log('SettingsService.ecmHost is deprecated. Use AppConfigService instead.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsService.prototype, "csrfDisabled", {
        set: /**
         * @deprecated in 1.7.0
         * @param {?} csrfDisabled
         * @return {?}
         */
        function (csrfDisabled) {
            this.logService.log("SettingsService.csrfDisabled is deprecated. Use UserPreferencesService.disableCSRF instead.");
            if (csrfDisabled !== null && csrfDisabled !== undefined) {
                this.storage.setItem(AppConfigValues.DISABLECSRF, csrfDisabled.toString());
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsService.prototype, "bpmHost", {
        get: /**
         * @deprecated in 1.6.0
         * @return {?}
         */
        function () {
            this.logService.log('SettingsService.bpmHost is deprecated. Use AppConfigService instead.');
            return this.appConfig.get(AppConfigValues.BPMHOST);
        },
        set: /**
         * @deprecated in 1.6.0
         * @param {?} bpmHostUrl
         * @return {?}
         */
        function (bpmHostUrl) {
            this.logService.log('SettingsService.bpmHost is deprecated. Use AppConfigService instead.');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @deprecated in 1.6.0
     * @return {?}
     */
    SettingsService.prototype.getBPMApiBaseUrl = /**
     * @deprecated in 1.6.0
     * @return {?}
     */
    function () {
        this.logService.log('SettingsService.getBPMApiBaseUrl is deprecated.');
        return this.bpmHost + '/activiti-app';
    };
    /**
     * @deprecated in 1.7.0
     * @return {?}
     */
    SettingsService.prototype.getProviders = /**
     * @deprecated in 1.7.0
     * @return {?}
     */
    function () {
        this.logService.log("SettingsService.getProviders is deprecated. Use UserPreferencesService.authType instead.");
        return this.storage.getItem(AppConfigValues.PROVIDERS) || this.appConfig.get(AppConfigValues.PROVIDERS);
    };
    /**
     * @deprecated in 1.7.0
     * @param {?} providers
     * @return {?}
     */
    SettingsService.prototype.setProviders = /**
     * @deprecated in 1.7.0
     * @param {?} providers
     * @return {?}
     */
    function (providers) {
        this.logService.log("SettingsService.setProviders is deprecated. Use the app-config.json");
        if (providers) {
            this.storage.setItem(AppConfigValues.PROVIDERS, providers);
        }
    };
    SettingsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SettingsService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: LogService },
        { type: StorageService }
    ]; };
    return SettingsService;
}());
export { SettingsService };
if (false) {
    /** @type {?} */
    SettingsService.prototype.appConfig;
    /** @type {?} */
    SettingsService.prototype.logService;
    /** @type {?} */
    SettingsService.prototype.storage;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NldHRpbmdzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0lBSy9DLHlCQUFvQixTQUEyQixFQUMzQixZQUNBO1FBRkEsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsZUFBVSxHQUFWLFVBQVU7UUFDVixZQUFPLEdBQVAsT0FBTztLQUMxQjswQkFHVSxvQ0FBTzs7Ozs7O1lBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsc0VBQXNFLENBQUMsQ0FBQztZQUM1RixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Ozs7OztrQkFZNUMsVUFBa0I7WUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsc0VBQXNFLENBQUMsQ0FBQzs7Ozs7MEJBVHJGLHlDQUFZOzs7Ozs7a0JBQUMsWUFBcUI7WUFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsNkZBQTZGLENBQUMsQ0FBQztZQUNuSCxJQUFJLFlBQVksS0FBSyxJQUFJLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtnQkFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQzthQUM5RTs7Ozs7MEJBU00sb0NBQU87Ozs7OztZQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7WUFDNUYsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7Ozs7a0JBSTVDLFVBQWtCO1lBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7Ozs7Ozs7OztJQUl6RiwwQ0FBZ0I7Ozs7O1FBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQzs7Ozs7O0lBSW5DLHNDQUFZOzs7OztRQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLDBGQUEwRixDQUFDLENBQUM7UUFDaEgsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQVMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7Ozs7O0lBSTdHLHNDQUFZOzs7OztjQUFDLFNBQWlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHFFQUFxRSxDQUFDLENBQUM7UUFDM0YsSUFBSSxTQUFTLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzlEOzs7Z0JBdkRSLFVBQVU7Ozs7Z0JBSkYsZ0JBQWdCO2dCQUNoQixVQUFVO2dCQUNWLGNBQWM7OzBCQXBCdkI7O1NBdUJhLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlLCBBcHBDb25maWdWYWx1ZXMgfSBmcm9tICcuLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vc3RvcmFnZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNldHRpbmdzU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcENvbmZpZzogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdG9yYWdlOiBTdG9yYWdlU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjYuMCAqL1xuICAgIHB1YmxpYyBnZXQgZWNtSG9zdCgpOiBzdHJpbmcge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKCdTZXR0aW5nc1NlcnZpY2UuZWNtSG9zdCBpcyBkZXByZWNhdGVkLiBVc2UgQXBwQ29uZmlnU2VydmljZSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oQXBwQ29uZmlnVmFsdWVzLkVDTUhPU1QpO1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjcuMCAqL1xuICAgIHB1YmxpYyBzZXQgY3NyZkRpc2FibGVkKGNzcmZEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKGBTZXR0aW5nc1NlcnZpY2UuY3NyZkRpc2FibGVkIGlzIGRlcHJlY2F0ZWQuIFVzZSBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLmRpc2FibGVDU1JGIGluc3RlYWQuYCk7XG4gICAgICAgIGlmIChjc3JmRGlzYWJsZWQgIT09IG51bGwgJiYgY3NyZkRpc2FibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKEFwcENvbmZpZ1ZhbHVlcy5ESVNBQkxFQ1NSRiwgY3NyZkRpc2FibGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBkZXByZWNhdGVkIGluIDEuNi4wICovXG4gICAgcHVibGljIHNldCBlY21Ib3N0KGVjbUhvc3RVcmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKCdTZXR0aW5nc1NlcnZpY2UuZWNtSG9zdCBpcyBkZXByZWNhdGVkLiBVc2UgQXBwQ29uZmlnU2VydmljZSBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjYuMCAqL1xuICAgIHB1YmxpYyBnZXQgYnBtSG9zdCgpOiBzdHJpbmcge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKCdTZXR0aW5nc1NlcnZpY2UuYnBtSG9zdCBpcyBkZXByZWNhdGVkLiBVc2UgQXBwQ29uZmlnU2VydmljZSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oQXBwQ29uZmlnVmFsdWVzLkJQTUhPU1QpO1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjYuMCAqL1xuICAgIHB1YmxpYyBzZXQgYnBtSG9zdChicG1Ib3N0VXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnU2V0dGluZ3NTZXJ2aWNlLmJwbUhvc3QgaXMgZGVwcmVjYXRlZC4gVXNlIEFwcENvbmZpZ1NlcnZpY2UgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgaW4gMS42LjAgKi9cbiAgICBwdWJsaWMgZ2V0QlBNQXBpQmFzZVVybCgpOiBzdHJpbmcge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKCdTZXR0aW5nc1NlcnZpY2UuZ2V0QlBNQXBpQmFzZVVybCBpcyBkZXByZWNhdGVkLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5icG1Ib3N0ICsgJy9hY3Rpdml0aS1hcHAnO1xuICAgIH1cblxuICAgIC8qKiBAZGVwcmVjYXRlZCBpbiAxLjcuMCAqL1xuICAgIHB1YmxpYyBnZXRQcm92aWRlcnMoKTogc3RyaW5nIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZyhgU2V0dGluZ3NTZXJ2aWNlLmdldFByb3ZpZGVycyBpcyBkZXByZWNhdGVkLiBVc2UgVXNlclByZWZlcmVuY2VzU2VydmljZS5hdXRoVHlwZSBpbnN0ZWFkLmApO1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0oQXBwQ29uZmlnVmFsdWVzLlBST1ZJREVSUykgfHwgdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oQXBwQ29uZmlnVmFsdWVzLlBST1ZJREVSUyk7XG4gICAgfVxuXG4gICAgLyoqIEBkZXByZWNhdGVkIGluIDEuNy4wICovXG4gICAgcHVibGljIHNldFByb3ZpZGVycyhwcm92aWRlcnM6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UubG9nKGBTZXR0aW5nc1NlcnZpY2Uuc2V0UHJvdmlkZXJzIGlzIGRlcHJlY2F0ZWQuIFVzZSB0aGUgYXBwLWNvbmZpZy5qc29uYCk7XG4gICAgICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKEFwcENvbmZpZ1ZhbHVlcy5QUk9WSURFUlMsIHByb3ZpZGVycyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=