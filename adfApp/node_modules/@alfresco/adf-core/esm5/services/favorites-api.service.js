/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
var FavoritesApiService = /** @class */ (function () {
    function FavoritesApiService(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    FavoritesApiService.remapEntry = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var entry = _a.entry;
        entry.properties = {
            'cm:title': entry.title,
            'cm:description': entry.description
        };
        return { entry: entry };
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    FavoritesApiService.prototype.remapFavoritesData = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (data === void 0) { data = {}; }
        /** @type {?} */
        var list = (data.list || {});
        /** @type {?} */
        var pagination = (list.pagination || {});
        /** @type {?} */
        var entries = this
            .remapFavoriteEntries(list.entries || []);
        return /** @type {?} */ ({
            list: { entries: entries, pagination: pagination }
        });
    };
    /**
     * @param {?} entries
     * @return {?}
     */
    FavoritesApiService.prototype.remapFavoriteEntries = /**
     * @param {?} entries
     * @return {?}
     */
    function (entries) {
        return entries
            .map(function (_a) {
            var target = _a.entry.target;
            return ({
                entry: target.file || target.folder
            });
        })
            .filter(function (_a) {
            var entry = _a.entry;
            return (!!entry);
        })
            .map(FavoritesApiService.remapEntry);
    };
    Object.defineProperty(FavoritesApiService.prototype, "favoritesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().core.favoritesApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the favorites for a user.
     * @param personId ID of the user
     * @param options Options supported by JSAPI
     * @returns List of favorites
     */
    /**
     * Gets the favorites for a user.
     * @param {?} personId ID of the user
     * @param {?=} options Options supported by JSAPI
     * @return {?} List of favorites
     */
    FavoritesApiService.prototype.getFavorites = /**
     * Gets the favorites for a user.
     * @param {?} personId ID of the user
     * @param {?=} options Options supported by JSAPI
     * @return {?} List of favorites
     */
    function (personId, options) {
        /** @type {?} */
        var defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: ['properties', 'allowableOperations']
        };
        /** @type {?} */
        var queryOptions = Object.assign(defaultOptions, options);
        /** @type {?} */
        var promise = this.favoritesApi
            .getFavorites(personId, queryOptions)
            .then(this.remapFavoritesData);
        return from(promise).pipe(catchError(function (err) { return of(err); }));
    };
    FavoritesApiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FavoritesApiService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: UserPreferencesService }
    ]; };
    return FavoritesApiService;
}());
export { FavoritesApiService };
if (false) {
    /** @type {?} */
    FavoritesApiService.prototype.apiService;
    /** @type {?} */
    FavoritesApiService.prototype.preferences;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztJQWtDeEMsNkJBQ1ksWUFDQTtRQURBLGVBQVUsR0FBVixVQUFVO1FBQ1YsZ0JBQVcsR0FBWCxXQUFXO0tBQ25COzs7OztJQWhDRyw4QkFBVTs7OztJQUFqQixVQUFrQixFQUFjO1lBQVosZ0JBQUs7UUFDckIsS0FBSyxDQUFDLFVBQVUsR0FBRztZQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSztZQUN2QixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsV0FBVztTQUN0QyxDQUFDO1FBRUYsT0FBTyxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7S0FDcEI7Ozs7O0lBRUQsZ0RBQWtCOzs7O0lBQWxCLFVBQW1CLElBQWM7UUFBZCxxQkFBQSxFQUFBLFNBQWM7O1FBQzdCLElBQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQzs7UUFDL0IsSUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDOztRQUMzQyxJQUFNLE9BQU8sR0FBVSxJQUFJO2FBQ3RCLG9CQUFvQixDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7UUFFOUMseUJBQW9CO1lBQ2hCLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLFVBQVUsWUFBQSxFQUFFO1NBQ2hDLEVBQUM7S0FDTDs7Ozs7SUFFRCxrREFBb0I7Ozs7SUFBcEIsVUFBcUIsT0FBYztRQUMvQixPQUFPLE9BQU87YUFDVCxHQUFHLENBQUMsVUFBQyxFQUF5QjtnQkFBZCx3QkFBTTtZQUFhLE9BQUEsQ0FBQztnQkFDakMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLE1BQU07YUFDdEMsQ0FBQztRQUZrQyxDQUVsQyxDQUFDO2FBQ0YsTUFBTSxDQUFDLFVBQUMsRUFBUztnQkFBUCxnQkFBSztZQUFPLE9BQUEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQVQsQ0FBUyxDQUFDO2FBQ2hDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM1QzswQkFPVyw2Q0FBWTs7Ozs7WUFDckIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7Ozs7O0lBRzFEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsMENBQVk7Ozs7OztJQUFaLFVBQWEsUUFBZ0IsRUFBRSxPQUFhOztRQUN4QyxJQUFNLGNBQWMsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjO1lBQ3pDLFNBQVMsRUFBRSxDQUFDO1lBQ1osS0FBSyxFQUFFLGdEQUFnRDtZQUN2RCxPQUFPLEVBQUUsQ0FBRSxZQUFZLEVBQUUscUJBQXFCLENBQUU7U0FDbkQsQ0FBQzs7UUFDRixJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQzs7UUFDNUQsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVk7YUFDNUIsWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7YUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRW5DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFQLENBQU8sQ0FBQyxDQUM3QixDQUFDO0tBQ0w7O2dCQTlESixVQUFVOzs7O2dCQUpGLGtCQUFrQjtnQkFDbEIsc0JBQXNCOzs4QkFyQi9COztTQXlCYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlUGFnaW5nIH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZXMuc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmF2b3JpdGVzQXBpU2VydmljZSB7XG5cbiAgICBzdGF0aWMgcmVtYXBFbnRyeSh7IGVudHJ5IH06IGFueSk6IGFueSB7XG4gICAgICAgIGVudHJ5LnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAnY206dGl0bGUnOiBlbnRyeS50aXRsZSxcbiAgICAgICAgICAgICdjbTpkZXNjcmlwdGlvbic6IGVudHJ5LmRlc2NyaXB0aW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHsgZW50cnkgfTtcbiAgICB9XG5cbiAgICByZW1hcEZhdm9yaXRlc0RhdGEoZGF0YTogYW55ID0ge30pOiBOb2RlUGFnaW5nIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IChkYXRhLmxpc3QgfHwge30pO1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0gKGxpc3QucGFnaW5hdGlvbiB8fCB7fSk7XG4gICAgICAgIGNvbnN0IGVudHJpZXM6IGFueVtdID0gdGhpc1xuICAgICAgICAgICAgLnJlbWFwRmF2b3JpdGVFbnRyaWVzKGxpc3QuZW50cmllcyB8fCBbXSk7XG5cbiAgICAgICAgcmV0dXJuIDxOb2RlUGFnaW5nPiB7XG4gICAgICAgICAgICBsaXN0OiB7IGVudHJpZXMsIHBhZ2luYXRpb24gfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbWFwRmF2b3JpdGVFbnRyaWVzKGVudHJpZXM6IGFueVtdKSB7XG4gICAgICAgIHJldHVybiBlbnRyaWVzXG4gICAgICAgICAgICAubWFwKCh7IGVudHJ5OiB7IHRhcmdldCB9fTogYW55KSA9PiAoe1xuICAgICAgICAgICAgICAgIGVudHJ5OiB0YXJnZXQuZmlsZSB8fCB0YXJnZXQuZm9sZGVyXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHsgZW50cnkgfSkgPT4gKCEhZW50cnkpKVxuICAgICAgICAgICAgLm1hcChGYXZvcml0ZXNBcGlTZXJ2aWNlLnJlbWFwRW50cnkpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzU2VydmljZVxuICAgICkge31cblxuICAgIHByaXZhdGUgZ2V0IGZhdm9yaXRlc0FwaSgpIHtcbiAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS5mYXZvcml0ZXNBcGk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmF2b3JpdGVzIGZvciBhIHVzZXIuXG4gICAgICogQHBhcmFtIHBlcnNvbklkIElEIG9mIHRoZSB1c2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBzdXBwb3J0ZWQgYnkgSlNBUElcbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIGZhdm9yaXRlc1xuICAgICAqL1xuICAgIGdldEZhdm9yaXRlcyhwZXJzb25JZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxOb2RlUGFnaW5nPiB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMucHJlZmVyZW5jZXMucGFnaW5hdGlvblNpemUsXG4gICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICB3aGVyZTogJyhFWElTVFModGFyZ2V0L2ZpbGUpIE9SIEVYSVNUUyh0YXJnZXQvZm9sZGVyKSknLFxuICAgICAgICAgICAgaW5jbHVkZTogWyAncHJvcGVydGllcycsICdhbGxvd2FibGVPcGVyYXRpb25zJyBdXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5mYXZvcml0ZXNBcGlcbiAgICAgICAgICAgIC5nZXRGYXZvcml0ZXMocGVyc29uSWQsIHF1ZXJ5T3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKHRoaXMucmVtYXBGYXZvcml0ZXNEYXRhKTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gb2YoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=