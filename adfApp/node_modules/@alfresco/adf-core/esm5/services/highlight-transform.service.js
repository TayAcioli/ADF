/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @record
 */
export function HightlightTransformResult() { }
/** @type {?} */
HightlightTransformResult.prototype.text;
/** @type {?} */
HightlightTransformResult.prototype.changed;
var HighlightTransformService = /** @class */ (function () {
    function HighlightTransformService() {
    }
    /**
     * Searches for `search` string(s) within `text` and highlights all occurrences.
     * @param {?} text Text to search within
     * @param {?} search Text pattern to search for
     * @param {?=} wrapperClass CSS class used to provide highlighting style
     * @return {?} New text along with boolean value to indicate whether anything was highlighted
     */
    HighlightTransformService.prototype.highlight = /**
     * Searches for `search` string(s) within `text` and highlights all occurrences.
     * @param {?} text Text to search within
     * @param {?} search Text pattern to search for
     * @param {?=} wrapperClass CSS class used to provide highlighting style
     * @return {?} New text along with boolean value to indicate whether anything was highlighted
     */
    function (text, search, wrapperClass) {
        if (wrapperClass === void 0) { wrapperClass = 'highlight'; }
        /** @type {?} */
        var isMatching = false;
        /** @type {?} */
        var result = text;
        if (search && text) {
            /** @type {?} */
            var pattern = search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
            pattern = pattern.split(' ').filter(function (t) {
                return t.length > 0;
            }).join('|');
            /** @type {?} */
            var regex = new RegExp(pattern, 'gi');
            result = text.replace(regex, function (match) {
                isMatching = true;
                return "<span class=\"" + wrapperClass + "\">" + match + "</span>";
            });
            return { text: result, changed: isMatching };
        }
        else {
            return { text: result, changed: isMatching };
        }
    };
    return HighlightTransformService;
}());
export { HighlightTransformService };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LXRyYW5zZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvaGlnaGxpZ2h0LXRyYW5zZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkEsSUFBQTs7Ozs7Ozs7OztJQVNXLDZDQUFTOzs7Ozs7O2NBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxZQUFrQztRQUFsQyw2QkFBQSxFQUFBLDBCQUFrQzs7UUFDN0UsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUNKOztRQURsQixJQUNJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFOztZQUNoQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLHFDQUFxQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzVFLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDdkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFFYixJQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQUMsS0FBSztnQkFDL0IsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDbEIsT0FBTyxtQkFBZ0IsWUFBWSxXQUFLLEtBQUssWUFBUyxDQUFDO2FBQzFELENBQUMsQ0FBQztZQUNILE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztTQUNoRDthQUFNO1lBQ0gsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDO1NBQ2hEOztvQ0FqRFQ7SUFtREMsQ0FBQTtBQTdCRCxxQ0E2QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2h0bGlnaHRUcmFuc2Zvcm1SZXN1bHQge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBjaGFuZ2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0VHJhbnNmb3JtU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3IgYHNlYXJjaGAgc3RyaW5nKHMpIHdpdGhpbiBgdGV4dGAgYW5kIGhpZ2hsaWdodHMgYWxsIG9jY3VycmVuY2VzLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRleHQgdG8gc2VhcmNoIHdpdGhpblxuICAgICAqIEBwYXJhbSBzZWFyY2ggVGV4dCBwYXR0ZXJuIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gd3JhcHBlckNsYXNzIENTUyBjbGFzcyB1c2VkIHRvIHByb3ZpZGUgaGlnaGxpZ2h0aW5nIHN0eWxlXG4gICAgICogQHJldHVybnMgTmV3IHRleHQgYWxvbmcgd2l0aCBib29sZWFuIHZhbHVlIHRvIGluZGljYXRlIHdoZXRoZXIgYW55dGhpbmcgd2FzIGhpZ2hsaWdodGVkXG4gICAgICovXG4gICAgcHVibGljIGhpZ2hsaWdodCh0ZXh0OiBzdHJpbmcsIHNlYXJjaDogc3RyaW5nLCB3cmFwcGVyQ2xhc3M6IHN0cmluZyA9ICdoaWdobGlnaHQnKTogSGlnaHRsaWdodFRyYW5zZm9ybVJlc3VsdCB7XG4gICAgICAgIGxldCBpc01hdGNoaW5nID0gZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQgPSB0ZXh0O1xuXG4gICAgICAgIGlmIChzZWFyY2ggJiYgdGV4dCkge1xuICAgICAgICAgICAgbGV0IHBhdHRlcm4gPSBzZWFyY2gucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csICdcXFxcJCYnKTtcbiAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNwbGl0KCcgJykuZmlsdGVyKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIH0pLmpvaW4oJ3wnKTtcblxuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm4sICdnaScpO1xuICAgICAgICAgICAgcmVzdWx0ID0gdGV4dC5yZXBsYWNlKHJlZ2V4LCAobWF0Y2gpID0+IHtcbiAgICAgICAgICAgICAgICBpc01hdGNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiJHt3cmFwcGVyQ2xhc3N9XCI+JHttYXRjaH08L3NwYW4+YDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdGV4dDogcmVzdWx0LCBjaGFuZ2VkOiBpc01hdGNoaW5nIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyB0ZXh0OiByZXN1bHQsIGNoYW5nZWQ6IGlzTWF0Y2hpbmcgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==