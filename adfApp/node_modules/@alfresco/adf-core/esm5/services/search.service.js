/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { SearchConfigurationService } from './search-configuration.service';
import { catchError } from 'rxjs/operators';
var SearchService = /** @class */ (function () {
    function SearchService(apiService, searchConfigurationService) {
        this.apiService = apiService;
        this.searchConfigurationService = searchConfigurationService;
        this.dataLoaded = new Subject();
    }
    /**
     * @param {?} term
     * @param {?=} options
     * @return {?}
     */
    SearchService.prototype.getNodeQueryResults = /**
     * @param {?} term
     * @param {?=} options
     * @return {?}
     */
    function (term, options) {
        var _this = this;
        /** @type {?} */
        var promise = this.apiService.getInstance().core.queriesApi.findNodes(term, options);
        promise.then(function (data) {
            _this.dataLoaded.next(data);
        });
        return from(promise).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} searchTerm
     * @param {?} maxResults
     * @param {?} skipCount
     * @return {?}
     */
    SearchService.prototype.search = /**
     * @param {?} searchTerm
     * @param {?} maxResults
     * @param {?} skipCount
     * @return {?}
     */
    function (searchTerm, maxResults, skipCount) {
        var _this = this;
        /** @type {?} */
        var searchQuery = Object.assign(this.searchConfigurationService.generateQueryBody(searchTerm, maxResults, skipCount));
        /** @type {?} */
        var promise = this.apiService.getInstance().search.searchApi.search(searchQuery);
        promise.then(function (data) {
            _this.dataLoaded.next(data);
        });
        return from(promise).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} queryBody
     * @return {?}
     */
    SearchService.prototype.searchByQueryBody = /**
     * @param {?} queryBody
     * @return {?}
     */
    function (queryBody) {
        var _this = this;
        /** @type {?} */
        var promise = this.apiService.getInstance().search.searchApi.search(queryBody);
        promise.then(function (data) {
            _this.dataLoaded.next(data);
        });
        return from(promise).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} error
     * @return {?}
     */
    SearchService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return throwError(error || 'Server error');
    };
    SearchService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SearchService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: SearchConfigurationService }
    ]; };
    return SearchService;
}());
export { SearchService };
if (false) {
    /** @type {?} */
    SearchService.prototype.dataLoaded;
    /** @type {?} */
    SearchService.prototype.apiService;
    /** @type {?} */
    SearchService.prototype.searchConfigurationService;
}
/**
 * @record
 */
export function SearchOptions() { }
/** @type {?|undefined} */
SearchOptions.prototype.skipCount;
/** @type {?|undefined} */
SearchOptions.prototype.maxItems;
/** @type {?|undefined} */
SearchOptions.prototype.rootNodeId;
/** @type {?|undefined} */
SearchOptions.prototype.nodeType;
/** @type {?|undefined} */
SearchOptions.prototype.include;
/** @type {?|undefined} */
SearchOptions.prototype.orderBy;
/** @type {?|undefined} */
SearchOptions.prototype.fields;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9zZWFyY2guc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBT3hDLHVCQUFvQixVQUE4QixFQUM5QjtRQURBLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLCtCQUEwQixHQUExQiwwQkFBMEI7MEJBSFosSUFBSSxPQUFPLEVBQUU7S0FJOUM7Ozs7OztJQUVELDJDQUFtQjs7Ozs7SUFBbkIsVUFBb0IsSUFBWSxFQUFFLE9BQXVCO1FBQXpELGlCQVVDOztRQVRHLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXZGLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFTO1lBQ25CLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsQ0FBQyxDQUMzQyxDQUFDO0tBQ0w7Ozs7Ozs7SUFFRCw4QkFBTTs7Ozs7O0lBQU4sVUFBTyxVQUFrQixFQUFFLFVBQWtCLEVBQUUsU0FBaUI7UUFBaEUsaUJBV0M7O1FBVkcsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDOztRQUN4SCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRW5GLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFTO1lBQ25CLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckIsVUFBVSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsQ0FBQyxDQUMzQyxDQUFDO0tBQ0w7Ozs7O0lBRUQseUNBQWlCOzs7O0lBQWpCLFVBQWtCLFNBQW9CO1FBQXRDLGlCQVVDOztRQVRHLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakYsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQVM7WUFDbkIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNyQixVQUFVLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQzNDLENBQUM7S0FDTDs7Ozs7SUFFTyxtQ0FBVzs7OztjQUFDLEtBQVU7UUFDMUIsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDOzs7Z0JBL0NsRCxVQUFVOzs7O2dCQUpGLGtCQUFrQjtnQkFDbEIsMEJBQTBCOzt3QkFyQm5DOztTQXlCYSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZywgUXVlcnlCb2R5IH0gZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIGZyb20sIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4vYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL3NlYXJjaC1jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlYXJjaFNlcnZpY2Uge1xuXG4gICAgZGF0YUxvYWRlZDogU3ViamVjdDxOb2RlUGFnaW5nPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHNlYXJjaENvbmZpZ3VyYXRpb25TZXJ2aWNlOiBTZWFyY2hDb25maWd1cmF0aW9uU2VydmljZSkge1xuICAgIH1cblxuICAgIGdldE5vZGVRdWVyeVJlc3VsdHModGVybTogc3RyaW5nLCBvcHRpb25zPzogU2VhcmNoT3B0aW9ucyk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS5xdWVyaWVzQXBpLmZpbmROb2Rlcyh0ZXJtLCBvcHRpb25zKTtcblxuICAgICAgICBwcm9taXNlLnRoZW4oKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhTG9hZGVkLm5leHQoZGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmcm9tKHByb21pc2UpLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc2VhcmNoKHNlYXJjaFRlcm06IHN0cmluZywgbWF4UmVzdWx0czogbnVtYmVyLCBza2lwQ291bnQ6IG51bWJlcik6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuICAgICAgICBjb25zdCBzZWFyY2hRdWVyeSA9IE9iamVjdC5hc3NpZ24odGhpcy5zZWFyY2hDb25maWd1cmF0aW9uU2VydmljZS5nZW5lcmF0ZVF1ZXJ5Qm9keShzZWFyY2hUZXJtLCBtYXhSZXN1bHRzLCBza2lwQ291bnQpKTtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLnNlYXJjaC5zZWFyY2hBcGkuc2VhcmNoKHNlYXJjaFF1ZXJ5KTtcblxuICAgICAgICBwcm9taXNlLnRoZW4oKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhTG9hZGVkLm5leHQoZGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmcm9tKHByb21pc2UpLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc2VhcmNoQnlRdWVyeUJvZHkocXVlcnlCb2R5OiBRdWVyeUJvZHkpOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLnNlYXJjaC5zZWFyY2hBcGkuc2VhcmNoKHF1ZXJ5Qm9keSk7XG5cbiAgICAgICAgcHJvbWlzZS50aGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxvYWRlZC5uZXh0KGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoT3B0aW9ucyB7XG4gICAgc2tpcENvdW50PzogbnVtYmVyO1xuICAgIG1heEl0ZW1zPzogbnVtYmVyO1xuICAgIHJvb3ROb2RlSWQ/OiBzdHJpbmc7XG4gICAgbm9kZVR5cGU/OiBzdHJpbmc7XG4gICAgaW5jbHVkZT86IHN0cmluZ1tdO1xuICAgIG9yZGVyQnk/OiBzdHJpbmc7XG4gICAgZmllbGRzPzogc3RyaW5nW107XG59XG4iXX0=