/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { LoginDialogComponent } from '../login/components/login-dialog.component';
var LoginDialogService = /** @class */ (function () {
    function LoginDialogService(dialog) {
        this.dialog = dialog;
    }
    /**
     * Opens a dialog to choose a file to upload.
     * @param action Name of the action to show in the title
     * @param contentEntry Item to upload
     * @returns Information about the chosen file(s)
     */
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} actionName
     * @param {?} title
     * @return {?} Information about the chosen file(s)
     */
    LoginDialogService.prototype.openLogin = /**
     * Opens a dialog to choose a file to upload.
     * @param {?} actionName
     * @param {?} title
     * @return {?} Information about the chosen file(s)
     */
    function (actionName, title) {
        /** @type {?} */
        var logged = new Subject();
        logged.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: title,
            actionName: actionName,
            logged: logged
        };
        this.openLoginDialog(data, 'adf-login-dialog', '630px');
        return logged;
    };
    /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    LoginDialogService.prototype.openLoginDialog = /**
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(LoginDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /** Closes the currently open dialog. */
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    LoginDialogService.prototype.close = /**
     * Closes the currently open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    LoginDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoginDialogService.ctorParameters = function () { return [
        { type: MatDialog }
    ]; };
    return LoginDialogService;
}());
export { LoginDialogService };
if (false) {
    /** @type {?} */
    LoginDialogService.prototype.dialog;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9sb2dpbi1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDOztJQU05RSw0QkFBb0IsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztLQUNwQztJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0gsc0NBQVM7Ozs7OztJQUFULFVBQVUsVUFBa0IsRUFBRSxLQUFhOztRQUN2QyxJQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2xDLENBQUMsQ0FBQzs7UUFFSCxJQUFNLElBQUksR0FBNkI7WUFDbkMsS0FBSyxPQUFBO1lBQ0wsVUFBVSxZQUFBO1lBQ1YsTUFBTSxRQUFBO1NBQ1QsQ0FBQztRQUVGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELE9BQU8sTUFBTSxDQUFDO0tBQ2pCOzs7Ozs7O0lBRU8sNENBQWU7Ozs7OztjQUFDLElBQThCLEVBQUUsaUJBQXlCLEVBQUUsV0FBbUI7UUFDbEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7O0lBR3hHLHdDQUF3Qzs7Ozs7SUFDeEMsa0NBQUs7Ozs7SUFBTDtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDMUI7O2dCQW5DSixVQUFVOzs7O2dCQU5GLFNBQVM7OzZCQWpCbEI7O1NBd0JhLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvZ2luRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vbG9naW4vY29tcG9uZW50cy9sb2dpbi1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luRGlhbG9nQ29tcG9uZW50RGF0YSB9IGZyb20gJy4uL2xvZ2luL2NvbXBvbmVudHMvbG9naW4tZGlhbG9nLWNvbXBvbmVudC1kYXRhLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2dpbkRpYWxvZ1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZykge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgZGlhbG9nIHRvIGNob29zZSBhIGZpbGUgdG8gdXBsb2FkLlxuICAgICAqIEBwYXJhbSBhY3Rpb24gTmFtZSBvZiB0aGUgYWN0aW9uIHRvIHNob3cgaW4gdGhlIHRpdGxlXG4gICAgICogQHBhcmFtIGNvbnRlbnRFbnRyeSBJdGVtIHRvIHVwbG9hZFxuICAgICAqIEByZXR1cm5zIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjaG9zZW4gZmlsZShzKVxuICAgICAqL1xuICAgIG9wZW5Mb2dpbihhY3Rpb25OYW1lOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBsb2dnZWQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gICAgICAgIGxvZ2dlZC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgY29tcGxldGU6IHRoaXMuY2xvc2UuYmluZCh0aGlzKVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkYXRhOiBMb2dpbkRpYWxvZ0NvbXBvbmVudERhdGEgPSB7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGFjdGlvbk5hbWUsXG4gICAgICAgICAgICBsb2dnZWRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm9wZW5Mb2dpbkRpYWxvZyhkYXRhLCAnYWRmLWxvZ2luLWRpYWxvZycsICc2MzBweCcpO1xuICAgICAgICByZXR1cm4gbG9nZ2VkO1xuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbkxvZ2luRGlhbG9nKGRhdGE6IExvZ2luRGlhbG9nQ29tcG9uZW50RGF0YSwgY3VycmVudFBhbmVsQ2xhc3M6IHN0cmluZywgY2hvc2VuV2lkdGg6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRpYWxvZy5vcGVuKExvZ2luRGlhbG9nQ29tcG9uZW50LCB7IGRhdGEsIHBhbmVsQ2xhc3M6IGN1cnJlbnRQYW5lbENsYXNzLCB3aWR0aDogY2hvc2VuV2lkdGggfSk7XG4gICAgfVxuXG4gICAgLyoqIENsb3NlcyB0aGUgY3VycmVudGx5IG9wZW4gZGlhbG9nLiAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZUFsbCgpO1xuICAgIH1cblxufVxuIl19