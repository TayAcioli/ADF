/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as alfrescoApi from 'alfresco-js-api';
var ExternalAlfrescoApiService = /** @class */ (function () {
    function ExternalAlfrescoApiService() {
    }
    /**
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.alfrescoApi;
    };
    Object.defineProperty(ExternalAlfrescoApiService.prototype, "contentApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExternalAlfrescoApiService.prototype, "nodesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().nodes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ecmHost
     * @param {?} contextRoot
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.init = /**
     * @param {?} ecmHost
     * @param {?} contextRoot
     * @return {?}
     */
    function (ecmHost, contextRoot) {
        /** @type {?} */
        var domainPrefix = this.createPrefixFromHost(ecmHost);
        /** @type {?} */
        var config = {
            provider: 'ECM',
            hostEcm: ecmHost,
            authType: 'BASIC',
            contextRoot: contextRoot,
            domainPrefix: domainPrefix
        };
        this.initAlfrescoApi(config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.initAlfrescoApi = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = /** @type {?} */ (new alfrescoApi(config));
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.createPrefixFromHost = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
        /** @type {?} */
        var result = null;
        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
            result = match[2];
        }
        return result;
    };
    ExternalAlfrescoApiService.decorators = [
        { type: Injectable }
    ];
    return ExternalAlfrescoApiService;
}());
export { ExternalAlfrescoApiService };
if (false) {
    /** @type {?} */
    ExternalAlfrescoApiService.prototype.alfrescoApi;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYWxmcmVzY28tYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9leHRlcm5hbC1hbGZyZXNjby1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNDLE9BQU8sS0FBSyxXQUFXLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7SUFRM0MsZ0RBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0tBQzNCO0lBRUQsc0JBQUksa0RBQVU7Ozs7UUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUNyQzs7O09BQUE7SUFFRCxzQkFBSSxnREFBUTs7OztRQUFaO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDO1NBQ25DOzs7T0FBQTs7Ozs7O0lBRUQseUNBQUk7Ozs7O0lBQUosVUFBSyxPQUFlLEVBQUUsV0FBbUI7O1FBRXJDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7UUFFdEQsSUFBTSxNQUFNLEdBQUc7WUFDWCxRQUFRLEVBQUUsS0FBSztZQUNmLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLFlBQVksY0FBQTtTQUNmLENBQUM7UUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2hDOzs7OztJQUVTLG9EQUFlOzs7O0lBQXpCLFVBQTBCLE1BQU07UUFDNUIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNDO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxxQkFBaUIsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztTQUM1RDtLQUNKOzs7OztJQUVPLHlEQUFvQjs7OztjQUFDLEdBQVc7O1FBQ3BDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQzs7UUFDdkQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUYsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtRQUNELE9BQU8sTUFBTSxDQUFDOzs7Z0JBN0NyQixVQUFVOztxQ0ExQlg7O1NBMkJhLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWxmcmVzY29BcGksXG4gICAgQ29udGVudEFwaSxcbiAgICBOb2Rlc0FwaVxufSBmcm9tICdhbGZyZXNjby1qcy1hcGknO1xuaW1wb3J0ICogYXMgYWxmcmVzY29BcGkgZnJvbSAnYWxmcmVzY28tanMtYXBpJztcbi8qIHRzbGludDpkaXNhYmxlOmFkZi1maWxlLW5hbWUgKi9cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV4dGVybmFsQWxmcmVzY29BcGlTZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBhbGZyZXNjb0FwaTogQWxmcmVzY29BcGk7XG5cbiAgICBnZXRJbnN0YW5jZSgpOiBBbGZyZXNjb0FwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvQXBpO1xuICAgIH1cblxuICAgIGdldCBjb250ZW50QXBpKCk6IENvbnRlbnRBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IG5vZGVzQXBpKCk6IE5vZGVzQXBpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5zdGFuY2UoKS5ub2RlcztcbiAgICB9XG5cbiAgICBpbml0KGVjbUhvc3Q6IHN0cmluZywgY29udGV4dFJvb3Q6IHN0cmluZykge1xuXG4gICAgICAgIGxldCBkb21haW5QcmVmaXggPSB0aGlzLmNyZWF0ZVByZWZpeEZyb21Ib3N0KGVjbUhvc3QpO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiAnRUNNJyxcbiAgICAgICAgICAgIGhvc3RFY206IGVjbUhvc3QsXG4gICAgICAgICAgICBhdXRoVHlwZTogJ0JBU0lDJyxcbiAgICAgICAgICAgIGNvbnRleHRSb290OiBjb250ZXh0Um9vdCxcbiAgICAgICAgICAgIGRvbWFpblByZWZpeFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluaXRBbGZyZXNjb0FwaShjb25maWcpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0QWxmcmVzY29BcGkoY29uZmlnKSB7XG4gICAgICAgIGlmICh0aGlzLmFsZnJlc2NvQXBpKSB7XG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpLmNvbmZpZ3VyZUpzQXBpKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpID0gPEFsZnJlc2NvQXBpPiBuZXcgYWxmcmVzY29BcGkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUHJlZml4RnJvbUhvc3QodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgbWF0Y2ggPSB1cmwubWF0Y2goLzpcXC9cXC8od3d3WzAtOV0/XFwuKT8oLlteLzpdKykvaSk7XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBpZiAobWF0Y2ggIT0gbnVsbCAmJiBtYXRjaC5sZW5ndGggPiAyICYmIHR5cGVvZiBtYXRjaFsyXSA9PT0gJ3N0cmluZycgJiYgbWF0Y2hbMl0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbWF0Y2hbMl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXX0=