/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { CommentModel } from '../models/comment.model';
import { UserProcessModel } from '../models/user-process.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { map, catchError } from 'rxjs/operators';
var CommentProcessService = /** @class */ (function () {
    function CommentProcessService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Adds a comment to a task.
     * @param taskId ID of the target task
     * @param message Text for the comment
     * @returns Details about the comment
     */
    /**
     * Adds a comment to a task.
     * @param {?} taskId ID of the target task
     * @param {?} message Text for the comment
     * @return {?} Details about the comment
     */
    CommentProcessService.prototype.addTaskComment = /**
     * Adds a comment to a task.
     * @param {?} taskId ID of the target task
     * @param {?} message Text for the comment
     * @return {?} Details about the comment
     */
    function (taskId, message) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.taskApi.addTaskComment({ message: message }, taskId))
            .pipe(map(function (response) {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all comments that have been added to a task.
     * @param taskId ID of the target task
     * @returns Details for each comment
     */
    /**
     * Gets all comments that have been added to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Details for each comment
     */
    CommentProcessService.prototype.getTaskComments = /**
     * Gets all comments that have been added to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Details for each comment
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.taskApi.getTaskComments(taskId))
            .pipe(map(function (response) {
            /** @type {?} */
            var comments = [];
            response.data.forEach(function (comment) {
                /** @type {?} */
                var user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({ id: comment.id, message: comment.message, created: comment.created, createdBy: user }));
            });
            return comments;
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all comments that have been added to a process instance.
     * @param processInstanceId ID of the target process instance
     * @returns Details for each comment
     */
    /**
     * Gets all comments that have been added to a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @return {?} Details for each comment
     */
    CommentProcessService.prototype.getProcessInstanceComments = /**
     * Gets all comments that have been added to a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @return {?} Details for each comment
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.commentsApi.getProcessInstanceComments(processInstanceId))
            .pipe(map(function (response) {
            /** @type {?} */
            var comments = [];
            response.data.forEach(function (comment) {
                /** @type {?} */
                var user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({ id: comment.id, message: comment.message, created: comment.created, createdBy: user }));
            });
            return comments;
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Adds a comment to a process instance.
     * @param processInstanceId ID of the target process instance
     * @param message Text for the comment
     * @returns Details of the comment added
     */
    /**
     * Adds a comment to a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @param {?} message Text for the comment
     * @return {?} Details of the comment added
     */
    CommentProcessService.prototype.addProcessInstanceComment = /**
     * Adds a comment to a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @param {?} message Text for the comment
     * @return {?} Details of the comment added
     */
    function (processInstanceId, message) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.commentsApi.addProcessInstanceComment({ message: message }, processInstanceId)).pipe(map(function (response) {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} error
     * @return {?}
     */
    CommentProcessService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    CommentProcessService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommentProcessService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    return CommentProcessService;
}());
export { CommentProcessService };
if (false) {
    /** @type {?} */
    CommentProcessService.prototype.apiService;
    /** @type {?} */
    CommentProcessService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,