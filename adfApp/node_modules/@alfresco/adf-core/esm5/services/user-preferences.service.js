/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { distinctUntilChanged, map } from 'rxjs/operators';
/** @enum {string} */
var UserPreferenceValues = {
    PaginationSize: 'PAGINATION_SIZE',
    Locale: 'LOCALE',
    SupportedPageSizes: 'supportedPageSizes',
};
export { UserPreferenceValues };
var UserPreferencesService = /** @class */ (function () {
    function UserPreferencesService(translate, appConfig, storage) {
        this.translate = translate;
        this.appConfig = appConfig;
        this.storage = storage;
        this.defaults = {
            paginationSize: 25,
            supportedPageSizes: [5, 10, 15, 20],
            locale: 'en'
        };
        this.userPreferenceStatus = this.defaults;
        this.appConfig.onLoad.subscribe(this.initUserPreferenceStatus.bind(this));
        this.localeSubject = new BehaviorSubject(this.get(UserPreferenceValues.Locale, this.getDefaultLocale()));
        this.locale$ = this.localeSubject.asObservable();
        this.onChangeSubject = new BehaviorSubject(this.userPreferenceStatus);
        this.onChange = this.onChangeSubject.asObservable();
    }
    /**
     * @return {?}
     */
    UserPreferencesService.prototype.initUserPreferenceStatus = /**
     * @return {?}
     */
    function () {
        this.userPreferenceStatus[UserPreferenceValues.Locale] = this.locale || this.getDefaultLocale();
        this.userPreferenceStatus[UserPreferenceValues.PaginationSize] = this.appConfig.get('pagination.size', this.defaults.paginationSize);
        this.userPreferenceStatus[UserPreferenceValues.SupportedPageSizes] = this.appConfig.get('pagination.supportedPageSizes', this.defaults.supportedPageSizes);
    };
    /**
     * Sets up a callback to notify when a property has changed.
     * @param property The property to watch
     * @returns Notification callback
     */
    /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    UserPreferencesService.prototype.select = /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    function (property) {
        return this.onChange
            .pipe(map(function (userPreferenceStatus) { return userPreferenceStatus[property]; }), distinctUntilChanged());
    };
    /**
     * Gets a preference property.
     * @param property Name of the property
     * @param defaultValue Default to return if the property is not found
     * @returns Preference property
     */
    /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    UserPreferencesService.prototype.get = /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    function (property, defaultValue) {
        /** @type {?} */
        var key = this.getPropertyKey(property);
        /** @type {?} */
        var value = this.storage.getItem(key);
        if (value === undefined || value === null) {
            return defaultValue;
        }
        return value;
    };
    /**
     * Sets a preference property.
     * @param property Name of the property
     * @param value New value for the property
     */
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    UserPreferencesService.prototype.set = /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    function (property, value) {
        if (!property) {
            return;
        }
        this.storage.setItem(this.getPropertyKey(property), value);
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    };
    /**
     * Check if an item is present in the storage
     * @param property Name of the property
     * @returns True if the item is present, false otherwise
     */
    /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    UserPreferencesService.prototype.hasItem = /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    function (property) {
        if (!property) {
            return;
        }
        return this.storage.hasItem(this.getPropertyKey(property));
    };
    /**
     * Gets the active storage prefix for preferences.
     * @returns Storage prefix
     */
    /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    UserPreferencesService.prototype.getStoragePrefix = /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    function () {
        return this.storage.getItem('USER_PROFILE') || 'GUEST';
    };
    /**
     * Sets the active storage prefix for preferences.
     * @param value Name of the prefix
     */
    /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    UserPreferencesService.prototype.setStoragePrefix = /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    function (value) {
        this.storage.setItem('USER_PROFILE', value || 'GUEST');
    };
    /**
     * Gets the full property key with prefix.
     * @param property The property name
     * @returns Property key
     */
    /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    UserPreferencesService.prototype.getPropertyKey = /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    function (property) {
        return this.getStoragePrefix() + "__" + property;
    };
    /**
     * Gets an array containing the available page sizes.
     * @returns Array of page size values
     */
    /**
     * Gets an array containing the available page sizes.
     * @return {?} Array of page size values
     */
    UserPreferencesService.prototype.getDefaultPageSizes = /**
     * Gets an array containing the available page sizes.
     * @return {?} Array of page size values
     */
    function () {
        return this.userPreferenceStatus[UserPreferenceValues.SupportedPageSizes];
    };
    Object.defineProperty(UserPreferencesService.prototype, "paginationSize", {
        get: /**
         * @return {?}
         */
        function () {
            return Number(this.get(UserPreferenceValues.PaginationSize, this.userPreferenceStatus[UserPreferenceValues.PaginationSize])) || this.defaults.paginationSize;
        },
        /** Pagination size. */
        set: /**
         * Pagination size.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.PaginationSize, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserPreferencesService.prototype, "locale", {
        /** Current locale setting. */
        get: /**
         * Current locale setting.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var locale = this.get(UserPreferenceValues.Locale, this.userPreferenceStatus[UserPreferenceValues.Locale]);
            return locale;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.localeSubject.next(value);
            this.set(UserPreferenceValues.Locale, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    UserPreferencesService.prototype.getDefaultLocale = /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    function () {
        return this.appConfig.get('locale') || this.translate.getBrowserLang() || 'en';
    };
    UserPreferencesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UserPreferencesService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: AppConfigService },
        { type: StorageService }
    ]; };
    return UserPreferencesService;
}());
export { UserPreferencesService };
if (false) {
    /** @type {?} */
    UserPreferencesService.prototype.defaults;
    /** @type {?} */
    UserPreferencesService.prototype.userPreferenceStatus;
    /**
     * @deprecated we are grouping every value changed on the user preference in a single stream : userPreferenceValue$
     * @type {?}
     */
    UserPreferencesService.prototype.locale$;
    /** @type {?} */
    UserPreferencesService.prototype.localeSubject;
    /** @type {?} */
    UserPreferencesService.prototype.onChangeSubject;
    /** @type {?} */
    UserPreferencesService.prototype.onChange;
    /** @type {?} */
    UserPreferencesService.prototype.translate;
    /** @type {?} */
    UserPreferencesService.prototype.appConfig;
    /** @type {?} */
    UserPreferencesService.prototype.storage;
}

//# sourceMappingURL=data:application/json;base64,