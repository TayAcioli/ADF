/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable, from, interval } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { concatMap, switchMap, takeWhile } from 'rxjs/operators';
/**
 * @deprecated
 * RenditionsService
 * (this service is deprecated in 2.2.0 and will be removed in future revisions)
 */
var RenditionsService = /** @class */ (function () {
    function RenditionsService(apiService) {
        this.apiService = apiService;
    }
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    RenditionsService.prototype.isRenditionAvailable = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    function (nodeId, encoding) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.getRendition(nodeId, encoding).subscribe(function (res) {
                /** @type {?} */
                var isAvailable = true;
                if (res.entry.status.toString() === 'NOT_CREATED') {
                    isAvailable = false;
                }
                observer.next(isAvailable);
                observer.complete();
            }, function () {
                observer.next(false);
                observer.complete();
            });
        });
    };
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    RenditionsService.prototype.isConversionPossible = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    function (nodeId, encoding) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.getRendition(nodeId, encoding).subscribe(function () {
                observer.next(true);
                observer.complete();
            }, function () {
                observer.next(false);
                observer.complete();
            });
        });
    };
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    RenditionsService.prototype.getRenditionUrl = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    function (nodeId, encoding) {
        return this.apiService.contentApi.getRenditionUrl(nodeId, encoding);
    };
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    RenditionsService.prototype.getRendition = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    function (nodeId, encoding) {
        return from(this.apiService.renditionsApi.getRendition(nodeId, encoding));
    };
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @return {?}
     */
    RenditionsService.prototype.getRenditionsListByNodeId = /**
     * @deprecated
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId));
    };
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    RenditionsService.prototype.createRendition = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @return {?}
     */
    function (nodeId, encoding) {
        return from(this.apiService.renditionsApi.createRendition(nodeId, { id: encoding }));
    };
    /** @deprecated */
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} pollingInterval
     * @param {?=} retries
     * @return {?}
     */
    RenditionsService.prototype.convert = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} pollingInterval
     * @param {?=} retries
     * @return {?}
     */
    function (nodeId, encoding, pollingInterval, retries) {
        var _this = this;
        if (pollingInterval === void 0) { pollingInterval = 1000; }
        if (retries === void 0) { retries = 5; }
        return this.createRendition(nodeId, encoding)
            .pipe(concatMap(function () { return _this.pollRendition(nodeId, encoding, pollingInterval, retries); }));
    };
    /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} intervalSize
     * @param {?=} retries
     * @return {?}
     */
    RenditionsService.prototype.pollRendition = /**
     * @deprecated
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} intervalSize
     * @param {?=} retries
     * @return {?}
     */
    function (nodeId, encoding, intervalSize, retries) {
        var _this = this;
        if (intervalSize === void 0) { intervalSize = 1000; }
        if (retries === void 0) { retries = 5; }
        /** @type {?} */
        var attempts = 0;
        return interval(intervalSize)
            .pipe(switchMap(function () { return _this.getRendition(nodeId, encoding); }), takeWhile(function (data) {
            attempts += 1;
            if (attempts > retries) {
                return false;
            }
            return (data.entry.status.toString() !== 'CREATED');
        }));
    };
    RenditionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RenditionsService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    return RenditionsService;
}());
export { RenditionsService };
if (false) {
    /** @type {?} */
    RenditionsService.prototype.apiService;
}

//# sourceMappingURL=data:application/json;base64,