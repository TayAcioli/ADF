/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, throwError, of } from 'rxjs';
import { ComponentTranslationModel } from '../models/component.model';
import { ObjectUtils } from '../utils/object-utils';
import { map, catchError, retry } from 'rxjs/operators';
var TranslateLoaderService = /** @class */ (function () {
    function TranslateLoaderService(http) {
        this.http = http;
        this.prefix = 'i18n';
        this.suffix = '.json';
        this.providers = [];
        this.queue = [];
    }
    /**
     * @param {?} name
     * @param {?} path
     * @return {?}
     */
    TranslateLoaderService.prototype.registerProvider = /**
     * @param {?} name
     * @param {?} path
     * @return {?}
     */
    function (name, path) {
        /** @type {?} */
        var registered = this.providers.find(function (provider) { return provider.name === name; });
        if (registered) {
            registered.path = path;
        }
        else {
            this.providers.push(new ComponentTranslationModel({ name: name, path: path }));
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    TranslateLoaderService.prototype.providerRegistered = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.providers.find(function (x) { return x.name === name; }) ? true : false;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.getComponentToFetch = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var _this = this;
        /** @type {?} */
        var observableBatch = [];
        if (!this.queue[lang]) {
            this.queue[lang] = [];
        }
        this.providers.forEach(function (component) {
            if (!_this.isComponentInQueue(lang, component.name)) {
                _this.queue[lang].push(component.name);
                /** @type {?} */
                var translationUrl_1 = component.path + "/" + _this.prefix + "/" + lang + _this.suffix + "?v=" + Date.now();
                observableBatch.push(_this.http.get(translationUrl_1).pipe(map(function (res) {
                    component.json[lang] = res;
                }), retry(3), catchError(function () { return throwError("Failed to load " + translationUrl_1); })));
            }
        });
        return observableBatch;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.init = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        if (this.queue[lang] === undefined) {
            this.queue[lang] = [];
        }
    };
    /**
     * @param {?} lang
     * @param {?} name
     * @return {?}
     */
    TranslateLoaderService.prototype.isComponentInQueue = /**
     * @param {?} lang
     * @param {?} name
     * @return {?}
     */
    function (lang, name) {
        return (this.queue[lang] || []).find(function (x) { return x === name; }) ? true : false;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.getFullTranslationJSON = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        /** @type {?} */
        var result = {};
        this.providers
            .slice(0)
            .sort(function (a, b) {
            if (a.name === 'app') {
                return 1;
            }
            if (b.name === 'app') {
                return -1;
            }
            return a.name.localeCompare(b.name);
        })
            .forEach(function (model) {
            if (model.json && model.json[lang]) {
                result = ObjectUtils.merge(result, model.json[lang]);
            }
        });
        return result;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.getTranslation = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var _this = this;
        /** @type {?} */
        var hasFailures = false;
        /** @type {?} */
        var batch = tslib_1.__spread(this.getComponentToFetch(lang).map(function (observable) {
            return observable.pipe(catchError(function (error) {
                console.warn(error);
                hasFailures = true;
                return of(error);
            }));
        }));
        return Observable.create(function (observer) {
            if (batch.length > 0) {
                forkJoin(batch).subscribe(function () {
                    /** @type {?} */
                    var fullTranslation = _this.getFullTranslationJSON(lang);
                    if (fullTranslation) {
                        observer.next(fullTranslation);
                    }
                    if (hasFailures) {
                        observer.error('Failed to load some resources');
                    }
                    else {
                        observer.complete();
                    }
                }, function (err) {
                    observer.error('Failed to load some resources');
                });
            }
            else {
                /** @type {?} */
                var fullTranslation = _this.getFullTranslationJSON(lang);
                if (fullTranslation) {
                    observer.next(fullTranslation);
                    observer.complete();
                }
            }
        });
    };
    TranslateLoaderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TranslateLoaderService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return TranslateLoaderService;
}());
export { TranslateLoaderService };
if (false) {
    /** @type {?} */
    TranslateLoaderService.prototype.prefix;
    /** @type {?} */
    TranslateLoaderService.prototype.suffix;
    /** @type {?} */
    TranslateLoaderService.prototype.providers;
    /** @type {?} */
    TranslateLoaderService.prototype.queue;
    /** @type {?} */
    TranslateLoaderService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,