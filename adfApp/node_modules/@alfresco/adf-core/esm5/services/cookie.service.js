/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
var CookieService = /** @class */ (function () {
    function CookieService() {
    }
    /**
     * Checks if cookies are enabled.
     * @returns True if enabled, false otherwise
     */
    /**
     * Checks if cookies are enabled.
     * @return {?} True if enabled, false otherwise
     */
    CookieService.prototype.isEnabled = /**
     * Checks if cookies are enabled.
     * @return {?} True if enabled, false otherwise
     */
    function () {
        // for certain scenarios Chrome may say 'true' but have cookies still disabled
        if (navigator.cookieEnabled === false) {
            return false;
        }
        document.cookie = 'test-cookie';
        return document.cookie.indexOf('test-cookie') >= 0;
    };
    /**
     * Retrieves a cookie by its key.
     * @param key Key to identify the cookie
     * @returns The cookie data or null if it is not found
     */
    /**
     * Retrieves a cookie by its key.
     * @param {?} key Key to identify the cookie
     * @return {?} The cookie data or null if it is not found
     */
    CookieService.prototype.getItem = /**
     * Retrieves a cookie by its key.
     * @param {?} key Key to identify the cookie
     * @return {?} The cookie data or null if it is not found
     */
    function (key) {
        /** @type {?} */
        var regexp = new RegExp('(?:' + key + '|;\s*' + key + ')=(.*?)(?:;|$)', 'g');
        /** @type {?} */
        var result = regexp.exec(document.cookie);
        return (result === null) ? null : result[1];
    };
    /**
     * Sets a cookie.
     * @param key Key to identify the cookie
     * @param data Data value to set for the cookie
     * @param expiration Expiration date of the data
     * @param path "Pathname" to store the cookie
     */
    /**
     * Sets a cookie.
     * @param {?} key Key to identify the cookie
     * @param {?} data Data value to set for the cookie
     * @param {?} expiration Expiration date of the data
     * @param {?} path "Pathname" to store the cookie
     * @return {?}
     */
    CookieService.prototype.setItem = /**
     * Sets a cookie.
     * @param {?} key Key to identify the cookie
     * @param {?} data Data value to set for the cookie
     * @param {?} expiration Expiration date of the data
     * @param {?} path "Pathname" to store the cookie
     * @return {?}
     */
    function (key, data, expiration, path) {
        document.cookie = key + "=" + data +
            (expiration ? ';expires=' + expiration.toUTCString() : '') +
            (path ? ";path=" + path : ';path=/');
    };
    /** Placeholder for testing purposes - do not use. */
    /**
     * Placeholder for testing purposes - do not use.
     * @return {?}
     */
    CookieService.prototype.clear = /**
     * Placeholder for testing purposes - do not use.
     * @return {?}
     */
    function () {
        /* placeholder for testing purposes */
    };
    CookieService.decorators = [
        { type: Injectable }
    ];
    return CookieService;
}());
export { CookieService };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9jb29raWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0lBS3ZDOzs7T0FHRzs7Ozs7SUFDSCxpQ0FBUzs7OztJQUFUOztRQUVJLElBQUksU0FBUyxDQUFDLGFBQWEsS0FBSyxLQUFLLEVBQUU7WUFDbkMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxRQUFRLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQztRQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0RDtJQUVEOzs7O09BSUc7Ozs7OztJQUNILCtCQUFPOzs7OztJQUFQLFVBQVEsR0FBVzs7UUFDZixJQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7O1FBQy9FLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9DO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7Ozs7SUFDSCwrQkFBTzs7Ozs7Ozs7SUFBUCxVQUFRLEdBQVcsRUFBRSxJQUFZLEVBQUUsVUFBdUIsRUFBRSxJQUFtQjtRQUMzRSxRQUFRLENBQUMsTUFBTSxHQUFNLEdBQUcsU0FBSSxJQUFNO1lBQzlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDMUQsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVMsSUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM1QztJQUVELHFEQUFxRDs7Ozs7SUFDckQsNkJBQUs7Ozs7SUFBTDs7S0FFQzs7Z0JBNUNKLFVBQVU7O3dCQW5CWDs7U0FvQmEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvb2tpZVNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGNvb2tpZXMgYXJlIGVuYWJsZWQuXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIGZvciBjZXJ0YWluIHNjZW5hcmlvcyBDaHJvbWUgbWF5IHNheSAndHJ1ZScgYnV0IGhhdmUgY29va2llcyBzdGlsbCBkaXNhYmxlZFxuICAgICAgICBpZiAobmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSAndGVzdC1jb29raWUnO1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ3Rlc3QtY29va2llJykgPj0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBjb29raWUgYnkgaXRzIGtleS5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSB0byBpZGVudGlmeSB0aGUgY29va2llXG4gICAgICogQHJldHVybnMgVGhlIGNvb2tpZSBkYXRhIG9yIG51bGwgaWYgaXQgaXMgbm90IGZvdW5kXG4gICAgICovXG4gICAgZ2V0SXRlbShrZXk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsga2V5ICsgJ3w7XFxzKicgKyBrZXkgKyAnKT0oLio/KSg/Ojt8JCknLCAnZycpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZWdleHAuZXhlYyhkb2N1bWVudC5jb29raWUpO1xuICAgICAgICByZXR1cm4gKHJlc3VsdCA9PT0gbnVsbCkgPyBudWxsIDogcmVzdWx0WzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBjb29raWUuXG4gICAgICogQHBhcmFtIGtleSBLZXkgdG8gaWRlbnRpZnkgdGhlIGNvb2tpZVxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdmFsdWUgdG8gc2V0IGZvciB0aGUgY29va2llXG4gICAgICogQHBhcmFtIGV4cGlyYXRpb24gRXhwaXJhdGlvbiBkYXRlIG9mIHRoZSBkYXRhXG4gICAgICogQHBhcmFtIHBhdGggXCJQYXRobmFtZVwiIHRvIHN0b3JlIHRoZSBjb29raWVcbiAgICAgKi9cbiAgICBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBzdHJpbmcsIGV4cGlyYXRpb246IERhdGUgfCBudWxsLCBwYXRoOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHtkYXRhfWAgK1xuICAgICAgICAgICAgKGV4cGlyYXRpb24gPyAnO2V4cGlyZXM9JyArIGV4cGlyYXRpb24udG9VVENTdHJpbmcoKSA6ICcnKSArXG4gICAgICAgICAgICAocGF0aCA/IGA7cGF0aD0ke3BhdGh9YCA6ICc7cGF0aD0vJyk7XG4gICAgfVxuXG4gICAgLyoqIFBsYWNlaG9sZGVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzIC0gZG8gbm90IHVzZS4gKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgLyogcGxhY2Vob2xkZXIgZm9yIHRlc3RpbmcgcHVycG9zZXMgKi9cbiAgICB9XG59XG4iXX0=