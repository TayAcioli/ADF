/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OverlayContainer } from '@angular/cdk/overlay';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Component, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material';
import { ContextMenuService } from './context-menu.service';
/**
 * \@deprecated: context-menu-holder is deprecated, use adf-context-menu-holder instead.
 */
var ContextMenuHolderComponent = /** @class */ (function () {
    function ContextMenuHolderComponent(viewport, overlayContainer, contextMenuService, renderer) {
        this.viewport = viewport;
        this.overlayContainer = overlayContainer;
        this.contextMenuService = contextMenuService;
        this.renderer = renderer;
        this.links = [];
        this.mouseLocation = { left: 0, top: 0 };
        this.menuElement = null;
        this.subscriptions = [];
        this.showIcons = false;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.onShowContextMenu = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.mdMenuElement) {
            this.updatePosition();
        }
    };
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.contextMenuService.show.subscribe(function (e) { return _this.showMenu(e.event, e.obj); }), this.menuTrigger.onMenuOpen.subscribe(function () {
            /** @type {?} */
            var container = _this.overlayContainer.getContainerElement();
            if (container) {
                _this.contextMenuListenerFn = _this.renderer.listen(container, 'contextmenu', function (e) {
                    e.preventDefault();
                });
            }
            _this.menuElement = _this.getContextMenuElement();
        }), this.menuTrigger.onMenuClose.subscribe(function () {
            _this.menuElement = null;
            if (_this.contextMenuListenerFn) {
                _this.contextMenuListenerFn();
            }
        }));
    };
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.contextMenuListenerFn) {
            this.contextMenuListenerFn();
        }
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
        this.menuElement = null;
    };
    /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.onMenuItemClick = /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    function (event, menuItem) {
        if (menuItem && menuItem.model && menuItem.model.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        menuItem.subject.next(menuItem);
    };
    /**
     * @param {?} e
     * @param {?} links
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.showMenu = /**
     * @param {?} e
     * @param {?} links
     * @return {?}
     */
    function (e, links) {
        this.links = links;
        if (e) {
            this.mouseLocation = {
                left: e.clientX,
                top: e.clientY
            };
        }
        this.menuTrigger.openMenu();
        if (this.mdMenuElement) {
            this.updatePosition();
        }
    };
    Object.defineProperty(ContextMenuHolderComponent.prototype, "mdMenuElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.menuElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.locationCss = /**
     * @return {?}
     */
    function () {
        return {
            left: this.mouseLocation.left + 'px',
            top: this.mouseLocation.top + 'px'
        };
    };
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.updatePosition = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this.mdMenuElement.parentElement) {
                if (_this.mdMenuElement.clientWidth + _this.mouseLocation.left > _this.viewport.getViewportRect().width) {
                    _this.menuTrigger.menu.xPosition = 'before';
                    _this.mdMenuElement.parentElement.style.left = _this.mouseLocation.left - _this.mdMenuElement.clientWidth + 'px';
                }
                else {
                    _this.menuTrigger.menu.xPosition = 'after';
                    _this.mdMenuElement.parentElement.style.left = _this.locationCss().left;
                }
                if (_this.mdMenuElement.clientHeight + _this.mouseLocation.top > _this.viewport.getViewportRect().height) {
                    _this.menuTrigger.menu.yPosition = 'above';
                    _this.mdMenuElement.parentElement.style.top = _this.mouseLocation.top - _this.mdMenuElement.clientHeight + 'px';
                }
                else {
                    _this.menuTrigger.menu.yPosition = 'below';
                    _this.mdMenuElement.parentElement.style.top = _this.locationCss().top;
                }
            }
        }, 0);
    };
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.getContextMenuElement = /**
     * @return {?}
     */
    function () {
        return this.overlayContainer.getContainerElement().querySelector('.context-menu');
    };
    ContextMenuHolderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-context-menu-holder, context-menu-holder',
                    template: "\n        <button mat-button [matMenuTriggerFor]=\"contextMenu\"></button>\n        <mat-menu #contextMenu=\"matMenu\" class=\"context-menu\">\n            <ng-container *ngFor=\"let link of links\">\n                <button *ngIf=\"link.model?.visible\"\n                        [attr.data-automation-id]=\"'context-'+((link.title || link.model?.title) | translate)\"\n                        mat-menu-item\n                        [disabled]=\"link.model?.disabled\"\n                        (click)=\"onMenuItemClick($event, link)\">\n                    <mat-icon *ngIf=\"showIcons && link.model?.icon\">{{ link.model.icon }}</mat-icon>\n                    {{ (link.title || link.model?.title) | translate }}\n                </button>\n            </ng-container>\n        </mat-menu>\n    "
                }] }
    ];
    /** @nocollapse */
    ContextMenuHolderComponent.ctorParameters = function () { return [
        { type: ViewportRuler },
        { type: OverlayContainer },
        { type: ContextMenuService },
        { type: Renderer2 }
    ]; };
    ContextMenuHolderComponent.propDecorators = {
        showIcons: [{ type: Input }],
        menuTrigger: [{ type: ViewChild, args: [MatMenuTrigger,] }],
        onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return ContextMenuHolderComponent;
}());
export { ContextMenuHolderComponent };
if (false) {
    /** @type {?} */
    ContextMenuHolderComponent.prototype.links;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.mouseLocation;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.menuElement;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.subscriptions;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.contextMenuListenerFn;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.showIcons;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.menuTrigger;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.viewport;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.overlayContainer;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.contextMenuService;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,