/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { of, throwError } from 'rxjs';
var AuthenticationMock = /** @class */ (function () {
    function AuthenticationMock() {
        this.redirectUrl = null;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    AuthenticationMock.prototype.setRedirectUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.redirectUrl = url;
    };
    /**
     * @return {?}
     */
    AuthenticationMock.prototype.getRedirectUrl = /**
     * @return {?}
     */
    function () {
        return this.redirectUrl ? this.redirectUrl.url : null;
    };
    // TODO: real auth service returns Observable<string>
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    AuthenticationMock.prototype.login = /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    function (username, password) {
        if (username === 'fake-username' && password === 'fake-password') {
            return of({ type: 'type', ticket: 'ticket' });
        }
        if (username === 'fake-username-CORS-error' && password === 'fake-password') {
            return throwError({
                error: {
                    crossDomain: true,
                    message: 'ERROR: the network is offline, Origin is not allowed by Access-Control-Allow-Origin'
                }
            });
        }
        if (username === 'fake-username-CSRF-error' && password === 'fake-password') {
            return throwError({ message: 'ERROR: Invalid CSRF-token', status: 403 });
        }
        if (username === 'fake-username-ECM-access-error' && password === 'fake-password') {
            return throwError({ message: 'ERROR: 00170728 Access Denied.  The system is currently in read-only mode', status: 403 });
        }
        return throwError('Fake server error');
    };
    return AuthenticationMock;
}());
export { AuthenticationMock };
if (false) {
    /** @type {?} */
    AuthenticationMock.prototype.redirectUrl;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5tb2NrLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsibW9jay9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlLm1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJbEQsSUFBQTs7MkJBQzRDLElBQUk7Ozs7OztJQUU1QywyQ0FBYzs7OztJQUFkLFVBQWUsR0FBcUI7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7S0FDMUI7Ozs7SUFFRCwyQ0FBYzs7O0lBQWQ7UUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDekQ7SUFFRCxxREFBcUQ7Ozs7OztJQUNyRCxrQ0FBSzs7Ozs7SUFBTCxVQUFNLFFBQWdCLEVBQUUsUUFBZ0I7UUFDcEMsSUFBSSxRQUFRLEtBQUssZUFBZSxJQUFJLFFBQVEsS0FBSyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxRQUFRLEtBQUssMEJBQTBCLElBQUksUUFBUSxLQUFLLGVBQWUsRUFBRTtZQUN6RSxPQUFPLFVBQVUsQ0FBQztnQkFDZCxLQUFLLEVBQUU7b0JBQ0gsV0FBVyxFQUFFLElBQUk7b0JBQ2pCLE9BQU8sRUFBRSxxRkFBcUY7aUJBQ2pHO2FBQ0osQ0FBQyxDQUFDO1NBQ047UUFFRCxJQUFJLFFBQVEsS0FBSywwQkFBMEIsSUFBSSxRQUFRLEtBQUssZUFBZSxFQUFFO1lBQ3pFLE9BQU8sVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO1NBQzFFO1FBRUQsSUFBSSxRQUFRLEtBQUssZ0NBQWdDLElBQUksUUFBUSxLQUFLLGVBQWUsRUFBRTtZQUMvRSxPQUFPLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBRSwyRUFBMkUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUMxSDtRQUVELE9BQU8sVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7S0FDMUM7NkJBeERMO0lBeURDLENBQUE7QUFwQ0QsOEJBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFJlZGlyZWN0aW9uTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcmVkaXJlY3Rpb24ubW9kZWwnO1xuXG4vLyBUT0RPOiBzaG91bGQgYmUgZXh0ZW5kaW5nIEF1dGhlbnRpY2F0aW9uU2VydmljZVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uTW9jayAvKmV4dGVuZHMgQXV0aGVudGljYXRpb25TZXJ2aWNlKi8ge1xuICAgIHByaXZhdGUgcmVkaXJlY3RVcmw6IFJlZGlyZWN0aW9uTW9kZWwgPSBudWxsO1xuXG4gICAgc2V0UmVkaXJlY3RVcmwodXJsOiBSZWRpcmVjdGlvbk1vZGVsKSB7XG4gICAgICAgIHRoaXMucmVkaXJlY3RVcmwgPSB1cmw7XG4gICAgfVxuXG4gICAgZ2V0UmVkaXJlY3RVcmwoKTogc3RyaW5nfG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWRpcmVjdFVybCA/IHRoaXMucmVkaXJlY3RVcmwudXJsIDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZWFsIGF1dGggc2VydmljZSByZXR1cm5zIE9ic2VydmFibGU8c3RyaW5nPlxuICAgIGxvZ2luKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHsgdHlwZTogc3RyaW5nLCB0aWNrZXQ6IGFueSB9PiB7XG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUnICYmIHBhc3N3b3JkID09PSAnZmFrZS1wYXNzd29yZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBvZih7IHR5cGU6ICd0eXBlJywgdGlja2V0OiAndGlja2V0J30pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJuYW1lID09PSAnZmFrZS11c2VybmFtZS1DT1JTLWVycm9yJyAmJiBwYXNzd29yZCA9PT0gJ2Zha2UtcGFzc3dvcmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcih7XG4gICAgICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NEb21haW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFUlJPUjogdGhlIG5ldHdvcmsgaXMgb2ZmbGluZSwgT3JpZ2luIGlzIG5vdCBhbGxvd2VkIGJ5IEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUtQ1NSRi1lcnJvcicgJiYgcGFzc3dvcmQgPT09ICdmYWtlLXBhc3N3b3JkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3Ioe21lc3NhZ2U6ICdFUlJPUjogSW52YWxpZCBDU1JGLXRva2VuJywgc3RhdHVzOiA0MDN9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUtRUNNLWFjY2Vzcy1lcnJvcicgJiYgcGFzc3dvcmQgPT09ICdmYWtlLXBhc3N3b3JkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3Ioe21lc3NhZ2U6ICdFUlJPUjogMDAxNzA3MjggQWNjZXNzIERlbmllZC4gIFRoZSBzeXN0ZW0gaXMgY3VycmVudGx5IGluIHJlYWQtb25seSBtb2RlJywgc3RhdHVzOiA0MDN9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKCdGYWtlIHNlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==