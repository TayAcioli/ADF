/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { StorageService } from '../services/storage.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
var AlfrescoApiServiceMock = /** @class */ (function (_super) {
    tslib_1.__extends(AlfrescoApiServiceMock, _super);
    function AlfrescoApiServiceMock(appConfig, storage) {
        var _this = _super.call(this, appConfig, storage) || this;
        _this.appConfig = appConfig;
        _this.storage = storage;
        if (!_this.alfrescoApi) {
            _this.initAlfrescoApi();
        }
        return _this;
    }
    AlfrescoApiServiceMock.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AlfrescoApiServiceMock.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: StorageService }
    ]; };
    return AlfrescoApiServiceMock;
}(AlfrescoApiService));
export { AlfrescoApiServiceMock };
if (false) {
    /** @type {?} */
    AlfrescoApiServiceMock.prototype.appConfig;
    /** @type {?} */
    AlfrescoApiServiceMock.prototype.storage;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxmcmVzY28tYXBpLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbIm1vY2svYWxmcmVzY28tYXBpLnNlcnZpY2UubW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0lBSTFCLGtEQUFrQjtJQUUxRCxnQ0FBc0IsU0FBMkIsRUFDM0IsT0FBdUI7UUFEN0MsWUFFSSxrQkFBTSxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBSTVCO1FBTnFCLGVBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGFBQU8sR0FBUCxPQUFPLENBQWdCO1FBRXpDLElBQUksQ0FBQyxLQUFJLENBQUMsV0FBVyxFQUFFO1lBQ25CLEtBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMxQjs7S0FDSjs7Z0JBVEosVUFBVTs7OztnQkFMRixnQkFBZ0I7Z0JBQ2hCLGNBQWM7O2lDQW5CdkI7RUF3QjRDLGtCQUFrQjtTQUFqRCxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTphZGYtZmlsZS1uYW1lICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxmcmVzY29BcGlTZXJ2aWNlTW9jayBleHRlbmRzIEFsZnJlc2NvQXBpU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBzdG9yYWdlOiBTdG9yYWdlU2VydmljZSkge1xuICAgICAgICBzdXBlcihhcHBDb25maWcsIHN0b3JhZ2UpO1xuICAgICAgICBpZiAoIXRoaXMuYWxmcmVzY29BcGkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdEFsZnJlc2NvQXBpKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=