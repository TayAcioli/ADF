/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
/**
 * @record
 */
export function FileInfo() { }
/** @type {?|undefined} */
FileInfo.prototype.entry;
/** @type {?|undefined} */
FileInfo.prototype.file;
/** @type {?|undefined} */
FileInfo.prototype.relativeFolder;
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * @param {?} folder
     * @return {?}
     */
    FileUtils.flattern = /**
     * @param {?} folder
     * @return {?}
     */
    function (folder) {
        /** @type {?} */
        var reader = folder.createReader();
        /** @type {?} */
        var files = [];
        return new Promise(function (resolve) {
            /** @type {?} */
            var iterations = [];
            (function traverse() {
                reader.readEntries(function (entries) {
                    if (!entries.length) {
                        Promise.all(iterations).then(function (result) { return resolve(files); });
                    }
                    else {
                        iterations.push(Promise.all(entries.map(function (entry) {
                            if (entry.isFile) {
                                return new Promise(function (resolveFile) {
                                    entry.file(function (file) {
                                        files.push({
                                            entry: entry,
                                            file: file,
                                            relativeFolder: entry.fullPath.replace(/\/[^\/]*$/, '')
                                        });
                                        resolveFile();
                                    });
                                });
                            }
                            else {
                                return FileUtils.flattern(entry).then(function (result) {
                                    files.push.apply(files, tslib_1.__spread(result));
                                });
                            }
                        })));
                        // Try calling traverse() again for the same dir, according to spec
                        traverse();
                    }
                });
            })();
        });
    };
    /**
     * @param {?} fileList
     * @return {?}
     */
    FileUtils.toFileArray = /**
     * @param {?} fileList
     * @return {?}
     */
    function (fileList) {
        /** @type {?} */
        var result = [];
        if (fileList && fileList.length > 0) {
            for (var i = 0; i < fileList.length; i++) {
                result.push(fileList[i]);
            }
        }
        return result;
    };
    return FileUtils;
}());
export { FileUtils };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInV0aWxzL2ZpbGUtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQSxJQUFBOzs7Ozs7O0lBRVcsa0JBQVE7Ozs7SUFBZixVQUFnQixNQUFXOztRQUN2QixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7O1FBQ25DLElBQUksS0FBSyxHQUFlLEVBQUUsQ0FBQztRQUMzQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQUEsT0FBTzs7WUFDdEIsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLENBQUM7Z0JBQ0csTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFDLE9BQU87b0JBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO3dCQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBZCxDQUFjLENBQUMsQ0FBQztxQkFDMUQ7eUJBQU07d0JBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLOzRCQUN6QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0NBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFBLFdBQVc7b0NBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFVO3dDQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDOzRDQUNQLEtBQUssRUFBRSxLQUFLOzRDQUNaLElBQUksRUFBRSxJQUFJOzRDQUNWLGNBQWMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO3lDQUMxRCxDQUFDLENBQUM7d0NBQ0gsV0FBVyxFQUFFLENBQUM7cUNBQ2pCLENBQUMsQ0FBQztpQ0FDTixDQUFDLENBQUM7NkJBQ047aUNBQU07Z0NBQ0gsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07b0NBQ3hDLEtBQUssQ0FBQyxJQUFJLE9BQVYsS0FBSyxtQkFBUyxNQUFNLEdBQUU7aUNBQ3pCLENBQUMsQ0FBQzs2QkFDTjt5QkFDSixDQUFDLENBQUMsQ0FBQyxDQUFDOzt3QkFFTCxRQUFRLEVBQUUsQ0FBQztxQkFDZDtpQkFDSixDQUFDLENBQUM7YUFDTixDQUFDLEVBQUUsQ0FBQztTQUNSLENBQUMsQ0FBQztLQUNOOzs7OztJQUVNLHFCQUFXOzs7O0lBQWxCLFVBQW1CLFFBQWtCOztRQUNqQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFaEIsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7U0FDSjtRQUVELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO29CQXZFTDtJQXdFQyxDQUFBO0FBakRELHFCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUluZm8ge1xuICAgIGVudHJ5PzogV2ViS2l0RmlsZUVudHJ5O1xuICAgIGZpbGU/OiBGaWxlO1xuICAgIHJlbGF0aXZlRm9sZGVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRmlsZVV0aWxzIHtcblxuICAgIHN0YXRpYyBmbGF0dGVybihmb2xkZXI6IGFueSk6IFByb21pc2U8RmlsZUluZm9bXT4ge1xuICAgICAgICBsZXQgcmVhZGVyID0gZm9sZGVyLmNyZWF0ZVJlYWRlcigpO1xuICAgICAgICBsZXQgZmlsZXM6IEZpbGVJbmZvW10gPSBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbGV0IGl0ZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIChmdW5jdGlvbiB0cmF2ZXJzZSgpIHtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEVudHJpZXMoKGVudHJpZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoaXRlcmF0aW9ucykudGhlbihyZXN1bHQgPT4gcmVzb2x2ZShmaWxlcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0aW9ucy5wdXNoKFByb21pc2UuYWxsKGVudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlRmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5maWxlKGZ1bmN0aW9uIChmaWxlOiBGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5OiBlbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVGb2xkZXI6IGVudHJ5LmZ1bGxQYXRoLnJlcGxhY2UoL1xcL1teXFwvXSokLywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUZpbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmlsZVV0aWxzLmZsYXR0ZXJuKGVudHJ5KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKC4uLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgY2FsbGluZyB0cmF2ZXJzZSgpIGFnYWluIGZvciB0aGUgc2FtZSBkaXIsIGFjY29yZGluZyB0byBzcGVjXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9GaWxlQXJyYXkoZmlsZUxpc3Q6IEZpbGVMaXN0KTogRmlsZVtdIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGlmIChmaWxlTGlzdCAmJiBmaWxlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZmlsZUxpc3RbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXX0=