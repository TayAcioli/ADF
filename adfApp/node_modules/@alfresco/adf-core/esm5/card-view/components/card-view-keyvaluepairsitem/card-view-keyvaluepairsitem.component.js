/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { CardViewKeyValuePairsItemModel } from '../../models/card-view.models';
import { MatTableDataSource } from '@angular/material';
var CardViewKeyValuePairsItemComponent = /** @class */ (function () {
    function CardViewKeyValuePairsItemComponent(cardViewUpdateService) {
        this.cardViewUpdateService = cardViewUpdateService;
        this.editable = false;
    }
    /**
     * @return {?}
     */
    CardViewKeyValuePairsItemComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.values = this.property.value || [];
        this.matTableValues = new MatTableDataSource(this.values);
    };
    /**
     * @return {?}
     */
    CardViewKeyValuePairsItemComponent.prototype.isEditable = /**
     * @return {?}
     */
    function () {
        return this.editable && this.property.editable;
    };
    /**
     * @return {?}
     */
    CardViewKeyValuePairsItemComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        this.values.push({ name: '', value: '' });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CardViewKeyValuePairsItemComponent.prototype.remove = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.values.splice(index, 1);
        this.save(true);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CardViewKeyValuePairsItemComponent.prototype.onBlur = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.length) {
            this.save();
        }
    };
    /**
     * @param {?=} remove
     * @return {?}
     */
    CardViewKeyValuePairsItemComponent.prototype.save = /**
     * @param {?=} remove
     * @return {?}
     */
    function (remove) {
        /** @type {?} */
        var validValues = this.values.filter(function (i) { return i.name.length && i.value.length; });
        if (remove || validValues.length) {
            this.cardViewUpdateService.update(this.property, validValues);
            this.property.value = validValues;
        }
    };
    CardViewKeyValuePairsItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-boolitem',
                    template: "<div [attr.data-automation-id]=\"'card-key-value-pairs-label-' + property.key\" class=\"adf-property-label\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value\">\n\n    <div *ngIf=\"isEditable()\">\n        {{ 'CORE.CARDVIEW.KEYVALUEPAIRS.ADD' | translate }}\n        <button (click)=\"add()\" mat-icon-button class=\"card-view__key-value-pairs__add-btn\" [attr.data-automation-id]=\"'card-key-value-pairs-button-' + property.key\">\n            <mat-icon>add</mat-icon>\n        </button>\n    </div>\n\n    <div *ngIf=\"!isEditable()\" class=\"card-view__key-value-pairs__read-only\">\n        <mat-table #table [dataSource]=\"matTableValues\" class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"name\">\n                <mat-header-cell *matHeaderCellDef>{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let item\">{{item.name}}</mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"value\">\n                <mat-header-cell *matHeaderCellDef>{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let item\">{{item.value}}</mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"['name', 'value']\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: ['name', 'value'];\"></mat-row>\n        </mat-table>\n    </div>\n\n\n    <div class=\"card-view__key-value-pairs\" *ngIf=\"isEditable() && values && values.length\">\n        <div class=\"card-view__key-value-pairs__row\">\n            <div class=\"card-view__key-value-pairs__col\">{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}</div>\n            <div class=\"card-view__key-value-pairs__col\">{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}</div>\n        </div>\n\n        <div class=\"card-view__key-value-pairs__row\" *ngFor=\"let item of values; let i = index\">\n            <div class=\"card-view__key-value-pairs__col\">\n                <mat-form-field class=\"example-full-width\">\n                    <input matInput\n                           placeholder=\"{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}\"\n                           (blur)=\"onBlur(item.value)\"\n                           [attr.data-automation-id]=\"'card-'+ property.key +'-name-input-' + i\"\n                           [(ngModel)]=\"values[i].name\">\n                </mat-form-field>\n            </div>\n            <div class=\"card-view__key-value-pairs__col\">\n                <mat-form-field class=\"example-full-width\">\n                    <input matInput\n                           placeholder=\"{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}\"\n                           (blur)=\"onBlur(item.value)\"\n                           [attr.data-automation-id]=\"'card-'+ property.key +'-value-input-' + i\"\n                           [(ngModel)]=\"values[i].value\">\n                </mat-form-field>\n            </div>\n            <button mat-icon-button (click)=\"remove(i)\" class=\"card-view__key-value-pairs__remove-btn\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </div>\n    </div>\n</div>\n",
                    styles: [".card-view__key-value-pairs__col{display:inline-block;width:39%}.card-view__key-value-pairs__col .mat-form-field{width:100%}.card-view__key-value-pairs__read-only .mat-table{box-shadow:none}.card-view__key-value-pairs__read-only .mat-header-row,.card-view__key-value-pairs__read-only .mat-row{padding:0}"]
                }] }
    ];
    /** @nocollapse */
    CardViewKeyValuePairsItemComponent.ctorParameters = function () { return [
        { type: CardViewUpdateService }
    ]; };
    CardViewKeyValuePairsItemComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }]
    };
    return CardViewKeyValuePairsItemComponent;
}());
export { CardViewKeyValuePairsItemComponent };
if (false) {
    /** @type {?} */
    CardViewKeyValuePairsItemComponent.prototype.property;
    /** @type {?} */
    CardViewKeyValuePairsItemComponent.prototype.editable;
    /** @type {?} */
    CardViewKeyValuePairsItemComponent.prototype.values;
    /** @type {?} */
    CardViewKeyValuePairsItemComponent.prototype.matTableValues;
    /** @type {?} */
    CardViewKeyValuePairsItemComponent.prototype.cardViewUpdateService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9jb21wb25lbnRzL2NhcmQtdmlldy1rZXl2YWx1ZXBhaXJzaXRlbS9jYXJkLXZpZXcta2V5dmFsdWVwYWlyc2l0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRS9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDOztJQW1CbkQsNENBQW9CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO3dCQUw1QyxLQUFLO0tBSzJDOzs7O0lBRXBFLHdEQUFXOzs7SUFBWDtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDN0Q7Ozs7SUFFRCx1REFBVTs7O0lBQVY7UUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7S0FDbEQ7Ozs7SUFFRCxnREFBRzs7O0lBQUg7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDN0M7Ozs7O0lBRUQsbURBQU07Ozs7SUFBTixVQUFPLEtBQWE7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbkI7Ozs7O0lBRUQsbURBQU07Ozs7SUFBTixVQUFPLEtBQUs7UUFDUixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDZjtLQUNKOzs7OztJQUVELGlEQUFJOzs7O0lBQUosVUFBSyxNQUFnQjs7UUFDakIsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDO1FBRTdFLElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDOUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztTQUNyQztLQUNKOztnQkFsREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLHdzR0FBMkQ7O2lCQUU5RDs7OztnQkFUUSxxQkFBcUI7OzsyQkFhekIsS0FBSzsyQkFHTCxLQUFLOzs2Q0FsQ1Y7O1NBNkJhLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Nb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9jYXJkLXZpZXcubW9kZWxzJztcbmltcG9ydCB7IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1UeXBlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNYXRUYWJsZURhdGFTb3VyY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNhcmQtdmlldy1ib29saXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtdmlldy1rZXl2YWx1ZXBhaXJzaXRlbS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5cbmV4cG9ydCBjbGFzcyBDYXJkVmlld0tleVZhbHVlUGFpcnNJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIEBJbnB1dCgpXG4gICAgcHJvcGVydHk6IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Nb2RlbDtcblxuICAgIEBJbnB1dCgpXG4gICAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHZhbHVlczogQ2FyZFZpZXdLZXlWYWx1ZVBhaXJzSXRlbVR5cGVbXTtcbiAgICBtYXRUYWJsZVZhbHVlczogTWF0VGFibGVEYXRhU291cmNlPENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1UeXBlPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FyZFZpZXdVcGRhdGVTZXJ2aWNlOiBDYXJkVmlld1VwZGF0ZVNlcnZpY2UpIHt9XG5cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB0aGlzLnByb3BlcnR5LnZhbHVlIHx8IFtdO1xuICAgICAgICB0aGlzLm1hdFRhYmxlVmFsdWVzID0gbmV3IE1hdFRhYmxlRGF0YVNvdXJjZSh0aGlzLnZhbHVlcyk7XG4gICAgfVxuXG4gICAgaXNFZGl0YWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdGFibGUgJiYgdGhpcy5wcm9wZXJ0eS5lZGl0YWJsZTtcbiAgICB9XG5cbiAgICBhZGQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2goeyBuYW1lOiAnJywgdmFsdWU6ICcnIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuc2F2ZSh0cnVlKTtcbiAgICB9XG5cbiAgICBvbkJsdXIodmFsdWUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzYXZlKHJlbW92ZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsaWRWYWx1ZXMgPSB0aGlzLnZhbHVlcy5maWx0ZXIoaSA9PiBpLm5hbWUubGVuZ3RoICYmIGkudmFsdWUubGVuZ3RoKTtcblxuICAgICAgICBpZiAocmVtb3ZlIHx8IHZhbGlkVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jYXJkVmlld1VwZGF0ZVNlcnZpY2UudXBkYXRlKHRoaXMucHJvcGVydHksIHZhbGlkVmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkudmFsdWUgPSB2YWxpZFZhbHVlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==