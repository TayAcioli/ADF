/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Component, ComponentFactoryResolver, Input, ViewChild } from '@angular/core';
import { CardItemTypeService } from '../../services/card-item-types.service';
import { CardViewContentProxyDirective } from '../../directives/card-view-content-proxy.directive';
var CardViewItemDispatcherComponent = /** @class */ (function () {
    function CardViewItemDispatcherComponent(cardItemTypeService, resolver) {
        var _this = this;
        this.cardItemTypeService = cardItemTypeService;
        this.resolver = resolver;
        this.displayEmpty = true;
        this.loaded = false;
        this.componentReference = null;
        /** @type {?} */
        var dynamicLifecycleMethods = [
            'ngOnInit',
            'ngDoCheck',
            'ngAfterContentInit',
            'ngAfterContentChecked',
            'ngAfterViewInit',
            'ngAfterViewChecked',
            'ngOnDestroy'
        ];
        dynamicLifecycleMethods.forEach(function (dynamicLifecycleMethod) {
            _this[dynamicLifecycleMethod] = _this.proxy.bind(_this, dynamicLifecycleMethod);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        Object.keys(changes)
            .map(function (changeName) { return [changeName, changes[changeName]]; })
            .forEach(function (_a) {
            var _b = tslib_1.__read(_a, 2), inputParamName = _b[0], simpleChange = _b[1];
            _this.componentReference.instance[inputParamName] = simpleChange.currentValue;
        });
        this.proxy('ngOnChanges', changes);
    };
    /**
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.loadComponent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factoryClass = this.cardItemTypeService.resolveComponentType(this.property);
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(factoryClass);
        this.componentReference = this.content.viewContainerRef.createComponent(factory);
        this.componentReference.instance.editable = this.editable;
        this.componentReference.instance.property = this.property;
        this.componentReference.instance.displayEmpty = this.displayEmpty;
    };
    /**
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.proxy = /**
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.componentReference.instance[methodName]) {
            this.componentReference.instance[methodName].apply(this.componentReference.instance, args);
        }
    };
    CardViewItemDispatcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-item-dispatcher',
                    template: '<ng-template adf-card-view-content-proxy></ng-template>'
                }] }
    ];
    /** @nocollapse */
    CardViewItemDispatcherComponent.ctorParameters = function () { return [
        { type: CardItemTypeService },
        { type: ComponentFactoryResolver }
    ]; };
    CardViewItemDispatcherComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        content: [{ type: ViewChild, args: [CardViewContentProxyDirective,] }]
    };
    return CardViewItemDispatcherComponent;
}());
export { CardViewItemDispatcherComponent };
if (false) {
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.property;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.editable;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.displayEmpty;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.content;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.loaded;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.componentReference;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngOnInit;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngDoCheck;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.cardItemTypeService;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.resolver;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWl0ZW0tZGlzcGF0Y2hlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJjYXJkLXZpZXcvY29tcG9uZW50cy9jYXJkLXZpZXctaXRlbS1kaXNwYXRjaGVyL2NhcmQtdmlldy1pdGVtLWRpc3BhdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUNULHdCQUF3QixFQUN4QixLQUFLLEVBSUwsU0FBUyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDOztJQXlCL0YseUNBQW9CLG1CQUF3QyxFQUN4QztRQURwQixpQkFlQztRQWZtQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLGFBQVEsR0FBUixRQUFROzRCQVpKLElBQUk7c0JBS0YsS0FBSztrQ0FDRyxJQUFJOztRQU9sQyxJQUFNLHVCQUF1QixHQUFHO1lBQzVCLFVBQVU7WUFDVixXQUFXO1lBQ1gsb0JBQW9CO1lBQ3BCLHVCQUF1QjtZQUN2QixpQkFBaUI7WUFDakIsb0JBQW9CO1lBQ3BCLGFBQWE7U0FDaEIsQ0FBQztRQUVGLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxVQUFDLHNCQUFzQjtZQUNuRCxLQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFJLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztTQUNoRixDQUFDLENBQUM7S0FDTjs7Ozs7SUFFRCxxREFBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBYUM7UUFaRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUN0QjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ2YsR0FBRyxDQUFDLFVBQUEsVUFBVSxJQUFJLE9BQUEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQWpDLENBQWlDLENBQUM7YUFDcEQsT0FBTyxDQUFDLFVBQUMsRUFBc0Q7Z0JBQXRELDBCQUFzRCxFQUFyRCxzQkFBYyxFQUFFLG9CQUFZO1lBQ25DLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQztTQUNoRixDQUFDLENBQUM7UUFFUCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0Qzs7OztJQUVPLHVEQUFhOzs7OztRQUNqQixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztRQUVsRixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQzs7Ozs7OztJQUc5RCwrQ0FBSzs7Ozs7Y0FBQyxVQUFVO1FBQUUsY0FBTzthQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87WUFBUCw2QkFBTzs7UUFDN0IsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzlDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUY7OztnQkFyRVIsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwrQkFBK0I7b0JBQ3pDLFFBQVEsRUFBRSx5REFBeUQ7aUJBQ3RFOzs7O2dCQU5RLG1CQUFtQjtnQkFSeEIsd0JBQXdCOzs7MkJBZ0J2QixLQUFLOzJCQUdMLEtBQUs7K0JBR0wsS0FBSzswQkFHTCxTQUFTLFNBQUMsNkJBQTZCOzswQ0E1QzVDOztTQWtDYSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIFNpbXBsZUNoYW5nZSxcbiAgICBTaW1wbGVDaGFuZ2VzLFxuICAgIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhcmRWaWV3SXRlbSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2FyZC12aWV3LWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IENhcmRJdGVtVHlwZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jYXJkLWl0ZW0tdHlwZXMuc2VydmljZSc7XG5pbXBvcnQgeyBDYXJkVmlld0NvbnRlbnRQcm94eURpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvY2FyZC12aWV3LWNvbnRlbnQtcHJveHkuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2FyZC12aWV3LWl0ZW0tZGlzcGF0Y2hlcicsXG4gICAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgYWRmLWNhcmQtdmlldy1jb250ZW50LXByb3h5PjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBDYXJkVmlld0l0ZW1EaXNwYXRjaGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBASW5wdXQoKVxuICAgIHByb3BlcnR5OiBDYXJkVmlld0l0ZW07XG5cbiAgICBASW5wdXQoKVxuICAgIGVkaXRhYmxlOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RW1wdHk6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgQFZpZXdDaGlsZChDYXJkVmlld0NvbnRlbnRQcm94eURpcmVjdGl2ZSlcbiAgICBwcml2YXRlIGNvbnRlbnQ6IENhcmRWaWV3Q29udGVudFByb3h5RGlyZWN0aXZlO1xuXG4gICAgcHJpdmF0ZSBsb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGNvbXBvbmVudFJlZmVyZW5jZTogYW55ID0gbnVsbDtcblxuICAgIHB1YmxpYyBuZ09uSW5pdDtcbiAgICBwdWJsaWMgbmdEb0NoZWNrO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjYXJkSXRlbVR5cGVTZXJ2aWNlOiBDYXJkSXRlbVR5cGVTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgICAgICBjb25zdCBkeW5hbWljTGlmZWN5Y2xlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgICduZ09uSW5pdCcsXG4gICAgICAgICAgICAnbmdEb0NoZWNrJyxcbiAgICAgICAgICAgICduZ0FmdGVyQ29udGVudEluaXQnLFxuICAgICAgICAgICAgJ25nQWZ0ZXJDb250ZW50Q2hlY2tlZCcsXG4gICAgICAgICAgICAnbmdBZnRlclZpZXdJbml0JyxcbiAgICAgICAgICAgICduZ0FmdGVyVmlld0NoZWNrZWQnLFxuICAgICAgICAgICAgJ25nT25EZXN0cm95J1xuICAgICAgICBdO1xuXG4gICAgICAgIGR5bmFtaWNMaWZlY3ljbGVNZXRob2RzLmZvckVhY2goKGR5bmFtaWNMaWZlY3ljbGVNZXRob2QpID0+IHtcbiAgICAgICAgICAgIHRoaXNbZHluYW1pY0xpZmVjeWNsZU1ldGhvZF0gPSB0aGlzLnByb3h5LmJpbmQodGhpcywgZHluYW1pY0xpZmVjeWNsZU1ldGhvZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkQ29tcG9uZW50KCk7XG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3Qua2V5cyhjaGFuZ2VzKVxuICAgICAgICAgICAgLm1hcChjaGFuZ2VOYW1lID0+IFtjaGFuZ2VOYW1lLCBjaGFuZ2VzW2NoYW5nZU5hbWVdXSlcbiAgICAgICAgICAgIC5mb3JFYWNoKChbaW5wdXRQYXJhbU5hbWUsIHNpbXBsZUNoYW5nZV06IFtzdHJpbmcsIFNpbXBsZUNoYW5nZV0pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZVtpbnB1dFBhcmFtTmFtZV0gPSBzaW1wbGVDaGFuZ2UuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5wcm94eSgnbmdPbkNoYW5nZXMnLCBjaGFuZ2VzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRDb21wb25lbnQoKSB7XG4gICAgICAgIGNvbnN0IGZhY3RvcnlDbGFzcyA9IHRoaXMuY2FyZEl0ZW1UeXBlU2VydmljZS5yZXNvbHZlQ29tcG9uZW50VHlwZSh0aGlzLnByb3BlcnR5KTtcblxuICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShmYWN0b3J5Q2xhc3MpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZSA9IHRoaXMuY29udGVudC52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcblxuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZS5lZGl0YWJsZSA9IHRoaXMuZWRpdGFibGU7XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlLnByb3BlcnR5ID0gdGhpcy5wcm9wZXJ0eTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2UuZGlzcGxheUVtcHR5ID0gdGhpcy5kaXNwbGF5RW1wdHk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm94eShtZXRob2ROYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZVttZXRob2ROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2VbbWV0aG9kTmFtZV0uYXBwbHkodGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2UsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19