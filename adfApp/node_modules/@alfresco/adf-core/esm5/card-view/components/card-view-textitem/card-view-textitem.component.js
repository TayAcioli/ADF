/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild } from '@angular/core';
import { CardViewTextItemModel } from '../../models/card-view-textitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
var CardViewTextItemComponent = /** @class */ (function () {
    function CardViewTextItemComponent(cardViewUpdateService) {
        this.cardViewUpdateService = cardViewUpdateService;
        this.editable = false;
        this.displayEmpty = true;
        this.inEdit = false;
    }
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.editedValue = this.property.value;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.showProperty = /**
     * @return {?}
     */
    function () {
        return this.displayEmpty || !this.property.isEmpty();
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.isEditable = /**
     * @return {?}
     */
    function () {
        return this.editable && this.property.editable;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.isClickable = /**
     * @return {?}
     */
    function () {
        return this.property.clickable;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.hasIcon = /**
     * @return {?}
     */
    function () {
        return !!this.property.icon;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.hasErrors = /**
     * @return {?}
     */
    function () {
        return this.errorMessages && this.errorMessages.length;
    };
    /**
     * @param {?} editStatus
     * @return {?}
     */
    CardViewTextItemComponent.prototype.setEditMode = /**
     * @param {?} editStatus
     * @return {?}
     */
    function (editStatus) {
        var _this = this;
        this.inEdit = editStatus;
        setTimeout(function () {
            if (_this.editorInput) {
                _this.editorInput.nativeElement.click();
            }
        }, 0);
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.editedValue = this.property.value;
        this.setEditMode(false);
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        if (this.property.isValid(this.editedValue)) {
            this.cardViewUpdateService.update(this.property, this.editedValue);
            this.property.value = this.editedValue;
            this.setEditMode(false);
        }
        else {
            this.errorMessages = this.property.getValidationErrors(this.editedValue);
        }
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.clicked = /**
     * @return {?}
     */
    function () {
        this.cardViewUpdateService.clicked(this.property);
    };
    CardViewTextItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-textitem',
                    template: "<div [attr.data-automation-id]=\"'card-textitem-label-' + property.key\" class=\"adf-property-label\" *ngIf=\"showProperty() || isEditable()\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value\">\n    <span *ngIf=\"!isEditable()\">\n        <span *ngIf=\"!isClickable(); else elseBlock\" [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n            <span *ngIf=\"showProperty()\">{{ property.displayValue }}</span>\n        </span>\n        <ng-template #elseBlock>\n        <div class=\"adf-textitem-clickable\" (click)=\"clicked()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span class=\"adf-textitem-clickable-value\" [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n            </span>\n            <mat-icon *ngIf=\"hasIcon()\" fxFlex=\"0 0 auto\" [attr.data-automation-id]=\"'card-textitem-edit-icon-' + property.icon\" class=\"adf-textitem-icon\">{{ property.icon }}</mat-icon>\n        </div>\n        </ng-template>\n    </span>\n    <span *ngIf=\"isEditable()\">\n        <div *ngIf=\"!inEdit\" (click)=\"setEditMode(true)\" class=\"adf-textitem-readonly\" [attr.data-automation-id]=\"'card-textitem-edit-toggle-' + property.key\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n            </span>\n            <mat-icon fxFlex=\"0 0 auto\"\n                [attr.data-automation-id]=\"'card-textitem-edit-icon-' + property.key\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                class=\"adf-textitem-icon\">create</mat-icon>\n        </div>\n        <div *ngIf=\"inEdit\" class=\"adf-textitem-editable\">\n            <div class=\"adf-textitem-editable-controls\">\n                <mat-form-field floatPlaceholder=\"never\" class=\"adf-input-container\">\n                    <input *ngIf=\"!property.multiline\" #editorInput\n                        matInput\n                        class=\"adf-input\"\n                        [placeholder]=\"property.default | translate\"\n                        [(ngModel)]=\"editedValue\"\n                        [attr.data-automation-id]=\"'card-textitem-editinput-' + property.key\">\n                    <textarea *ngIf=\"property.multiline\" #editorInput\n                        matInput\n                        matTextareaAutosize\n                        matAutosizeMaxRows=\"1\"\n                        matAutosizeMaxRows=\"5\"\n                        class=\"adf-textarea\"\n                        [placeholder]=\"property.default | translate\"\n                        [(ngModel)]=\"editedValue\"\n                        [attr.data-automation-id]=\"'card-textitem-edittextarea-' + property.key\"></textarea>\n                </mat-form-field>\n                <mat-icon\n                    class=\"adf-textitem-icon adf-update-icon\"\n                    (click)=\"update()\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.SAVE' | translate\"\n                    [attr.data-automation-id]=\"'card-textitem-update-' + property.key\">done</mat-icon>\n                <mat-icon\n                    class=\"adf-textitem-icon adf-reset-icon\"\n                    (click)=\"reset()\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.CANCEL' | translate\"\n                    [attr.data-automation-id]=\"'card-textitem-reset-' + property.key\">clear</mat-icon>\n            </div>\n            <mat-error  [attr.data-automation-id]=\"'card-textitem-error-' + property.key\" class=\"adf-textitem-editable-error\" *ngIf=\"hasErrors()\">\n                <ul>\n                    <li *ngFor=\"let errorMessage of errorMessages\">{{ errorMessage | translate }}</li>\n                </ul>\n            </mat-error>\n        </div>\n    </span>\n    <ng-template #elseEmptyValueBlock>\n        <span class=\"adf-textitem-default-value\">{{ property.default | translate }}</span>\n    </ng-template>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CardViewTextItemComponent.ctorParameters = function () { return [
        { type: CardViewUpdateService }
    ]; };
    CardViewTextItemComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        editorInput: [{ type: ViewChild, args: ['editorInput',] }]
    };
    return CardViewTextItemComponent;
}());
export { CardViewTextItemComponent };
if (false) {
    /** @type {?} */
    CardViewTextItemComponent.prototype.property;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editable;
    /** @type {?} */
    CardViewTextItemComponent.prototype.displayEmpty;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editorInput;
    /** @type {?} */
    CardViewTextItemComponent.prototype.inEdit;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editedValue;
    /** @type {?} */
    CardViewTextItemComponent.prototype.errorMessages;
    /** @type {?} */
    CardViewTextItemComponent.prototype.cardViewUpdateService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXRleHRpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9jb21wb25lbnRzL2NhcmQtdmlldy10ZXh0aXRlbS9jYXJkLXZpZXctdGV4dGl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7SUF3QjVFLG1DQUFvQixxQkFBNEM7UUFBNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1Qjt3QkFaNUMsS0FBSzs0QkFHRCxJQUFJO3NCQUtWLEtBQUs7S0FLdEI7Ozs7SUFFRCwrQ0FBVzs7O0lBQVg7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQzFDOzs7O0lBRUQsZ0RBQVk7OztJQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN4RDs7OztJQUVELDhDQUFVOzs7SUFBVjtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztLQUNsRDs7OztJQUVELCtDQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7S0FDbEM7Ozs7SUFFRCwyQ0FBTzs7O0lBQVA7UUFDSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztLQUMvQjs7OztJQUVELDZDQUFTOzs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztLQUMxRDs7Ozs7SUFFRCwrQ0FBVzs7OztJQUFYLFVBQVksVUFBbUI7UUFBL0IsaUJBT0M7UUFORyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUN6QixVQUFVLENBQUM7WUFDUCxJQUFJLEtBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzFDO1NBQ0osRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNUOzs7O0lBRUQseUNBQUs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzNCOzs7O0lBRUQsMENBQU07OztJQUFOO1FBQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDNUU7S0FDSjs7OztJQUVELDJDQUFPOzs7SUFBUDtRQUNJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JEOztnQkEzRUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLGlxSUFBa0Q7O2lCQUVyRDs7OztnQkFOUSxxQkFBcUI7OzsyQkFRekIsS0FBSzsyQkFHTCxLQUFLOytCQUdMLEtBQUs7OEJBR0wsU0FBUyxTQUFDLGFBQWE7O29DQXBDNUI7O1NBMEJhLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld1RleHRJdGVtTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvY2FyZC12aWV3LXRleHRpdGVtLm1vZGVsJztcbmltcG9ydCB7IENhcmRWaWV3VXBkYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NhcmQtdmlldy11cGRhdGUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNhcmQtdmlldy10ZXh0aXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtdmlldy10ZXh0aXRlbS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY2FyZC12aWV3LXRleHRpdGVtLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXdUZXh0SXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgQElucHV0KClcbiAgICBwcm9wZXJ0eTogQ2FyZFZpZXdUZXh0SXRlbU1vZGVsO1xuXG4gICAgQElucHV0KClcbiAgICBlZGl0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RW1wdHk6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgQFZpZXdDaGlsZCgnZWRpdG9ySW5wdXQnKVxuICAgIHByaXZhdGUgZWRpdG9ySW5wdXQ6IGFueTtcblxuICAgIGluRWRpdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGVkaXRlZFZhbHVlOiBzdHJpbmc7XG4gICAgZXJyb3JNZXNzYWdlczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhcmRWaWV3VXBkYXRlU2VydmljZTogQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWRpdGVkVmFsdWUgPSB0aGlzLnByb3BlcnR5LnZhbHVlO1xuICAgIH1cblxuICAgIHNob3dQcm9wZXJ0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheUVtcHR5IHx8ICF0aGlzLnByb3BlcnR5LmlzRW1wdHkoKTtcbiAgICB9XG5cbiAgICBpc0VkaXRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0YWJsZSAmJiB0aGlzLnByb3BlcnR5LmVkaXRhYmxlO1xuICAgIH1cblxuICAgIGlzQ2xpY2thYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0eS5jbGlja2FibGU7XG4gICAgfVxuXG4gICAgaGFzSWNvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5wcm9wZXJ0eS5pY29uO1xuICAgIH1cblxuICAgIGhhc0Vycm9ycygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvck1lc3NhZ2VzICYmIHRoaXMuZXJyb3JNZXNzYWdlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgc2V0RWRpdE1vZGUoZWRpdFN0YXR1czogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmluRWRpdCA9IGVkaXRTdGF0dXM7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWRpdG9ySW5wdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvcklucHV0Lm5hdGl2ZUVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWRpdGVkVmFsdWUgPSB0aGlzLnByb3BlcnR5LnZhbHVlO1xuICAgICAgICB0aGlzLnNldEVkaXRNb2RlKGZhbHNlKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnByb3BlcnR5LmlzVmFsaWQodGhpcy5lZGl0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FyZFZpZXdVcGRhdGVTZXJ2aWNlLnVwZGF0ZSh0aGlzLnByb3BlcnR5LCB0aGlzLmVkaXRlZFZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkudmFsdWUgPSB0aGlzLmVkaXRlZFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zZXRFZGl0TW9kZShmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSB0aGlzLnByb3BlcnR5LmdldFZhbGlkYXRpb25FcnJvcnModGhpcy5lZGl0ZWRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGlja2VkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhcmRWaWV3VXBkYXRlU2VydmljZS5jbGlja2VkKHRoaXMucHJvcGVydHkpO1xuICAgIH1cbn1cbiJdfQ==