/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
var NodeNameTooltipPipe = /** @class */ (function () {
    function NodeNameTooltipPipe() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.transform = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            return this.getNodeTooltip(node);
        }
        return null;
    };
    /**
     * @param {?} lines
     * @param {?} line
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.containsLine = /**
     * @param {?} lines
     * @param {?} line
     * @return {?}
     */
    function (lines, line) {
        return lines.some(function (item) {
            return item.toLowerCase() === line.toLowerCase();
        });
    };
    /**
     * @param {?} lines
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.removeDuplicateLines = /**
     * @param {?} lines
     * @return {?}
     */
    function (lines) {
        var _this = this;
        /** @type {?} */
        var reducer = function (acc, line) {
            if (!_this.containsLine(acc, line)) {
                acc.push(line);
            }
            return acc;
        };
        return lines.reduce(reducer, []);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.getNodeTooltip = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (!node || !node.entry) {
            return null;
        }
        var _a = node.entry, properties = _a.properties, name = _a.name;
        /** @type {?} */
        var lines = [name];
        if (properties) {
            var title = properties["cm:title"], description = properties["cm:description"];
            if (title && description) {
                lines[0] = title;
                lines[1] = description;
            }
            if (title) {
                lines[1] = title;
            }
            if (description) {
                lines[1] = description;
            }
        }
        return this.removeDuplicateLines(lines).join("\n");
    };
    NodeNameTooltipPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'adfNodeNameTooltip'
                },] }
    ];
    return NodeNameTooltipPipe;
}());
export { NodeNameTooltipPipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1uYW1lLXRvb2x0aXAucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL25vZGUtbmFtZS10b29sdGlwLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0lBUWhELHVDQUFTOzs7O0lBQVQsVUFBVSxJQUF1QjtRQUM3QixJQUFJLElBQUksRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2Y7Ozs7OztJQUVPLDBDQUFZOzs7OztjQUFDLEtBQWUsRUFBRSxJQUFZO1FBQzlDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQVk7WUFDM0IsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BELENBQUMsQ0FBQzs7Ozs7O0lBR0Msa0RBQW9COzs7O2NBQUMsS0FBZTs7O1FBQ3hDLElBQU0sT0FBTyxHQUFHLFVBQUMsR0FBYSxFQUFFLElBQVk7WUFDeEMsSUFBSSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFBRTtZQUN0RCxPQUFPLEdBQUcsQ0FBQztTQUNkLENBQUM7UUFFRixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDOzs7Ozs7SUFHN0IsNENBQWM7Ozs7Y0FBQyxJQUF1QjtRQUMxQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRU8sSUFBQSxlQUEyQixFQUFsQiwwQkFBVSxFQUFFLGNBQUksQ0FBWTs7UUFDN0MsSUFBTSxLQUFLLEdBQUcsQ0FBRSxJQUFJLENBQUUsQ0FBQztRQUV2QixJQUFJLFVBQVUsRUFBRTtZQUVSLElBQUEsOEJBQWlCLEVBQ2pCLDBDQUE2QixDQUNsQjtZQUVmLElBQUksS0FBSyxJQUFJLFdBQVcsRUFBRTtnQkFDdEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDakIsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQzthQUMxQjtZQUVELElBQUksS0FBSyxFQUFFO2dCQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDcEI7WUFFRCxJQUFJLFdBQVcsRUFBRTtnQkFDYixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO2FBQzFCO1NBQ0o7UUFFRCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7OztnQkF2RDFELElBQUksU0FBQztvQkFDRixJQUFJLEVBQUUsb0JBQW9CO2lCQUM3Qjs7OEJBdEJEOztTQXVCYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnYWRmTm9kZU5hbWVUb29sdGlwJ1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlTmFtZVRvb2x0aXBQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICB0cmFuc2Zvcm0obm9kZTogTWluaW1hbE5vZGVFbnRpdHkpOiBzdHJpbmcge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZVRvb2x0aXAobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb250YWluc0xpbmUobGluZXM6IHN0cmluZ1tdLCBsaW5lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGxpbmVzLnNvbWUoKGl0ZW06IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0udG9Mb3dlckNhc2UoKSA9PT0gbGluZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUR1cGxpY2F0ZUxpbmVzKGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgcmVkdWNlciA9IChhY2M6IHN0cmluZ1tdLCBsaW5lOiBzdHJpbmcpOiBzdHJpbmdbXSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udGFpbnNMaW5lKGFjYywgbGluZSkpIHsgYWNjLnB1c2gobGluZSk7IH1cbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGxpbmVzLnJlZHVjZShyZWR1Y2VyLCBbXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROb2RlVG9vbHRpcChub2RlOiBNaW5pbWFsTm9kZUVudGl0eSk6IHN0cmluZyB7XG4gICAgICAgIGlmICghbm9kZSB8fCAhbm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGVudHJ5OiB7IHByb3BlcnRpZXMsIG5hbWUgfSB9ID0gbm9kZTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBbIG5hbWUgXTtcblxuICAgICAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICdjbTp0aXRsZSc6IHRpdGxlLFxuICAgICAgICAgICAgICAgICdjbTpkZXNjcmlwdGlvbic6IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICB9ID0gcHJvcGVydGllcztcblxuICAgICAgICAgICAgaWYgKHRpdGxlICYmIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGluZXNbMF0gPSB0aXRsZTtcbiAgICAgICAgICAgICAgICBsaW5lc1sxXSA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICAgICAgICBsaW5lc1sxXSA9IHRpdGxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsaW5lc1sxXSA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlRHVwbGljYXRlTGluZXMobGluZXMpLmpvaW4oYFxcbmApO1xuICAgIH1cbn1cbiJdfQ==