/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
var ViewUtilService = /** @class */ (function () {
    function ViewUtilService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Based on ViewerComponent Implementation, this value is used to determine how many times we try
         * to get the rendition of a file for preview, or printing.
         */
        this.maxRetries = 5;
        /**
         * Mime-type grouping based on the ViewerComponent.
         */
        this.mimeTypes = {
            text: ['text/plain', 'text/csv', 'text/xml', 'text/html', 'application/x-javascript'],
            pdf: ['application/pdf'],
            image: ['image/png', 'image/jpeg', 'image/gif', 'image/bmp', 'image/svg+xml'],
            media: ['video/mp4', 'video/webm', 'video/ogg', 'audio/mpeg', 'audio/ogg', 'audio/wav']
        };
    }
    /**
     * This method takes a url to trigger the print dialog against, and the type of artifact that it
     * is.
     * This URL should be one that can be rendered in the browser, for example PDF, Image, or Text
     */
    /**
     * This method takes a url to trigger the print dialog against, and the type of artifact that it
     * is.
     * This URL should be one that can be rendered in the browser, for example PDF, Image, or Text
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    ViewUtilService.prototype.printFile = /**
     * This method takes a url to trigger the print dialog against, and the type of artifact that it
     * is.
     * This URL should be one that can be rendered in the browser, for example PDF, Image, or Text
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    function (url, type) {
        /** @type {?} */
        var pwa = window.open(url, ViewUtilService.TARGET);
        if (pwa) {
            // Because of the way chrome focus and close image window vs. pdf preview window
            if (type === ViewUtilService.ContentGroup.IMAGE) {
                pwa.onfocus = function () {
                    setTimeout(function () {
                        pwa.close();
                    }, 500);
                };
            }
            pwa.onload = function () {
                pwa.print();
            };
        }
    };
    /**
     * Launch the File Print dialog from anywhere other than the preview service, which resolves the
     * rendition of the object that can be printed from a web browser.
     * These are: images, PDF files, or PDF rendition of files.
     * We also force PDF rendition for TEXT type objects, otherwise the default URL is to download.
     * TODO there are different TEXT type objects, (HTML, plaintext, xml, etc. we should determine how these are handled)
     */
    /**
     * Launch the File Print dialog from anywhere other than the preview service, which resolves the
     * rendition of the object that can be printed from a web browser.
     * These are: images, PDF files, or PDF rendition of files.
     * We also force PDF rendition for TEXT type objects, otherwise the default URL is to download.
     * TODO there are different TEXT type objects, (HTML, plaintext, xml, etc. we should determine how these are handled)
     * @param {?} objectId
     * @param {?} mimeType
     * @return {?}
     */
    ViewUtilService.prototype.printFileGeneric = /**
     * Launch the File Print dialog from anywhere other than the preview service, which resolves the
     * rendition of the object that can be printed from a web browser.
     * These are: images, PDF files, or PDF rendition of files.
     * We also force PDF rendition for TEXT type objects, otherwise the default URL is to download.
     * TODO there are different TEXT type objects, (HTML, plaintext, xml, etc. we should determine how these are handled)
     * @param {?} objectId
     * @param {?} mimeType
     * @return {?}
     */
    function (objectId, mimeType) {
        var _this = this;
        /** @type {?} */
        var nodeId = objectId;
        /** @type {?} */
        var type = this.getViewerTypeByMimeType(mimeType);
        this.getRendition(nodeId, ViewUtilService.ContentGroup.PDF)
            .then(function (value) {
            /** @type {?} */
            var url = _this.getRenditionUrl(nodeId, type, (value ? true : false));
            /** @type {?} */
            var printType = (type === ViewUtilService.ContentGroup.PDF
                || type === ViewUtilService.ContentGroup.TEXT)
                ? ViewUtilService.ContentGroup.PDF : type;
            _this.printFile(url, printType);
        })
            .catch(function (err) {
            _this.logService.error('Error with Printing');
            _this.logService.error(err);
        });
    };
    /**
     * @param {?} nodeId
     * @param {?} type
     * @param {?} renditionExists
     * @return {?}
     */
    ViewUtilService.prototype.getRenditionUrl = /**
     * @param {?} nodeId
     * @param {?} type
     * @param {?} renditionExists
     * @return {?}
     */
    function (nodeId, type, renditionExists) {
        return (renditionExists && type !== ViewUtilService.ContentGroup.IMAGE) ?
            this.apiService.contentApi.getRenditionUrl(nodeId, ViewUtilService.ContentGroup.PDF) :
            this.apiService.contentApi.getContentUrl(nodeId, false);
    };
    /**
     * @param {?} nodeId
     * @param {?} renditionId
     * @param {?} retries
     * @return {?}
     */
    ViewUtilService.prototype.waitRendition = /**
     * @param {?} nodeId
     * @param {?} renditionId
     * @param {?} retries
     * @return {?}
     */
    function (nodeId, renditionId, retries) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rendition, status_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiService.renditionsApi.getRendition(nodeId, renditionId)];
                    case 1:
                        rendition = _a.sent();
                        if (!(this.maxRetries < retries)) return [3 /*break*/, 5];
                        status_1 = rendition.entry.status.toString();
                        if (!(status_1 === 'CREATED')) return [3 /*break*/, 2];
                        return [2 /*return*/, rendition];
                    case 2:
                        retries += 1;
                        return [4 /*yield*/, this.wait(1000)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.waitRendition(nodeId, renditionId, retries)];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} mimeType
     * @return {?}
     */
    ViewUtilService.prototype.getViewerTypeByMimeType = /**
     * @param {?} mimeType
     * @return {?}
     */
    function (mimeType) {
        var e_1, _a;
        if (mimeType) {
            mimeType = mimeType.toLowerCase();
            /** @type {?} */
            var editorTypes = Object.keys(this.mimeTypes);
            try {
                for (var editorTypes_1 = tslib_1.__values(editorTypes), editorTypes_1_1 = editorTypes_1.next(); !editorTypes_1_1.done; editorTypes_1_1 = editorTypes_1.next()) {
                    var type = editorTypes_1_1.value;
                    if (this.mimeTypes[type].indexOf(mimeType) >= 0) {
                        return type;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (editorTypes_1_1 && !editorTypes_1_1.done && (_a = editorTypes_1.return)) _a.call(editorTypes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return 'unknown';
    };
    /**
     * @param {?} ms
     * @return {?}
     */
    ViewUtilService.prototype.wait = /**
     * @param {?} ms
     * @return {?}
     */
    function (ms) {
        return new Promise(function (resolve) { return setTimeout(resolve, ms); });
    };
    /**
     * @param {?} nodeId
     * @param {?} renditionId
     * @return {?}
     */
    ViewUtilService.prototype.getRendition = /**
     * @param {?} nodeId
     * @param {?} renditionId
     * @return {?}
     */
    function (nodeId, renditionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var supported, rendition, status_2, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiService.renditionsApi.getRenditions(nodeId)];
                    case 1:
                        supported = _a.sent();
                        rendition = supported.list.entries.find(function (obj) { return obj.entry.id.toLowerCase() === renditionId; });
                        if (!rendition) return [3 /*break*/, 6];
                        status_2 = rendition.entry.status.toString();
                        if (!(status_2 === 'NOT_CREATED')) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.apiService.renditionsApi.createRendition(nodeId, { id: renditionId })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.waitRendition(nodeId, renditionId, 0)];
                    case 4:
                        rendition = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        this.logService.error(err_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, new Promise(function (resolve) { return resolve(rendition); })];
                }
            });
        });
    };
    ViewUtilService.TARGET = '_new';
    /**
     * Content groups based on categorization of files that can be viewed in the web browser. This
     * implementation or grouping is tied to the definition the ng component: ViewerComponent
     */
    ViewUtilService.ContentGroup = {
        IMAGE: 'image',
        MEDIA: 'media',
        PDF: 'pdf',
        TEXT: 'text'
    };
    ViewUtilService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ViewUtilService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ ViewUtilService.ngInjectableDef = i0.defineInjectable({ factory: function ViewUtilService_Factory() { return new ViewUtilService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: ViewUtilService, providedIn: "root" });
    return ViewUtilService;
}());
export { ViewUtilService };
if (false) {
    /** @type {?} */
    ViewUtilService.TARGET;
    /**
     * Content groups based on categorization of files that can be viewed in the web browser. This
     * implementation or grouping is tied to the definition the ng component: ViewerComponent
     * @type {?}
     */
    ViewUtilService.ContentGroup;
    /**
     * Based on ViewerComponent Implementation, this value is used to determine how many times we try
     * to get the rendition of a file for preview, or printing.
     * @type {?}
     */
    ViewUtilService.prototype.maxRetries;
    /**
     * Mime-type grouping based on the ViewerComponent.
     * @type {?}
     */
    ViewUtilService.prototype.mimeTypes;
    /** @type {?} */
    ViewUtilService.prototype.apiService;
    /** @type {?} */
    ViewUtilService.prototype.logService;
}

//# sourceMappingURL=data:application/json;base64,