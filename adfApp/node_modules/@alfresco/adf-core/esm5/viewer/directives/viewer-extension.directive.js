/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Directive, Input, TemplateRef } from '@angular/core';
import { ViewerComponent } from '../components/viewer.component';
var ViewerExtensionDirective = /** @class */ (function () {
    function ViewerExtensionDirective(viewerComponent) {
        this.viewerComponent = viewerComponent;
    }
    /**
     * @return {?}
     */
    ViewerExtensionDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.templateModel = { template: this.template, isVisible: false };
        this.viewerComponent.extensionTemplates.push(this.templateModel);
        this.viewerComponent.extensionChange.subscribe(function (fileExtension) {
            _this.templateModel.isVisible = _this.isVisible(fileExtension);
        });
        if (this.supportedExtensions instanceof Array) {
            this.supportedExtensions.forEach(function (extension) {
                _this.viewerComponent.externalExtensions.push(extension);
            });
        }
    };
    /**
     * check if the current extension in the viewer is compatible with this extension checking against supportedExtensions
     */
    /**
     * check if the current extension in the viewer is compatible with this extension checking against supportedExtensions
     * @param {?} fileExtension
     * @return {?}
     */
    ViewerExtensionDirective.prototype.isVisible = /**
     * check if the current extension in the viewer is compatible with this extension checking against supportedExtensions
     * @param {?} fileExtension
     * @return {?}
     */
    function (fileExtension) {
        /** @type {?} */
        var supportedExtension;
        if (this.supportedExtensions && (this.supportedExtensions instanceof Array)) {
            supportedExtension = this.supportedExtensions.find(function (extension) {
                return extension.toLowerCase() === fileExtension;
            });
        }
        return !!supportedExtension;
    };
    ViewerExtensionDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'adf-viewer-extension'
                },] }
    ];
    /** @nocollapse */
    ViewerExtensionDirective.ctorParameters = function () { return [
        { type: ViewerComponent }
    ]; };
    ViewerExtensionDirective.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        urlFileContent: [{ type: Input }],
        extension: [{ type: Input }],
        supportedExtensions: [{ type: Input }]
    };
    return ViewerExtensionDirective;
}());
export { ViewerExtensionDirective };
if (false) {
    /** @type {?} */
    ViewerExtensionDirective.prototype.template;
    /** @type {?} */
    ViewerExtensionDirective.prototype.urlFileContent;
    /** @type {?} */
    ViewerExtensionDirective.prototype.extension;
    /** @type {?} */
    ViewerExtensionDirective.prototype.supportedExtensions;
    /** @type {?} */
    ViewerExtensionDirective.prototype.templateModel;
    /** @type {?} */
    ViewerExtensionDirective.prototype.viewerComponent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2VyLWV4dGVuc2lvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJ2aWV3ZXIvZGlyZWN0aXZlcy92aWV3ZXItZXh0ZW5zaW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQW9CLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O0lBcUI3RCxrQ0FBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0tBQ25EOzs7O0lBRUQscURBQWtCOzs7SUFBbEI7UUFBQSxpQkFjQztRQWJHLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFFbkUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRWpFLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxVQUFDLGFBQWE7WUFDekQsS0FBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoRSxDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsWUFBWSxLQUFLLEVBQUU7WUFDM0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQVM7Z0JBQ3ZDLEtBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzNELENBQUMsQ0FBQztTQUNOO0tBQ0o7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsNENBQVM7Ozs7O0lBQVQsVUFBVSxhQUFhOztRQUNuQixJQUFJLGtCQUFrQixDQUFTO1FBRS9CLElBQUksSUFBSSxDQUFDLG1CQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQ3pFLGtCQUFrQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBQyxTQUFTO2dCQUN6RCxPQUFPLFNBQVMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxhQUFhLENBQUM7YUFFcEQsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztLQUMvQjs7Z0JBcERKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2lCQUNuQzs7OztnQkFKUSxlQUFlOzs7MkJBT25CLFlBQVksU0FBQyxXQUFXO2lDQUd4QixLQUFLOzRCQUdMLEtBQUs7c0NBR0wsS0FBSzs7bUNBbENWOztTQXVCYSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb250ZW50Q2hpbGQsIERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3ZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3ZpZXdlci5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2FkZi12aWV3ZXItZXh0ZW5zaW9uJ1xufSlcbmV4cG9ydCBjbGFzcyBWaWV3ZXJFeHRlbnNpb25EaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblxuICAgIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpXG4gICAgdGVtcGxhdGU6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgdXJsRmlsZUNvbnRlbnQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgZXh0ZW5zaW9uOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHN1cHBvcnRlZEV4dGVuc2lvbnM6IHN0cmluZ1tdO1xuXG4gICAgdGVtcGxhdGVNb2RlbDogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3ZXJDb21wb25lbnQ6IFZpZXdlckNvbXBvbmVudCkge1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZU1vZGVsID0geyB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSwgaXNWaXNpYmxlOiBmYWxzZSB9O1xuXG4gICAgICAgIHRoaXMudmlld2VyQ29tcG9uZW50LmV4dGVuc2lvblRlbXBsYXRlcy5wdXNoKHRoaXMudGVtcGxhdGVNb2RlbCk7XG5cbiAgICAgICAgdGhpcy52aWV3ZXJDb21wb25lbnQuZXh0ZW5zaW9uQ2hhbmdlLnN1YnNjcmliZSgoZmlsZUV4dGVuc2lvbikgPT4ge1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZU1vZGVsLmlzVmlzaWJsZSA9IHRoaXMuaXNWaXNpYmxlKGZpbGVFeHRlbnNpb24pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9ucy5mb3JFYWNoKChleHRlbnNpb24pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdlckNvbXBvbmVudC5leHRlcm5hbEV4dGVuc2lvbnMucHVzaChleHRlbnNpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBpZiB0aGUgY3VycmVudCBleHRlbnNpb24gaW4gdGhlIHZpZXdlciBpcyBjb21wYXRpYmxlIHdpdGggdGhpcyBleHRlbnNpb24gY2hlY2tpbmcgYWdhaW5zdCBzdXBwb3J0ZWRFeHRlbnNpb25zXG4gICAgICovXG4gICAgaXNWaXNpYmxlKGZpbGVFeHRlbnNpb24pOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHN1cHBvcnRlZEV4dGVuc2lvbjogc3RyaW5nO1xuXG4gICAgICAgIGlmICh0aGlzLnN1cHBvcnRlZEV4dGVuc2lvbnMgJiYgKHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9ucyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgc3VwcG9ydGVkRXh0ZW5zaW9uID0gdGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25zLmZpbmQoKGV4dGVuc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHRlbnNpb24udG9Mb3dlckNhc2UoKSA9PT0gZmlsZUV4dGVuc2lvbjtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISFzdXBwb3J0ZWRFeHRlbnNpb247XG4gICAgfVxuXG59XG4iXX0=