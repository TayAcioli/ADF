/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { LogService } from '../../services/log.service';
import { TranslationService } from '../../services/translation.service';
import { UserPreferencesService } from '../../services/user-preferences.service';
import { SettingsService } from '../../services/settings.service';
import { LoginErrorEvent } from '../models/login-error.event';
import { LoginSubmitEvent } from '../models/login-submit.event';
import { LoginSuccessEvent } from '../models/login-success.event';
import { AppConfigService, AppConfigValues } from '../../app-config/app-config.service';
/** @enum {number} */
var LoginSteps = {
    Landing: 0,
    Checking: 1,
    Welcome: 2,
};
LoginSteps[LoginSteps.Landing] = 'Landing';
LoginSteps[LoginSteps.Checking] = 'Checking';
LoginSteps[LoginSteps.Welcome] = 'Welcome';
var LoginComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param _fb
     * @param authService
     * @param translate
     */
    function LoginComponent(_fb, authService, translateService, logService, elementRef, router, appConfig, userPreferences, settingsService) {
        this._fb = _fb;
        this.authService = authService;
        this.translateService = translateService;
        this.logService = logService;
        this.elementRef = elementRef;
        this.router = router;
        this.appConfig = appConfig;
        this.userPreferences = userPreferences;
        this.settingsService = settingsService;
        this.isPasswordShow = false;
        /**
         * Should the `Remember me` checkbox be shown? When selected, this
         * option will remember the logged-in user after the browser is closed
         * to avoid logging in repeatedly.
         */
        this.showRememberMe = true;
        /**
         * Should the extra actions (`Need Help`, `Register`, etc) be shown?
         */
        this.showLoginActions = true;
        /**
         * Sets the URL of the NEED HELP link in the footer.
         */
        this.needHelpLink = '';
        /**
         * Sets the URL of the REGISTER link in the footer.
         */
        this.registerLink = '';
        /**
         * Path to a custom logo image.
         */
        this.logoImageUrl = './assets/images/alfresco-logo.svg';
        /**
         * Path to a custom background image.
         */
        this.backgroundImageUrl = './assets/images/background.svg';
        /**
         * The copyright text below the login box.
         */
        this.copyrightText = '\u00A9 2016 Alfresco Software, Inc. All Rights Reserved.';
        /**
         * Route to redirect to on successful login.
         */
        this.successRoute = null;
        /**
         * Emitted when the login is successful.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when the login fails.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the login form is submitted.
         */
        this.executeSubmit = new EventEmitter();
        this.implicitFlow = false;
        this.isError = false;
        this.actualLoginStep = LoginSteps.Landing;
        this.LoginSteps = LoginSteps;
        this.rememberMe = true;
        this.minLength = 2;
        this.initFormError();
        this.initFormFieldsMessages();
    }
    /**
     * @return {?}
     */
    LoginComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.authService.isOauth()) {
            /** @type {?} */
            var oauth = this.appConfig.get(AppConfigValues.OAUTHCONFIG, null);
            if (oauth && oauth.implicitFlow) {
                this.implicitFlow = true;
            }
        }
        if (this.hasCustomFieldsValidation()) {
            this.form = this._fb.group(this.fieldsValidation);
        }
        else {
            this.initFormFieldsDefault();
            this.initFormFieldsMessagesDefault();
        }
        this.form.valueChanges.subscribe(function (data) { return _this.onValueChanged(data); });
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        this.onSubmit(this.form.value);
    };
    /**
     * Method called on submit form
     * @param values
     * @param event
     */
    /**
     * Method called on submit form
     * @param {?} values
     * @return {?}
     */
    LoginComponent.prototype.onSubmit = /**
     * Method called on submit form
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this.settingsService.setProviders(this.providers);
        this.settingsService.csrfDisabled = this.disableCsrf;
        this.disableError();
        /** @type {?} */
        var args = new LoginSubmitEvent({
            controls: { username: this.form.controls["username"] }
        });
        this.executeSubmit.emit(args);
        if (args.defaultPrevented) {
            return false;
        }
        else {
            this.performLogin(values);
        }
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.implicitLogin = /**
     * @return {?}
     */
    function () {
        this.authService.ssoImplicitLogin();
    };
    /**
     * The method check the error in the form and push the error in the formError object
     * @param data
     */
    /**
     * The method check the error in the form and push the error in the formError object
     * @param {?} data
     * @return {?}
     */
    LoginComponent.prototype.onValueChanged = /**
     * The method check the error in the form and push the error in the formError object
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.disableError();
        for (var field in this.formError) {
            if (field) {
                this.formError[field] = '';
                /** @type {?} */
                var hasError = (this.form.controls[field].errors && data[field] !== '') ||
                    (this.form.controls[field].dirty &&
                        !this.form.controls[field].valid);
                if (hasError) {
                    for (var key in this.form.controls[field].errors) {
                        if (key) {
                            this.formError[field] +=
                                this._message[field][key] + '';
                        }
                    }
                }
            }
        }
    };
    /**
     * Performe the login service
     * @param {?} values
     * @return {?}
     */
    LoginComponent.prototype.performLogin = /**
     * Performe the login service
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        this.actualLoginStep = LoginSteps.Checking;
        this.authService
            .login(values.username, values.password, this.rememberMe)
            .subscribe(function (token) {
            /** @type {?} */
            var redirectUrl = _this.authService.getRedirect(_this.providers);
            _this.actualLoginStep = LoginSteps.Welcome;
            _this.userPreferences.setStoragePrefix(values.username);
            values.password = null;
            _this.success.emit(new LoginSuccessEvent(token, values.username, null));
            if (redirectUrl) {
                _this.authService.setRedirect(null);
                _this.router.navigateByUrl(redirectUrl);
            }
            else if (_this.successRoute) {
                _this.router.navigate([_this.successRoute]);
            }
        }, function (err) {
            _this.actualLoginStep = LoginSteps.Landing;
            _this.displayErrorMessage(err);
            _this.enableError();
            _this.error.emit(new LoginErrorEvent(err));
        }, function () { return _this.logService.info('Login done'); });
    };
    /**
     * Check and display the right error message in the UI
     * @param {?} err
     * @return {?}
     */
    LoginComponent.prototype.displayErrorMessage = /**
     * Check and display the right error message in the UI
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (err.error &&
            err.error.crossDomain &&
            err.error.message.indexOf('Access-Control-Allow-Origin') !== -1) {
            this.errorMsg = err.error.message;
        }
        else if (err.status === 403 &&
            err.message.indexOf('Invalid CSRF-token') !== -1) {
            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-CSRF';
        }
        else if (err.status === 403 &&
            err.message.indexOf('The system is currently in read-only mode') !==
                -1) {
            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ECM-LICENSE';
        }
        else {
            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-CREDENTIALS';
        }
    };
    /**
     * Add a custom form error for a field
     * @param {?} field
     * @param {?} msg
     * @return {?}
     */
    LoginComponent.prototype.addCustomFormError = /**
     * Add a custom form error for a field
     * @param {?} field
     * @param {?} msg
     * @return {?}
     */
    function (field, msg) {
        this.formError[field] += msg;
    };
    /**
     * Add a custom validation rule error for a field
     * @param field
     * @param ruleId - i.e. required | minlength | maxlength
     * @param msg
     */
    /**
     * Add a custom validation rule error for a field
     * @param {?} field
     * @param {?} ruleId - i.e. required | minlength | maxlength
     * @param {?} msg
     * @param {?=} params
     * @return {?}
     */
    LoginComponent.prototype.addCustomValidationError = /**
     * Add a custom validation rule error for a field
     * @param {?} field
     * @param {?} ruleId - i.e. required | minlength | maxlength
     * @param {?} msg
     * @param {?=} params
     * @return {?}
     */
    function (field, ruleId, msg, params) {
        var _this = this;
        if (params) {
            this.translateService.get(msg, params).subscribe(function (res) {
                _this._message[field][ruleId] = res;
            });
        }
        else {
            this._message[field][ruleId] = msg;
        }
    };
    /**
     * Display and hide the password value.
     */
    /**
     * Display and hide the password value.
     * @return {?}
     */
    LoginComponent.prototype.toggleShowPassword = /**
     * Display and hide the password value.
     * @return {?}
     */
    function () {
        this.isPasswordShow = !this.isPasswordShow;
        this.elementRef.nativeElement.querySelector('#password').type = this
            .isPasswordShow
            ? 'text'
            : 'password';
    };
    /**
     * The method return if a field is valid or not
     * @param field
     */
    /**
     * The method return if a field is valid or not
     * @param {?} field
     * @return {?}
     */
    LoginComponent.prototype.isErrorStyle = /**
     * The method return if a field is valid or not
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return !field.valid && field.dirty && !field.pristine;
    };
    /**
     * Trim username
     */
    /**
     * Trim username
     * @param {?} event
     * @return {?}
     */
    LoginComponent.prototype.trimUsername = /**
     * Trim username
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.target.value = event.target.value.trim();
    };
    /**
     * Default formError values
     * @return {?}
     */
    LoginComponent.prototype.initFormError = /**
     * Default formError values
     * @return {?}
     */
    function () {
        this.formError = {
            username: '',
            password: ''
        };
    };
    /**
     * Init form fields messages
     * @return {?}
     */
    LoginComponent.prototype.initFormFieldsMessages = /**
     * Init form fields messages
     * @return {?}
     */
    function () {
        this._message = {
            username: {},
            password: {}
        };
    };
    /**
     * Default form fields messages
     * @return {?}
     */
    LoginComponent.prototype.initFormFieldsMessagesDefault = /**
     * Default form fields messages
     * @return {?}
     */
    function () {
        var _this = this;
        this._message = {
            username: {
                required: 'LOGIN.MESSAGES.USERNAME-REQUIRED'
            },
            password: {
                required: 'LOGIN.MESSAGES.PASSWORD-REQUIRED'
            }
        };
        this.translateService
            .get('LOGIN.MESSAGES.USERNAME-MIN', { minLength: this.minLength })
            .subscribe(function (res) {
            _this._message['username']['minlength'] = res;
        });
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.initFormFieldsDefault = /**
     * @return {?}
     */
    function () {
        this.form = this._fb.group({
            username: ['', Validators.required],
            password: ['', Validators.required]
        });
    };
    /**
     * Disable the error flag
     * @return {?}
     */
    LoginComponent.prototype.disableError = /**
     * Disable the error flag
     * @return {?}
     */
    function () {
        this.isError = false;
        this.initFormError();
    };
    /**
     * Enable the error flag
     * @return {?}
     */
    LoginComponent.prototype.enableError = /**
     * Enable the error flag
     * @return {?}
     */
    function () {
        this.isError = true;
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.hasCustomFieldsValidation = /**
     * @return {?}
     */
    function () {
        return this.fieldsValidation !== undefined;
    };
    LoginComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-login',
                    template: "<div class=\"adf-login-content\" [style.background-image]=\"'url(' + backgroundImageUrl + ')'\">\n    <div class=\"ie11FixerParent\">\n        <div class=\"ie11FixerChild\">\n\n            <mat-card class=\"adf-login-card-wide\">\n                <form id=\"adf-login-form\" [formGroup]=\"form\" (submit)=\"onSubmit(form.value)\" autocomplete=\"off\">\n\n                    <mat-card-header>\n                        <mat-card-title>\n                            <div class=\"adf-alfresco-logo\">\n                                <!--HEADER TEMPLATE-->\n                                <ng-template *ngIf=\"headerTemplate\"\n                                             ngFor [ngForOf]=\"[data]\"\n                                             [ngForTemplate]=\"headerTemplate\">\n                                </ng-template>\n                                <img *ngIf=\"!headerTemplate\" id=\"adf-login-img-logo\" class=\"adf-img-logo\" [src]=\"logoImageUrl\"\n                                     alt=\"{{'LOGIN.LOGO' | translate }}\">\n                            </div>\n                        </mat-card-title>\n                    </mat-card-header>\n\n                    <mat-card-content class=\"adf-login-controls\">\n\n                        <div *ngIf=\"!implicitFlow\">\n                            <!--ERRORS AREA-->\n                            <div class=\"adf-error-container\">\n                                <div *ngIf=\"isError\" id=\"login-error\" data-automation-id=\"login-error\"\n                                     class=\"error  adf-error-message\">\n                                    <mat-icon class=\"error-icon\">warning</mat-icon>\n                                    <span class=\"login-error-message\">{{errorMsg | translate }}</span>\n                                </div>\n                            </div>\n\n                            <!--USERNAME FIELD-->\n                            <div class=\"adf-login__field\"\n                                 [ngClass]=\"{'is-invalid': isErrorStyle(form.controls.username)}\">\n                                <mat-form-field class=\"adf-full-width\" floatPlaceholder=\"never\" color=\"primary\">\n                                    <input matInput placeholder=\"{{'LOGIN.LABEL.USERNAME' | translate }}\"\n                                           type=\"text\"\n                                           class=\"adf-full-width\"\n                                           [formControl]=\"form.controls['username']\"\n                                           autocapitalize=\"none\"\n                                           id=\"username\"\n                                           data-automation-id=\"username\"\n                                           (blur)=\"trimUsername($event)\"\n                                           tabindex=\"1\">\n                                </mat-form-field>\n\n                                <span class=\"adf-login-validation\" for=\"username\" *ngIf=\"formError.username\">\n                                <span id=\"username-error\" class=\"adf-login-error\" data-automation-id=\"username-error\">{{formError.username | translate }}</span>\n                            </span>\n                            </div>\n\n                            <!--PASSWORD FIELD-->\n                            <div class=\"adf-login__field\">\n                                <mat-form-field class=\"adf-full-width\" floatPlaceholder=\"never\" color=\"primary\">\n                                    <input matInput placeholder=\"{{'LOGIN.LABEL.PASSWORD' | translate }}\"\n                                           type=\"password\"\n                                           [formControl]=\"form.controls['password']\"\n                                           id=\"password\"\n                                           data-automation-id=\"password\"\n                                           tabindex=\"2\">\n                                    <mat-icon *ngIf=\"isPasswordShow\" matSuffix class=\"adf-login-password-icon\"\n                                              data-automation-id=\"hide_password\" (click)=\"toggleShowPassword()\" (keyup.enter)=\"toggleShowPassword()\" tabindex=\"3\">\n                                        visibility\n                                    </mat-icon>\n                                    <mat-icon *ngIf=\"!isPasswordShow\" matSuffix class=\"adf-login-password-icon\"\n                                              data-automation-id=\"show_password\" (click)=\"toggleShowPassword()\" (keyup.enter)=\"toggleShowPassword()\" tabindex=\"3\">\n                                        visibility_off\n                                    </mat-icon>\n                                </mat-form-field>\n                                <span class=\"adf-login-validation\" for=\"password\" *ngIf=\"formError.password\">\n                                <span id=\"password-required\" class=\"adf-login-error\"\n                                      data-automation-id=\"password-required\">{{formError.password | translate }}</span>\n                            </span>\n                            </div>\n\n                            <!--CUSTOM CONTENT-->\n                            <ng-content></ng-content>\n\n                            <br>\n                            <button type=\"submit\" id=\"login-button\" tabindex=\"4\"\n                                    class=\"adf-login-button\"\n                                    mat-raised-button color=\"primary\"\n                                    [class.isChecking]=\"actualLoginStep === LoginSteps.Checking\"\n                                    [class.isWelcome]=\"actualLoginStep === LoginSteps.Welcome\"\n                                    data-automation-id=\"login-button\" [disabled]=\"!form.valid\">\n\n                                <span *ngIf=\"actualLoginStep === LoginSteps.Landing\" class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.LOGIN' | translate }}</span>\n\n                                <div *ngIf=\"actualLoginStep === LoginSteps.Checking\"\n                                     class=\"adf-interactive-login-label\">\n                                    <span\n                                        class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.CHECKING' | translate }}</span>\n                                    <div class=\"adf-login-spinner-container\">\n                                        <mat-spinner id=\"checking-spinner\" class=\"adf-login-checking-spinner\"\n                                                     [diameter]=\"25\"></mat-spinner>\n                                    </div>\n                                </div>\n\n\n                                <div *ngIf=\"actualLoginStep === LoginSteps.Welcome\" class=\"adf-interactive-login-label\">\n                                    <span class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.WELCOME' | translate }}</span>\n                                    <mat-icon class=\"welcome-icon\">done</mat-icon>\n                                </div>\n\n                            </button>\n                            <div *ngIf=\"showRememberMe\" class=\"adf-login__remember-me\">\n                                <mat-checkbox id=\"adf-login-remember\" color=\"primary\" class=\"adf-login-rememberme\"\n                                              [checked]=\"rememberMe\"\n                                              (change)=\"rememberMe = !rememberMe\">{{ 'LOGIN.LABEL.REMEMBER' | translate\n                                    }}\n                                </mat-checkbox>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"implicitFlow\">\n                            <button type=\"button\" (click)=\"implicitLogin()\" id=\"login-button-sso\" tabindex=\"1\"\n                                    class=\"adf-login-button\"\n                                    mat-raised-button color=\"primary\"\n                                    data-automation-id=\"login-button-sso\">\n                                <span  class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.SSO' | translate }}</span>\n                            </button>\n                        </div>\n\n                    </mat-card-content>\n\n                    <mat-card-actions *ngIf=\"footerTemplate || showLoginActions\">\n\n                        <div class=\"adf-login-action-container\">\n                            <!--FOOTER TEMPLATE-->\n                            <ng-template *ngIf=\"footerTemplate\"\n                                         ngFor [ngForOf]=\"[data]\"\n                                         [ngForTemplate]=\"footerTemplate\">\n                            </ng-template>\n                            <div class=\"adf-login-action\" *ngIf=\"!footerTemplate && showLoginActions\">\n                                <div id=\"adf-login-action-left\" class=\"adf-login-action-left\">\n                                    <a href=\"{{needHelpLink}}\">{{'LOGIN.ACTION.HELP' | translate }}</a>\n                                </div>\n                                <div id=\"adf-login-action-right\" class=\"adf-login-action-right\">\n                                    <a href=\"{{registerLink}}\">{{'LOGIN.ACTION.REGISTER' | translate }}</a>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-actions>\n\n                </form>\n            </mat-card>\n\n            <div class=\"copyright\" data-automation-id=\"login-copyright\">\n                {{ copyrightText }}\n            </div>\n\n        </div>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        class: 'adf-login'
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LoginComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: AuthenticationService },
        { type: TranslationService },
        { type: LogService },
        { type: ElementRef },
        { type: Router },
        { type: AppConfigService },
        { type: UserPreferencesService },
        { type: SettingsService }
    ]; };
    LoginComponent.propDecorators = {
        showRememberMe: [{ type: Input }],
        showLoginActions: [{ type: Input }],
        needHelpLink: [{ type: Input }],
        registerLink: [{ type: Input }],
        logoImageUrl: [{ type: Input }],
        backgroundImageUrl: [{ type: Input }],
        copyrightText: [{ type: Input }],
        providers: [{ type: Input }],
        fieldsValidation: [{ type: Input }],
        disableCsrf: [{ type: Input }],
        successRoute: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }],
        executeSubmit: [{ type: Output }]
    };
    return LoginComponent;
}());
export { LoginComponent };
if (false) {
    /** @type {?} */
    LoginComponent.prototype.isPasswordShow;
    /**
     * Should the `Remember me` checkbox be shown? When selected, this
     * option will remember the logged-in user after the browser is closed
     * to avoid logging in repeatedly.
     * @type {?}
     */
    LoginComponent.prototype.showRememberMe;
    /**
     * Should the extra actions (`Need Help`, `Register`, etc) be shown?
     * @type {?}
     */
    LoginComponent.prototype.showLoginActions;
    /**
     * Sets the URL of the NEED HELP link in the footer.
     * @type {?}
     */
    LoginComponent.prototype.needHelpLink;
    /**
     * Sets the URL of the REGISTER link in the footer.
     * @type {?}
     */
    LoginComponent.prototype.registerLink;
    /**
     * Path to a custom logo image.
     * @type {?}
     */
    LoginComponent.prototype.logoImageUrl;
    /**
     * Path to a custom background image.
     * @type {?}
     */
    LoginComponent.prototype.backgroundImageUrl;
    /**
     * The copyright text below the login box.
     * @type {?}
     */
    LoginComponent.prototype.copyrightText;
    /**
     * Possible valid values are ECM, BPM or ALL.
     * @deprecated 3.0.0 - use the providers property in the the app.config.json
     * @type {?}
     */
    LoginComponent.prototype.providers;
    /**
     * Custom validation rules for the login form.
     * @type {?}
     */
    LoginComponent.prototype.fieldsValidation;
    /**
     * Prevents the CSRF Token from being submitted. Only valid for Alfresco Process Services.
     * @deprecated 3.0.0
     * @type {?}
     */
    LoginComponent.prototype.disableCsrf;
    /**
     * Route to redirect to on successful login.
     * @type {?}
     */
    LoginComponent.prototype.successRoute;
    /**
     * Emitted when the login is successful.
     * @type {?}
     */
    LoginComponent.prototype.success;
    /**
     * Emitted when the login fails.
     * @type {?}
     */
    LoginComponent.prototype.error;
    /**
     * Emitted when the login form is submitted.
     * @type {?}
     */
    LoginComponent.prototype.executeSubmit;
    /** @type {?} */
    LoginComponent.prototype.implicitFlow;
    /** @type {?} */
    LoginComponent.prototype.form;
    /** @type {?} */
    LoginComponent.prototype.isError;
    /** @type {?} */
    LoginComponent.prototype.errorMsg;
    /** @type {?} */
    LoginComponent.prototype.actualLoginStep;
    /** @type {?} */
    LoginComponent.prototype.LoginSteps;
    /** @type {?} */
    LoginComponent.prototype.rememberMe;
    /** @type {?} */
    LoginComponent.prototype.formError;
    /** @type {?} */
    LoginComponent.prototype.minLength;
    /** @type {?} */
    LoginComponent.prototype.footerTemplate;
    /** @type {?} */
    LoginComponent.prototype.headerTemplate;
    /** @type {?} */
    LoginComponent.prototype.data;
    /** @type {?} */
    LoginComponent.prototype._message;
    /** @type {?} */
    LoginComponent.prototype._fb;
    /** @type {?} */
    LoginComponent.prototype.authService;
    /** @type {?} */
    LoginComponent.prototype.translateService;
    /** @type {?} */
    LoginComponent.prototype.logService;
    /** @type {?} */
    LoginComponent.prototype.elementRef;
    /** @type {?} */
    LoginComponent.prototype.router;
    /** @type {?} */
    LoginComponent.prototype.appConfig;
    /** @type {?} */
    LoginComponent.prototype.userPreferences;
    /** @type {?} */
    LoginComponent.prototype.settingsService;
}

//# sourceMappingURL=data:application/json;base64,