/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Input } from '@angular/core';
import { DataColumnListComponent } from '../../data-column/data-column-list.component';
import { ObjectDataColumn } from './object-datacolumn.model';
/**
 * @abstract
 */
var DataTableSchema = /** @class */ (function () {
    function DataTableSchema(appConfigService, presetKey, presetsModel) {
        this.appConfigService = appConfigService;
        this.presetKey = presetKey;
        this.presetsModel = presetsModel;
        this.layoutPresets = {};
    }
    /**
     * @return {?}
     */
    DataTableSchema.prototype.createDatatableSchema = /**
     * @return {?}
     */
    function () {
        this.loadLayoutPresets();
        if (!this.columns || this.columns.length === 0) {
            this.columns = this.mergeJsonAndHtmlSchema();
        }
    };
    /**
     * @return {?}
     */
    DataTableSchema.prototype.loadLayoutPresets = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var externalSettings = this.appConfigService.get(this.presetKey, null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, this.presetsModel, externalSettings);
        }
        else {
            this.layoutPresets = this.presetsModel;
        }
    };
    /**
     * @return {?}
     */
    DataTableSchema.prototype.mergeJsonAndHtmlSchema = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var customSchemaColumns = [];
        customSchemaColumns = this.getSchemaFromConfig(this.presetColumn).concat(this.getSchemaFromHtml(this.columnList));
        if (customSchemaColumns.length === 0) {
            customSchemaColumns = this.getDefaultLayoutPreset();
        }
        return customSchemaColumns;
    };
    /**
     * @param {?} columnList
     * @return {?}
     */
    DataTableSchema.prototype.getSchemaFromHtml = /**
     * @param {?} columnList
     * @return {?}
     */
    function (columnList) {
        /** @type {?} */
        var schema = [];
        if (columnList && columnList.columns && columnList.columns.length > 0) {
            schema = columnList.columns.map(function (c) { return (c); });
        }
        return schema;
    };
    /**
     * @param {?} presetColoumn
     * @return {?}
     */
    DataTableSchema.prototype.getSchemaFromConfig = /**
     * @param {?} presetColoumn
     * @return {?}
     */
    function (presetColoumn) {
        return presetColoumn ? (this.layoutPresets[presetColoumn]).map(function (col) { return new ObjectDataColumn(col); }) : [];
    };
    /**
     * @return {?}
     */
    DataTableSchema.prototype.getDefaultLayoutPreset = /**
     * @return {?}
     */
    function () {
        return (this.layoutPresets['default']).map(function (col) { return new ObjectDataColumn(col); });
    };
    DataTableSchema.propDecorators = {
        columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
        presetColumn: [{ type: Input }]
    };
    return DataTableSchema;
}());
export { DataTableSchema };
if (false) {
    /** @type {?} */
    DataTableSchema.prototype.columnList;
    /**
     * Custom preset column schema in JSON format.
     * @type {?}
     */
    DataTableSchema.prototype.presetColumn;
    /** @type {?} */
    DataTableSchema.prototype.columns;
    /** @type {?} */
    DataTableSchema.prototype.layoutPresets;
    /** @type {?} */
    DataTableSchema.prototype.appConfigService;
    /** @type {?} */
    DataTableSchema.prototype.presetKey;
    /** @type {?} */
    DataTableSchema.prototype.presetsModel;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS5zY2hlbWEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJkYXRhdGFibGUvZGF0YS9kYXRhLXRhYmxlLnNjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUV2RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7SUFjekQseUJBQW9CLGdCQUFrQyxFQUNoQyxTQUFpQixFQUNqQixZQUFpQjtRQUZuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2hDLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFDakIsaUJBQVksR0FBWixZQUFZLENBQUs7NkJBSmYsRUFBRTtLQUlrQjs7OztJQUVyQywrQ0FBcUI7Ozs7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDaEQ7Ozs7O0lBR0UsMkNBQWlCOzs7OztRQUNwQixJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6RSxJQUFJLGdCQUFnQixFQUFFO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQy9FO2FBQU07WUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUM7Ozs7O0lBR0UsZ0RBQXNCOzs7OztRQUN6QixJQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztRQUM3QixtQkFBbUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDbEgsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ3ZEO1FBQ0QsT0FBTyxtQkFBbUIsQ0FBQzs7Ozs7O0lBR3hCLDJDQUFpQjs7OztjQUFDLFVBQW1DOztRQUN4RCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxZQUFpQixDQUFDLElBQUEsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxNQUFNLENBQUM7Ozs7OztJQUdaLDZDQUFtQjs7OztjQUFDLGFBQXFCO1FBQzNDLE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7Ozs7SUFHbEcsZ0RBQXNCOzs7O1FBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBekIsQ0FBeUIsQ0FBQyxDQUFDOzs7NkJBcERoRixZQUFZLFNBQUMsdUJBQXVCOytCQUdwQyxLQUFLOzswQkE1QlY7O1NBdUJzQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29udGVudENoaWxkLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YS1jb2x1bW4vZGF0YS1jb2x1bW4tbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YUNvbHVtbiB9IGZyb20gJy4vZGF0YS1jb2x1bW4ubW9kZWwnO1xuaW1wb3J0IHsgT2JqZWN0RGF0YUNvbHVtbiB9IGZyb20gJy4vb2JqZWN0LWRhdGFjb2x1bW4ubW9kZWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGF0YVRhYmxlU2NoZW1hIHtcblxuICAgIEBDb250ZW50Q2hpbGQoRGF0YUNvbHVtbkxpc3RDb21wb25lbnQpIGNvbHVtbkxpc3Q6IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50O1xuXG4gICAgLyoqIEN1c3RvbSBwcmVzZXQgY29sdW1uIHNjaGVtYSBpbiBKU09OIGZvcm1hdC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHByZXNldENvbHVtbjogc3RyaW5nO1xuXG4gICAgY29sdW1uczogYW55O1xuXG4gICAgcHJpdmF0ZSBsYXlvdXRQcmVzZXRzID0ge307XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHByZXNldEtleTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBwcmVzZXRzTW9kZWw6IGFueSkgeyB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRGF0YXRhYmxlU2NoZW1hKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxvYWRMYXlvdXRQcmVzZXRzKCk7XG4gICAgICAgIGlmICghdGhpcy5jb2x1bW5zIHx8IHRoaXMuY29sdW1ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMubWVyZ2VKc29uQW5kSHRtbFNjaGVtYSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRMYXlvdXRQcmVzZXRzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBleHRlcm5hbFNldHRpbmdzID0gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldCh0aGlzLnByZXNldEtleSwgbnVsbCk7XG4gICAgICAgIGlmIChleHRlcm5hbFNldHRpbmdzKSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dFByZXNldHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByZXNldHNNb2RlbCwgZXh0ZXJuYWxTZXR0aW5ncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dFByZXNldHMgPSB0aGlzLnByZXNldHNNb2RlbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtZXJnZUpzb25BbmRIdG1sU2NoZW1hKCk6IGFueSB7XG4gICAgICAgIGxldCBjdXN0b21TY2hlbWFDb2x1bW5zID0gW107XG4gICAgICAgIGN1c3RvbVNjaGVtYUNvbHVtbnMgPSB0aGlzLmdldFNjaGVtYUZyb21Db25maWcodGhpcy5wcmVzZXRDb2x1bW4pLmNvbmNhdCh0aGlzLmdldFNjaGVtYUZyb21IdG1sKHRoaXMuY29sdW1uTGlzdCkpO1xuICAgICAgICBpZiAoY3VzdG9tU2NoZW1hQ29sdW1ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGN1c3RvbVNjaGVtYUNvbHVtbnMgPSB0aGlzLmdldERlZmF1bHRMYXlvdXRQcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VzdG9tU2NoZW1hQ29sdW1ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2NoZW1hRnJvbUh0bWwoY29sdW1uTGlzdDogRGF0YUNvbHVtbkxpc3RDb21wb25lbnQpOiBhbnkge1xuICAgICAgICBsZXQgc2NoZW1hID0gW107XG4gICAgICAgIGlmIChjb2x1bW5MaXN0ICYmIGNvbHVtbkxpc3QuY29sdW1ucyAmJiBjb2x1bW5MaXN0LmNvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2NoZW1hID0gY29sdW1uTGlzdC5jb2x1bW5zLm1hcChjID0+IDxEYXRhQ29sdW1uPiBjKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIH1cblxuICAgcHVibGljIGdldFNjaGVtYUZyb21Db25maWcocHJlc2V0Q29sb3Vtbjogc3RyaW5nKTogRGF0YUNvbHVtbltdIHtcbiAgICAgICAgcmV0dXJuIHByZXNldENvbG91bW4gPyAodGhpcy5sYXlvdXRQcmVzZXRzW3ByZXNldENvbG91bW5dKS5tYXAoY29sID0+IG5ldyBPYmplY3REYXRhQ29sdW1uKGNvbCkpIDogW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0TGF5b3V0UHJlc2V0KCk6IERhdGFDb2x1bW5bXSB7XG4gICAgICAgIHJldHVybiAodGhpcy5sYXlvdXRQcmVzZXRzWydkZWZhdWx0J10pLm1hcChjb2wgPT4gbmV3IE9iamVjdERhdGFDb2x1bW4oY29sKSk7XG4gICAgfVxufVxuIl19