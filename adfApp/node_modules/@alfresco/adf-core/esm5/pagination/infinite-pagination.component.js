/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { PaginationModel } from '../models/pagination.model';
import { UserPreferencesService } from '../services/user-preferences.service';
var InfinitePaginationComponent = /** @class */ (function () {
    function InfinitePaginationComponent(cdr, userPreferencesService) {
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        /**
         * Number of items that are added with each "load more" event.
         */
        this.pageSize = InfinitePaginationComponent.DEFAULT_PAGE_SIZE;
        /**
         * Is a new page loading?
         */
        this.isLoading = false;
        /**
         * Emitted when the "Load More" button is clicked.
         */
        this.loadMore = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.target) {
            this.paginationSubscription = this.target.pagination.subscribe(function (pagination) {
                _this.isLoading = false;
                _this.pagination = pagination;
                _this.pageSize = _this.userPreferencesService.paginationSize || _this.pageSize;
                _this.cdr.detectChanges();
            });
        }
        if (!this.pagination) {
            this.pagination = InfinitePaginationComponent.DEFAULT_PAGINATION;
        }
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.onLoadMore = /**
     * @return {?}
     */
    function () {
        this.pagination.skipCount = 0;
        this.pagination.maxItems = this.pagination.maxItems + this.pageSize;
        this.pagination.merge = true;
        this.loadMore.next(this.pagination);
        if (this.pagination.maxItems >= this.pagination.totalItems) {
            this.pagination.hasMoreItems = false;
        }
        if (this.target) {
            this.target.pagination.value.merge = this.pagination.merge;
            this.target.pagination.value.skipCount = this.pagination.skipCount;
            this.isLoading = true;
            this.target.updatePagination(/** @type {?} */ (this.pagination));
        }
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.pagination.skipCount = 0;
        this.target.updatePagination(this.pagination);
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
    };
    InfinitePaginationComponent.DEFAULT_PAGE_SIZE = 25;
    InfinitePaginationComponent.DEFAULT_PAGINATION = {
        skipCount: 0,
        hasMoreItems: false,
        merge: true
    };
    InfinitePaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-infinite-pagination',
                    host: { 'class': 'infinite-adf-pagination' },
                    template: "<div *ngIf=\"pagination?.hasMoreItems || isLoading\" class=\"adf-infinite-pagination\">\n    <button mat-button\n        *ngIf=\"!isLoading\"\n        class=\"adf-infinite-pagination-load-more\"\n        (click)=\"onLoadMore()\"\n        data-automation-id=\"adf-infinite-pagination-button\">\n            <ng-content></ng-content>\n    </button>\n\n    <mat-progress-bar *ngIf=\"isLoading\"\n        mode=\"indeterminate\"\n        class=\"adf-infinite-pagination-spinner\"\n        data-automation-id=\"adf-infinite-pagination-spinner\"></mat-progress-bar>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-infinite-pagination{display:flex;justify-content:space-around;min-height:56px}.adf-infinite-pagination-load-more{margin-bottom:10px;margin-top:10px}"]
                }] }
    ];
    /** @nocollapse */
    InfinitePaginationComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: UserPreferencesService }
    ]; };
    InfinitePaginationComponent.propDecorators = {
        pagination: [{ type: Input }],
        target: [{ type: Input }],
        pageSize: [{ type: Input }],
        isLoading: [{ type: Input, args: ['loading',] }],
        loadMore: [{ type: Output }]
    };
    return InfinitePaginationComponent;
}());
export { InfinitePaginationComponent };
if (false) {
    /** @type {?} */
    InfinitePaginationComponent.DEFAULT_PAGE_SIZE;
    /** @type {?} */
    InfinitePaginationComponent.DEFAULT_PAGINATION;
    /**
     * Pagination object.
     * @deprecated 2.3.0
     * @type {?}
     */
    InfinitePaginationComponent.prototype.pagination;
    /**
     * Component that provides custom pagination support.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.target;
    /**
     * Number of items that are added with each "load more" event.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.pageSize;
    /**
     * Is a new page loading?
     * @type {?}
     */
    InfinitePaginationComponent.prototype.isLoading;
    /**
     * Emitted when the "Load More" button is clicked.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.loadMore;
    /** @type {?} */
    InfinitePaginationComponent.prototype.paginationSubscription;
    /** @type {?} */
    InfinitePaginationComponent.prototype.cdr;
    /** @type {?} */
    InfinitePaginationComponent.prototype.userPreferencesService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtcGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJwYWdpbmF0aW9uL2luZmluaXRlLXBhZ2luYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFDSCx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUNuRSxLQUFLLEVBQVUsTUFBTSxFQUFhLGlCQUFpQixFQUN0RCxNQUFNLGVBQWUsQ0FBQztBQU12QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0lBNkMxRSxxQ0FBb0IsR0FBc0IsRUFBVSxzQkFBOEM7UUFBOUUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFBVSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCOzs7O3dCQVovRSwyQkFBMkIsQ0FBQyxpQkFBaUI7Ozs7eUJBSTNDLEtBQUs7Ozs7d0JBSVcsSUFBSSxZQUFZLEVBQWM7S0FLbEU7Ozs7SUFFRCw4Q0FBUTs7O0lBQVI7UUFBQSxpQkFhQztRQVpHLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBQSxVQUFVO2dCQUNyRSxLQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztnQkFDdkIsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Z0JBQzdCLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDO2dCQUM1RSxLQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQzVCLENBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRywyQkFBMkIsQ0FBQyxrQkFBa0IsQ0FBQztTQUNwRTtLQUNKOzs7O0lBRUQsZ0RBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDcEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFO1lBQ3hELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztTQUN4QztRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztZQUNuRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixtQkFBbUIsSUFBSSxDQUFDLFVBQVUsRUFBQyxDQUFDO1NBQ25FO0tBQ0o7Ozs7SUFFRCwyQ0FBSzs7O0lBQUw7UUFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDakQ7Ozs7SUFFRCxpREFBVzs7O0lBQVg7UUFDSSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUM3QixJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDN0M7S0FDSjtvREE5RWtDLEVBQUU7cURBRVE7UUFDekMsU0FBUyxFQUFFLENBQUM7UUFDWixZQUFZLEVBQUUsS0FBSztRQUNuQixLQUFLLEVBQUUsSUFBSTtLQUNkOztnQkFoQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRTtvQkFDNUMsb2tCQUFtRDtvQkFFbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBbEI0QixpQkFBaUI7Z0JBU3JDLHNCQUFzQjs7OzZCQXdCMUIsS0FBSzt5QkFJTCxLQUFLOzJCQUlMLEtBQUs7NEJBSUwsS0FBSyxTQUFDLFNBQVM7MkJBSWYsTUFBTTs7c0NBckVYOztTQXVDYSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgICovXG5cbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIE9uRGVzdHJveSwgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBhZ2luYXRlZENvbXBvbmVudCB9IGZyb20gJy4vcGFnaW5hdGVkLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUGFnaW5hdGlvbiB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBhZ2luYXRpb25Db21wb25lbnRJbnRlcmZhY2UgfSBmcm9tICcuL3BhZ2luYXRpb24tY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcGFnaW5hdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtaW5maW5pdGUtcGFnaW5hdGlvbicsXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnaW5maW5pdGUtYWRmLXBhZ2luYXRpb24nIH0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2luZmluaXRlLXBhZ2luYXRpb24uY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2luZmluaXRlLXBhZ2luYXRpb24uY29tcG9uZW50LnNjc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIEluZmluaXRlUGFnaW5hdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBQYWdpbmF0aW9uQ29tcG9uZW50SW50ZXJmYWNlIHtcblxuICAgIHN0YXRpYyBERUZBVUxUX1BBR0VfU0laRTogbnVtYmVyID0gMjU7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9QQUdJTkFUSU9OOiBQYWdpbmF0aW9uTW9kZWwgPSB7XG4gICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgaGFzTW9yZUl0ZW1zOiBmYWxzZSxcbiAgICAgICAgbWVyZ2U6IHRydWVcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGFnaW5hdGlvbiBvYmplY3QuXG4gICAgICogQGRlcHJlY2F0ZWQgMi4zLjBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbDtcblxuICAgIC8qKiBDb21wb25lbnQgdGhhdCBwcm92aWRlcyBjdXN0b20gcGFnaW5hdGlvbiBzdXBwb3J0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGFyZ2V0OiBQYWdpbmF0ZWRDb21wb25lbnQ7XG5cbiAgICAvKiogTnVtYmVyIG9mIGl0ZW1zIHRoYXQgYXJlIGFkZGVkIHdpdGggZWFjaCBcImxvYWQgbW9yZVwiIGV2ZW50LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGFnZVNpemU6IG51bWJlciA9IEluZmluaXRlUGFnaW5hdGlvbkNvbXBvbmVudC5ERUZBVUxUX1BBR0VfU0laRTtcblxuICAgIC8qKiBJcyBhIG5ldyBwYWdlIGxvYWRpbmc/ICovXG4gICAgQElucHV0KCdsb2FkaW5nJylcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIFwiTG9hZCBNb3JlXCIgYnV0dG9uIGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgbG9hZE1vcmU6IEV2ZW50RW1pdHRlcjxQYWdpbmF0aW9uPiA9IG5ldyBFdmVudEVtaXR0ZXI8UGFnaW5hdGlvbj4oKTtcblxuICAgIHByaXZhdGUgcGFnaW5hdGlvblN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIHVzZXJQcmVmZXJlbmNlc1NlcnZpY2U6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25TdWJzY3JpcHRpb24gPSB0aGlzLnRhcmdldC5wYWdpbmF0aW9uLnN1YnNjcmliZShwYWdpbmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHBhZ2luYXRpb247XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlU2l6ZSA9IHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5wYWdpbmF0aW9uU2l6ZSB8fCB0aGlzLnBhZ2VTaXplO1xuICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IEluZmluaXRlUGFnaW5hdGlvbkNvbXBvbmVudC5ERUZBVUxUX1BBR0lOQVRJT047XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkxvYWRNb3JlKCkge1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uLm1heEl0ZW1zID0gdGhpcy5wYWdpbmF0aW9uLm1heEl0ZW1zICsgdGhpcy5wYWdlU2l6ZTtcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uLm1lcmdlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2FkTW9yZS5uZXh0KHRoaXMucGFnaW5hdGlvbik7XG5cbiAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbi5tYXhJdGVtcyA+PSB0aGlzLnBhZ2luYXRpb24udG90YWxJdGVtcykge1xuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uLmhhc01vcmVJdGVtcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5wYWdpbmF0aW9uLnZhbHVlLm1lcmdlID0gdGhpcy5wYWdpbmF0aW9uLm1lcmdlO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQucGFnaW5hdGlvbi52YWx1ZS5za2lwQ291bnQgPSB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50O1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQudXBkYXRlUGFnaW5hdGlvbig8UGFnaW5hdGlvbk1vZGVsPiB0aGlzLnBhZ2luYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnRhcmdldC51cGRhdGVQYWdpbmF0aW9uKHRoaXMucGFnaW5hdGlvbik7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb25TdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvblN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19