/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, Directive, ElementRef, Host, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { ContentService } from './../services/content.service';
import { EXTENDIBLE_COMPONENT } from './../interface/injection.tokens';
/**
 * @record
 */
export function NodePermissionSubject() { }
/** @type {?} */
NodePermissionSubject.prototype.disabled;
var NodePermissionDirective = /** @class */ (function () {
    function NodePermissionDirective(elementRef, renderer, contentService, changeDetector, parentComponent) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.contentService = contentService;
        this.changeDetector = changeDetector;
        this.parentComponent = parentComponent;
        /**
         * Node permission to check (create, delete, update, updatePermissions,
         * !create, !delete, !update, !updatePermissions).
         */
        this.permission = null;
        /**
         * Nodes to check permission for.
         */
        this.nodes = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NodePermissionDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["nodes"] && !changes["nodes"].firstChange) {
            this.updateElement();
        }
    };
    /**
     * Updates disabled state for the decorated elememtn
     *
     * @memberof NodePermissionDirective
     */
    /**
     * Updates disabled state for the decorated elememtn
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    NodePermissionDirective.prototype.updateElement = /**
     * Updates disabled state for the decorated elememtn
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enable = this.hasPermission(this.nodes, this.permission);
        if (enable) {
            this.enable();
        }
        else {
            this.disable();
        }
        return enable;
    };
    /**
     * @return {?}
     */
    NodePermissionDirective.prototype.enable = /**
     * @return {?}
     */
    function () {
        if (this.parentComponent) {
            this.parentComponent.disabled = false;
            this.changeDetector.detectChanges();
        }
        else {
            this.enableElement();
        }
    };
    /**
     * @return {?}
     */
    NodePermissionDirective.prototype.disable = /**
     * @return {?}
     */
    function () {
        if (this.parentComponent) {
            this.parentComponent.disabled = true;
            this.changeDetector.detectChanges();
        }
        else {
            this.disableElement();
        }
    };
    /**
     * Enables decorated element
     *
     * @memberof NodePermissionDirective
     */
    /**
     * Enables decorated element
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    NodePermissionDirective.prototype.enableElement = /**
     * Enables decorated element
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    function () {
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
    };
    /**
     * Disables decorated element
     *
     * @memberof NodePermissionDirective
     */
    /**
     * Disables decorated element
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    NodePermissionDirective.prototype.disableElement = /**
     * Disables decorated element
     *
     * \@memberof NodePermissionDirective
     * @return {?}
     */
    function () {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');
    };
    /**
     * Checks whether all nodes have a particular permission
     *
     * @param  nodes Node collection to check
     * @param  permission Permission to check for each node
     * @memberof NodePermissionDirective
     */
    /**
     * Checks whether all nodes have a particular permission
     *
     * \@memberof NodePermissionDirective
     * @param {?} nodes Node collection to check
     * @param {?} permission Permission to check for each node
     * @return {?}
     */
    NodePermissionDirective.prototype.hasPermission = /**
     * Checks whether all nodes have a particular permission
     *
     * \@memberof NodePermissionDirective
     * @param {?} nodes Node collection to check
     * @param {?} permission Permission to check for each node
     * @return {?}
     */
    function (nodes, permission) {
        var _this = this;
        if (nodes && nodes.length > 0) {
            return nodes.every(function (node) { return _this.contentService.hasPermission(node.entry, permission); });
        }
        return false;
    };
    NodePermissionDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-node-permission]'
                },] }
    ];
    /** @nocollapse */
    NodePermissionDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ContentService },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Host }, { type: Optional }, { type: Inject, args: [EXTENDIBLE_COMPONENT,] }] }
    ]; };
    NodePermissionDirective.propDecorators = {
        permission: [{ type: Input, args: ['adf-node-permission',] }],
        nodes: [{ type: Input, args: ['adf-nodes',] }]
    };
    return NodePermissionDirective;
}());
export { NodePermissionDirective };
if (false) {
    /**
     * Node permission to check (create, delete, update, updatePermissions,
     * !create, !delete, !update, !updatePermissions).
     * @type {?}
     */
    NodePermissionDirective.prototype.permission;
    /**
     * Nodes to check permission for.
     * @type {?}
     */
    NodePermissionDirective.prototype.nodes;
    /** @type {?} */
    NodePermissionDirective.prototype.elementRef;
    /** @type {?} */
    NodePermissionDirective.prototype.renderer;
    /** @type {?} */
    NodePermissionDirective.prototype.contentService;
    /** @type {?} */
    NodePermissionDirective.prototype.changeDetector;
    /** @type {?} */
    NodePermissionDirective.prototype.parentComponent;
}

//# sourceMappingURL=data:application/json;base64,