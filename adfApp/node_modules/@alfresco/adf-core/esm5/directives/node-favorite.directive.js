/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { from, forkJoin, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { catchError, map } from 'rxjs/operators';
var NodeFavoriteDirective = /** @class */ (function () {
    function NodeFavoriteDirective(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.favorites = [];
        /**
         * Array of nodes to toggle as favorites.
         */
        this.selection = [];
        /**
         * Emitted when the favorite setting is complete.
         */
        this.toggle = new EventEmitter();
        /**
         * Emitted when the favorite setting has fail.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NodeFavoriteDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.toggleFavorite();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NodeFavoriteDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes.selection.currentValue.length) {
            this.favorites = [];
            return;
        }
        this.markFavoritesNodes(changes.selection.currentValue);
    };
    /**
     * @return {?}
     */
    NodeFavoriteDirective.prototype.toggleFavorite = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.favorites.length) {
            return;
        }
        /** @type {?} */
        var every = this.favorites.every(function (selected) { return selected.entry.isFavorite; });
        if (every) {
            /** @type {?} */
            var batch = this.favorites.map(function (selected) {
                /** @type {?} */
                var id = selected.entry.nodeId || selected.entry.id;
                return from(_this.alfrescoApiService.favoritesApi.removeFavoriteSite('-me-', id));
            });
            forkJoin(batch).subscribe(function () {
                _this.favorites.map(function (selected) { return selected.entry.isFavorite = false; });
                _this.toggle.emit();
            }, function (error) { return _this.error.emit(error); });
        }
        if (!every) {
            /** @type {?} */
            var notFavorite_1 = this.favorites.filter(function (node) { return !node.entry.isFavorite; });
            /** @type {?} */
            var body = notFavorite_1.map(function (node) { return _this.createFavoriteBody(node); });
            from(this.alfrescoApiService.favoritesApi.addFavorite('-me-', /** @type {?} */ (body)))
                .subscribe(function () {
                notFavorite_1.map(function (selected) { return selected.entry.isFavorite = true; });
                _this.toggle.emit();
            }, function (error) { return _this.error.emit(error); });
        }
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeFavoriteDirective.prototype.markFavoritesNodes = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        var _this = this;
        if (selection.length <= this.favorites.length) {
            /** @type {?} */
            var newFavorites = this.reduce(this.favorites, selection);
            this.favorites = newFavorites;
        }
        /** @type {?} */
        var result = this.diff(selection, this.favorites);
        /** @type {?} */
        var batch = this.getProcessBatch(result);
        forkJoin(batch).subscribe(function (data) {
            var _a;
            (_a = _this.favorites).push.apply(_a, tslib_1.__spread(data));
        });
    };
    /**
     * @return {?}
     */
    NodeFavoriteDirective.prototype.hasFavorites = /**
     * @return {?}
     */
    function () {
        if (this.favorites && !this.favorites.length) {
            return false;
        }
        return this.favorites.every(function (selected) { return selected.entry.isFavorite; });
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeFavoriteDirective.prototype.getProcessBatch = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        var _this = this;
        return selection.map(function (selected) { return _this.getFavorite(selected); });
    };
    /**
     * @param {?} selected
     * @return {?}
     */
    NodeFavoriteDirective.prototype.getFavorite = /**
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        /** @type {?} */
        var node = selected.entry;
        // ACS 6.x with 'isFavorite' include
        if (node && node.hasOwnProperty('isFavorite')) {
            return of(selected);
        }
        var name = node.name, isFile = node.isFile, isFolder = node.isFolder;
        /** @type {?} */
        var id = node.nodeId || node.id;
        /** @type {?} */
        var promise = this.alfrescoApiService.favoritesApi.getFavorite('-me-', id);
        return from(promise).pipe(map(function () { return ({
            entry: {
                id: id,
                isFolder: isFolder,
                isFile: isFile,
                name: name,
                isFavorite: true
            }
        }); }), catchError(function () {
            return of({
                entry: {
                    id: id,
                    isFolder: isFolder,
                    isFile: isFile,
                    name: name,
                    isFavorite: false
                }
            });
        }));
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeFavoriteDirective.prototype.createFavoriteBody = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _a;
        /** @type {?} */
        var type = this.getNodeType(node);
        /** @type {?} */
        var id = node.entry.nodeId || node.entry.id;
        return {
            target: (_a = {},
                _a[type] = {
                    guid: id
                },
                _a)
        };
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeFavoriteDirective.prototype.getNodeType = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        // shared could only be files
        if (!node.entry.isFile && !node.entry.isFolder) {
            return 'file';
        }
        return node.entry.isFile ? 'file' : 'folder';
    };
    /**
     * @param {?} list
     * @param {?} patch
     * @return {?}
     */
    NodeFavoriteDirective.prototype.diff = /**
     * @param {?} list
     * @param {?} patch
     * @return {?}
     */
    function (list, patch) {
        /** @type {?} */
        var ids = patch.map(function (item) { return item.entry.id; });
        return list.filter(function (item) { return ids.includes(item.entry.id) ? null : item; });
    };
    /**
     * @param {?} patch
     * @param {?} comparator
     * @return {?}
     */
    NodeFavoriteDirective.prototype.reduce = /**
     * @param {?} patch
     * @param {?} comparator
     * @return {?}
     */
    function (patch, comparator) {
        /** @type {?} */
        var ids = comparator.map(function (item) { return item.entry.id; });
        return patch.filter(function (item) { return ids.includes(item.entry.id) ? item : null; });
    };
    NodeFavoriteDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-node-favorite]',
                    exportAs: 'adfFavorite'
                },] }
    ];
    /** @nocollapse */
    NodeFavoriteDirective.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    NodeFavoriteDirective.propDecorators = {
        selection: [{ type: Input, args: ['adf-node-favorite',] }],
        toggle: [{ type: Output }],
        error: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeFavoriteDirective;
}());
export { NodeFavoriteDirective };
if (false) {
    /** @type {?} */
    NodeFavoriteDirective.prototype.favorites;
    /**
     * Array of nodes to toggle as favorites.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.selection;
    /**
     * Emitted when the favorite setting is complete.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.toggle;
    /**
     * Emitted when the favorite setting has fail.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.error;
    /** @type {?} */
    NodeFavoriteDirective.prototype.alfrescoApiService;
}

//# sourceMappingURL=data:application/json;base64,