/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { HighlightTransformService } from '../services/highlight-transform.service';
var HighlightDirective = /** @class */ (function () {
    function HighlightDirective(el, renderer, highlightTransformService) {
        this.el = el;
        this.renderer = renderer;
        this.highlightTransformService = highlightTransformService;
        /**
         * Class selector for highlightable elements.
         */
        this.selector = '';
        /**
         * Text to highlight.
         */
        this.search = '';
        /**
         * CSS class used to apply highlighting.
         */
        this.classToApply = 'adf-highlight';
    }
    /**
     * @param {?=} search
     * @param {?=} selector
     * @param {?=} classToApply
     * @return {?}
     */
    HighlightDirective.prototype.highlight = /**
     * @param {?=} search
     * @param {?=} selector
     * @param {?=} classToApply
     * @return {?}
     */
    function (search, selector, classToApply) {
        var _this = this;
        if (search === void 0) { search = this.search; }
        if (selector === void 0) { selector = this.selector; }
        if (classToApply === void 0) { classToApply = this.classToApply; }
        if (search && selector) {
            /** @type {?} */
            var elements = this.el.nativeElement.querySelectorAll(selector);
            elements.forEach(function (element) {
                /** @type {?} */
                var result = _this.highlightTransformService.highlight(element.innerHTML, search, classToApply);
                if (result.changed) {
                    _this.renderer.setProperty(element, 'innerHTML', result.text);
                }
            });
        }
    };
    HighlightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-highlight]'
                },] }
    ];
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HighlightTransformService }
    ]; };
    HighlightDirective.propDecorators = {
        selector: [{ type: Input, args: ['adf-highlight-selector',] }],
        search: [{ type: Input, args: ['adf-highlight',] }],
        classToApply: [{ type: Input, args: ['adf-highlight-class',] }]
    };
    return HighlightDirective;
}());
export { HighlightDirective };
if (false) {
    /**
     * Class selector for highlightable elements.
     * @type {?}
     */
    HighlightDirective.prototype.selector;
    /**
     * Text to highlight.
     * @type {?}
     */
    HighlightDirective.prototype.search;
    /**
     * CSS class used to apply highlighting.
     * @type {?}
     */
    HighlightDirective.prototype.classToApply;
    /** @type {?} */
    HighlightDirective.prototype.el;
    /** @type {?} */
    HighlightDirective.prototype.renderer;
    /** @type {?} */
    HighlightDirective.prototype.highlightTransformService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvaGlnaGxpZ2h0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSx5QkFBeUIsRUFBNkIsTUFBTSx5Q0FBeUMsQ0FBQzs7SUFtQjNHLDRCQUNZLElBQ0EsVUFDQTtRQUZBLE9BQUUsR0FBRixFQUFFO1FBQ0YsYUFBUSxHQUFSLFFBQVE7UUFDUiw4QkFBeUIsR0FBekIseUJBQXlCOzs7O3dCQWJsQixFQUFFOzs7O3NCQUlKLEVBQUU7Ozs7NEJBSUksZUFBZTtLQUsrQjs7Ozs7OztJQUU5RCxzQ0FBUzs7Ozs7O2NBQUMsTUFBb0IsRUFBRSxRQUF3QixFQUFFLFlBQWdDOztRQUFoRix1QkFBQSxFQUFBLFNBQVMsSUFBSSxDQUFDLE1BQU07UUFBRSx5QkFBQSxFQUFBLFdBQVcsSUFBSSxDQUFDLFFBQVE7UUFBRSw2QkFBQSxFQUFBLGVBQWUsSUFBSSxDQUFDLFlBQVk7UUFDN0YsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFOztZQUNwQixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVsRSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTzs7Z0JBQ3JCLElBQU0sTUFBTSxHQUE4QixLQUFJLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUM1SCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7b0JBQ2hCLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoRTthQUNKLENBQUMsQ0FBQztTQUNOOzs7Z0JBaENSLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM5Qjs7OztnQkFMbUIsVUFBVTtnQkFBUyxTQUFTO2dCQUN2Qyx5QkFBeUI7OzsyQkFRN0IsS0FBSyxTQUFDLHdCQUF3Qjt5QkFJOUIsS0FBSyxTQUFDLGVBQWU7K0JBSXJCLEtBQUssU0FBQyxxQkFBcUI7OzZCQXBDaEM7O1NBeUJhLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAgKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlLCBIaWdodGxpZ2h0VHJhbnNmb3JtUmVzdWx0IH0gZnJvbSAnLi4vc2VydmljZXMvaGlnaGxpZ2h0LXRyYW5zZm9ybS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbYWRmLWhpZ2hsaWdodF0nXG59KVxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodERpcmVjdGl2ZSB7XG5cbiAgICAvKiogQ2xhc3Mgc2VsZWN0b3IgZm9yIGhpZ2hsaWdodGFibGUgZWxlbWVudHMuICovXG4gICAgQElucHV0KCdhZGYtaGlnaGxpZ2h0LXNlbGVjdG9yJylcbiAgICBzZWxlY3Rvcjogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogVGV4dCB0byBoaWdobGlnaHQuICovXG4gICAgQElucHV0KCdhZGYtaGlnaGxpZ2h0JylcbiAgICBzZWFyY2g6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIENTUyBjbGFzcyB1c2VkIHRvIGFwcGx5IGhpZ2hsaWdodGluZy4gKi9cbiAgICBASW5wdXQoJ2FkZi1oaWdobGlnaHQtY2xhc3MnKVxuICAgIGNsYXNzVG9BcHBseTogc3RyaW5nID0gJ2FkZi1oaWdobGlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgcHJpdmF0ZSBoaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlOiBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlKSB7IH1cblxuICAgIHB1YmxpYyBoaWdobGlnaHQoc2VhcmNoID0gdGhpcy5zZWFyY2gsIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciwgY2xhc3NUb0FwcGx5ID0gdGhpcy5jbGFzc1RvQXBwbHkpIHtcbiAgICAgICAgaWYgKHNlYXJjaCAmJiBzZWxlY3Rvcikge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQ6IEhpZ2h0bGlnaHRUcmFuc2Zvcm1SZXN1bHQgPSB0aGlzLmhpZ2hsaWdodFRyYW5zZm9ybVNlcnZpY2UuaGlnaGxpZ2h0KGVsZW1lbnQuaW5uZXJIVE1MLCBzZWFyY2gsIGNsYXNzVG9BcHBseSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkoZWxlbWVudCwgJ2lubmVySFRNTCcsIHJlc3VsdC50ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==