/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { forkJoin, from, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { TranslationService } from '../services/translation.service';
import { tap, mergeMap, map, catchError } from 'rxjs/operators';
var RestoreMessageModel = /** @class */ (function () {
    function RestoreMessageModel() {
    }
    return RestoreMessageModel;
}());
export { RestoreMessageModel };
if (false) {
    /** @type {?} */
    RestoreMessageModel.prototype.message;
    /** @type {?} */
    RestoreMessageModel.prototype.path;
    /** @type {?} */
    RestoreMessageModel.prototype.action;
}
var NodeRestoreDirective = /** @class */ (function () {
    function NodeRestoreDirective(alfrescoApiService, translation) {
        this.alfrescoApiService = alfrescoApiService;
        this.translation = translation;
        /**
         * Path to restored node.
         * @deprecated 2.4.0
         */
        this.location = '';
        /**
         * Emitted when restoration is complete.
         */
        this.restore = new EventEmitter();
        this.restoreProcessStatus = this.processStatus();
    }
    /**
     * @return {?}
     */
    NodeRestoreDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.recover(this.selection);
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeRestoreDirective.prototype.recover = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        var _this = this;
        var _a;
        if (!selection.length) {
            return;
        }
        /** @type {?} */
        var nodesWithPath = this.getNodesWithPath(selection);
        if (selection.length && nodesWithPath.length) {
            this.restoreNodesBatch(nodesWithPath).pipe(tap(function (restoredNodes) {
                var _a, _b;
                /** @type {?} */
                var status = _this.processStatus(restoredNodes);
                (_a = _this.restoreProcessStatus.fail).push.apply(_a, tslib_1.__spread(status.fail));
                (_b = _this.restoreProcessStatus.success).push.apply(_b, tslib_1.__spread(status.success));
            }), mergeMap(function () { return _this.getDeletedNodes(); }))
                .subscribe(function (deletedNodesList) {
                var nodelist = deletedNodesList.list.entries;
                var restoreErrorNodes = _this.restoreProcessStatus.fail;
                /** @type {?} */
                var selectedNodes = _this.diff(restoreErrorNodes, selection, false);
                /** @type {?} */
                var remainingNodes = _this.diff(selectedNodes, nodelist);
                if (!remainingNodes.length) {
                    _this.notification();
                }
                else {
                    _this.recover(remainingNodes);
                }
            });
        }
        else {
            (_a = this.restoreProcessStatus.fail).push.apply(_a, tslib_1.__spread(selection));
            this.notification();
            return;
        }
    };
    /**
     * @param {?} batch
     * @return {?}
     */
    NodeRestoreDirective.prototype.restoreNodesBatch = /**
     * @param {?} batch
     * @return {?}
     */
    function (batch) {
        var _this = this;
        return forkJoin(batch.map(function (node) { return _this.restoreNode(node); }));
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeRestoreDirective.prototype.getNodesWithPath = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        return selection.filter(function (node) { return node.entry.path; });
    };
    /**
     * @return {?}
     */
    NodeRestoreDirective.prototype.getDeletedNodes = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var promise = this.alfrescoApiService.getInstance()
            .core.nodesApi.getDeletedNodes({ include: ['path'] });
        return from(promise);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    NodeRestoreDirective.prototype.restoreNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var entry = node.entry;
        /** @type {?} */
        var promise = this.alfrescoApiService.getInstance().nodes.restoreNode(entry.id);
        return from(promise).pipe(map(function () { return ({
            status: 1,
            entry: entry
        }); }), catchError(function (error) {
            var statusCode = (JSON.parse(error.message)).error.statusCode;
            return of({
                status: 0,
                statusCode: statusCode,
                entry: entry
            });
        }));
    };
    /**
     * @param {?} selection
     * @param {?} list
     * @param {?=} fromList
     * @return {?}
     */
    NodeRestoreDirective.prototype.diff = /**
     * @param {?} selection
     * @param {?} list
     * @param {?=} fromList
     * @return {?}
     */
    function (selection, list, fromList) {
        if (fromList === void 0) { fromList = true; }
        /** @type {?} */
        var ids = selection.map(function (item) { return item.entry.id; });
        return list.filter(function (item) {
            if (fromList) {
                return ids.includes(item.entry.id) ? item : null;
            }
            else {
                return !ids.includes(item.entry.id) ? item : null;
            }
        });
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    NodeRestoreDirective.prototype.processStatus = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (data === void 0) { data = []; }
        /** @type {?} */
        var status = {
            fail: [],
            success: [],
            /**
             * @return {?}
             */
            get someFailed() {
                return !!(this.fail.length);
            },
            /**
             * @return {?}
             */
            get someSucceeded() {
                return !!(this.success.length);
            },
            /**
             * @return {?}
             */
            get oneFailed() {
                return this.fail.length === 1;
            },
            /**
             * @return {?}
             */
            get oneSucceeded() {
                return this.success.length === 1;
            },
            /**
             * @return {?}
             */
            get allSucceeded() {
                return this.someSucceeded && !this.someFailed;
            },
            /**
             * @return {?}
             */
            get allFailed() {
                return this.someFailed && !this.someSucceeded;
            },
            reset: /**
             * @return {?}
             */
            function () {
                this.fail = [];
                this.success = [];
            }
        };
        return data.reduce(function (acc, node) {
            if (node.status) {
                acc.success.push(node);
            }
            else {
                acc.fail.push(node);
            }
            return acc;
        }, status);
    };
    /**
     * @return {?}
     */
    NodeRestoreDirective.prototype.getRestoreMessage = /**
     * @return {?}
     */
    function () {
        var status = this.restoreProcessStatus;
        if (status.someFailed && !status.oneFailed) {
            return this.translation.instant('CORE.RESTORE_NODE.PARTIAL_PLURAL', {
                number: status.fail.length
            });
        }
        if (status.oneFailed && status.fail[0].statusCode) {
            if (status.fail[0].statusCode === 409) {
                return this.translation.instant('CORE.RESTORE_NODE.NODE_EXISTS', {
                    name: status.fail[0].entry.name
                });
            }
            else {
                return this.translation.instant('CORE.RESTORE_NODE.GENERIC', {
                    name: status.fail[0].entry.name
                });
            }
        }
        if (status.oneFailed && !status.fail[0].statusCode) {
            return this.translation.instant('CORE.RESTORE_NODE.LOCATION_MISSING', {
                name: status.fail[0].entry.name
            });
        }
        if (status.allSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.RESTORE_NODE.PLURAL');
        }
        if (status.allSucceeded && status.oneSucceeded) {
            return this.translation.instant('CORE.RESTORE_NODE.SINGULAR', {
                name: status.success[0].entry.name
            });
        }
    };
    /**
     * @return {?}
     */
    NodeRestoreDirective.prototype.notification = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var status = Object.assign({}, this.restoreProcessStatus);
        /** @type {?} */
        var message = this.getRestoreMessage();
        this.reset();
        /** @type {?} */
        var action = (status.oneSucceeded && !status.someFailed) ? this.translation.instant('CORE.RESTORE_NODE.VIEW') : '';
        /** @type {?} */
        var path;
        if (status.success && status.success.length > 0) {
            path = status.success[0].entry.path;
        }
        this.restore.emit({
            message: message,
            action: action,
            path: path
        });
    };
    /**
     * @return {?}
     */
    NodeRestoreDirective.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.restoreProcessStatus.reset();
        this.selection = [];
    };
    NodeRestoreDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-restore]'
                },] }
    ];
    /** @nocollapse */
    NodeRestoreDirective.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: TranslationService }
    ]; };
    NodeRestoreDirective.propDecorators = {
        selection: [{ type: Input, args: ['adf-restore',] }],
        location: [{ type: Input }],
        restore: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeRestoreDirective;
}());
export { NodeRestoreDirective };
if (false) {
    /** @type {?} */
    NodeRestoreDirective.prototype.restoreProcessStatus;
    /**
     * Array of deleted nodes to restore.
     * @type {?}
     */
    NodeRestoreDirective.prototype.selection;
    /**
     * Path to restored node.
     * @deprecated 2.4.0
     * @type {?}
     */
    NodeRestoreDirective.prototype.location;
    /**
     * Emitted when restoration is complete.
     * @type {?}
     */
    NodeRestoreDirective.prototype.restore;
    /** @type {?} */
    NodeRestoreDirective.prototype.alfrescoApiService;
    /** @type {?} */
    NodeRestoreDirective.prototype.translation;
}

//# sourceMappingURL=data:application/json;base64,