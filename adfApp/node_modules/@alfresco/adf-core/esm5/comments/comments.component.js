/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentProcessService } from '../services/comment-process.service';
import { CommentContentService } from '../services/comment-content.service';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
var CommentsComponent = /** @class */ (function () {
    function CommentsComponent(commentProcessService, commentContentService) {
        var _this = this;
        this.commentProcessService = commentProcessService;
        this.commentContentService = commentContentService;
        /**
         * Are the comments read only?
         */
        this.readOnly = false;
        /**
         * Emitted when an error occurs while displaying/adding a comment.
         */
        this.error = new EventEmitter();
        this.comments = [];
        this.beingAdded = false;
        this.comment$ = new Observable(function (observer) { return _this.commentObserver = observer; })
            .pipe(share());
        this.comment$.subscribe(function (comment) {
            _this.comments.push(comment);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CommentsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.taskId = null;
        this.nodeId = null;
        this.taskId = changes['taskId'] ? changes['taskId'].currentValue : null;
        this.nodeId = changes['nodeId'] ? changes['nodeId'].currentValue : null;
        if (this.taskId || this.nodeId) {
            this.getComments();
        }
        else {
            this.resetComments();
        }
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.getComments = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resetComments();
        if (this.isATask()) {
            this.commentProcessService.getTaskComments(this.taskId).subscribe(function (res) {
                if (res && res instanceof Array) {
                    res = res.sort(function (comment1, comment2) {
                        /** @type {?} */
                        var date1 = new Date(comment1.created);
                        /** @type {?} */
                        var date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    res.forEach(function (comment) {
                        _this.commentObserver.next(comment);
                    });
                }
            }, function (err) {
                _this.error.emit(err);
            });
        }
        if (this.isANode()) {
            this.commentContentService.getNodeComments(this.nodeId).subscribe(function (res) {
                if (res && res instanceof Array) {
                    res = res.sort(function (comment1, comment2) {
                        /** @type {?} */
                        var date1 = new Date(comment1.created);
                        /** @type {?} */
                        var date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    res.forEach(function (comment) {
                        _this.commentObserver.next(comment);
                    });
                }
            }, function (err) {
                _this.error.emit(err);
            });
        }
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.resetComments = /**
     * @return {?}
     */
    function () {
        this.comments = [];
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.message && this.message.trim() && !this.beingAdded) {
            /** @type {?} */
            var comment = this.sanitize(this.message);
            this.beingAdded = true;
            if (this.isATask()) {
                this.commentProcessService.addTaskComment(this.taskId, comment)
                    .subscribe(function (res) {
                    _this.comments.unshift(res);
                    _this.message = '';
                    _this.beingAdded = false;
                }, function (err) {
                    _this.error.emit(err);
                    _this.beingAdded = false;
                });
            }
            if (this.isANode()) {
                this.commentContentService.addNodeComment(this.nodeId, comment)
                    .subscribe(function (res) {
                    _this.comments.unshift(res);
                    _this.message = '';
                    _this.beingAdded = false;
                }, function (err) {
                    _this.error.emit(err);
                    _this.beingAdded = false;
                });
            }
        }
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.message = '';
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.isReadOnly = /**
     * @return {?}
     */
    function () {
        return this.readOnly;
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.isATask = /**
     * @return {?}
     */
    function () {
        return this.taskId ? true : false;
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.isANode = /**
     * @return {?}
     */
    function () {
        return this.nodeId ? true : false;
    };
    /**
     * @param {?} input
     * @return {?}
     */
    CommentsComponent.prototype.sanitize = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        return input.replace(/<[^>]+>/g, '')
            .replace(/^\s+|\s+$|\s+(?=\s)/g, '')
            .replace(/\r?\n/g, '<br/>');
    };
    CommentsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-comments',
                    template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\">\n        {{'COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n            <mat-form-field class=\"adf-full-width\">\n                <textarea (keyup.escape)=\"clear()\" matInput id=\"comment-input\" placeholder=\"{{'COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\"></textarea>\n            </mat-form-field>\n\n            <div class=\"adf-comments-input-actions\">\n                <button mat-button\n                    class=\"adf-comments-input-add\"\n                    data-automation-id=\"comments-input-add\"\n                    color=\"primary\"\n                    (click)=\"add()\"\n                    [disabled]=\"!message\">\n                    {{ 'COMMENTS.ADD' | translate }}\n                </button>\n            </div>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CommentsComponent.ctorParameters = function () { return [
        { type: CommentProcessService },
        { type: CommentContentService }
    ]; };
    CommentsComponent.propDecorators = {
        taskId: [{ type: Input }],
        nodeId: [{ type: Input }],
        readOnly: [{ type: Input }],
        error: [{ type: Output }]
    };
    return CommentsComponent;
}());
export { CommentsComponent };
if (false) {
    /**
     * The numeric ID of the task.
     * @type {?}
     */
    CommentsComponent.prototype.taskId;
    /**
     * The numeric ID of the node.
     * @type {?}
     */
    CommentsComponent.prototype.nodeId;
    /**
     * Are the comments read only?
     * @type {?}
     */
    CommentsComponent.prototype.readOnly;
    /**
     * Emitted when an error occurs while displaying/adding a comment.
     * @type {?}
     */
    CommentsComponent.prototype.error;
    /** @type {?} */
    CommentsComponent.prototype.comments;
    /** @type {?} */
    CommentsComponent.prototype.commentObserver;
    /** @type {?} */
    CommentsComponent.prototype.comment$;
    /** @type {?} */
    CommentsComponent.prototype.message;
    /** @type {?} */
    CommentsComponent.prototype.beingAdded;
    /** @type {?} */
    CommentsComponent.prototype.commentProcessService;
    /** @type {?} */
    CommentsComponent.prototype.commentContentService;
}

//# sourceMappingURL=data:application/json;base64,