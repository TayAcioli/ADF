/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { EcmUserService } from '../userinfo/services/ecm-user.service';
import { PeopleProcessService } from '../services/people-process.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
var CommentListComponent = /** @class */ (function () {
    function CommentListComponent(peopleProcessService, ecmUserService, userPreferenceService) {
        var _this = this;
        this.peopleProcessService = peopleProcessService;
        this.ecmUserService = ecmUserService;
        this.userPreferenceService = userPreferenceService;
        /**
         * Emitted when the user clicks on one of the comment rows.
         */
        this.clickRow = new EventEmitter();
        userPreferenceService.select(UserPreferenceValues.Locale).subscribe(function (locale) {
            _this.currentLocale = locale;
        });
    }
    /**
     * @param {?} comment
     * @return {?}
     */
    CommentListComponent.prototype.selectComment = /**
     * @param {?} comment
     * @return {?}
     */
    function (comment) {
        if (this.selectedComment) {
            this.selectedComment.isSelected = false;
        }
        comment.isSelected = true;
        this.selectedComment = comment;
        this.clickRow.emit(this.selectedComment);
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.getUserShortName = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        /** @type {?} */
        var shortName = '';
        if (user) {
            if (user.firstName) {
                shortName = user.firstName[0].toUpperCase();
            }
            if (user.lastName) {
                shortName += user.lastName[0].toUpperCase();
            }
        }
        return shortName;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.isPictureDefined = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return user.pictureId || user.avatarId;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.getUserImage = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        if (this.isAContentUsers(user)) {
            return this.ecmUserService.getUserProfileImage(user.avatarId);
        }
        else {
            return this.peopleProcessService.getUserImage(user);
        }
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.isAContentUsers = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return user.avatarId;
    };
    CommentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-comment-list',
                    template: " <mat-list class=\"adf-comment-list\">\n    <mat-list-item *ngFor=\"let comment of comments\"\n                  (click)=\"selectComment(comment)\"\n                  class=\"adf-comment-list-item\"\n                  [class.is-selected]=\"comment.isSelected\"\n                  id=\"adf-comment-{{comment?.id}}\">\n        <div id=\"comment-user-icon\" class=\"adf-comment-img-container\">\n            <div\n                *ngIf=\"!isPictureDefined(comment.createdBy)\"\n                class=\"adf-comment-user-icon\">\n                {{getUserShortName(comment.createdBy)}}\n            </div>\n            <div>\n                <img *ngIf=\"isPictureDefined(comment.createdBy)\"\n                      class=\"adf-people-img\"\n                     [src]=\"getUserImage(comment.createdBy)\"\n                />\n            </div>\n        </div>\n        <div class=\"adf-comment-contents\">\n            <div matLine id=\"comment-user\" class=\"adf-comment-user-name\">\n                {{comment.createdBy?.firstName}} {{comment.createdBy?.lastName}}\n            </div>\n            <div matLine id=\"comment-message\" class=\"adf-comment-message\" [innerHTML]=\"comment.message\"></div>\n            <div matLine id=\"comment-time\" class=\"adf-comment-message-time\">\n                {{ comment.created | adfTimeAgo: currentLocale }}\n            </div>\n        </div>\n    </mat-list-item>\n</mat-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CommentListComponent.ctorParameters = function () { return [
        { type: PeopleProcessService },
        { type: EcmUserService },
        { type: UserPreferencesService }
    ]; };
    CommentListComponent.propDecorators = {
        comments: [{ type: Input }],
        clickRow: [{ type: Output }]
    };
    return CommentListComponent;
}());
export { CommentListComponent };
if (false) {
    /**
     * The comments data used to populate the list.
     * @type {?}
     */
    CommentListComponent.prototype.comments;
    /**
     * Emitted when the user clicks on one of the comment rows.
     * @type {?}
     */
    CommentListComponent.prototype.clickRow;
    /** @type {?} */
    CommentListComponent.prototype.selectedComment;
    /** @type {?} */
    CommentListComponent.prototype.currentLocale;
    /** @type {?} */
    CommentListComponent.prototype.peopleProcessService;
    /** @type {?} */
    CommentListComponent.prototype.ecmUserService;
    /** @type {?} */
    CommentListComponent.prototype.userPreferenceService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNvbW1lbnRzL2NvbW1lbnQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0lBdUJoRyw4QkFBbUIsb0JBQTBDLEVBQzFDLGdCQUNBO1FBRm5CLGlCQU1DO1FBTmtCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsbUJBQWMsR0FBZCxjQUFjO1FBQ2QsMEJBQXFCLEdBQXJCLHFCQUFxQjs7Ozt3QkFSRCxJQUFJLFlBQVksRUFBZ0I7UUFTbkUscUJBQXFCLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU07WUFDdkUsS0FBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7U0FDL0IsQ0FBQyxDQUFDO0tBQ047Ozs7O0lBRUQsNENBQWE7Ozs7SUFBYixVQUFjLE9BQXFCO1FBQy9CLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7U0FDM0M7UUFDRCxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDNUM7Ozs7O0lBRUQsK0NBQWdCOzs7O0lBQWhCLFVBQWlCLElBQVM7O1FBQ3RCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLElBQUksRUFBRTtZQUNOLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDaEIsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDL0M7WUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDL0M7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDO0tBQ3BCOzs7OztJQUVELCtDQUFnQjs7OztJQUFoQixVQUFpQixJQUFTO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0tBQzFDOzs7OztJQUVELDJDQUFZOzs7O0lBQVosVUFBYSxJQUFTO1FBQ2xCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkQ7S0FDSjs7Ozs7SUFFTyw4Q0FBZTs7OztjQUFDLElBQVM7UUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDOzs7Z0JBaEU1QixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsMDVDQUE0QztvQkFFNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkFSUSxvQkFBb0I7Z0JBRHBCLGNBQWM7Z0JBRWQsc0JBQXNCOzs7MkJBWTFCLEtBQUs7MkJBSUwsTUFBTTs7K0JBckNYOztTQThCYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1lbnRNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb21tZW50Lm1vZGVsJztcbmltcG9ydCB7IEVjbVVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vdXNlcmluZm8vc2VydmljZXMvZWNtLXVzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQZW9wbGVQcm9jZXNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Blb3BsZS1wcm9jZXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSwgVXNlclByZWZlcmVuY2VWYWx1ZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb21tZW50LWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb21tZW50LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbW1lbnQtbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBDb21tZW50TGlzdENvbXBvbmVudCB7XG5cbiAgICAvKiogVGhlIGNvbW1lbnRzIGRhdGEgdXNlZCB0byBwb3B1bGF0ZSB0aGUgbGlzdC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGNvbW1lbnRzOiBDb21tZW50TW9kZWxbXTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIG9uZSBvZiB0aGUgY29tbWVudCByb3dzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNsaWNrUm93OiBFdmVudEVtaXR0ZXI8Q29tbWVudE1vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8Q29tbWVudE1vZGVsPigpO1xuXG4gICAgc2VsZWN0ZWRDb21tZW50OiBDb21tZW50TW9kZWw7XG5cbiAgICBjdXJyZW50TG9jYWxlO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHBlb3BsZVByb2Nlc3NTZXJ2aWNlOiBQZW9wbGVQcm9jZXNzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgZWNtVXNlclNlcnZpY2U6IEVjbVVzZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyB1c2VyUHJlZmVyZW5jZVNlcnZpY2U6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UpIHtcbiAgICAgICAgdXNlclByZWZlcmVuY2VTZXJ2aWNlLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUpLnN1YnNjcmliZSgobG9jYWxlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdENvbW1lbnQoY29tbWVudDogQ29tbWVudE1vZGVsKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQ29tbWVudCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbW1lbnQuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbW1lbnQuaXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgdGhpcy5jbGlja1Jvdy5lbWl0KHRoaXMuc2VsZWN0ZWRDb21tZW50KTtcbiAgICB9XG5cbiAgICBnZXRVc2VyU2hvcnROYW1lKHVzZXI6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBzaG9ydE5hbWUgPSAnJztcbiAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgIGlmICh1c2VyLmZpcnN0TmFtZSkge1xuICAgICAgICAgICAgICAgIHNob3J0TmFtZSA9IHVzZXIuZmlyc3ROYW1lWzBdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXNlci5sYXN0TmFtZSkge1xuICAgICAgICAgICAgICAgIHNob3J0TmFtZSArPSB1c2VyLmxhc3ROYW1lWzBdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3J0TmFtZTtcbiAgICB9XG5cbiAgICBpc1BpY3R1cmVEZWZpbmVkKHVzZXI6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXNlci5waWN0dXJlSWQgfHwgdXNlci5hdmF0YXJJZDtcbiAgICB9XG5cbiAgICBnZXRVc2VySW1hZ2UodXNlcjogYW55KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBQ29udGVudFVzZXJzKHVzZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lY21Vc2VyU2VydmljZS5nZXRVc2VyUHJvZmlsZUltYWdlKHVzZXIuYXZhdGFySWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVvcGxlUHJvY2Vzc1NlcnZpY2UuZ2V0VXNlckltYWdlKHVzZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0FDb250ZW50VXNlcnModXNlcjogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB1c2VyLmF2YXRhcklkO1xuICAgIH1cbn1cbiJdfQ==