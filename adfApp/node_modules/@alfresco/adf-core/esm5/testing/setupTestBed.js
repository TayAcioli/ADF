var _this = this;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
/**
 * @record
 */
function DoneFn() { }
/* TODO: handle strange member:
(): void;
*/
/** @type {?} */
DoneFn.prototype.fail;
/** @type {?} */
var resetTestingModule = TestBed.resetTestingModule;
/** @type {?} */
var preventAngularFromResetting = function () { return (TestBed.resetTestingModule = function () { return TestBed; }); };
var ɵ0 = preventAngularFromResetting;
/** @type {?} */
var allowAngularToReset = function () { return (TestBed.resetTestingModule = resetTestingModule); };
var ɵ1 = allowAngularToReset;
/** @type {?} */
export var setupTestBed = function (moduleDef) {
    beforeAll(function (done) {
        return (function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        localStorage.clear();
                        sessionStorage.clear();
                        resetTestingModule();
                        preventAngularFromResetting();
                        TestBed.configureTestingModule(moduleDef);
                        return [4 /*yield*/, TestBed.compileComponents()];
                    case 1:
                        _a.sent();
                        // prevent Angular from resetting testing module
                        TestBed.resetTestingModule = function () { return TestBed; };
                        return [2 /*return*/];
                }
            });
        }); })()
            .then(done)
            .catch(done.fail);
    });
    afterAll(function () { return allowAngularToReset(); });
};
export { ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBUZXN0QmVkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsidGVzdGluZy9zZXR1cFRlc3RCZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLGlCQWlDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWpDQSxPQUFPLEVBQUUsT0FBTyxFQUFzQixNQUFNLHVCQUF1QixDQUFDOzs7Ozs7Ozs7OztBQVVwRSxJQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQzs7QUFDdEQsSUFBTSwyQkFBMkIsR0FBRyxjQUFNLE9BQUEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsY0FBTSxPQUFBLE9BQU8sRUFBUCxDQUFPLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQzs7O0FBQ3ZGLElBQU0sbUJBQW1CLEdBQUcsY0FBTSxPQUFBLENBQUMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLEVBQWpELENBQWlELENBQUM7OztBQUVwRixXQUFhLFlBQVksR0FBRyxVQUFDLFNBQTZCO0lBQ3RELFNBQVMsQ0FBQyxVQUFBLElBQUk7UUFDVixPQUFBLENBQUM7Ozs7d0JBQ0csWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUNyQixjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQ3ZCLGtCQUFrQixFQUFFLENBQUM7d0JBQ3JCLDJCQUEyQixFQUFFLENBQUM7d0JBQzlCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDMUMscUJBQU0sT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUE7O3dCQUFqQyxTQUFpQyxDQUFDOzt3QkFHbEMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLGNBQU0sT0FBQSxPQUFPLEVBQVAsQ0FBTyxDQUFDOzs7O2FBQzlDLENBQUMsRUFBRTthQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDVixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQVpyQixDQVlxQixDQUN4QixDQUFDO0lBRUYsUUFBUSxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBRSxFQUFyQixDQUFxQixDQUFDLENBQUM7Q0FDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFRlc3RCZWQsIFRlc3RNb2R1bGVNZXRhZGF0YSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmludGVyZmFjZSBEb25lRm4gZXh0ZW5kcyBGdW5jdGlvbiB7XG4gICAgKCk6IHZvaWQ7XG4gICAgZmFpbDogKG1lc3NhZ2U/OiBFcnJvciB8IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZGVjbGFyZSBmdW5jdGlvbiBiZWZvcmVBbGwoYWN0aW9uOiAoZG9uZTogRG9uZUZuKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyKTogdm9pZDtcbmRlY2xhcmUgZnVuY3Rpb24gYWZ0ZXJBbGwoYWN0aW9uOiAoZG9uZTogRG9uZUZuKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyKTogdm9pZDtcblxuY29uc3QgcmVzZXRUZXN0aW5nTW9kdWxlID0gVGVzdEJlZC5yZXNldFRlc3RpbmdNb2R1bGU7XG5jb25zdCBwcmV2ZW50QW5ndWxhckZyb21SZXNldHRpbmcgPSAoKSA9PiAoVGVzdEJlZC5yZXNldFRlc3RpbmdNb2R1bGUgPSAoKSA9PiBUZXN0QmVkKTtcbmNvbnN0IGFsbG93QW5ndWxhclRvUmVzZXQgPSAoKSA9PiAoVGVzdEJlZC5yZXNldFRlc3RpbmdNb2R1bGUgPSByZXNldFRlc3RpbmdNb2R1bGUpO1xuXG5leHBvcnQgY29uc3Qgc2V0dXBUZXN0QmVkID0gKG1vZHVsZURlZjogVGVzdE1vZHVsZU1ldGFkYXRhKSA9PiB7XG4gICAgYmVmb3JlQWxsKGRvbmUgPT5cbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgICAgIHJlc2V0VGVzdGluZ01vZHVsZSgpO1xuICAgICAgICAgICAgcHJldmVudEFuZ3VsYXJGcm9tUmVzZXR0aW5nKCk7XG4gICAgICAgICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlRGVmKTtcbiAgICAgICAgICAgIGF3YWl0IFRlc3RCZWQuY29tcGlsZUNvbXBvbmVudHMoKTtcblxuICAgICAgICAgICAgLy8gcHJldmVudCBBbmd1bGFyIGZyb20gcmVzZXR0aW5nIHRlc3RpbmcgbW9kdWxlXG4gICAgICAgICAgICBUZXN0QmVkLnJlc2V0VGVzdGluZ01vZHVsZSA9ICgpID0+IFRlc3RCZWQ7XG4gICAgICAgIH0pKClcbiAgICAgICAgICAgIC50aGVuKGRvbmUpXG4gICAgICAgICAgICAuY2F0Y2goZG9uZS5mYWlsKVxuICAgICk7XG5cbiAgICBhZnRlckFsbCgoKSA9PiBhbGxvd0FuZ3VsYXJUb1Jlc2V0KCkpO1xufTtcbiJdfQ==